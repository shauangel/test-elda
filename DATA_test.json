[{"link": "https://stackoverflow.com/questions/46349370/javascript-file-not-found-using-relative-path-during-flask-render-template", "question": {"id": "46349370", "title": "Javascript file not found using relative path during Flask render_template", "content": "<p>I'm using Python and Flask to build a simple interaction web app.\nTesting on localhost:5000 using Chrome.</p>\n<p>I have one template and one associated javascript file located at:\n./templates/main.html\n./templates/main_scripts.js</p>\n<p>The main.html template includes the scripts file like this:</p>\n<pre><code class=\"python\">&lt;script src=\"main_scripts.js\"&gt;&lt;/script&gt;\n</code></pre>\n<p>When I render the template using this Python code...</p>\n<pre><code class=\"python\">return render_template('main.html', session_id=session_id, title=sess.title)\n</code></pre>\n<p>The main.html page is rendered, but I get this error in the Chrome console:</p>\n<pre><code class=\"python\">Failed to load resource: the server responded with a status of 404 (NOT FOUND)\n</code></pre>\n<p>Using the Chrome console to inspect the location of the unfound 'main_scripts.js' when the error occurs, the browser thinks it is trying to load it from inside my virtual environment at:</p>\n<pre><code class=\"python\">./env/Scripts/main_scripts.js\n</code></pre>\n<p>...and not from the same directory as the template.</p>\n<p>I can't seem to force the rendered template to understand where it's script file is located. So far I have tried src paths like \"./main_scripts.js\" and even \"/appdir/main_scripts.js\" with the exact same results. </p>\n", "abstract": "I'm using Python and Flask to build a simple interaction web app.\nTesting on localhost:5000 using Chrome. I have one template and one associated javascript file located at:\n./templates/main.html\n./templates/main_scripts.js The main.html template includes the scripts file like this: When I render the template using this Python code... The main.html page is rendered, but I get this error in the Chrome console: Using the Chrome console to inspect the location of the unfound 'main_scripts.js' when the error occurs, the browser thinks it is trying to load it from inside my virtual environment at: ...and not from the same directory as the template. I can't seem to force the rendered template to understand where it's script file is located. So far I have tried src paths like \"./main_scripts.js\" and even \"/appdir/main_scripts.js\" with the exact same results. "}, "answers": [{"id": 46349570, "score": 25, "vote": 0, "content": "<p>You first need to create a <code>static</code> folder at the same level as the <code>templates</code> folder. Then create a <code>js</code> subfolder and put the js file in that folder. Now you can call it in your html.<br/>\nHere's the \"pythonic\" way do that:</p>\n<pre><code class=\"python\">&lt;script src=\"{{ url_for('static', filename='js/main_scripts.js') }}\"&gt;&lt;/script&gt;\n</code></pre>\n<p>As explained <a href=\"http://flask.pocoo.org/docs/0.12/patterns/packages/#larger-applications\" rel=\"nofollow noreferrer\">here</a> in the official Flask documentation, your project structure should look like this:</p>\n<pre><code class=\"python\">/yourapplication\n    yourapplication.py\n    /static\n        /css\n            style.css\n        /js\n            main_scripts.js\n    /templates\n        main.html\n        ...\n</code></pre>\n", "abstract": "You first need to create a static folder at the same level as the templates folder. Then create a js subfolder and put the js file in that folder. Now you can call it in your html.\nHere's the \"pythonic\" way do that: As explained here in the official Flask documentation, your project structure should look like this:"}]}, {"link": "https://stackoverflow.com/questions/31002890/how-to-reference-a-html-template-from-a-different-directory-in-python-flask/31003097", "question": {"id": "31002890", "title": "How to reference a html template from a different directory in python flask", "content": "<pre><code class=\"python\">@app.route('/view', methods=['GET', 'POST'])\ndef view_notifications():\n    posts = get_notifications()\n    return render_template(\"frontend/src/view_notifications.html\", posts=posts)\n</code></pre>\n<p>So in my <code>project/backend/src/app.py</code> there's this code. How would I reference the template that's in <code>project/frontend/src/view_notifications.html</code> I've tried using <code>..</code> but it keeps saying the path isn't found. Is there another way I should be doing this?</p>\n<pre><code class=\"python\">[Tue Jun 23 12:56:02.597207 2015] [wsgi:error] [pid 2736:tid 140166294406912] [remote 10.0.2.2:248] TemplateNotFound: frontend/src/view_notifications.html\n[Tue Jun 23 12:56:05.508462 2015] [mpm_event:notice] [pid 2734:tid 140166614526016] AH00491: caught SIGTERM, shutting down\n</code></pre>\n", "abstract": "So in my project/backend/src/app.py there's this code. How would I reference the template that's in project/frontend/src/view_notifications.html I've tried using .. but it keeps saying the path isn't found. Is there another way I should be doing this?"}, "answers": [{"id": 31003097, "score": 65, "vote": 0, "content": "<p>Flask is looking in <code>templates/frontend/src/view_notifications.html</code> for your template file. You either need to move your templates file to that location or change the default template folder.</p>\n<p>According to the Flask docs you can specify a different folder for your templates. It defaults to <code>templates/</code> in the root of your app:</p>\n<pre><code class=\"python\">import os\nfrom flask import Flask\n\ntemplate_dir = os.path.abspath('../../frontend/src')\napp = Flask(__name__, template_folder=template_dir)\n</code></pre>\n<p>UPDATE:</p>\n<p>After testing it myself on a Windows machine the templates folder does need to be named <code>templates</code>. This is the code I used:</p>\n<pre><code class=\"python\">import os\nfrom flask import Flask, render_template\n\ntemplate_dir = os.path.dirname(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))\ntemplate_dir = os.path.join(template_dir, 'frontend')\ntemplate_dir = os.path.join(template_dir, 'templates')\n# hard coded absolute path for testing purposes\nworking = 'C:\\Python34\\pro\\\\frontend\\\\templates'\nprint(working == template_dir)\napp = Flask(__name__, template_folder=template_dir)\n\n\n@app.route(\"/\")\ndef hello():\n    return render_template('index.html')\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n</code></pre>\n<p>With this structure:</p>\n<pre><code class=\"python\">|-pro\n  |- backend\n    |- app.py\n  |- frontend\n    |- templates\n      |- index.html\n</code></pre>\n<p>Changing any instance of <code>'templates'</code> to <code>'src'</code> and renaming the templates folder to <code>'src'</code> resulted in the same error OP received.</p>\n", "abstract": "Flask is looking in templates/frontend/src/view_notifications.html for your template file. You either need to move your templates file to that location or change the default template folder. According to the Flask docs you can specify a different folder for your templates. It defaults to templates/ in the root of your app: UPDATE: After testing it myself on a Windows machine the templates folder does need to be named templates. This is the code I used: With this structure: Changing any instance of 'templates' to 'src' and renaming the templates folder to 'src' resulted in the same error OP received."}, {"id": 59903106, "score": 26, "vote": 0, "content": "<p>A better solution is to just go directly without <code>os.path.abspath</code> like this:</p>\n<pre><code class=\"python\">from flask import Flask\n\napp = Flask(__name__, template_folder='../../frontend/src')\n</code></pre>\n", "abstract": "A better solution is to just go directly without os.path.abspath like this:"}, {"id": 67614051, "score": 1, "vote": 0, "content": "<p>Flask will automatically detects folder name \"templates\". so you should create a folder called templates in project directory where your .py application file is present. Then place folder which contain html file inside templates folder. Hence your code will be</p>\n<pre><code class=\"python\">return render_template(\"frontend/src/view_notifications.html\", posts=posts)\n</code></pre>\n<p>Ensure the path \"frontend/src/view_notifications.html\" is inside templates folder</p>\n", "abstract": "Flask will automatically detects folder name \"templates\". so you should create a folder called templates in project directory where your .py application file is present. Then place folder which contain html file inside templates folder. Hence your code will be Ensure the path \"frontend/src/view_notifications.html\" is inside templates folder"}, {"id": 73774180, "score": 0, "vote": 0, "content": "<p>It seems that Flask follows symlinks when searching for templates.</p>\n<p>I put a symlink in the templates directory that points to my other template directory.</p>\n", "abstract": "It seems that Flask follows symlinks when searching for templates. I put a symlink in the templates directory that points to my other template directory."}]}, {"link": "https://stackoverflow.com/questions/21765692/flask-render-template-with-path/48040453", "question": {"id": "21765692", "title": "Flask: render_template with path", "content": "<p>I have several different templates that I'm trying to use for my flask app.</p>\n<p>I have tried the following but it seems to only look directly inside /templates and not /templates/folder1, templates/folder2 etc.</p>\n<pre><code class=\"python\"> return render_template('index.html', template_folder='folder1')\n return render_template('folder1/index.html')\n</code></pre>\n<p>both do not work as expected, how can I specify the sub folder of different templates.</p>\n", "abstract": "I have several different templates that I'm trying to use for my flask app. I have tried the following but it seems to only look directly inside /templates and not /templates/folder1, templates/folder2 etc. both do not work as expected, how can I specify the sub folder of different templates."}, "answers": [{"id": 48040453, "score": 27, "vote": 0, "content": "<p>The template folder can be specified when creating the Flask app (or Blueprint):</p>\n<pre><code class=\"python\">from flask import Flask\napp = Flask(__name__, template_folder='folder1')\n</code></pre>\n<p>Source: <a href=\"http://flask.pocoo.org/docs/0.12/api/#application-object\" rel=\"noreferrer\">http://flask.pocoo.org/docs/0.12/api/#application-object</a></p>\n<pre><code class=\"python\">from flask import Blueprint\nauth_blueprint = Blueprint('auth', __name__, template_folder='folder1')\n</code></pre>\n<p>Source: <a href=\"http://flask.pocoo.org/docs/0.12/blueprints/#templates\" rel=\"noreferrer\">http://flask.pocoo.org/docs/0.12/blueprints/#templates</a></p>\n<p>The <code>template_folder</code> is relative to where the app/blueprint is located.\nUse the <code>os</code> library to create paths to template folders outside of the app/blueprint directory.</p>\n<p><strong>eg.</strong></p>\n<pre><code class=\"python\">import os\nAPP_PATH = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nTEMPLATE_PATH = os.path.join(APP_PATH, 'templates/')\n</code></pre>\n<ul>\n<li>run from subdirectory of app root</li>\n<li>APP_PATH retrieves parent directory path (app root)</li>\n</ul>\n", "abstract": "The template folder can be specified when creating the Flask app (or Blueprint): Source: http://flask.pocoo.org/docs/0.12/api/#application-object Source: http://flask.pocoo.org/docs/0.12/blueprints/#templates The template_folder is relative to where the app/blueprint is located.\nUse the os library to create paths to template folders outside of the app/blueprint directory. eg."}, {"id": 57119267, "score": 1, "vote": 0, "content": "<p>Be sure the Python file and Template folder are all under the same working directory folder. </p>\n", "abstract": "Be sure the Python file and Template folder are all under the same working directory folder. "}, {"id": 21765947, "score": -12, "vote": 0, "content": "<p>I think Sean is right, but also: have you tried double quotes? I'm using Blueprint, so it may be different, but this is what mine looks like:</p>\n<pre><code class=\"python\">return render_template(\"users/register.html\")\n</code></pre>\n<p>so yours may be:</p>\n<pre><code class=\"python\">return render_template(\"folder1/index.html\")\n</code></pre>\n", "abstract": "I think Sean is right, but also: have you tried double quotes? I'm using Blueprint, so it may be different, but this is what mine looks like: so yours may be:"}]}, {"link": "https://stackoverflow.com/questions/42005613/cant-find-flask-template-specified-by-relative-path", "question": {"id": "42005613", "title": "Can&#39;t find Flask template specified by relative path", "content": "<p>I am trying to render the <code>index.html</code> template in my Flask app's templates folder. However, I get a <code>TemplateNotFound</code> error. The template exists. How do I render it?</p>\n<pre><code class=\"python\">@app.route('/')\ndef index():\n    return render_template('../../templates/index.html')\n</code></pre>\n<pre><code class=\"python\">Traceback (most recent call last):\n  File \"G:\\Settings\\Windows\\ProgramFiles\\Python\\Python35-32\\lib\\site-packages\\flask\\app.py\", line 1982, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"G:\\Settings\\Windows\\ProgramFiles\\Python\\Python35-32\\lib\\site-packages\\flask\\app.py\", line 1614, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"G:\\Settings\\Windows\\ProgramFiles\\Python\\Python35-32\\lib\\site-packages\\flask\\app.py\", line 1517, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"G:\\Settings\\Windows\\ProgramFiles\\Python\\Python35-32\\lib\\site-packages\\flask\\_compat.py\", line 33, in reraise\n    raise value\n  File \"G:\\Settings\\Windows\\ProgramFiles\\Python\\Python35-32\\lib\\site-packages\\flask\\app.py\", line 1612, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"G:\\Settings\\Windows\\ProgramFiles\\Python\\Python35-32\\lib\\site-packages\\flask\\app.py\", line 1598, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"G:\\Projects\\Intellij\\Python\\HelloPython\\controller\\web\\WebHomeController.py\", line 10, in webIndex\n    return render_template('../../templates/index.html', message=message)\n  File \"G:\\Settings\\Windows\\ProgramFiles\\Python\\Python35-32\\lib\\site-packages\\flask\\templating.py\", line 133, in render_template\n    return _render(ctx.app.jinja_env.get_or_select_template(template_name_or_list),\n  File \"G:\\Settings\\Windows\\ProgramFiles\\Python\\Python35-32\\lib\\site-packages\\jinja2\\environment.py\", line 869, in get_or_select_template\n    return self.get_template(template_name_or_list, parent, globals)\n  File \"G:\\Settings\\Windows\\ProgramFiles\\Python\\Python35-32\\lib\\site-packages\\jinja2\\environment.py\", line 830, in get_template\n    return self._load_template(name, self.make_globals(globals))\n  File \"G:\\Settings\\Windows\\ProgramFiles\\Python\\Python35-32\\lib\\site-packages\\jinja2\\environment.py\", line 804, in _load_template\n    template = self.loader.load(self, name, globals)\n  File \"G:\\Settings\\Windows\\ProgramFiles\\Python\\Python35-32\\lib\\site-packages\\jinja2\\loaders.py\", line 113, in load\n    source, filename, uptodate = self.get_source(environment, name)\n  File \"G:\\Settings\\Windows\\ProgramFiles\\Python\\Python35-32\\lib\\site-packages\\flask\\templating.py\", line 57, in get_source\n    return self._get_source_fast(environment, template)\n  File \"G:\\Settings\\Windows\\ProgramFiles\\Python\\Python35-32\\lib\\site-packages\\flask\\templating.py\", line 85, in _get_source_fast\n    raise TemplateNotFound(template)\njinja2.exceptions.TemplateNotFound: ../../templates/index.html\n</code></pre>\n", "abstract": "I am trying to render the index.html template in my Flask app's templates folder. However, I get a TemplateNotFound error. The template exists. How do I render it?"}, "answers": [{"id": 42005880, "score": 1, "vote": 0, "content": "<p><a href=\"http://flask.pocoo.org/docs/api/#flask.render_template\" rel=\"nofollow noreferrer\"><code>render_template</code></a> takes the name to be looked up by the Jinja env, which has the <code>templates</code> folder it its lookup path. Only specify the path <em>after</em> that.</p>\n<pre><code class=\"python\"># index.html is in the templates folder\nrender_template('index.html')\n\n# users/detail.html is in a sub-folder under templates\nrender_template('users/detail.html')\n</code></pre>\n", "abstract": "render_template takes the name to be looked up by the Jinja env, which has the templates folder it its lookup path. Only specify the path after that."}]}, {"link": "https://stackoverflow.com/questions/23846927/flask-unable-to-find-templates", "question": {"id": "23846927", "title": "Flask unable to find templates", "content": "<p>My project structure is like below</p>\n<pre><code class=\"python\">run.py\nlib/\nmysite/\n    conf/\n        __init__.py (flask app)\n        settings.py\n    pages/\n        templates/\n            index.html\n        views.py\n        __init__.py\n</code></pre>\n<p>This is <code>mysite.conf.__init__</code></p>\n<pre><code class=\"python\">from flask import Flask\n\napp = Flask(__name__)\napp.debug = True\n</code></pre>\n<p>My idea is to now import <code>app</code> to every other module to use it to create views. Here in this case there is a module <code>pages</code>.</p>\n<p>In <code>pages.views</code> I have some code like</p>\n<pre><code class=\"python\">from flask import render_template\nfrom mysite.conf import app\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n</code></pre>\n<p>The <code>index.html</code> is placed in <code>pages/templates</code></p>\n<p>When I run this app from <code>run.py</code> which is like below </p>\n<pre><code class=\"python\">from mysite.conf import app\napp.run()\n</code></pre>\n<p>I'm getting template not found error.\nHow to fix it? and why is this happening!</p>\n<p>I'm basically a django guy, and facing a lot of inconvenience with importing the <code>wsgi</code> object every time to create a view in every module! It kinda feels crazy -- Which in a way encourages circular imports. Is there any way to avoid this?</p>\n", "abstract": "My project structure is like below This is mysite.conf.__init__ My idea is to now import app to every other module to use it to create views. Here in this case there is a module pages. In pages.views I have some code like The index.html is placed in pages/templates When I run this app from run.py which is like below  I'm getting template not found error.\nHow to fix it? and why is this happening! I'm basically a django guy, and facing a lot of inconvenience with importing the wsgi object every time to create a view in every module! It kinda feels crazy -- Which in a way encourages circular imports. Is there any way to avoid this?"}, "answers": [{"id": 23847116, "score": 39, "vote": 0, "content": "<p>Flask expects the <code>templates</code> directory to be in the same folder as the module in which it is created; it is looking for <code>mysite/conf/templates</code>, <strong>not</strong> <code>mysite/pages/templates</code>.</p>\n<p>You'll need to tell Flask to look elsewhere instead:</p>\n<pre><code class=\"python\">app = Flask(__name__, template_folder='../pages/templates')\n</code></pre>\n<p>This works as the path is resolved relative to the current module path.</p>\n<p>You cannot have per-module template directories, not without using <a href=\"https://flask.readthedocs.org/en/latest/blueprints/\" rel=\"noreferrer\">blueprints</a>. A common pattern is to use subdirectories of the <code>templates</code> folder instead to partition your templates. You'd use <code>templates/pages/index.html</code>, loaded with <code>render_template('pages/index.html')</code>, etc.</p>\n<p>The alternative is to use a <code>Blueprint</code> instance per sub-module; you can give each blueprint a separate template folder, used for all views registered to that blueprint instance. Do note that all routes in a blueprint do have to start with a common prefix unique to that blueprint (which can be empty).</p>\n", "abstract": "Flask expects the templates directory to be in the same folder as the module in which it is created; it is looking for mysite/conf/templates, not mysite/pages/templates. You'll need to tell Flask to look elsewhere instead: This works as the path is resolved relative to the current module path. You cannot have per-module template directories, not without using blueprints. A common pattern is to use subdirectories of the templates folder instead to partition your templates. You'd use templates/pages/index.html, loaded with render_template('pages/index.html'), etc. The alternative is to use a Blueprint instance per sub-module; you can give each blueprint a separate template folder, used for all views registered to that blueprint instance. Do note that all routes in a blueprint do have to start with a common prefix unique to that blueprint (which can be empty)."}, {"id": 53073308, "score": 3, "vote": 0, "content": "<p>I ran in to this problem as well being brand new to Flask.</p>\n<p>The solution for my situation was to create an <code>__init__.py</code> file in the main app directory so as to turn <code>app/</code> in to a module since, as <code>Martijn Pieters</code> pointed out, flask expects <code>templates</code> to be in the main <strong>module</strong> directory by default. And to restate from his answer, you can reassign the default directory when instantiating the <code>Flask</code> class, e.g. <code>Flask(__name__, template_folder=any/relative/path/from/app/dir/or/absolute/path/youd/like)</code></p>\n<p>A simple directory structure should therefore look like this:</p>\n<pre><code class=\"python\">app/\n    run.py\n    templates/\n        sample_template.html\n    __init__.py  # &lt;---- This was the missing file in my case.\n</code></pre>\n<p>... where <code>app.py</code> might look like this:</p>\n<pre><code class=\"python\">from flask import Flask, render_template\n\napp = Flask(__name__)  # or e.g. Flask(__name__, template_folder='../otherdir')\n\n@app.route(\"/\")\ndef home():\n    return \"Hello world\"\n\n@app.route(\"/hello/again\")\ndef hello_again():\n    return render_template(\"hello_again.html\")\n\nif __name__ == \"__main__\":\n    app.run()\n</code></pre>\n", "abstract": "I ran in to this problem as well being brand new to Flask. The solution for my situation was to create an __init__.py file in the main app directory so as to turn app/ in to a module since, as Martijn Pieters pointed out, flask expects templates to be in the main module directory by default. And to restate from his answer, you can reassign the default directory when instantiating the Flask class, e.g. Flask(__name__, template_folder=any/relative/path/from/app/dir/or/absolute/path/youd/like) A simple directory structure should therefore look like this: ... where app.py might look like this:"}, {"id": 67037000, "score": 1, "vote": 0, "content": "<p>I'm pretty sure you made a mistaking spelling \"template\" on main folder. Just rename it</p>\n<p>or:</p>\n<p>do something like this (template_folder = 'the name of the folder your file belongs to')</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">from flask import Blueprint\nfrom flask import render_template\n\n\nviews = Blueprint('views',__name__,template_folder='tamplate')\n\n\n\n\n@views.route('/')\n\ndef home():\n\n    return render_template(\"home.html\")\n</code></pre>\n", "abstract": "I'm pretty sure you made a mistaking spelling \"template\" on main folder. Just rename it or: do something like this (template_folder = 'the name of the folder your file belongs to')"}]}]