use yield keyword python example try understand code1 caller happen method get_child_candidates call list return single element call subsequent call stop understand yield understand generator understand generator understand iterable create list read item read item call iteration mylist iterable use list comprehension create list iterable use iterable list string file iterable read much wish store value memory want lot value generator iterator kind iterable iterate generator store value memory generate value fly use perform mygenerator second time generator use calculate forget calculate end calculate yield keyword use return function return generator useless example handy know function return huge set value read master yield understand call function code write function body run function return generator object bit tricky code continue leave time use generator hard part first time call generator object create function run code function beginning hit yield return first value loop subsequent call run iteration loop write function return next value continue generator consider empty happen function run hit yield loop come end satisfy generator caller code contain several smart part loop iterate list list expand loop iterated concise way go nested datum bit dangerous end infinite loop case min_dist max_dist exhaust value generator keep create new generator object produce different value previous one apply node extend method list object method expect iterable add value list pass list code get generator good works python care argument method list python expect iterable work string list tuple generator call duck type reason cool story question stop read little bit see advanced use generator note python useprint(corner_street_atm.__next useful various thing control access resource itertool module contain special function manipulate iterable wish duplicate generator chain generator group value nest list liner map zip create list import itertool example let see possible order arrival horse race iteration process imply iterable implement iter method iterator implement next method iterable object get iterator iterator object let iterate iterable article loop work see function yield statement apply easy trick understand happen trick give idea logic function happen yield different happen list base approach many case yield approach lot memory efficient fast case trick stick infinite loop original function work fine read learn first iterator protocol write python perform follow step get iterator mylist call iter(mylist return object next method next python step people forget tell use iterator loop item keep call next method iterator return step return value assign x loop body execute exception stopiteration raise next mean value iterator loop exit truth python perform step want loop content object loop code otherlist.extend(mylist otherlist python list mylist iterable implement iterator protocol user define class implement iter method make instance class iterable method return iterator iterator object next method possible implement iter next class iter return self work simple case want iterator loop object time iterator protocol many object implement protocol note loop know kind object deal follow iterator protocol happy get item item call build list return item dictionary return key file return line generator return yield come yield statement return statement f123 execute function exit f123 ordinary function f123 call return value yield statement return generator object function exit suspend state loop try loop generator object function resume suspend state next line yield return execute next line code case yield statement return next item happen function exit point generator raise stopiteration loop exit generator object adapter end exhibit iterator protocol expose iter next method keep loop happy end run function get next value put suspend mode write code use generator implement logic option use temporary list trick mention work case infinite loop make inefficient use memory long list approach implement new iterable class somethingiter keep state instance member perform logical step next python method depend logic code next method end look complex prone bug generator provide clean easy solution think way iterator fancy sounding term object next method yield ed function end original version python interpreter code insight happen scene loop rewrite make sense note oversimplification illustrative purpose yield keyword reduce simple fact generator lazy pende list yield statement allow use function notation program list value generator spit advanced usage let use generator coroutine see yield statement encounter function pause save state emit next return value list accord python iterator protocol syntactic construct loop call next catch stopiteration exception encounter generator generator expression generator function powerful pass argument pause generator function use implement coroutine let define function makerange python range call makerange(n return generator force generator return pende value pass list iterable example think create list return major difference see last section iterable last part list comprehension generator iterable use get well feel generator play itertool module sure use chain.from_iterable chain warrant example use generator implement long lazy list itertools.count implement def enumerate(iterable zip(count iterable yield keyword loop note generator use many thing implement coroutine non deterministic programming elegant thing lazy list viewpoint present common use find python iteration protocol work go list(makerange(5 describe early lazy incremental list build function next call object function part iteration protocol find iterator use next function part iteration protocol implement fancy thing expense readability try avoid coroutine example coroutine generator accept input yield keyword nextinput yield nextoutput form way communication computation allow pause request input next coroutine pause run coroutine hit yield keyword computation pause control invert yield call function frame request next value computation pause generator coroutine remain pause invoke function different function context request next value unpause pass input datum direct pause logic interior coroutine code think python coroutine lazy pende list element depend previous computation input opt inject generation process people care follow distinction want stop read python speak iterable object understand concept loop list iterator specific instance request loop 1,2,3].__iter generator iterator way write function syntax request iterator list create new iterator request iterator iterator give copy unlikely event fail remember generator iterator time use want reuse call myrange need use result convert result list store variable list(myrange(5 need clone generator example hackish metaprogramming use work python necessary copyable iterator python pep standard proposal defer yield keyword python yield legal inside function definition inclusion yield function definition make return generator idea generator come language see footnote vary implementation python generator execution code frozen point yield generator call method discuss execution resume freeze next yield yield provide easy way implement iterator protocol define follow method iter method make object iterator type check iterator abstract base class collection module let introspection generator type sub type iterator necessary type check feature iterator exhausted reuse reset make want use functionality footnote yield datum example simple generator equivalent python use yield yield allow delegation subgenerator explain follow section cooperative delegation sub coroutine yield form expression allow datum send generator see footnote example take note receive variable point datum send generator queue generator builtin function next call appropriate next next method depend version python use send data generator send none call next recall yield available python allow delegate coroutine subcoroutine delegate functionality sub generator use generator simulate add account return account read precise semantic yield pep close method raise generatorexit point function execution freeze call del put cleanup code handle generatorexit throw exception handle generator propagate user raise believe cover aspect follow question yield keyword python turn yield lot ' m sure add thorough example want constructive criticism know comment top accept answer incomplete answer grammar allow expression list comprehension yield expression tout interesting use comprehension generator expression spite cite good use case cpython core developer discuss deprecate allowance relevant post mailing list january brett cannon write sun jan craig rodrigue write m ok approach leave thing python good imho vote syntaxerror expect syntax agree sensible place end code rely current behaviour clever maintainable term get want cheer nick nick coghlan |||| ncoghlan |||| brisbane australia outstanding issue seem point direction good idea pypy python implementation write python raise syntax warning bottom line developer cpython tell put yield generator expression comprehension python generator function return statement indicate generator do cause stopiteration raise return value use argument construct stopiteration become stopiteration.value attribute historical note python generator function return statement allow include expression_list context bare return indicate generator do cause stopiteration raise expression_list number expression separate comma python stop generator return return value language clu sather icon reference proposal introduce concept generator python general idea function maintain internal state yield intermediate datum point demand user promise superior performance approach include python threading available system mean example range object iterator iterable reuse list iter method return iterator object yield introduce statement meaning appear begin line code block yield create yield expression change propose allow user send data generator receive send datum able assign statement work yield return return tell generator difference next time call generator execution start last call yield statement return stack frame clean yield occur control transfer caller state resume next time function call case code function get_child_candidate act iterator extend list add element time new list list.extend call iterator exhausted case code sample post clear return tuple append list extra thing mention function yield terminate ' write code use code help simplify problem make thing easy work prefer minimal work example meditate interactive python session find building list scratch yield piece first aha moment yield yield sugary way say build series stuff behavior different behavior yield single pass iterate function yield call generator function iterator return term reveal lose convenience container gain power series compute need long yield lazy put computation function yield execute call return iterator object remember leave time call next iterator happen loop execution inch next yield return raise stopiteration end series natural end loop yield versatile datum store make available time need multiple pass series long call list brilliant choice word yield meaning apply yield produce provide agriculture provide next datum series yield give way relinquish political power relinquish cpu execution iterator advance yield give generator see first case foo hold entire list memory big deal list element want list huge memory eater cost lot time build time function call second case bar give generator generator iterable mean use loop value access value store memory time generator object remember loop last time call way use iterable say count count store number count contrived example use itertool want count simple use case generator say use write efficient permutation use yield push thing call stack use stack variable generator use specialized tree traversal manner thing return generator ' m familiar python believe kind thing c iterator block familiar key idea compiler interpreter far caller concerned keep call next keep return value generator method pause pause method compiler build state machine remember local variable look easy writing iterator example plain language provide correspondence high level human concept low level python concept want operate sequence number want bother self creation sequence want focus operation want follow generator function contain yield start execute next pause yield ask next value continue point fit design iterator protocol python request value famous user iterator protocol command python matter sequence list string dictionary generator object describe result read item sequence note define function contain yield keyword way create generator easy way create accurate information read iterator type yield statement generator python documentation type answer feel give many great answer describe use generator programming language theory answer yield statement python return generator generator python function return continuation type coroutine continuation represent general mechanism understand go continuation programming language theory fundamental kind computation use hard reason difficult implement idea continuation straightforward state computation finish state current value variable operation perform save point program continuation invoke program variable reset state operation save carry continuation general form implement way call cc way program stack save continuation invoke stack restore continuation pass style cp continuation normal function language function first class programmer manage pass subroutines style program state represent closure variable encode variable reside stack function manage control flow accept continuation argument variation cp function accept multiple continuation manipulate control flow invoke call return simple example continuation pass style follow simplistic example programmer save operation write file continuation complex operation many detail write pass continuation i.e first class closure operator processing call necessary use design pattern lot actual gui programming save line code manage control flow gui event trigger rest post loss generality conceptualize continuation cp hell lot easy understand read let talk generator python generator specific subtype continuation continuation able general save state computation program call stack generator able save state iteration iterator definition mislead certain use case generator instance reasonable iterable behavior define time generator iterate return prototypical type iterable come mind think iterator collection do_something(x example illustrate power generator iterator generator save state iteration reiterate continuation save state program stack generator save state iteration mean continuation lot powerful generator generator lot lot easy easy language designer implement easy programmer use time burn read understand page continuation call implement conceptualize generator simple specific case continuation pass style yield call tell function return continuation function call start leave pseudo pseudocode pseudocode code generator next method follow yield keyword syntactic sugar real generator function remember pseudocode actual implementation generator python complex exercise understand go try use continuation pass style implement generator object use yield keyword lot answer show use yield create generator use yield easy make coroutine enable pass information block code repeat fine example give use yield create generator help understand yield follow code use finger trace cycle code yield time finger hit yield wait send enter call trace code hit yield code right yield evaluate return caller wait call perform loop code note coroutine yield use send send value caller yield function give yield receive value send spit leave hand side trace code progress hit yield return value end call example yield use meaning python syntax delegate subgenerator syntax propose generator delegate part operation generator allow section code contain yield factor place generator subgenerator allow return value value make available delegate generator new syntax open opportunity optimisation generator yield value produce introduce python avoid coroutine confuse regular generator today yield use great answer bit difficult newbie assume learn return statement analogy return yield twins return mean return stop yield mean return continue run get single number list return allow prevail implement quit replace return yield win get number compare return run stop yield run time plane interpret return return yield return call iterable core yield difference list return output object yield output get list object retrieve object yield output new name generator object display out[11 generator object num_list conclusion metaphor grok programming viewpoint iterator implement thunk implement iterators generator thread pool concurrent execution thunk use message send closure object dispatch answer message message send closure create iter call lot way implement computation use mutation possible kind computation mutation return current value next yielder make referential transparent racket use sequence transformation initial program intermediary language rewrite make yield operator transform language simple operator demonstration yield rewrite use structure semantics identical python model computation change syntax require rewrite use yield python python example implement generator python provide syntactic sugar python generator use lexical closure generator use object closure generator closuresandobjectsareequivalent go read page beazley python essential reference quick description generator many other post good description note yield use coroutine dual use generator function use code snippet yield use expression function caller send value method use send method coroutine execute next yield statement encounter generator coroutine cool way set data flow type application think worthwhile know use yield statement function simple example output python developer look yield hold position program flow next loop start yield position seem wait position return value next time continue work seem interesting nice ability mental image yield think thread stack implement way normal function call put local variable stack computation clear stack return value local variable see yield function code begin run function call return generator object next method invoke put local variable stack compute hit yield statement clear part stack returning take snapshot local variable store generator object write place code particular yield statement kind frozen function generator hang next call retrieve function belonging stack animate function continue compute leave oblivious fact spend eternity cold storage compare follow example call second function behave first yield statement unreachable present change nature deal call yielderfunction run code make generator code good idea name thing yielder prefix readability gi_code gi_frame field frozen state store explore dir confirm mental model credible imagine create remarkable machine capable generating thousand thousand lightbulb day machine generate lightbulbs box unique serial number enough space store lightbulb time adjust generate lightbulbs demand python generator differ much concept imagine function call barcode_generator generate unique serial number box huge number barcode return function subject hardware ram limitation wise space efficient option generate serial number demand machine code note next(barcode bit see self contain function generate next unique serial number time function return generator see call function time need new serial number use next give generator obtain next serial number precise generator lazy iterator iterator object help traverse sequence object call lazy load item sequence memory need use next previous example explicit way obtain next item iterator implicit way use loop print barcode run memory word generator look function behave iterator real world application useful work big sequence imagine read huge file disk billion record read entire file memory work content infeasible run memory easy example understand yield output answer suggest yield use create sequence generator use generating sequence example read file line line network use yield function follow use code follow execution control transfer gotcha execution control transfer getnextlines loop yield execute time getnextline invoke execution point pause last time short function follow code print answer speak perspective use python generator underlie implementation generator mechanism involve trick stack heap manipulation yield use return python function function turn special call generator function function return object generator type yield keyword flag notify python compiler treat function normal function terminate value return help compiler generator function think resumable execution context restore execution run call return raise stopiteration exception part iterator protocol reach end function find lot reference generator functional programming perspective digestable want talk rationale generator iterator base understanding hope help grasp essential motivation iterator generator concept show language understand want process bunch datum first store datum process naive approach problematic data volume huge expensive store whole store datum store kind metadata logic datum compute approach wrap metadata way iterator create object give datum want oo approach bit complex use summary yield statement transform function factory produce special object call generator wrap body original function generator iterate execute function reach next yield suspend execution evaluate value pass yield repeat process iteration path execution exit function instance output power come use generator loop calculate sequence generator execute loop stop time yield next result calculation way calculate list fly benefit memory save large calculation say want create range function produce iterable range number like use inefficient guido team generous develop generator iteration function generator call next execute function reach yield statement stop yield value reach end function case call next execute yield statement yield n next call execute increment statement jump evaluate true stop yield continue way condition return false generator jump end function yield object return function return single value want function return huge set value use yield yield barrier barrier cuda language transfer control complete run code function beginning hit yield return first value loop call run loop write function time return next value value return many people use return yield case yield efficient easy work example yield good return function yield function call function function thing yield use line variable worry result code see function thing difference return_date give list yield_date give generator real life example read file line line want make generator yield keyword collect return result think yield return yield return element function difference yield element turn function generator generator behave function yield generator stop call continue point start get sequence yield value call list(generator tl;dr iterator list next return next element list iterator generator next compute next element fly execute code see yield generator way run control flow continue loop step call next complex flow note generator normal function remember previous state local variable stack see answer article detailed explanation generator iterate yield consider nice language sugar simple yield base approach compute fibonacci series explain enter try call get mystify result presence yield signal python want create generator object generate value demand generate value do use build function feed construct consume value use build next function invoke force generator produce value provide fib loop list initializer tuple initializer expect object generate produce value consume generator value produce return tuple initializer generator differ function sense lazy accomplishe maintain local state allow resume invoke fib call python compile function encounter yield keyword return generator object helpful seem request generate first value execute statement find encounter yield yield value supply yield pause example well demonstrate let use print call replace print text python enter generator object wait command generate value use next see print unquoted result print quote result return yield call next generator remember pause yield value resume next message print search yield statement pause perform due loop yield similar return difference yield make function iterable follow example primes(n function become iterable mean next time function call continue leave line yield expression example isprime(n true return prime number iteration continue next line python generator special type iterator use generate series value yield keyword return keyword generator function fascinating thing yield keyword save state generator function set number different value time generator yield instance yield yield ask make cupcake do cupcake give eat make cake factory call generator make cake call make_function get generator run function yield keyword present function become generator consume cake ask tell stop ask consume generator do call make_cake want cake place order cupcake use loop generator example let say want random password ask rpg generator generate infinite number random password say generator useful know length sequence list finite number element answer great vote relate code work other relate generator general work repeat generator yield think cover great exist answer spend hour understand similar code break works code traverse binary tree structure let take tree example simple implementation binary search tree traversal execution code tree object implement iter candidate statement replace element tree python translate node.__iter function generator code execute iteration execution look catch iteration create sub iterator traverse tree hold state current iterator reach end traverse stack value return correct order small yield value first code example similar different technique populate element list child next iteration pop run function code current object self hope contribute little legendary topic spend several good hour drawing process understand yield keyword python use exit code disturb state local variable function call execution start last point leave code example demonstrate work yield code generate output many answer explain use yield create generator use yield keyword send datum live generator let say method translate english language begin heavy do want method run know receive word word translate run print use send method generator send datum generator allow yield use yield python way similar return statement difference multiple value return function return statement return value list store memory caller block want use extra memory want get value function need yield come consider follow function caller code segment caller function call output see yield return value caller function call start first statement statement yield example first value print print function call return print second value print print fun call print first statement return statement yield process repeat function contain yield statement function become generator function call generator function python execute code generator function yield statement occur yield statement freeze function internal states call generator function python continue execution code generator function frozen position yield statement occur generator function execute code generator function run yield statement create list return result generate value fly result generator function need little time execute function return list use less memory simple use case call function return object object pass next function next function call function run next yield provide return value next function hood loop recognize object generator object use get next value language es6 high implement little next member function generator object pass value caller time get next value result generator = result.next(555 program yield value say z yield value get yield value z yield get python send method similar effect use create iterator function think yield append function function array certain criterion meet add value function make iterator output main advantage use yield create iterator iterators n’t compute value item instantiate compute ask know lazy evaluation generator allow get individual process item need wait whole collection process illustrate example yield keyword use enumeration iteration function expect return output want simple example function return call multiple time replace return yield example b return call call go increment example true call python follow yield allow write smart loop factor loop part separate method easy reuse suppose need loop non blank row spreadsheet row need call g(row similar loop find repeat statement check valid row boring complex error prone want repeat dry principle want separate code checking record code process row f(row g(row make function take input parameter simple use yield method boring stuff check valid row preparation call f note call method return next row row read finish method return next call start new loop write iterations datum repeat bore check valid row factor method note use jargon iterator generator protocol co routine think simple example apply lot day day code function return generator yield contain yield return generator look function behave iterator generator continue execution lefoff yield resume function continue execution last yield run allow code produce series value time compute send list note yield construct grammar python use presence yield keyword make function return generator generator kind iterator main way loop occur python generator resumable function return return value end function yield keyword return value suspend function next(g call generator function resume execution leave function encounter explicit imply return end easy way understand think generator write regular function print yield watch outputs function understand substitute yield print get generator produce value give answer yield short simple part large world call iterator protocol sender side iterator protocol relevant kind object iterable thing loop iterator object track loop state consumer side iterator protocol call iter iterable object get iterator call next iterator retrieve value iterator data stopiteration exception raise make easy loop call iter behalf person write book key point teach python course find minimal sufficient explanation build understand start use particular trick write function print testing convert yield seem work level python programmer understand yield function understand generator understand generator understand iterable iterable iterable create list need able read element process read item call iteration mylist iterable use list comprehension create list iterable datum structure use iterable list string file iterable method convenient read store value memory desirable many value generator generator generator kind iterator special kind iteration iterate generator store value memory generate value fly generator generator generator generator generate electricity store energy use list comprehension become generator comprehension generator use execute mygenerator second time generator calculate discard calculate last time calculate typical black blind man break corn yield keyword use way return function return generator example useless need function return large number value read use yield become convenient master yield need clear function call code write function body run function return generator object beginner confuse second understand code continue leave time use generator difficult part first time call generator object create function run code function beginning hit yield return first value loop subsequent call run next iteration loop write function return next value continue generator consider empty yield hit function run loop end satisfied personal understanding hope help yield python yield keyword python similar return statement use return value object python slight difference yield statement return generator object call function contain yield return value program call function yield statement yield encounter execution function stop return object generator function caller simple word yield keyword convert expression specify generator object return caller want get value store generator object need iterate destroy local variable state function call execution start last yield expression note function contain keyword know generator function use function return value time call function start new set variable contrast use generator function normal function execution start leave want return multiple value function use generator function yield keyword yield expression return multiple value return value save local state resume source https://www.simplilearn.com/tutorials/python-tutorial/yield-in-python yield use create generator think generator iterator whihc give value iteration use yield loop get generator object use get item loop iterative manner yield example test return stop test test return time total stopping test time total set code call test print result addition use return yield way get value return error try get
include statement try close question use idiom consider close duplicate python run module import stop question call function expect function name main use entry point use main function run start python script script start run boilerplate code protect user invoke script intend common problem guard omit script import guardless script script import my_script_without_a_name_eq_main_guard latter script trigger former run import time use second script command line argument mistake custom class guardless script save pickle file unpickle script trigger import guardless script problem outline previous bullet understand matter take step understand python initialize script interact module import mechanism python interpreter read source file thing set special variable name execute code find file let see work relate question name check see python script let use different code sample explore import script work suppose follow file call foo.py python interpreter read source file first define special variable case care name variable module main program run module source file main program interpreter assign code string main name variable module import hand suppose module main program import module mean statement main program module main program import interpreter search foo.py file search variant execute module assign name foo import statement name variable special variable set interpreter execute code module statement time open window side code sample follow explanation print stre import quote load math module assign variable call math equivalent replace import math note import low level function python take string trigger actual import print string function_a execute def block create function object assign function object variable call function_a print string function_b execute second def block create function object assign variable call function_b print string name guard module main program module import summary summary print case wonder want want write file use program module module run main program example module library want script mode run unit test demo module use main program unit test testing framework work import file script run special test function want try run script import module module use main program provide programmer friendly api advanced user example elegant running script python set magic variable import script run script side effect import script module question multiple name check block answer strange language stop suppose follow foo2.py happen say python foo2.py command line script run pass command interpreter code indentation level execute function class define define none code run language main function run main function code top level case top level code block name build variable evaluate name current module module run name set string main test script run import testing script import module various function class definition import top level code execute code body clause get run condition meet basic example consider follow script invoke interpreter output run two.py get module get load name equal main create follow file run file run python a.py a.py execute import module b. cause code b run python set globals()['__name b module module name b. run python b.py file b.py execute python set globals()['__name file main therefore statement evaluate true time outline basics global variable name module entry point program main name import module code block run module entry point program allow code module importable module execute code block import need say write python script design use module test module add call function bottom run command prompt want import module script import do_important function call comment function call do_important bottom remember comment test function call extra complexity mean forget make development process troublesome name variable point namespace python interpreter happen moment import module name module primary module interactive python session interpreter read eval print loop run main check execute code execute run primary module call script pythonic way improve want run business process module put code want exercise develop test function check main final function end module run run module primary module allow module function class import script run main function allow module function class call run different main module idiom find python documentation explanation main module text state module represent anonymous scope interpreter main program execute command read standard input script file interactive prompt environment idiomatic conditional script stanza cause script run name main part run script run say command line use command python name global variable python global mean module level exist namespace module name str type special case python process run mycode.py anonymous global namespace assign value main name include final line cause script define main function run benefit use construct import code module script run main function program decide lot different take mechanic code question none make sense understand helpful new programmer take file ab.py second file xy.py code execute xy.py import ab import statement run module import ab operation execute remainder xy finished ab continue xy interpreter keep track script run name run script matter name interpreter call main making master home script return run external script script call main script assign filename name name ab.py line name main interpreter test determine interpreting parse home script execute peek external script give programmer flexibility script behave execute call let step code understand happen focus first unindented line order appear script remember function def block call interpreter say mumble bottom line mean main home script execute function call main see def main block top contain main flow script functionality implement remember say early import statement import module recognize wait instruction run executable operation contain script put meat script main function quarantine put isolation run import script exception common practice main call wonder thing call main calling script many people structure script standalone function build run independent rest code file call else body script bring code work right separate function call line script contain main function accustom early learning stage programming building line script need try figure need operation use kind internal structure code complicated build intuitive read script function call start calculate assign variable chance try function new script relate enough old conflicting variable split independent function gain ability use previous work call script example example.py import xy.py call x make use function xy.py capitalize third word give text string create numpy array list number square detrende surface possibility limitless question contain answer help understand mark duplicate think mistake code name main executed module invoke script example consider follow module my_test_module.py first possibility import my_test_module.py module invoke main.py note top level print statement my_test_module execute second possibility invoke my_test_module.py script run my_test_module.py python script print statement execute comprehensive explanation read name main python certain statement module m.py want execute run main import place statement test case print statement block default module run main import name variable set main import name variable get different value name module helpful run different variant module separate specific input output statement test case short use name = main block prevent certain code run module import put name variable define script define script run main module run import module script output execute script1 output execute script2 see name tell code main module great write code worry structural issue c c++ file implement main function compile executable use library say write python script great implement boatload function useful purpose want use import script use execute program give code execute name main context c c++ portion piece separate module include file picture situation arrow import link module try include previous module code file count implementation file link make difficult include code c project compile library picture python write module want use code import name variable help separate executable portion program library part short need know several point import action run run a.py meaning line a.py point want run a.py import solve problem point python allow use condition check name implicit variable .py module important thing python special point rest basic logic read much answer page say know thing understand answer confused let look answer abstract way suppose code x.py blocks run run x.py block b run run module y.py example x.py import code run function x.py call y.py run python local name variable assign value main execute python module command line import module name attribute assign value main actual name module way module look name value determine use support program main application execute command line follow idiom common python module consider check name attribute python script main word program execute attribute main program execute case main function python script use module code outside statement execute name main use check program use module decide run code explain name main important understand name name dunderalias think global variable accessible module work similar way global string global mention indicate type(__name yield class str inbuilt standard python python version use script find interpreter module package test_file.py result main somefile.py test_file.py result somefile notice use package module name take name file path actual module package path give dunderalias file allow see name main file program return main module package run python script return name file originate variable mean value overwrite mean overwrite value name result lack readability reason need variable define new variable assume value name main name file change default value cause confusion good cause problem line consider good practice general include name main script know behaviour name thing become clear flow control statement contain block code execute value give true see name take main file name import mean name equal main file main file run interpreter module package import script name take value main block code execute tell file run main file run interpreter condition execute package value main name use module define name module possible common useful thing name show use provide runnable help function utility package module elaborate use library allow module run command line main script useful special python file call command line use call main function execute appropriate startup code commandline argument handle instance write several way say use production code serve illustrate magical name main convention invoke main function python file think good break answer depth simple word name module python special attribute call name build variable return name module main programming language python execution entry point main main name scope top level code execute way use python module run script import module run script name set main value name attribute set main module run main program value name set contain name module number variable system python interpreter provide source file module get value want let focus name variable attribute python loads source code file executes code find note call method function define file define interpreter execute source code file define special variable file name special variable python define source code file python loading source code file main program file run set special name variable file value main import module name set module name example part mean code block execute run module code block execute module calling import value name equal main particular instance hope help name = main top level script environment specifies interpreter high priority execute first main name scope top level code execute module ’s name set equal main read standard input script interactive prompt consider output main statement true print direct method suppose import class class print direct method import set name equal first model name simple word code see name main call python file execute wish import python file example1.py module work python file say example2.py code name main run take effect make file usable script importable module module name fibo reference https://docs.python.org/3.5/tutorial/modules.html reason avoid import lock problem arise code import want main run file invoke name main case code import importer enter code true main module avoid import lock problem side effect sign methodology support multiple entry point run program use main entry point setup.py expect main tool use alternate entry point example run file gunicorn process define app function main setup.py gunicorn import code want import import lock issue beginner answer need right code unnecessary simple script useful want able import script unpickle see answer non beginner scenario different word name guard mechanism hiding code code specific reason hide need hide code import put guard hide little possible slightly detail let say simple script fib.py adapt answer run python fib.py work fine name main scenario condition unnecessary script simplify import fib new version plan first place version simple clear want able import fib first version useless useful code section run import file case name main proper design case refactor code useful part function run import import fib call main execute run python fib.py well design isolate reusable part actual calculation user visible input output fib import fibn call fibn function code perform import call function fibn make clear example real life call fib fib import fib import call main function want reuse return code question move code function well caller invoke function want change scope lock variable surround code need access make global well refactor main return lock caller capture value local variable language name main specific meaning python common convention use name thing run call main c. module python attribute call name value name attribute main module run python my_module.py say import my_module value name name module small example explain short execute output suppose call script script execute output self explanatory call test script loop name execute answer java programmer learn python java file contain public class use class way call class file import call program run class stand alone testing purpose latter case class contain public static void main method python purpose serve define label main .py file import .py file code statement execute run python shell double clicked windows code statement execute write testing see name main check module import word code block execute code run mean import let see use simple code print name module run code python module name main python interpreter run particular module name global variable value main run script print see import file say file b execute file b name main file become false print see b answer explain functionality provide example usage help clear concept assume python file a.py b.py a.py import b.py run a.py file import b.py code execute first rest a.py code run code file b.py run b.py code code exclusive file b.py want file b.py file import b.py file run line code check main file b.py run code case a.py main file run code execute module python special attribute call name value name attribute set main module execute main program run python foo.py value name set name module call answer question way actual mechanic simple essential fact pure python module create variable name set string main importing module side effect change name variable base filename extension people write name main test module import common code run import occur test code time use code command line front end web server front end idea person run module want action happen person import module want direct access function class variable see answer people seem able talk topic simple thing master python tutorial cover minute worth read let answer drown overexplaine create file a.py name equal main file run show main file create file b.py directory run print name file import show different behavior file use trick python file execute create many special variable name variable name hold name file answer question mean name file execute running source file module run code prove simple example create python file foo.py foo.py type second.py type addition print(__name print main file run main source print foo default value name variable name file default mean change go foo.py file name name run file example output check special variable name simple example file1.py create file2.py execute file2.py output python main function start point program program run python interpreter run code main function execute run python program run script show code function declare call function if__name__== main use output equal python if__name__== main allow run python file reusable module stand program python interpreter read source file execute code find python run source file main program set special variable name value main execute main function read statement check name equal main suppose write function class web scrape wikipedia course good example want use function program rewrite import end file put name main import module code execute start end reach condition run func func2 wikipedia scrape global scope python name define main current program import module define variable name space current program current program name main name main mean run python file python foo.py assign special variable name main importing file import foo assign name foo run function import code condition return false inside import code return true code run name main prevent run unwanted code import file example test1.py name main test2.py import test1.py run test2.py print unwanted code hello test1.py run course call test1.hello test2.py run print add name main test1.py put test2.py run test2.py print name main prevent run unwanted code hello test2.py import test1.py addition test1.py name main print run test1.py entry point run file main function programming language execute module source file condition check module call call source file mean import call execute module name set main code block execute simple answer code write name = main execute import file
ternary conditional operator python add version expression syntax first condition evaluate b evaluate return base boolean value condition condition evaluate true evaluated return b ignore b evaluate return ignore allow short circuit condition true evaluate b evaluate condition false b evaluate evaluated example note conditional expression statement mean use statement pass assignment augment assignment conditional expression = walrus operator allow simple assignment value expression compatible syntax write code become difficult understand expression part mandatory use conditional expression assign variable example return value think conditional expression switch value use value situation thing result condition meet use expression compute value need different depend condition use normal statement keep mind frown pythonista several reason trouble remember order remember read say example = b read great official documentation index tuple test need return true false safe implement use build bool assure boolean value version trick give wrong result false boolean value.1 benefit evaluate expression leave clear opinion equivalent c ternary operator expression condition expression documentation conditional expression call ternary operator low priority python operation expression c evaluate condition c c true x evaluate value return evaluate value return see pep detail conditional expression new version operator conditional expression python add part python enhancement proposal form differ common operator equivalent example syntax use compatible version operand evaluate way index tuple consistent conditional operator language construct dictionary reliable simple method use operator work false possible workaround make list tuple follow work dictionary use ternary conditional take advantage get(key default example source python wikipedia solution short circuit behaviour falsevalue truevalue evaluate regardless condition suboptimal buggy truevalue falsevalue method side effect solution execution delay winner know introduce inconsistency callable non callable object addition solve case use property story choose mention solution trade short circuit feature use python imho problem prone truevalue evaluate false error try show important difference ternary operator couple programming language python new specific syntax old python ternary operator implement possible simulate potential problem cond evaluate true evaluate false on_false return want behavior method use wrap use way compatible python version find lead problem expect result normal ternary operator grammar file part interest ternary conditional operation form expression3 evaluate evaluate expression2 false boolean context recursive definition chain consider bad style note follow people learn list comprehension generator expression find difficult lesson learn follow work python expect third expression raise syntaxerror invalid syntax incomplete piece logic user expect op false condition intend use expression2 filter note follow legal python expression2 work filter list comprehension ternary conditional operator find painful write follow expression1 evaluate twice usage limit redundancy local variable common performant pythonic idiom case use shortcutte behavior equivalent semantic note style guide limit usage ground clarity pack lot mean little syntax alternative python conditional expression follow follow nice extension short alternative remain work issubclass(bool int careful alternative work call exactly parameter similar alternative exist viable rare case depend context make sense thank radek rojík comment answer ternary operator python many case expression use boolean evaluate condition use short circuit evaluation big pro short circuit evaluation possibility chain expression work function different detail ps course short circuit evaluation ternary operator ternary use case short circuit well readability chain simulate python ternary operator example output memorize pyramid trouble remember ternary conditional operator allow testing condition single line replace multiline make code compact on_true expression approach write tip answer need repeat obvious hundredth time use liner shortcut construct become many frown unpythonic ruby find natural express bit appeal large block code example print odd number odd number result condition true execute exp_2 execute note none false emptylist emptystring evaluate false datum evaluate true condition condition become true evaluate expression_2 result false statement expression exp evaluate evaluate need evaluate expression compiler work language expression exp evaluate bother evaluate expression exp result compiler optimization method case second expression exp2 evaluate true exp1 true exp1 false expression exp1 evaluate false equivalent writing exp1 use evaluate expression exp2 branch use use expression_1 truth value false none emptylist emptystre expression_1 become false expression_2 evaluated presence exp_1 exp_2 case want make work case exp_2 truth value vinko vrsalovic answer good enough thing note conditional expression statement mean use assignment statement pass statement conditional expression walrus operator introduce python change give = b define give define b give c define b ugly assignment do conditional expression python use normal statement case many programming language derive follow syntax ternary conditional operator first python benevolent dictator life mean guido van rossum course reject non pythonic style understand people use c language colon sign many use python approve python receive shortcut conditional expression use evaluate condition return true expression1 evaluate give result expression2 evaluate due lazy evaluation mechanic expression execute example condition evaluate leave right ternary operator chain series follow previous python ternary operator syntax example code demonstrate answer talk python ternary operator like complement mention scenario ternary operator use well idiom scenario use default value suppose want use option_value default value set set falsy value case well solution write syntax ternary operator python on_true expression on_false use syntax rewrite code use python ternary operator clear short note expression type expression include function call return value evaluate true false python ternary form assignment short form people aware common need assign variable value depend condition long form assignment ternary form succinct way see last example python use alternative assignment work li1 none interpreter treat false logic expression interpreter move evaluate second expression none empty list get assign a. work empty list instance want assign list item know assignment encounter work string iterable assign string empty like c ternary syntax python take step understand say good stylistic choice rely mechanic apparent developer disagree viewpoint python syntax rich language lot idiomatic trick apparent dabbler learn understand mechanic underlie system appreciate pythonic way thing exist different way ternary condition version write multiple way simplest use condition print method use equivalent way statement possible print example write different c syntax programming language condition value_if_true value_if_false python go value_if_true condition value_if_false example even_or_odd odd neat way chain multiple operator find default python syntax val cond cumbersome evaluate side b syntax way clear
call external command python type shell command prompt use subprocess module standard library advantage os.system flexible get stdout real status code well error handling documentation os.system recommend use subprocess subprocess module provide powerful facility spawn new process retrieve result use module preferable use function see replace old function subprocess module section subprocess documentation helpful recipe python early use summary way call external program include advantage disadvantage os.system pass command argument system shell nice run multiple command manner set pipe input output redirection example convenient handle escape shell character space et cetera hand let run command shell command external program os.popen thing os.system give file object use access standard input output process variant popen handle pass string command pass shell pass list need worry escape example subprocess.popen intend replacement os.popen downside complicated virtue comprehensive example say nice option unified class different popen function see documentation popen class take argument wait command complete give return code example python similar flexible return completedprocess object command finish execute os.exec os.spawn similar c language counterpart recommend use subprocess module use aware method pass final command execute shell string responsible escape serious security implication part string pass trust example user enter part stre unsure use method constant give hint implication consider code imagine user enter mama love rm erase whole filesystem typical implementation free want stdout datum pipe fact omit parameter behave os.system hint detach child process call start child process background suppose want start long task cgi script child process live cgi script execution process classical example subprocess module documentation idea want wait line call subprocess longtask.py finish clear happen line code example target platform freebsd development window face problem window first window window xp parent process finish longtask.py finish work want cgi script problem specific python php community problem solution pass detached_process process creation flag underlie createprocess function windows api instal pywin32 import flag win32process module define upd @eryksun comment note correct flag create_new_console 0x00000010 freebsd problem parent process finish finishes child process want cgi script experiment show problem seem share sys.stdout work solution follow check code platform know reason behaviour freebsd know share idea google start background process python shed light note dangerous command clean leave google relevant documentation os sys module bunch function exec spawn similar thing recommend use subprocess module os.system shell escape safe want return result command use os.popen deprecate version favor subprocess module answer cover lot different library allow call external command python library give description show example call external command command use example ls -l list file want find library list link documentation help make decision library use subprocess allow call external command connect input output error pipe stdin stdout subprocess default choice running command module use operating system dependent functionality use call external command os.system os.popen note subprocess.popen run shell simple alternative people know use subprocess interface let call program function useful want run command multiple time plumbum library script python program call program function sh plumbum useful want run pipeline shell pexpect let spawn child application control find pattern output well alternative subprocess command expect tty unix fabric python library allow execute local remote shell command fabric simple alternative run command secure shell ssh envoy know subprocess human use convenience wrapper subprocess module command contain wrapper function os.popen remove python subprocess well alternative use subprocess module python recommend standard way complicated task pipe output input tedious construct write note python version use python subprocess.call work similar way protip shlex.split help parse command run call subprocess function case want provide form list mind external dependency use plumbum good subprocess wrapper cross platform work window unix system install pip install plumbum popular library sh sh drop window support awesome used install pip install use fabric thing seem good tool sh python subprocess interface look example check pexpect python library allow interactive control external program command ssh ftp telnet type need output command call use subprocess.check_output python note shell parameter shell true specify command execute shell useful use python enhance control flow offer system shell want convenient access shell feature shell pipe filename wildcard environment variable expansion expansion user home directory note python offer implementation many shell feature particular glob fnmatch os.path.expandvar shutil recommend approach python code need maintain compatibility early python version consistent offer similar ease use envoy piping straightforward see question example documentation run process raise fail run capture output recommend try envoy wrapper subprocess turn aim replace old module function envoy subprocess human example usage readme pipe stuff run command code need simple use subprocess.run return completedprocess object run want list parse shell argument type shell separate space space quote use specialized function split split type shell python documentation recommend subprocess.run recommend approach invoke subprocesse use run function use case handle advanced use case underlie popen interface use example simple possible usage ask run wait command finish return completedprocess object raise timeoutexpire give argument calledprocesserror fail pass check true infer example stdout pipe stdout default inspect return object see command give returncode want capture output pass appropriate stderr respective attribute return byte move provide command string question suggest provide string build build string potential security issue well assume trust input note args pass actual signature source show help(run popenargs kwargs give popen constructor input string bytes unicode specify encode universal_newline true pipe subprocess stdin documentation describe check true timeout argument pass popen.communicate timeout expire child process kill wait timeoutexpire exception raise child process terminate check true process exit non exit code calledprocesserror exception raise attribute exception hold argument exit code stdout capture example check well come expand signature give documentation note indicate args list pass remain argument keyword argument use popen struggle find use case base argument direct usage popen give access method include poll send_signal terminate wait popen signature give source think precise encapsulation information oppose help(popen informative popen documentation execute child program new process posix class use behavior execute child program windows class use windows createprocess function argument popen follow understand remain documentation popen leave exercise reader use subprocess simple command python release june 27th https://docs.python.org/3/whatsnew/3.7.html achieve desire result powerful simple way answer intend show essential summary various option short manner depth answer see one big advantage os.system simplicity subprocess easy use python note exact answer question run command shell possible remove shell overhead run command require list pass program argument list include \"-escape argument contain space follow code speak result.stdout normal program output exclude error read result.stderr capture_output true turn capture result.stderr result.stdout none available python text true convenience argument add python convert receive binary datum python string work want check program succeed returncode = throw exception convenient function python convenient argument check thing want program output stdout error accomplish run none result.stdout contain shell false expect list argument split argument string use shlex chance start use python come question let look common problem filenotfounderror errno file directory run subprocess shell true use list set shell true typeerror nonetype check set true typeerror byte object require receive byte result program want work normal string set text true subprocess.calledprocesserror command return non exit status command run disable returncode checking check actual program validity typeerror init get unexpected keyword argument use version python old update recent one available answer stack overflow post show old alternative solution os.system ok date secure try subprocess subprocess call sh secure os.system get information plumbum use os module provide portable way use operating system dependent functionality os function documentation simple difference mention subprocess.popen execute command subprocess case need execute file need communicate program try subprocess execution successful communicate normal run terminal note kwrite behave different application try firefox result try os.system("kwrite program flow freeze user close kwrite overcome try os.system(konsole kwrite time program continue flow kwrite become subprocess console run kwrite subprocess system monitor appear leftmost edge tree os.system allow store result want store result list subprocess.call work subprocess.check_call convenient want test return value throw exception error use subprocess shlex handle escape quote string write library shell.py wrapper popen shlex support piping command chain command easy python thing windows import subprocess module run external command call subprocess.popen subprocess.popen().communicate subprocess.popen().wait output linux case call external command execute keep run python script terminate use simple queue task spooler command example task spooler note task spooler ts set number concurrent process run slot -s number slot instal require admin privilege download compile source simple make add path do invoke python task execution tool library provide clean high level api run shell command use popen check procedure status check subprocess.popen simple way use os module use subprocess module want result store variable try fetch network openstack neutron output nova net list output print(networkid simple way run command get result case case short snippet code go need clean simple subprocess.check_call run command argument wait command complete split string cmd use shell syntax rest case work specific command problem command line interpreter operate system choose default suitable type program find adequate system executable path example use redirection operator unix system state zen python explicit well implicit use python function look use follow function external command handy long running process method tail process output run return output raise exception process fail come process do use poll method process invoke cent view good practice deal external command return value execute method execute method add discussion include use python console call external command ipython ipython prompt call shell command prefix combine python code shell assign output shell script python variable instance write small library help use case https://pypi.org/project/citizenshell/ instal use use follow separate standard output standard error extract exit code follow cool thing wait underlie shell exit start process output print line available thank wait false example find https://github.com/meuter/citizenshell call external command python simple way call external command use os.system function return exit value command drawback get stdout stderr call external command python background subprocess.popen provide flexibility run external command use os.system start command background wait finish get stdout stderr call run external command python background stop time start long running process background use subprocess.popen kill sometime task do lot different way run external command python side drawback colleague write python system administration tool need run lot external command want block run time update second different way handle return code error want parse output provide new input expect kind style redirect standard input standard output standard error run different tty use gnu screen write lot wrapper external command python module write handle want flexible extend https://github.com/hpcugent/vsc-base/blob/master/lib/vsc/utils/run.py work stand require tool get lot specialise functionality year drop replacement give lot information internal python run command work idea handle certain situation use subprocess.call use give nice output easy work example linux create current directory note work equivalent code use good practice use subprocess os .run favor know subprocess note python documentation available download download pdf pack mention nice overview os module tutorial.pdf page authoritative resource python coder use subprocess python + follow trick linux mention documentation pipe value byte sequence show decode consider later version python text true encoding='utf-8 add kwargs output abovementione code research follow code work print standard output standard error real time call external command return print command output python subprocess check_output good run command argument return output byte string need call shell command python notebook jupyter zeppelin databricks google cloud datalab use prefix example write python shell script ipython instal system use bang prefix run shell command ipython update python add subprocess.run easy use subprocess.popen recommend python recommend use run function subprocess module return completedprocess object obtain output return code use user input command use use shell true spawn shell use pipe shell thing sh('ps |||| grep python handy running hardcode command process output universal_line make sure output return stre binary cwd = getcwd make sure command run work directory interpreter handy git command work git branch name example recipe safe user input documentation security consideration popen function implementation call system shell mean character include shell metacharacter pass child process shell invoke shell true application responsibility ensure whitespace metacharacter quote avoid shell injection vulnerability use shell true function use escape whitespace shell metacharacter string use construct shell command use good keep little paranoid use user inputs shell command option use hardcoded command take generic output filter user input use shell false make sure process want execute execute get file directory error performance impact shell true test seem slow shell false default try online try use os.system run external command example example script import os try run command list os.system command fail print error run command script stop due error simple use popen function subprocess python module simple way run linux command popen.communicate function give command output example many way call command and.exe need parameter cmd call use and.exe show screen use python script call os.popen(cmd hard join cmd space os.popen easy safe way execute command execute command run command line addition able capture output command use os.popen().read example list file current directory recommend follow method run help get standard output standard error exit status dictionary caller read dictionary return run method know actual state process python try online number way call external command python function module good helper function make recommend thing subprocess module call function start external process pass command line argument wait finish finish continue execute argument call function pass list first argument list command form executable file subsequent argument list want pass call process command line window aware need argument put quotation mark space backslash complicated rule avoid whole lot python use subprocess module list item know distinct python quote end list number optional parameter shell set shell equal true command run type command prompt give access functionality piping redirect file call multiple command thing thing script rely process succeed want check result result check check call helper function call function take argument take list pass extra argument go wait function complete exit code function exception python script want tight control popen constructor subprocess module take argument incall check_call function return object represent run process wait running process finish go throw exception give object let thing wait finish let communicate redirect standard input standard output want display output lot lot answer none fulfil need create use pass command string easy need split function split need command work shell work function test command shell first cmd bash use timeout timeout example specify shell true useless case function prefer choose shell want need use simple new method subprocess.run write wrapper handle error redirect output stuff call sultan recent ish package mean purpose provide nicety manage user privilege add helpful error message run command use popen subprocess module first command object create argument run example snippet gunicorm command object form argument command object use popen instantiate process process terminate base signal use code line wait completion command execution use python
check directory file write exist create directory use python python ≥ use pathlib.path.mkdir old version python see answer good quality small flaw give take try os.path.exist consider creation note comment ' race condition directory create os.path.exist call fail oserror blanket catch oserror continue foolproof ignore failure create directory due factor insufficient permission full disk option trap oserror examine embed error code see cross platform way get information python oserror second os.path.exist suppose create directory first check remove second one fool depend application danger concurrent operation less danger pose factor file permission developer know particular application develop expected environment choose implementation modern version python improve code bit expose fileexistserror allow keyword argument call exist_ok + pathlib.path.mkdir use create directory raise exception directory need want parent create skip parent argument use pathlib install current pathlib backport name pathlib2 install old unmaintained backport name pathlib next refer python section use use python come pathlib miss useful exist_ok option backport intend offer new superior implementation mkdir include miss option use os os.makedir use create directory raise exception directory exist optional exist_ok argument use python default value false argument exist python need manual exception handle python use pathlib install current pathlib backport name pathlib2 install old unmaintained backport name pathlib next refer python section use use os naive solution use follow os.makedirs solution reverse order operation prevent common race condition duplicate attempt create directory disambiguate file directory note capture exception use errno limit usefulness oserror errno file exist raise file directory reliable check directory exist mkpath create nest directory directory exist work python bug severe limitation alternative work python process give path word create directory delete directory python use mkpath recreate directory mkpath use invalid cache info create directory make directory contrast os.makedir rely cache limitation okay application regard directory mode refer documentation care use try right error code errno module get rid race condition cross platform word try create directory exist ignore error hand error report example create dir remove permission get oserror raise errno.eacce permission deny error start python pathlib.path.mkdir exist_ok flag create directory raise exception directory exist os.makedir get exist_ok flag start python os.makedirs(path exist_ok true note post answer none answer mention exist_ok recommend use test os.path.exist foolish user input go end directory name pass argument test os.path.exist check make sure complete path exist handle fact directory exist catch oserror exist_ok false default oserror raise target directory exist try os.path.exist function give particular file certain path pull directory file path make sure directory attempt open file reading comment code want avoid overwrite builtin function dir filepath fullfilepath well semantic name filename write end goal open file state writing approach goal base code open file reading make directory file expect able attempt open file directory file get ioerror associate error number errno.enoent point correct error number platform catch want example want case face race condition note write need open mode append python good practice use context manager opening file say several python process attempt put data directory contention creation directory case good wrap makedirs call try block put follow foolproof say foolproof possiblity fail create directory process create period check directory exist create necessary direct answer assume simple situation expect user process mess directory make directory subject race condition check path exist make well approach sidestep resource contention issue use temporary directory tempfile essential doc new path object lot method want use path mkdir context track weekly rep script relevant part code script allow avoid hit stack overflow day datum first relevant import deal join path part ensure directory exist exist_ok argument show python relevant part documentation exist_ok true fileexistserror exception ignore behavior posix mkdir command last path component exist non directory file little script case ' m subject race condition process expect directory contain file try remove directory path object coerce str apis expect str path use pandas update accept instance abstract base class python use brand new pathlib module good way python liner solution use ipython.utils.path.ensure_dir_exist documentation ensure directory exist n’t exist try create protect race condition process ipython extension package part standard library python3 os.makedirs support set exist_ok default set false mean oserror raise target directory exist set exist_ok true oserror directory exist ignore directory create python2 os.makedir support set exist_ok use approach heikki toivonen answer safe way create exist exist relevant python documentation suggest use eafp code style easy ask forgiveness permission mean code well alternative documentation suggest race condition discuss question addition other mention performance advantage query argument place favour second code case developer know environment application running-- advocate special case program set private environment instance program case bad practice lead useless debug example fact set permission directory leave impression permission set purpose parent directory mounted permission general program work programmer expect specific environment find q puzzled failure error get work directory python work python v.3.5 anaconda virtual environment arch linux x86_64 system consider directory structure experiment note provide clarification conclusion opinion method robust create nested directory https://docs.python.org/3/library/os.html#os.makedirs use mkpath note create ancestor directory work python case write file variable path use file path make sure parent directory create work path_to_file file.ext directory see pathlib.purepath.parent pathlib.path.mkdir use subprocess module run machine support command mkdir option work python python trick system situation portability matter ex use docker solution clean line add logic check directory exist safe run side effect need error handling set full path create directory work work see heikki toivonen b b answer think variation use os.path.exist python script use check directory exist create exist delete exist desire prompt user input directory modify use command check create dir call function entry point program project use consider mean directory path exist directory way make sure folder file exist answer question guess real intention create file parent directory give content command fastcore extension pathlib path.mk_write(data see fastcore documentation
access index iterate sequence loop desire output use build function enumerate non pythonic index range(len(xs xs[i manage additional state variable check pep use enumerate get index element iterate note python index start get want count ask pythonic equivalent follow algorithm programmer low level language use language loop find python python enumerate function reduce visual clutter hiding accounting index encapsulate iterable iterable enumerate object yield item tuple index item original iterable provide look code sample canonical example difference code idiomatic python code idiomatic code sophisticated complicated python write way intend use idiomatic code expect designer language mean code readable efficient need index go need count iteration desirable start final number count count seem intend ask oppose index say want break example say list item want iterate index pass iterable enumerate create enumerate object pull first item iterable get loop next function see get tuple first index first item use refer sequence unpack extract element tuple inspect index find refer first index item refer first item simple start access index array element use loop result result result result result result result result result norm python several way example assume lst = safe option opinion chance go infinite recursion eliminate item index hold variable need write code access item explain way explain apply situation example use itertools.chain handle nest loop well example old fashioned way list comprehension fast way access index list loop python use enumerate method small medium huge list see different approach use iterate list access index value performance metric suppose useful code sample see performance metric method result use enumerate method fast method iteration index need add useful link difference range xrange function python fast loop use enumerate loop use xrange python range(len(list enumerate(list use enumerate embed expression string literal obtain solution simple way first index programming language start count forget come index bound exception need loop variable counting keep mind write loop stop number maximum get value index use accord discussion object list index loop counter iteration current idiom loop index make use build range function loop element index achieve old idiom use new zip build function pep loop counter iteration code use code need reset index value end loop iterate num get length l len(num question write access loop index case index list run know want index item item list want number start easy first clarify enumerate function return index corresponding item item list output notice index run index common modern programming language include python c. want loop span part list use standard python syntax part list example loop second item list include last item use note output index run bring start switch enumerate offset index add number index loop output duplicate value list try output use index method highlight comment method n’t work duplicate int method work value int want get index value int list tuple use method select answer question list comprehension make less code simple answer use loop output print tuple index value list comprehension use loop output use variable count count number element list addition excellent answer solution problem work pandas series object many case pandas series custom unique index example unique identifi string access enumerate function output see enumerate give desire result output access index pandas series loop use .item output liner lover explaination point take thank keep prayer use range(len(some_list lookup index use python build enumerate function allow loop list retrieve index value item list achieve follow code len(xs)+1 expect output start need start range add total length estimate python start indexing number default loop variable set initialiser parameter format string item number loop access listos variable list access list format item price output serve purpose
list list flatten get list list come nest list comprehension problem solve fix comprehension see python list comprehension compress list list popular solution flatten level nest list flatten irregular nest list list solution flatten nest structure general give list list l mean fast shortcut post l list flatten correspond function evidence use timeit module standard library explanation shortcut base include imply use sum necessity l sublist intermediate result list step new intermediate result list object allocate item previous intermediate result copy new one add end simplicity actual loss generality say l sublist item first item copy time second item time total number copy time sum x l exclude l**2)/2 list comprehension generate list copy item original place residence result list use itertools.chain use require unpack list operator approach readable item sublist l item sublist appear fast note author inefficient fun monoid awesome sum sum element iterable xss use second argument initial value sum default initial value list sum nest list get result sum([[1,3],[2,4 equal note work list list list list list need solution test suggest solution perfplot pet project mine wrapper timeit find fast solution many small list long list concatenate operator.iadd simple acceptable variant number sublist large perform bad suggestion code reproduce plot use functools.reduce add accumulate list xs next list ys output fast way use operator.concat output general approach apply number string nest list mixed container flatten simple complicated container see demo code note demo reference flatten data structure nest use iteration_utilities.deepflatten1 generator need cast result list flatten level item iterable use thin wrapper itertools.chain.from_iterable add timing base nico schlömer answer include function present answer log log plot accommodate huge range value span qualitative reasoning low well result show iterable contain inner iterable sum long iterable nest comprehension reasonable performance notice nico schlömer disclaimer ' m author library follow seem simple consider instal more_itertool package ship implementation flatten source itertool recipe mention doc flatten require list list see flatten irregular input version flatten complicate nest iterable source contribute abarnet reason function work extend extend array place return return lambda use note extend efficient list matplotlib.cbook.flatten work nest list nest example result 18x accord list list level use sum(list use library extend advantage method tuple number exist add mapping function element map list clear explanation drawback term memory approach create list object avoid use numpy flat work sublist identical dimension use list extend method show fast performance output several answer recursive appending scheme none make use try make solution robust pythonic usage generator want enclose iterable builder list tuple use loop advantage solution iterable flatten string decompose sequences single character want behavior use follow version filter flatten iterable string byte willing give tiny amount speed clean look use numpy.concatenate().tolist find documentation numpy.concatenate numpy.ravel note apply python uses third party package stable use sys.version case obj = solution good include list comprehension consider complex case several problem remedy follow check sub element iterable iterable abc itertool want ensure element string efficient way think put liner liner version work arbitrary hierarchy nest list exploit language feature python recursion output work depth first manner recursion go find non list element extend local variable flist roll parent flist return extended parent flist list comprehension root flat list return create several local list return use extend parent list think create gloabl flist output sure time efficiency want solution deal multiple nest example recursive big level recursion get recursion error come test unusual approach work hetero- homogeneous list integer non recursive function flatten list list depth liner see answer guess long list miss pattern match method efficient easy read least spoil functional programming second version consider list list list nest want unnest keep distinct list element use well list contain multiple list recursive solution work hope correct output numpy array produce accept parameter detail parameter available add great previous answer recursive flatten function flatten nest list give container object throw item work depth nest lazy iterator yield item request way exclude type want flatten str idea object pass iter ready yield item iterable generator expression item argue write generic op ask right feel help test case output suggest use generator yield statement yield example simple way python library function work multidimensional list use recursion achieve combination list list flatten use library consider list integer create little function flatten pip pip install flatten protect object flatten
difference function decorate @staticmethod decorate @classmethod bit example code help notice difference call signature foo usual way object instance call method object instance pass first argument classmethods class object instance pass first argument self call class_foo use class fact define classmethod intend call class class instance a.foo(1 raise typeerror a.class_foo(1 work fine use people find class method create inheritable alternative constructor staticmethod self object instance cls class pass first argument behave plain function call instance class staticmethod use group function logical connection class class foo function call a.foo get function apply version function object instance bind first argument function foo expect argument a.foo expect argument bind foo mean term bind bind class_foo class bind class_foo staticmethod method a.static_foo return good ole function argument bind static_foo expect argument a.static_foo expect argument course thing happen call static_foo class staticmethod method know class instance call get argument pass implicit first argument useless python use module function staticmethod classmethod hand method pass class call class instance call first argument useful want method factory class get actual class call first argument instantiate right class subclass involve observe instance dict.fromkey classmethod return instance subclass call subclass @classmethod make method first argument class call class instance @staticmethod implicit argument decide use @staticmethod @classmethod look method method access variable method class use @classmethod hand method touch part class use @staticmethod official python doc @classmethod class method receive class implicit first argument instance method receive instance declare class method use idiom @classmethod form function decorator see description function definition function definition detail call class c.f instance c().f instance ignore class class method call derive class derive class object pass imply first argument class method different c++ java static method see staticmethod section @staticmethod static method receive implicit first argument declare static method use idiom @staticmethod form function decorator see description function definition function definition detail call class c.f instance c().f instance ignore class static method python similar find c++ advanced concept see classmethod section short article question @staticmethod function function define class callable instantiate class first definition immutable inheritance @classmethod function callable instantiate class definition follow sub class parent class inheritance first argument @classmethod function cls class see python code pseudocode demonstrate signature various method type provide docstre explain explain a_normal_instance_method call instance method instance method use use partial function oppose total function define value view source code use first argument predefine instance object give attribute instance object bind call instance object access various attribute instance example instance string use instance method join string join iterable function instance addition function iterable list b c instance method bind dotted lookup use late example bind str.join method instance use function first argument bind way work partial function instance static method take instance argument similar module level function module level function live module import place use attach object follow object import inheritance example static method str.maketran move string module python make translation table suitable consumption str.translate seem silly use instance string demonstrate import function string module clumsy nice able call class str.maketran python import function useful string module class method similar instance method take implicit first argument take instance take class use alternative constructor well semantic usage support inheritance canonical example builtin classmethod dict.fromkey use alternative constructor dict suited know key want default value subclass dict use constructor create instance subclass see pandas source code similar example alternative constructor see official python documentation classmethod staticmethod start learn programming language c++ java python question bother lot understand simple usage class method python java c++ constructor overloading achieve use classmethod follow example explain let consider person class take argument first_name last_name create instance person requirement come need create class use single name python give error try create object instance achieve thing use @classmethod mention static method simple bind instance class call use class name let say example need validation first_name exceed character call use class name first argument differ detail standard method object orient language object method call give extra argument self first argument method call argument self pass object similar appear eg java c++ python show first argument call self standard convention keep method decorate provide argument self class self method decorate method give automatic argument give parameter call think well question use @classmethod @staticmethod @classmethod allow easy access private member associate class definition great way singleton factory class control number instance create object exist @staticmethod provide marginal performance gain see productive use static method class achieve standalone function class static method benefit static method convenient import module level function method import class method create classmethod build function @decorator add python use python use classmethod staticmethod function example want create factory method function return instance different implementation class depend argument get observe good example use classmethod static method static method belong class use class cluster classmethod need information class instance object benefit make method classmethod subclass decide change implementation generic handle type cluster checking name class let tell similarity method decorate @classmethod @staticmethod first similarity call class instance class sense class method difference classmethod receive class first argument staticmethod static method sense bind class hanging relate functionality @staticmethod disable default function method descriptor classmethod wrap function container callable pass reference own class first argument matter fact classmethod runtime make possible access own class recommend use metaclass put class method metaclass definitive guide use static class abstract method python good link topic summary follow @staticmethod function function define class callable instantiate class first definition immutable inheritance @classmethod function callable instantiate class definition follow sub class parent class inheritance overridden subclass first argument @classmethod function cls class consideration respect staticmethod classmethod come inheritance say follow class want override bar child class work note bar implementation child class foo2 take advantage specific class example say foo2 method call magic want use foo2 implementation bar workaround call foo2.magic bar repeat name foo2 change remember update bar method slight violation open close principle decision make foo impact ability refactor common code derive class ie open extension bar classmethod give foo2 magic historical note guido van rossum python creator refer staticmethod accident https://mail.python.org/pipermail/python-ideas/2012-may/014969.html know limited static method accident python day invent new style class descriptor mean implement class method understand implement static method late remove provide class method staticmethod mistake try java class method release find need classmethod rid staticmethod try explain basic difference use example call static classmethod initialize static method call self method call static classmethod static method belong class use object class method bind object class python come several build decorator big let note function class call instance class initialize class @classmethod way call function instance class class first argument @staticmethod way put function class belong indicate require access class need use self function definition let consider follow class let see work see use case method bonus read @property decorator difference occur inheritance suppose classes-- parent child want use @staticmethod print_name method write twice name class write print line @classmethod require write print_name method instance method modify object instance state modify class state class method modify object instance state modify class state static method modify object instance state modify class state output instance method access object instance right instance class object class method access class object class method care object exist call class method static method object instance go work make difference call static method go work go know method want call static method use utility task class method use factory method factory method return class object different use case short example well understanding @classmethod use create share global access instance create class update record multiple user particulary find use ful create singleton @static method class instance associate readability use static method contribution demonstrate difference @classmethod @staticmethod instance method include instance call @staticmethod call @staticmethod instance make private pythonic get private method demonstrate concept want consider difference change python2 python3 python2 python3 use @staticmethod method call class become optional python3 want call class instance need use @staticmethod decorator case cover unutbus answer class method receive class implicit first argument instance method receive instance method bind class object access state class take class parameter point class object instance modify class state apply instance class example modify class variable applicable instance hand static method receive implicit first argument compare class method instance method n’t access modify class state belong class design point view correct way term functionality bind runtime class guideline use static method utility use class method example factory define singleton use instance method model state behavior instance hope clear class method name suggest use make change class object make change class modify class attributes(not object attribute update class reason class method denote cls first argument static method hand use perform functionality bind class read write class variable static method take class argument use class perform functionality relate purpose class think give python version staticmethod classmethod help understand difference language level refer descriptor howto guide non datum descriptor understand familiar descriptor analyze @staticmethod provide different insight normal method class implicit dynamic method take instance first argument contrast staticmethod take instance first argument call static staticmethod normal function class definition group class order stand apply scroll find important practical difference occur subclasse mind hijack @unutbu example class_foo method know class call way determine call b note mean use method staticmethod reference class mean subclass staticmethod reference parent class tldr staticmethod function bind class instance classmethod inheritable staticmethod detail see excellent answer other let start example code use understand concept class method class method accept class implicit argument argument specify definition ’s important understand class method access object instance instance method class method use alter state instantiate object capable change class state share instance class class method useful need access class example want create factory method method create instance class word class method serve alternative constructor example code instance employee construct provide argument first_name salary let assume chance name employee provide single field last name separate whitespace case use class method call employee_from_full_name accept argument total first class implicit argument mean n’t provide call method python note possible call employee_from_full_name object instance context n’t make lot sense reason want create class method change state class example class variable no_of_employees keep track number employee work company method call time new instance employee create update count static method hand static method instance self class cls pass implicit argument mean method capable access class instance argue static method useful context class place helper module add member class object orient programming important structure class logical chunk static method useful need add method class belong class example static method name get_employee_legal_obligations_txt return string contain legal obligation single employee company function interact class instance place different helper module relevant class place employee class static method access class instance class reference staticmethod access attibute object class parent class inheritance hierarchy call class create object classmethod access attribute object access attribute class parent class inheritance hierarchy call class create object call object normal method access self.<attribute(s access self.__class__.<attribute(s think class b=2 create object set b=4 staticmethod access previous classmethod access cls.b normal method access self.b self.__class__.b follow kiss style keep simple stupid use staticmethod classmethod use class instantiate access object attribute self.attribute(s language oop implement way think bad idea definition static method class method documentation use static method use class method static method static method c use initialize value class need outside work fine class method use inheritance override ride method use cls instance tell want call method child parent class case want use method name different signature staticmethod(function method classmethod(function method add top previous answer follow official adhere standard give least amount privilege necessary need specific instance make class method need specific class make static method second thing consider communicate type method make static method helper function mean use outside class class function call instantiation mean used class ve static method instance method mean use instance help communicate pattern code use example reason method bar static make class method communicate used class oppose helper function mean use remember official personal preference call class variable instance class static method cls class name instance variable call object class name need cls 1st argument @classmethod call name cls use convention name cls work call object class name call class variable instance class static method class name instance variable need self cls detail explain instance method answer instance method python example @classmethod call class variable instance class static method cls class name @classmethod call object class name show output @classmethod call instance variable cls class name @classmethod try call instance variable cls class name show error occur attributeerror type object person attribute name @classmethod cls @classmethod call error occur show typeerror test1 take positional argument give name cls use convention name cls work show output example @staticmethod call object class name show output @staticmethod call class variable instance class static method class name instance variable show output @staticmethod try call instance variable show error occur attributeerror type object person attribute name @staticmethod need self cls @staticmethod self cls pass argument show output pass argument show error occur typeerror test1 miss require positional argument self typeerror test1 miss require positional argument cls quick hack ofotherwise identical method ipython reveal @staticmethod yield marginal performance gain nanosecond seem serve function performance gain wipe additional work processing method staticmethod compilation happen code execution run script sake code readability avoid @staticmethod method use load work nanosecond count
need good explanation reference python slicing syntax step value use key point remember stop value represent first value select slice difference stop start number element select step default feature start stop negative number mean count end array begin step negative number python kind programmer few item ask example ask a[:-2 contain element get empty list error prefer error aware happen slice object represent slice operation equivalent slice object behave depend number argument range slice(start stop step support skip specify give argument use none equivalent a[slice(start none equivalent a[slice(none none -base notation helpful simple slicing explicit use slice object simplifie programmatic generation slice python tutorial talk scroll bit get part slice ascii art diagram helpful remembering slice work way remember slice work think index point character leave edge first character number right edge last character string character index n. enumerate possibility allow grammar sequence x course high low)%stride end point low stride negative ordering change bit count extended slicing commas ellipsis use special datum structure numpy basic sequence support answer discuss slice assignment understand slice assignment helpful add concept ascii art heuristic slice n think start take n item list heuristic slice replace start apply previous heuristic get end list count first number chop item begin first rule slice assignment slice return list slice assignment require list iterable second rule slice assignment see portion list return slice indexing portion change slice assignment third rule slice assignment assign list iterable length index slice slice replace masse assign trickiest part use assignment empty slice use heuristic easy get head index empty slice see slice assignment empty slice make sense note change second number slice insert item stack assign empty slice position empty slice assignment logical extension position non empty slice assignment back little bit happen keep go procession counting slice beginning slicing do do start slice python get negative stride ask use negative number weird consequence do do rule fact compare indexing python slice error proof come handy lead strange behavior depend application hope text original answer useful many people want delete clarify difference slicing index short colon subscript notation subscriptable[subscriptarg make slice notation optional argument start stop step python slice fast way access part datum opinion intermediate python programmer aspect language necessary familiar begin let define term start begin index slice include element index stop default first index negative mean start item end stop end index slice include element index default length sequence slice include end step amount index increase default negative slice iterable reverse make positive negative number mean positive number straightforward negative number index python count end start stop step decrement index example documentation tutorial modify indicate item sequence index reference use slice notation sequence support include colon square bracket follow sequence implement getitem method sequence accord python data model slice notation work recall default start stop step access default leave argument slice notation get last element list sequence support string look see read part bracket 9th end end abbreviate -9 full notation substitute default step negative stop default -len(my_list none stop mean go end step take colon tell python give slice regular index idiomatic way make shallow copy list python clearing python get list.copy list.clear method default step argument empty none assign +1 pass negative integer list standard sliceable slice end begin negative slice change default start stop encourage user read source documentation source code slice object logic find determine step bind -1 mean slice way include begin upper bind length mean start end note semantic different user pass index python indicate last item step positive bind upper bound go include length sliced list need apply default start stop default start calculate upper bind step negative stop bind find useful separate form slice pass list.__getitem method square bracket new keep code readable other read code understand assign integer separate colon variable need use slice object second argument none require first argument interpret start argument stop argument pass slice object sequence interesting range take slice slice python list create new object memory important function aware itertools.islice want iterate slice create memory islice perfect caveat support negative argument start stop step issue need calculate index reverse iterable advance fact list slice make copy feature list slice advanced object pandas dataframe return view original copy couple thing obvious see slicing syntax easy way reverse sequence want reason second item reverse sequence python slicing python understand index assignment important say b say depend sign backward start end b exclude element bth index use indexing rule remember find element range range continue direction example choice b c allow overlap range traverse use rule b get list element touch traversal get empty list last thing b equal get empty list find great table http://wiki.python.org/moin/movingtopythonfromotherlanguage use bit realise simple description argument loop optional negative indexing need add length string negative index understand work find easy remember work figure specific start stop step combination instructive understand range begin start increment step reach stop simple thing remember negative step stop exclude end high low want slice opposite order clean reversal abcde'[1:-2][::-1 slice char leave right reverse see reverse sequence slicing first normalize negative index go sequence todo code bug go sequence think patch correct hard understand worry none detail remember omit start stop right thing give whole sequence normalize negative index allow start stop count end abcde'[1:-2 = = abcde'[1:3 bc range(1,-2 = = normalization think modulo length note add length abcde'[-53:42 whole string use index point element method think way describe help other get index first element want index first element want hope help model list python reference http://wiki.python.org/moin/movingtopythonfromotherlanguage teach slice newbie understand difference indexing slice wiki python amazing picture distinguish indexing slicing list element understand slice consider list set box place box alphabet indexing deal content box check content box check content multiple box replace content box place ball box replace ball time slice deal box pick first box place table pick box know position begin end box pick box last box box pick set box know begin end position call start stop position interesting thing replace multiple box place multiple box slice step pick box need pick example pick second box pick third box end value call step size represent gap successive pickups step size positive picking box begin end vice python figure miss parameter slice leave parameter python try figure check source code cpython find function call pyslice_getindicesex figure index slice give parameter logical equivalent code python function take python object optional parameter slice return start stop step slice length request slice intelligence present slice python build function call slice pass parameter check calculate miss parameter note post write blog intelligence python slice python slice notation notation extend numpy matrices multidimensional array example slice entire column use slice hold reference copy array element want make separate copy array use deepcopy use slice assignment remove element list extra info consider list trick reverse list make simple remember slice form work import thing start end step omit omit default value use possible variation note start end consider step>0 python return empty slice part explain core feature slice work work occasion pitfall watch part explain first thing confuse python learner index negative panic negative index mean count example make thing confuse step negative negative step mean iterate array end start end index include start index exclude result note step negative default value start len(s end equal s[::-1 contain s[0 example surprise slice raise indexerror index range index range python try set index len(s accord situation example let finish answer example explain discuss general rule write code lot hardcode index value lead readability maintenance mess example come code year look wonder thinking write solution show state code general build slice create slice object use slice allow example slice instance get information look s.start s.stop s.step attribute example previous answer discuss multi dimensional array slice possible use famous numpy package slicing apply multi dimensional array comma operate first dimension comma operate second dimension convert upper bind bind common sign ii- check step size positive negative value step size positive value bind bind empty string print example output run follow code return empty string ii step size negative value bind bind empty string print example output run follow code output empty string code first str2 bind bind dcb print str2 upper bind bind convert bind negative value index last element opinion understand memorize well python string slicing notation look follow way read let work follow string know create substre azstring use notation come programming language common sense compromise sit run several scenario quest memorization technique help remember help slice string attempt conclusion see boundary index surround string want extra see expression azstring[index1 index2 clear azstring[index_of_first_character index_after_the_last_character example visualization set index1 index2 value surround desire substre instance substre cdefgh use azstring[2:8 index leave side right size h remember set boundary boundary position place bracket wrap substre b e f g h j trick work time easy memorize think loop note negative value start end relative end list compute example given_index run script experiment sample get script use negative step notice answer shift brain seem happy accept lst[start end contain start item say natural assumption doubt creeps brain ask reassurance contain end element moment rely simple theorem pretty property tell lst[start end contain end item lst[end note theorem true n example check return true python basic form slicing follow l collection start inclusive index end exclusive index slicing start omit index slicing end omit final index redundant verbose negative integer useful offset relative end collection possible provide index bound slice keep mind result slice collection whole new collection addition use slice notation assignment length slice assignment need value assign slice keep collection shrink contain new value omit start end index make copy collection start end index omit perform assignment operation entire content collection replace copy reference basic slicing possible apply follow notation l collection start inclusive index end exclusive index step stride use take nth item l. use step provide useful trick reverse collection python possible use negative integer step follow example use negative value step become confuse order pythonic avoid use start end step single slice case require consider assignment slice stride add world example explain basic slice beginner help lot let list value p h simple slice list sublist notation key read make slice list make cut element index cut element index result slice cut list h previous answer clear question slice notation extend indexing syntax use slice stop step basic example slice example extend slice example index string slice example start end step example usage feel negative index slice confuse easy way think replace negative index len index example replace len(list good way illustrate slicing show code implement operation basic slicing technique define start point stop point step size know stride first create list value use slicing create list slice first numeric list list second numeric list list b index number number b. extend indexing syntax use slice stop step start argument step argument default none require argument notice similar range use define list b slice object represent set index specify range(start stop step see define stop return element start default none translate retrieve element important note first element index index use list exercise list element number accord ordinal position first element second element list b element number use index first element extended indexing syntax retrieve range value example value retrieve colon retrieve subset element start stop position define give pattern stop retrieve first element list a. think python tutorial diagram cite various answer good suggestion work positive stride negative stride diagram diagram expect a[-4,-6,-1 yp work think character slot use indexing open interval open positive stride leave open negative stride way think a(-6,-4 interval terminology get little frustrated finding online source python documentation describe slice take aaron hall suggestion read relevant part cpython source code write python code perform slice do cpython test code python million random test integer list find reference code relevant function cpython helpful easy understand relate slicing range give index categorize slicing follow category suppose sequence example range(0,3,2 > example 0:100:2 range(0,len(s),2 range(0,5,2 example range(0,len(s)-3,2 range(0,2,2 example range(0,len(s)-1,2 example range(0,4,2 example 0::2 range(0,len(s),2 range(0,5,2 suppose sequence example range(5,0,-2 > example range(len(s)-1,0,-2 range(4,0,-2 > example -2:-10:-2 range(len(s)-2,-1,-2 range(3,-1,-2 example range(len(s)-1,0,-2 range(4,0,-2 > example > example range(len(s)-1,-1,-1 range(4,-1,-1 > important idea remember index sequence word negative index shift right length sequence mind subscription slice straightforward subscription use follow syntax subscription select single item sequence index subscription raise indexerror index range slicing use follow syntax slicing select range item sequence begin start inclusive ending stop exclusive slicing default fullest range item sequence use follow default value start stop step omit equal none slicing raise valueerror step equal slicing raise indexerror start stop range contrary subscription expression sequence.__getitem__(index equivalent expression sequence[start stop step sequence[slice(start stop step stop step equivalent build class slice instance pack start stop step expression sequence sequence sequence[none none none use default value start stop step lot answer want add performance comparison use slice beneficial improve readability use slice object slice handful time notation preferred simple mnemonic remembering work array[j k include jth element exclude kth element
give list foo bar baz item list bar index reference datum structure list note clean way answer question ask index weak component list api remember last time use anger point comment answer reference make complete caveat list.index follow worth take look documentation return base index list first item value equal x. raise valueerror item optional argument start end interpret slice notation use limit search particular subsequence list return index compute relative begin full sequence start argument index call check element list order find match list know list occur search become bottleneck case consider different datum structure note find match give index hint instance snippet l.index(999_999 order magnitude straight l.index(999_999 former search entry search call index search list order find match stop expect index match use list comprehension generator expression place use index use list comprehension generator expression generalizable consider reach index take look excellent python feature call index result valueerror item present item present list thing helpful learning python use interactive help function lead method look majority answer explain find single index method return multiple index item list multiple time use enumerate index function return first occurrence enumerate return occurrence list comprehension small solution approach enumerate efficient large list use enumerate get index index return first index value |||| index |||| l.index(value start stop integer return first index value problem arise element list function handle issue set condition check element search list want index use numpy clear readable solution propose function reproduce inherent language behavior obscure go write function exception handle language provide method want list foo bar baz item list bar clean way get index python index method return index first occurrence couple issue method value miss need catch valueerror reusable definition use downside check return value none occurrence get complete information list.index enumerate list comprehension index occurrence check boolean check result loop result get information series object comparison check return series booleans pass series booleans series subscript notation get matching member want index index attribute return series integer want list tuple pass constructor use list comprehension enumerate elegant opinion test equality python let builtin code write handle problem ask attempt solution actual problem think need index give element list know value care list value catch valueerror verbose prefer avoid ' iterate list keep pointer interesting information get index enumerate munge datum use pandas elegant tool pure python workaround show recall need list.index look python standard library see excellent use many many use idlelib gui text parse keyword module use find comment marker module regenerate list keyword metaprogramme lib mailbox.py seem use order mapping http cookiejar.py seem use get next month lib similar distutil get slice item lib pickletools.py usage seem common seem operate list constrain size important o(n lookup time list.index use parse ui case idle use case uncommon find look answer ask direct usage tool provide language use case apply member list get index enumerate(alist store first element n index list element x equal look function take item list argument return position item list see output output index zip function go option confirm existence item get index nice thing approach function return list index empty list work string paste interactive python window year head python development ' bit embarrassed original answer set record one use code much idiomatic way get behavior use list comprehension enumerate function paste interactive python window yield review question answer realize fmc suggest early answer time answer question see answer understand hope verbose example aid understand single line code make sense recommend google python list comprehension take minute familiarize many powerful feature make joy use python develop code friend make easy code solve question receive gigantic line code cater line code due help index function python output hope give good simple answer help variant answer fmc user7177 give dict return index entry use liner get index single entry guarantee efficiency use set(a reduce number time lambda call find index item x list l solution powerful other beginner know forloop possible find first index item avoid valueerror chance value present avoid valueerror check exist list list comprehension good option acquire compact implementation find index item list use python function array.index simple try return position record find list return find list javascript function indexof case mango present list fruit pos variable -1 search cherry pos variable functional answer generic form account string list list location -1 python index method throw error item find make similar indexof function javascript return item find go find index use index method go search datum recommend use bisect module keep mind use bisect module datum sort sort datum use bisect use bisect module machine time use index method example code use python syntax output python list base use zip build function follow haystack list question needle item look note iterate use get index need focus item switch j. mention numerous answer build method list.index(item method o(n algorithm fine need perform need access index element number time make sense create dictionary o(n item index pair access index o(1 time need sure item list repeat duplicate element need return index find solution try small list element work list contain large number element apply binary search o(log runtime complexity try follow code refer come language simple loop easy understand thankful enumerate help indicate @terrya many answer discuss find index more_itertool third party library tool locate multiple index iterable give code find index multiple observation test multiple item see option install pip install more_itertool let give name lst list convert list lst numpy array use get index choose item list follow way implement certain structure python contain index method work solve question reference list tuple string use dictionary process list add index pythonic way use enumerate use indexof operator module note raise valueerror b a. use zip function get index value list code simple option
parameter pass reference value pass reference code output change original argument pass assignment rationale pass mutable object method method get reference object mutate heart delight rebind reference method outer scope know do outer reference point original object pass immutable object method rebind outer reference mutate object make clear let example let try modify list pass method output parameter pass reference outer_list copy use mutating list method change change reflect outer scope let see happen try change reference pass parameter output the_list parameter pass value assign new list effect code outside method see the_list copy outer_list reference the_list point new list way change outer_list pointed immutable change content string let try change reference output the_stre parameter pass value assign new string effect code outside method see the_stre copy outer_stre reference the_stre point new string way change outer_stre point hope clear thing little edit note answer question @david ask pass variable actual reference let work @andrea answer show return new value change way thing pass let get information want want avoid use return value create class hold value pass function use exist class list seem little cumbersome problem come misunderstand variable python use traditional language mental model happen follow sequence believe memory location store value update store value thing work python start reference object value reassign reference object value object continue coexist refer fact share number reference program call function parameter new reference create refer object pass separate reference use function call way update reference refer new object example self.variable reference string object original call change create second reference var object function reassign reference var different string object change reference self.variable separate change way pass mutable object reference refer object change object reflect place find answer complicated create simple diagram explain way python treat variable parameter pass value pass reference call object see fredrik lundh significant quote variable name object denote variable refer object example change method call namespace create var become name namespace string object original object name namespace next var = change bind var new string object method namespace forget original namespace forget string change think stuff pass assignment reference value way clear happen long understand happen normal assignment passing list function method list assign parameter name appending list result list modify reassigning list function change original list immutable type modify seem pass value pass int function mean assign int function parameter reassign change original variable value key understanding parameter pass stop think variable name object python appear variable useful distinguish mutability irrelevant question example bind name object type integer hold value bind name b object name bind afterward name b name see section python language reference code show question statement self.change(self.variable bind name var scope function change object hold value original assignment var change body function change assign name object happen hold string thing want change mutable object problem pass reference immutable object bool number string way go wrap mutable object quick dirty solution element list self.variable pass self.variable function modify var[0 pythonic approach introduce trivial attribute class function receive instance class manipulate attribute effbot fredrik lundh describe python variable pass style call object object allocate heap pointer pass make assignment dictionary entry create map string current namespace pointer integer object contain update x new integer object create dictionary update point new object old object unchanged alive depend refer object new assignment = new dictionary entry create point object entry x object string integer immutable mean method change object create example integer object create change math create new integer object object list mutable mean content object change point object example = = x x.append(10 print print empty list create point list append method mutates update list object add record database result visible x database update visible connection database hope clarifie issue python use pass reference value go repeat answer support statement python use pass reference value exception variable assignment mean copy reference value exception variable name bind reference value think reference value address target object address dereference used way work reference value seem work target object reference step jump target example prove python use pass reference argument pass value outer lst modify green target object black value store red object type yellow memory reference value draw arrow blue solid arrow reference value pass function dash blue arrow path ugly dark yellow internal dictionary draw green ellipse colour shape say internal use build function learn reference value address target object compile language variable memory space able capture value type python variable name capture string bind reference variable hold reference value target object name variable key internal dictionary value part dictionary item store reference value target reference value hide python explicit user type store reference value use list element element suitable container type reference variable container store element reference target object word element contain container reference element simple trick use wrap list know inconvenient simple enough edit blair update popular answer accurate think important note current post vote blair conrad correct respect result mislead borderline incorrect base definition many language allow user pass reference pass value python david cournapeau answer point real answer explain behavior blair conrad post seem correct definition extent python pass value language pass value piece data value reference send mean python pass value sense c programmer think want behavior blair conrad answer fine want know nuts bolt python pass value pass reference read david cournapeau answer get good answer python pass assignment scheme n’t c++ reference parameter option turn similar argument pass model language other practice case variable title var method change assign reference self.variable assign string var point self.variable follow code snippet show happen modify datum structure point var self.variable case list ' m sure clarify lot insight answer think additional point mention quote python documentation https://docs.python.org/2/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python python variable reference function global variable assign new value function body assume local variable assign new value function variable local need declare global bit surprising first moment ’s consideration explain hand require global assign variable provide bar unintended side effect hand global require global reference ’d use global time declare global reference build function component import module clutter defeat usefulness global declaration identify side effect pass mutable object function apply explain reason difference behavior assign object operate object function give assignment global variable declare global create new local object break link original object state need mutable object suggest check global variable solve kind issue http://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python example simple hope explanation concept pass object use python pass object function object pass object python call value programming language reference object word call actual object call value programming language pass fact function change_me try change object pass function function look call result change object answer explain great explanation stuff work python see simple suggestion problem seem create object instance pythonic way handle instance variable change follow instance method refer self access instance attribute normal set instance attribute init read change instance method pass self al first argument def change solution create static method use follow method convert couple fortran code python true pass reference original question pose simple work case little trick pass object reference language make possible work java list item ugly hack work give way python handle value reference way reference arbitrary instance attribute name real code course add error check dict lookup seem mention approach simulate reference know use update function pass actual variable name useful reference situation multiple thread process make update function thread multiprocesse safe allow reading value update example happen object orient make follow change achieve similar result dictionary pass reference use dict variable store reference value pass reference fit python use workaround work get object assign local variable reassign local variable call function basic idea function access pass object function store class way use global global variable nonlocal local variable function wrapper function idea work read delete variable reading short way use lambda return callable call return current value x. call name use language distant pass wrapper access variable bit unwieldy wrap class proxy attribute python reflection support make possible get object capable reassigning name variable give scope define function scope byref class wrap dictionary access attribute access wrap translate item access pass dictionary pass result builtin local name local variable end access local variable python documentation advise change dictionary work seem work use empty class instance store reference object object attribute store instance dictionary see example pass reference python different concept pass reference new python start yesterday program year come write function want call parameter parameter hang right checking reference value work python use return value function need parameter feel need post go show solve situation other come find valuable answer topic question experience python programmer course know solution use new answer see python work bit javascript regard use workaround want reference functionality find neat python think see language return value function simple comma separate way handle call side good satisfied need use workaround language course return many value object need adjust call side python nice simple want mimic reference follow give result use ctype witch look c int python integer pass reference carefull strange thing happen therefor advise reliable method work keep mind overload build str function want dataclasse allow apply type restriction type hint agree folk case consider use talk contexts worth know way design explicit context class prototype prefer dataclasse easy serialize cheer python assign unique identifi object identifier find use python build function ready verify actual formal argument function call value indicate dummy argument actual argument refer object note actual argument corresponding dummy argument name refer object bind dummy argument new value object function scope effect fact actual argument point original object actual argument dummy argument name fact summarize argument pass assignment bind new object function body actual_argument refer original object use dummy_argument[0 some_thing modify actual_argument[0 effect pass reference achieve modifying component attribute object reference pass course require object pass mutable object many great answers(or let say opinion read want mention miss python documentation faq section know date publishing page true reference remember argument pass assignment python assignment create reference object alias argument name caller callee call reference call fn(a assignment happen additional reference create variable symbol name reference hold elegant object orient solution functionality python elegant solution class make subclass name masterclass single variable single boolean make collection kind fix name instance variable comply pep solve similar requirement follow implement member function change variable pass variable pass functools.partial contain setattr refer variable call functools.partial change execute settatr change actual reference variable note setattr need name variable string time variable pass reference class member solution suggest use decorator add field mutable corresponding property field class wrapper variable @refproperty add self._myvar mutable self.myvar property print compare case work print code follow simple answer python c++ create object instance pass parameter copy instance make reference instance inside function able modify component datum object instance change visible basic type python c++ behave copy instance make see modifie different instance function change visible come real difference python c++ concept address pointer c++ allow pass pointer bypass copy basic type function affect instance change visible equivalent python possible workaround create wrapper type pointer useful python necessary c++ c++ return single entity python return multiple value separate commas tuple python variable b c want function modify relative syntax possible c++ share fun way people comprehend topic handy tool visualize python code execution base example pass mutable list @mark ransom play figure pass dta="15252 body=[dta
use new_list = my_list modification new_list change my_list time clone copy list prevent new_list my_list create second list assignment copy reference list actual list new_list my_list refer list assignment copy list several option use builtin list.copy method available python slice alex martelli opinion weird syntax make sense use opinion readable use build list constructor use generic copy.copy little slow list find datatype old_list first need copy element list use generic copy.deepcopy slow memory need method unavoidable operate handle number level nest list container example result felix provide excellent answer thought speed comparison various method fast list slice aware copy.copy list list(list python version copy list dictionary class instance list original change change copy list vice versa script interested want raise issue tell python add list.copy method fast slicing python shallow copy make python get shallow copy full slice original semantic way copy list shallow copy create new list object deep copy create new list contain new equivalent object shallow copy copy list container reference object list object contain mutable change change reflect list different way python python way work python python idiomatic way make shallow copy list complete slice original accomplish thing pass list list constructor use constructor efficient python list get list.copy method python use new_list = my_list modify new_list time my_list change my_list name point actual list memory say new_list my_list make copy add name point original list memory similar issue make copy list list array pointer content shallow copy copy pointer different list content make copy content need deep copy make deep copy list python use deepcopy copy module demonstrate allow make new sub list see deep copied list different list original roll function create bug use standard library deepcopy function see use way deepcopy bit python bit python let start begin explore question let suppose list copy list start first list let try set variable copy original list list_1 thinking copy copy list_1 wrong function show variable point object let try output variable exact argument surprised python store variable variable reference object object store value object list create reference object different variable name mean variable point object different name copy image list_1 copy variable name object variable list try modify copy list modify original list list modify list matter copy list original list output modify original list let move pythonic method copying list method fix first issue see list different mean variable point different object go let try modify list let see face previous problem output see modify copy list mean work think do let try copy nested list list_2 reference object copy list_2 let check get output assume list point different object let try modify let see give want give output seem little bit confusing method use work let try understand copy outer list list function check output copy_2 list_2 happen create copy list outer list copy nest list copy nest list variable try modify nested list modify original list nest list object list solution solution deepcopy function let check outer list different id let try inner nested list output see id different meaning assume nest list point different object mean deep deepcopy(list_2 happen nest list point different object separate copy nest list let try modify nested list solve previous issue output modify original nested list modify copy list many answer tell make proper copy none say original copy fail python store value variable bind name object original assignment take object refer my_list bind matter name use list change make refer my_list persist refer new_list answer question give different way create new object bind new_list element list act name element bind object shallow copy create new list element bind object take list copy step copy object list refer bind element copy new list deep copy element list refer object list bind element copy element list object refer element perform deep copy see documentation information corner case copy use thing time result use python keep mind time relative absolute stuck shallow copy add new method possible python python slice equivalent form list unpack new_list = list new_list = list see python winner edge python consider superior readability latter dark horse unpack repacke method b = ~25 fast raw slicing fast unpack method b = b note method output equivalent result input list work sliceable object work iterable copy.copy work general python object testing code interested party template python idiom newlist = oldlist contributor give great answer work single dimension level list method mention work clone copy list point nest list object work multidimensional nest list list list felix kling refer answer little bit issue workaround use build in prove fast alternative deepcopy new_list old_list py3k old_list.copy work single level list revert pointing list object nest old_list new_list change list object perpetuate point aaron hall pm 2re use eval bad idea slow copy.deepcopy mean multidimensional list option say option performance go try use sized multidimensional array try timeit use array large bioinformatics application give wait response start type edit post seem real option initialize multiple list work suggestion handle multidimensional list copying appreciated other state significant performance issue use copy module multidimensional list surprise mention sake completeness perform list unpack splat operator copy element list obvious downside method available python + time wise appear perform well common method new_list = my_list try understand let say my_list heap memory location my_list pointing x. assign new_list = my_list let new_list point x. know shallow copy assign new_list my_list copy object my_list new_list know deep copy way simple approach independent python version miss give answer use time least my_list contain container example nest list use deepcopy other suggest answer copy library example .bonus want copy element use shallow copy let understand difference solution solution see solution work use nest list let check happen apply solution nest list want post bit different answer understandable fast option provide bit view deep copy work alternative option deep copying matter function bug point show way copy object question answer use point explain deepcopy work core core deep copy function way make shallow copy simple deep copy function duplicate container immutable object deepcopy nest list duplicate outer list mutable object list duplicate container work class deepcopy class deepcopy mutable attribute come copy container list dict tuple iter class class instance simple mutable object duplicate change single value mean duplicate string number bool duplicate container simple initialize new container value deepcopy rely recursion duplicate container one container container leave container immutable object duplicate object reference function deepcopye basic datum type work custom class add python build deepcopy base example difference support type support user class duplicate attribute new duplicate class block infinite recursion reference object see use memo list dictionary make deep copy core make deep copy make shallow copy hope answer add question example say list immutable number duplicate layer duplicate use list comprehension x imagine list time want make function use recursion deep copy layer list previous list comprehension use new list deepcopy_list look function deepcopy list strs bool floast int list many layer use recursion deepcopying tldr deepcopy recursion duplicate object return immutable object immutable object duplicate deepcopie inner layer mutable object reach outermost mutable layer object note case define custom class want keep attribute use copy.copy copy.deepcopy alternative example python output remember python store actual list reference list1 list1 list2 change use copy module default download pip make original copy list(copy.copy simple list nest one make copy change first list slight practical perspective look memory gc way copying list list add empty list l2 l + test python good answer work deepcopy option method work lead output line new_list my_list assign new reference variable my_list new_list similar c code give use copy module create new list method use depend content list copy list contain nested dict deepcopy method work method list answer slice loop copy extend combine unpack work execute similar time loop deepcopy preform see code try modify copy list iterative fashion construct trivial example suppose non working modify code people ask make copy name list loop right thing wrong approach want make new list base original need make copy natural tool list comprehension way write logic tell element desire result relate original element simple elegant expressive avoid need workaround modify copy loop assign iteration variable affect list reason want copy first place example look list comprehension powerful use filter element rule clause chain clause work correspond imperative code clause order value end result list move innermost part plan iterate original modifying copy avoid problem pleasant way filtering list comprehension suppose make separate copy first order delete part want build list put part want handle insertion replacement slicing leave exercise reason subsequence want result contain special case make reversed copy assume need new list iterate reverse create slice clone use approach list comprehension advantage create desire result expression modify exist object place return none convenient writing code fluent style short simple explanation copy mode shallow copy construct new compound object extent possible insert reference object find original create shallow copy deep copy construct new compound object insert copy object find original create deep copy list work fine deep copy simple list complex list use deepcopy
put time delay python script delay second example run minute use sleep time module take float argument sub second resolution single thread suggest sleep function function suspend processing thread call operating system allow thread process execute sleep use purpose delay function execute example hooray print second hit enter sleep suspend thread use next processing power demonstrate create script attempt interactive python shell sub process find party_later function reason example output script trigger function call later time separate thread timer threading object blank line illustrate function print standard output hit enter ensure prompt upside method timer thread wait able thing case hit enter time function execute see first empty prompt respective object multiprocesse library create exist reason sub thread make lot sense simple timer whole new subprocess delay implement use follow method method second method delay use implicit wait method third method useful wait particular action complete element find method know pygame.time.wait matplotlib pyplot.pause asyncio.sleep example use use tkinter pygame.time.wait example recommend use pygame window exit window matplotlib function pyplot.pause example recommend use graph exit graph method good tkinter asyncio.sleep method async loop bit fun sleepy generator question time delay fix time case need delay measure last time possible solution situation want possible want bother next_time stuff code follow code sleepy.py define buzzergen generator running see use loop running see see buzzer rigid allow catch regular sleepy interval oversleep get regular schedule tkinter library python standard library interactive tool import create button box popup stuff appear windows manipulate code use tkinter use time.sleep muck program happen use root.after replace value many second millisecond example time.sleep(1 equivalent root.after(1000 tkinter time.sleep many answer point way go delay do time library time.sleep function make wait second work extract sleep function time library mean call type long type method get access feature time library variable call sleep create variable call time library import function function2 want certain part module access feature time library time.clock long type time.[function create variable time overwrite import solution allow reference time library allow work library use time.sleep event().wait use output notice recent python version python high use asyncio.sleep related asynchronous programming asyncio check next example think sleep second first method second second method total second run time code print read asyncio official documentation detail suggest time module thought share different method use matplotlib pyplot function pause use prevent plot disappear plot make crude animation save import import easy example time delay tkinter try shell crash react
difference list method append extend append append specify object end list extend extend list appending element specify iterable append add element list extend concatenate first list list iterable list.append method append object end list object number stre list add end my_list single entry list keep mind list object append list list first list single object end list want list.extend method extend list append element iterable extend element iterable append list example keep mind string iterable extend list string append character iterate string want = operator define list similar extend my_list another_list create third list memory return result require second iterable list my_list = another_list modifie list place place operator list mutable object see create new list work extend second iterable kind iterable get confused my_list my_list equivalent give brand new list assign my_list append amortize constant time complexity extend time complexity iterate multiple call append add complexity make equivalent extend extend iteration implement intend append successive item iterable list regard amortized list object implementation source mean get benefit large need memory reallocation front pay next marginal reallocation large total time append linear o(n time allocate append become o(1 wonder performant append use achieve outcome extend follow function thing let time commenter say perfect answer miss timing compare add element correct thing want append element iterable use extend add element use append let create experiment see work time see go way create iterable use extend minor waste time learn gain use extend element append timing important showing make point python correct thing thing right way ™ conceivable test timing comparable operation get ambiguous inverse result focus correct thing see extend clear run fast append intend append element iterable list single element iterable add list use append append append single element extend append list element note pass list append add element append append single element extend list want extend element use extend append elment list element get nested list extend extend single element append extend element time nest list original one reason name extend append extend add element end list append simple use append element pass list element argument obtain nested list extend pass list argument obtain list new element nest old element use extend get list item append list add element list element nest list see output code follow snippet equivalent latter loop implement c. append method add single item end list extend method take argument list append item argument original list list implement class create list instantiate class list method operate dive python use return extend extend place + = place behavior slight difference append extend big difference = append extend use function scope see blog post append(object update list add object list extend(list concatenate list extend use iterator argument example wish make list list list way want use itertools.chain.from_iterable method output iterator implementation equivalent example want list extend used iterator argument equivalent append extend use operator append use python add element example example extend extend use merge list insert multiple element list example example interesting point hint explain extend append loop append consider replace list.extend(processed_element bear mind apprende new element result realloaction whole list well location memory do several time append element time overall performance suffer sense list.extend analogous append add entire datum whole datum add create index hand extend name suggest extend current array example append get extend get english dictionary define word append extend append add end write document extend make large enlarge expand knowledge let understand difference append extend append extend similarity append extend example hope make useful supplement question list store specific type object example info situation extend method suitable loop generating info object time use extend store list fail exception typeerror info object iterable use append method result time use extend method treat list collection type iterate place previous list specific object iterate distinguish l1 reproduce body body(neste separated individual marry construct united family make exhaustive cheatsheet list method reference extend(l extend list append item give list l. append extend list place item single object pass argument extend extend list place many item object pass argument contain confusing str object produce append extend extensibility mechanism python append add element end list add new element list use append method follow way default location new element add length+1 position insert insert method use overcome limitation append insert define exact position want new element insert method descriptor insert(index object take argument first index want insert element second element extend useful want join list single list extend join list result object contain list list try access element pos get list element join list use append join multiple list
delete file folder remove file os.rmdir remove empty directory shutil.rmtree delete directory content path object python pathlib module expose instance method pathlib.path.unlink remove file symbolic link pathlib.path.rmdir remove empty directory pathlib library python version unlink method use remove file symbolik link missing_ok false default filenotfounderror raise path exist missing_ok true filenotfounderror exception ignore behavior posix rm command change version missing_ok parameter add example example shutil.rmtree use see complete documentation shutil complete documentation robust function use shutil.rmtree use build pathlib module require python backport old version pypi pathlib pathlib2 remove file unlink method rmdir method remove empty folder multiple way delete file python good way follow delete file particular directory use symbol pattern string import os glob module import os glob loop folder project file delete file os.remove(file print("deleted str(file os.unlink alia name unix os remove know unlink note functionality syntax os.unlink use delete python file path method os module python standard library perform deletion function pathlib module provide different way interact file rmdir path function allow delete empty folder need select path directory call rmdir method check folder size empty delete good way delete empty folder fear lose actual datum python remove file directory use unlink rmdir path object method note use relative path path object check current work directory remove individual file directory python see section label remove directory content use shutil.rmtree note available python new python path object let use create directory file demonstrate usage note use join part path work issue operating system issue use backslashe window need double backslashe use raw string let delete first file use globbe remove multiple file let create file iterate glob pattern demonstrate remove directory want remove directory use case use shutil.rmtree let recreate directory file note rmdir fail empty rmtree convenient import rmtree pass directory funtion see whole thing remove python backport pathlib module call pathlib2 instal pip alias library pathlib import path object demonstrate much remove file os.unlink remove directory note remove empty directory suit use case shutil.rmtree asynchronous function want check complete use loop function delete dir path require full pathname function semantically function remove file path path file directory exception raise order remove whole directory tree shutil.rmtree use os.rmdir work directory empty exist remove empty parent directory self parent content ex os.removedirs('abc xyz pqr remove directory order abc xyz pqr abc xyz abc empty info check official doc os.unlink os.remove os.rmdir shutil.rmtree os.removedir remove file folder remove folder directory avoid toctou issue highlight éric araujo comment catch exception call correct method shutil.rmtree remove directory os.unlink remove file personal preference work pathlib object offer pythonic less error prone way interact filesystem develop cross platform code case use offer backport late date write answer python python pathlib python new additional function copy copy2 copytree rmtree wrap shutil.rmtree find github pypi disclaimer ' m author library recommend use subprocess write beautiful readable code cup tea software engineer consider use jupyter type bash command use shutil
used difference use base.__init super().__init super let avoid refer base class nice main advantage come multiple inheritance sort fun stuff happen see standard doc note syntax change python say super().__init super(childb imo bit nice standard doc refer guide use super explanatory reason use super child class use cooperative multiple inheritance call correct next parent class function method resolution order mro python call python require call define class name self avoid redundant slow due name lookup verbose update python super limited ability use multiple inheritance hard wire next parent call explain primary difference code childb get layer indirection init super use class define determine next class init look mro illustrate difference answer canonical question use super python demonstrate dependency injection cooperative multiple inheritance code equivalent super implement check fallback behavior translate python write little native python super object write manual code recreate ensure call proper next method method resolution order python tell class instance method call get call stack frame find class store local free variable class make call function closure class first argument function instance class inform method resolution order mro use require first argument mro use super static method impossible access mro class call super let avoid refer base class nice main advantage come multiple inheritance sort fun stuff happen see standard doc hand wavey tell much point super avoid write parent class point ensure next method line method resolution order mro call become important multiple inheritance explain let create dependency want call child remember childb use super childa usera call userdependency method userb fact call userdependency childb invoke super circumstance follow answer suggest get error subclass childb answer clever interesting spite direct criticism comment downvote answerer persist suggest kind editor fix problem explanation use self.__class substitute class name super lead recursion super let look next parent mro see first section answer child class tell super child instance method lookup next method line result recursion cause logical failure answerer example runtimeerror recursion depth exceed python new super call method argument allow sidestep issue note python + use make call concise require reference parent class name handy want add python people implement name insensitive behaviour write self.__class class name break call super class inherit class self.__class return child class example class square sub class rectangle want write separate constructor square constructor rectangle good reason want implement square reimplement method create square use msquare square('a python call constructor rectangle give square constructor constructor rectangle call go return superclass msquare call constructor rectangle infinite loop happen mention @s_c case run call constructor rectangle give argument get error super side effect work expect get infinite recursion head python believe introduce version call super parent inherit class inherit object new style class python code go continue use args get advantage use look next class mro method resolution order access cls.__mro call method call base init call base init happen mro item-- base exact thing nicer way get multiple inheritance main difference childa.__init call base.__init childb.__init call init class happen childb ancestor self line ancestor differ expect add classc use multiple inheritance base long parent childb childc instance super(childb self point mixin self childc instance insert mixin childb base take advantage design class use cooperative multiple inheritance scenario use know go ancestor runtime consider super post pycon accompany video explain
make decorator python follow call say return long explanation see paolo bergantino answer understand decorator understand function object python important consequence let see simple example keep mind circle interesting property python function define function fun part see function object function mean function return function return function pass parameter need understand decorator see decorator wrapper mean let execute code function decorate modify function want time call a_stand_alone_function a_stand_alone_function_decorated call easy overwrite a_stand_alone_function function return my_shiny_new_decorator previous example use decorator syntax ’s simple @decorator shortcut decorator pythonic variant decorator design pattern several classic design pattern embed python ease development iterator course accumulate decorator use python decorator syntax order set decorator matter conclusion see answer question leave happy burn brain little bit see advanced use decorator nifty thing python method function difference method expect first argument reference current object self mean build decorator method way remember take self consideration make general purpose decorator apply function method matter argument use args kwargs great say pass argument decorator get twisted decorator accept function argument pass decorate function ’s argument decorator rush solution let write little reminder ’ my_decorator call @my_decorator tell python call function label variable my_decorator important label give point decorator let get evil ☺ surprise let thing skip pesky intermediate variable let make short see use function call syntax decorator argument use function generate decorator fly pass argument function right decorator argument argument set variable see pass argument decorator function use trick use args kwargs wish remember decorator call python import script set argument import function decorate change okay bonus give snippet make decorator accept argument order accept argument create decorator use function wrap decorator see wrap function decorator let ’s fun write decorator decorator use follow know last time feel listen guy say understand recursion understand recursion feel good master functool module introduce python include function functools.wrap copy name module docstre decorate function wrapper fun fact functools.wraps decorator big question use decorator seem cool powerful practical example great possibility classic use extend function behavior external lib modify debug want modify temporary use extend several function dry way course good thing decorator use rewrite dry say python provide several decorator property staticmethod large playground check documentation see decorator work ask write factory function return decorator wrap return value decorate function tag pass factory function example enable write write decorator yield forget construction decorator syntax shorthand decorator syntactical sugar expand return lambda decorator function python decorator add extra functionality function italic decorator note function define function replace function define example class say want function print do add print print statement repeat make decorator change class decorator check http://www.ibm.com/developerworks/linux/library/l-cpdecor.html make separate decorator illustrate note use args kwargs declaration wrap function support decorate function multiple argument necessary example say function include generality similar reason functools.wraps decorator use change meta attribute wrap function decorate make error message embed function documentation decorate function wrap see lot duplicate code decorator give similarity make generic decorator factory word decorator function make decorator way code repetition allow dry principle follow make code readable assign descriptive name factory generate decorator combine example work code generate involve fair amount form extraneous function call multiple decorator apply matter depend exact usage bind instance speed decorate function important overhead keep single extra function call write different decorator factory function implement add tag generate code avoid addtional function call incur use separate decorator tag require code decorator run apply function definition call apply create readable name use lambda function illustrate sample way thing want follow function call return make decorator return lambda anonymous function close function closure call use desire seem lose original function find need dig closure bury put documentation function want able decorate function take argument want know function look debug session need bit wrapper decorator wrap functool module standard library unfortunate boilerplate simple make python get qualname annotation assign default see wrap make wrap function tell function take argument module attempt tackle problem solution standard library decorator take function definition create new function execute function transform result equivalent equivalent understand decorator important notice decorator create new function inner execute function transform result answer answer thought share decorator class make write new decorator easy compact think make behavior decorator make easy define new decorator example list solve use complex task instance decorator make function apply argument iterator print notice example include list type instantiation decorator final print statement method get apply list element list write decorator class simple example chain decorator note last line show go cover output look speak counter example give counter share function use decorator way decorator reuse different function use decorate function multiple time counter(func counter(func variable remain private result paolo bergantino answer great advantage use stdlib work simple example decorator argument decorate function argument major limitation want tackle general case write solve first issue write makefun.wrap solve note makefun leverage trick famous decorator lib create decorator argument return signature preserve wrapper decopatch provide development style hide show various python concept depend preference compact style follow case check decorator work expect refer documentation detail add case add custom parameter decorator pass final function work decorator final function example nest decorator plot image let show color image axis label use nested decorator let show gray scale image axis label use nested decorator remove_axis plot_gray need cmap='gray default colormap viridi grayscale image default display black white shade specify function call reduce follow nested call make_bold make_italic use decorator say show output course use make_bold make_italic decorator show short output
change size figure draw matplotlib figure tell call signature figure(figsize=(1,1 create inch inch image by-80 pixel give different dpi argument get figure create use figure.set_size_inche adjust figure size propagate size change exist gui window add true erik shilt mention comment use figure.set_dpi s]et resolution figure dot inch workaround case want change size use figure environment case use plt.plot example set tuple width height useful plot inline ipython notebook asmaier notice preferable put statement cell import statement reset global figure size default subsequent plot figsize tuple accept inch want set centimetre divide look question try simple code follow need set figure size plot deprecation note official matplotlib guide usage pylab module recommend consider use matplotlib.pyplot module describe answer follow seem work make figure width inch height inch figure class use default value argument case look way change figure size pandas df pandas dataframe use exist figure axis want change default setting follow detail check docs use first link google matplotlib figure size adjustingimagesize google cache page test script page create test[1 file different size image output note module comment actual output differ answer allow combine image image file see difference size use matplotlib.figure.figure change canvas visible keyword default true want change width height use fig.set_figwidth(val fig.set_figheight(val update canvas matplotlib new need specify true order live update canvas version old specify note set_figheight function n’t support parameter version old matplotlib try comment fig = line work forum post help resize figure window comparison different approach set exact image size pixel answer focus quick comparison approach try image show give summary current status thing messy sure fundamental limitation use case get enough attention developer find upstream discussion baseline example try set image dimension comparison point run output good approach h fig.get_size_inches()[1 height control think go time simple scale run output output tend set height m concerned much vertical space image take middle text plt.savefig(bbox_inches='tight change image size feel much white space image tend add bbox_inches='tight remove white space save image work crop image get desire size approach propose question seem work desire height height equal fix height set_aspect sized width small margin ermmm set_aspect mess thing prevent plt.tight_layout remove margin important use case great solution ask obtain fix height pixel fix datum x aspect ratio remove remove horizontal whitespace margin matplotlib h width control need specific width addition height seem work run output small width output seem font scale get trouble small width label cut top left manage work remove white space save image give see remove lot empty space top image use fix magic base height dpi fig.set_size_inches scaling believe equivalent approach mention run output see scale output see approach work problem set magic_height parameter equivalent fix dpi set_size_inches approach give wrong pixel size make hard scale run output height image pixel size correct make time large output understand approach scale need make dpi dependant set proportional size inch previous example make text proportional retain height expect look tiny include svg find set svg image approach work png run generate output contain identify say open chromium browser debug tool mouse image confirm height course svg vector format theory scale convert fix sized format loss resolution give exact height use inkscape imagemagick convert need mess -density get sharp svg resize imagemagick set img html work browser test matplotlib increase size figure n time need insert pl.show work ipython notebook use width height inch provide default rcparams["figure.figsize see follow work make sure add line plt.figure(figsize=(20,10 plt.pie code copy amalik2205 generalize simplify psihodelia answer want change current size figure factor sizefactor change current size occur fine tune subplot layout figure window gui mean command subplots_adjust example matplotlib able use metric system want specify size figure reasonable unit length centimeter follow code gns ank use resize figure figure draw least use qt4agg tkagg mac os matplotlib option use rc function matplotlib unit inch print custom graph custom size create new figure specify size inch figsize argument modify exist figure use set_size_inches method want change default figure size use run command rc try initialize use example give answer ' expand experiment note fig size value measure inch output use follow pattern example able set figure dimension inch millimetre set true plot fill figure border make research write article different way change figure size important remember set size dpi figure jupyter notebook user remember set rcparam separate cell cell import
raise exception python catch block use specific exception constructor fit issue specific message avoid raise generic exception catch catch specific exception subclass example specific catch catch general exception use specific exception constructor fit issue allow arbitrary number argument pass constructor argument access args attribute exception object example print python actual message attribute add baseexception favor encourage user subclass exception stop use args introduction message original deprecation args retract clause want example log specific type error happen raise good way preserve stack trace use bare raise statement example preserve stacktrace error value sys.exc_info way error prone compatibility problem python prefer use bare raise raise explain sys.exc_info return type value traceback syntax python note compatible python want modify happen new raise set new args instance preserve whole traceback modifying args note good practice invalid syntax python making keep compatibility hard work python avoid manipulate traceback efficient error prone use thread sys.exc_info get wrong traceback use exception handling control flow tend avoid python chain exception preserve traceback aware hide get production code want raise exception raise exception intend valid python python follow valid old version python low see people raise string modern version raise typeerror raise baseexception type check right exception reviewer aware issue get production raise exception warn consumer api want make error purpose go create error type want indicate specific wrong application subclass appropriate point exception hierarchy usage raise bare exception right thing see aaron hall excellent answer get much pythonic replace exception specific type exception want throw see raise statement documentation python like information python different syntax raise exception use raise exception args raise exception args print print exception object show example raise statement argument raise last exception useful need perform action catch exception want raise exception raise statement raise typeerror exception statement use create exception chain exception raise response exception contain detail original exception show example output common case throw exception response unexpected condition intend catch fail enable debug happen logical seem assertionerror read exist answer first addendum notice raise exception argument example exit program want know happen use print program exit standard error closing program note time handle generic exception process bunch file log error want catch error occur file log continue process rest file case block good way want raise specific exception know mean way throw exception use assert use assert verify condition fulfil raise assertionerror detail look want raise custom exception example write library good practice make base exception class module custom sub exception specific achieve interested custom base class inherit custom exception class ordinary exception class exception typeerror valueerror learn raise statement python keep try block example care error raise use assert raise assertionerror assert keyword raise assertionerror condition false case specify false raise error text want raise add comma specify error text want case write raise error raise text n’t care raise exception good old division
output color text terminal python platform common way print ansi escape sequence simple example python code blender build script use code python work unix include os x linux windows provide use ansicon window provide enable vt100 emulation ansi code set color move cursor go get complicated sound write game look curse module handle lot complicate part python curse howto good introduction use extend ascii pc stick ascii character good bet block ensure terminal use ibm extended ascii character set many option character block character modern text base program dwarf fortress emulate text mode graphical mode use image classic pc font find bitmap use dwarf fortress wiki see user make tileset text mode demo contest resource graphic text mode python termcolor module usage simple python sophisticated game programming color block want get ansi code work window run answer colorama cross platform color python support python well python january maintain example code example screenshot print string start color style string end color style change get table format option shell text follow code reference https://en.wikipedia.org/wiki/ansi_escape_code#color define string start color string end color print text start stre front end string end produce follow bash urxvt zenburn style color scheme experimentation get color note \33[5 \33[6 blink way create full color collection code generate test solution work window use system call os.system allow colours print command prompt powershell note window support ansi code system call module text decoration support bright colour display identical regular colour thank l finding short method add want learn ansi escape sequence brief example information see ansi escape code block character try unicode character \u2588 put sty similar colorama less verbose support bit bit rgb color support effect bold underline allow register style type high performant support mute messing global sys.stdout flexible document example print demo rich new python library working color terminal way work color rich quick way start rich print method render bbcode syntax ansi control code way apply color rich regex syntax relate formatting feature favorite way blessing library full disclosure write example print color brick reliable way print space background color use technique draw progress bar nose progressive print specific location muck terminal capability course game use python standard string formatting keep readable nice thing blessing good work sort terminal common ansi color one keep unreadable escape sequence code remain concise use fun generate class color use loop iterate combination color write class python color copy paste opinion easy method long rgb value color want work example print red text multi color text try simple code python example try online library call colorit super simple example give worth note cross platform test mac linux windows want try https://github.com/supermazingcoder/colorit colorit available instal pypi install pip install color window pip3 install color macos linux window use module win32console available python distribution module ctype python access win32 api see complete code support way see color console report code testoob ctype example wrap joeld answer module global function use code file log.py use follow try online modern solution yachalk library support nested style auto complete friendly truecolor support come terminal capability detection type design decision consider choose solution many answer question demonstrate ansi escape code suggest low level library require manual style enable approach subtle issue insert style compatibility many terminal goal good use high level library offer automatic handling style reset allow library take care edge case insert spurious ansi escape code need javascript standard library task chalk use js project solution available python world lack comparison chalk api convenient use auto complete compatible get edge case right idea yachalk bring convenience python ecosystem interested comparison library start feature comparison project page addition incomplete list alternative come research lot choose end feel clean window print console color use win32 api linux simple use print escape sequence outline color character print box depend font use console window pound symbol work depend font simple base joeld answer building joeld answer use https://pypi.python.org/pypi/lazyme pip install lazyme screenshot update color_print new formatter note italic blink strikethrough work terminal work mac ubuntu screenshot note keyword mix modifier need reset use python colorama use clint use python implementation curse library curse terminal handle character cell display run find box use color text other mention answer colorful text background foreground color use emoji example use warn message 🛑 error message use notebook color method help find log source code operating system include linux distribution version window manager default emoji font colorful default want make colorful first mac os control command space window win linux control control programming game change background color use space example easy option use cprint function termcolor package support format print result terminal dependant review terminal property section package documentation find answer useful modify bit github gist result addition wrap common usage use window go use django snapshot use colored output debug runserver terminal add test instal machine python import django print django.version install check install django give try click cli library convenient way worth consider write command line tool curse example https://raw.github.com/fabric/fabric/master/fabric/colors.py pypi module wrap python print function https://pypi.python.org/pypi/colorprint usable python future import print python example module pypi page output world word blue exclamation mark bold red blink asciimatic provide portable support building text ui animation want use build package follow structure enhance mohamed samy answer responsible multiple input well number support print argument end=. add .store method order write log file create utility use code e.g. update pypi package 🔗 available simple convenient way consider write command line tool method work console instal fancy package get ansi code work window run os.system('color colour note \33[5 \33[6 blink thank @qubodup terminal use unicode encode character appropriate font selection see favorite character unicode char u+2588 full block suggest use try follow examine file favourite viewer curse module want use check tutorial suggest new library printy release version cross platform library check printy github base flag stuff use pyfancy simple way color terminal example create project console color publish pypi throw pip install console color install write document sphinx read see get example google colab post example attract user click link course n’t enter parameter add attribute want honest project special use target text input string style \33[0 \33[1 \033[9 kind stuff make easy use least window try tiny script work color mixer value red green blue call rgb function make combination color rgb parameter cleanup set foreground background color default case want black call rgb(0,0,0 white rgb(255,255,255 rgb(0,255,0 create absolute green rgb(150,255,150 produce light green support background foreground color set color background color pass = true false default example set red background color call rgb(255,0,0,true choose red font color call default false simplifie call rgb(255,0,0 move google look color log result result result result coloredlog package log library write simple module available http://pypi.python.org/pypi/colorconsole work windows mac os x linux use ansi linux mac native call console function window color cursor positioning keyboard input replacement curse useful use simple script ascii game write module handle color linux os x windows support color platform set foreground background color different time string object give sane result thing len .capitalize new python excited time discover topic time feel say minute discover thing python least context manager example simple way find use ansi escape code use fore import module colorama take look code compare ansi escape code simple function use print text message color remember ansi code use standard rgb tuple define foreground background color address problem create mind simple package print string interpolate color code call icolor icolor include function cformat cprint take string substring interpolate map ansi escape sequences ansi color include red blue reset bold other background color prefix green background xgreen escape give simplicity good documentation code pypi sudo easy_install icolor use shell escape character available language escape character start esc character follow number argument example output red hello world string terminal python script write article escape sequence help get well grasp mechanism solution work window terminal powershell window case work insert small line begin program help os.system allow print ansi codes terminal color output accord choice system specific function need call able print color text terminal use pygment module example allow provide hexadecimal color terminal many build color try blue darkgreen yellow minimal class fan rgb standard like ps inspire circuitsacul answer cent pycolorterm installation python script work ok show green answer attempt expand concept write colorized text terminal use regular expression colorize keyword block text answer use python library rich cover previous answer question answer use function rich.color.ansi_color_name obtain random list color use highlight predefine search term print output code create gist colorize text efficient way reverse_colour mean reverse colour choose highlight mode default white green_back back mean highlight base name reset_colour reset colour see picture detail believe need explain much list variable name wish try code go replit test code sample code code picture output picture write library available pypi simple api follow standard print function install pip install color execute code check feature https://github.com/nazime/colore implementation use
split list arbitrary length sized chunk see iterate list chunk datum result use loop need store question string input see split string nth character technique apply variation generator yield size chunk python use xrange range list comprehension liner method preferable use name function make code understand python python simple python use xrange range know old mention result old python documentation recipe itertool current version suggest j.f.sebastian guess guido time machine work work work work work solution work iter(iterable)]*n equivalent early version create iterator repeat n time list izip_long perform round robin iterator iterator advanced call result zip roundrobin generate tuple item ' m surprised think use iter argument form demo work produce output return tuple iterator think certain elegance pad want pad simple variation suffice demo base solution pad know one- line itertool recipe function pad combine approach come close demo believe short chunker propose offer optional padding tomasz gandor observe padding chunker stop encounter long sequence pad value final variation work problem reasonable way demo generator work arbitrary iterable example simple elegant prefer sized chunk imply length barring option minimal variance length basket item follow result practical reason prefer latter result use function distribute work build prospect finish other sit other continue work write answer none answer size chunk leave runt chunk end balanced high necessary variance length example current top answer end other list(grouper(3 range(7 chunk(range(7 return none none none pad inelegant opinion chunk iterable divide well high level balanced solution use way today setup need list populate element zip element go allocate cycle basket run element want result productionize solution write function provide type annotation take list item max number basket create list empty list append element round robin style elegant solution use slice use step argument slice elegant slice care long datum result first basket long need need increment start point basket fact liner go multiline readability avoid overlong line code islice itertools module provide iterate approach ask question expect use case benefit much original datum materialize list large dataset save half memory usage view result balanced solution adapt function use production use modulo operator create generator put list see function return element contiguous order give test print notice contiguous generator provide chunk length pattern item order divide divide list discrete element reinvent wheel update upcoming python introduce itertools.batche solve problem last see give code itertools.batched++ more_itertools+ diy want standard library reference third party library implement itertool recipe pip install more_itertool include python standard library batch similar know list size iterator latter case rephrase beautiful way sure sequence contain whole number chunk give size incomplete last chunk see awesome python answer duplicate question create tuple n. result list divide replace zip triplet none lost python use python use aa array ss chunk size example expand range chunk size example source http://code.activestate.com/recipes/303060-group-a-list-into-sequential-n-tuples/ use chunk size fix number type change toolz library partition function assignment expression python become nice work arbitrary iterable list curious performance different approach test python result python doc version propose tzot j.f.sebastian lot shortcoming use lot code update lazy chunk version use get_chunk function utilspie library install utilspie pip disclaimer creator utilspie library code result point think need recursive generator case python python case massive alien invasion decorate recursive generator become handy line version explicit version usage call len good large list iterable functional flavour see reference python3 talk iterator bolton perfect method call iterutils.chunked_iter output want mercy memory use old way store full list first place iterutils.chunke consider use matplotlib.cbook piece example solution bracket pick book erlang realise question old stumble google follow simple clear huge complex suggestion use slice answer top vote answer leave runt end solution get sized chunk runt pick fractional spot split list round near integer demonstration compare top vote chunk answer use numpy array_split function np.array_split(np.array(data split equal size chunk make sure chunk equal size use think saw option add python pydash package good choice checkout pydash chunk list let r chunk size l initial list use list comprehension point think need obligatory anonymous recursive function solution work important solution comment approach first good solution require loop sub iterator order run appropriate output last command itertool base solution return usual boring restriction access iterators imagine consumer try clean enter datum reverse appropriate order block datum look b5 a5 d5 c5 look a5 b5 c5 d5 a5 element sublist consumer look claim behavior group function hesitate write loop produce wrong result assume sub iterator use order get bad want interleave element chunk second decent number suggest solution rely fact iterator deterministic order set solution use islice worry third itertool grouper approach work recipe rely internal behavior zip function part publish behavior particular grouper function work next function call order next(i0 next(i1 next(in start grouper pass n copy iterator object rely behavior solution improve make assumption criticize sub iterator access order peruse assumption call chain deque data structure store element subiterator bother waste time assume get clever trick idea use itertools.groupby return generator generator want list list replace last line example return list list suffer form runt problem problem give situation abstraction print write small library purpose available library chunk function efficient implement generator substantial amount memory save certain situation rely slice notation arbitrary iterator use answer koffein little problem list split equal number split equal number item partition version chs take account number item divideable partition size last partition fill magic simple correct @aaronhall look sized chunk different interpretation case desire size n like group size>=n orphan create redistribute group do use splitting list part equal length call nchunks(l l n nchunks(l floor(l follow solution creation temorary list object work iterable object note version python output see len(iterable size additional empty iterator object think big problem work v3 inlineable generator base use standard library op request equal sized chunk understand sized balanced size look group item size equal size possible e.g input input output solution give generator batch size question remind raku perl .comb(n method break string sized chunk leave detail easy enough implement similar function python3 lambda expression call assign generator variable loop bonus comb function operate string generic chunker iterable give user choice handle partial chunk end test python output use more_itertools.chunked_even math.ceil easy reason recipe itertools module provide way depend want handle final odd sized lot keep pad fillvalue ignore raise exception dislike idea splitting element chunk size script devide chunk need need split keep order write script work fine simple see answer script well reccomend script output care order solution generate set size distribute value batch big possible keeping number generate batch think simple give chunk array create fancy liner efficient lazy input output iterable depend module liner lazy meaning return iterator produce iterator produce iterator iterate chunk element version good case chunk large element produce become available produce try second liner return iterator produce list list produce element whole chunk become available input iterator last element last chunk reach version use input element produce available wise first lazy liner version use try provide multi line version first chunk_iter liner return iterator produce iterator go chunk element try lot answer simple way result index let say list lst user @tzot solution zip_longest(*[iter(lst)]*n fillvalue padvalue elegant length lst divisible pad last sublist keep length match sublist desirable use zip produce similar round robin zip append remain element lst make whole sublist output trick liner readable wrap function function produce list generator depend use case desirable popular answer produce output confer implementation result example usage result accept answer many function assume length whole iterable know front least cheap calculate stream object mean load full data memory download whole file get length information know full size use code work slice command return less element pass end iterable use result slice calculate length generate chunk expect know end iteration way iterator execute access old school approach require itertool work arbitrary generator task do use generator accept answer add class implementation implement length method useful need know progress tqdm generator return number chunk usage liner version senderle answer use list comprehension python visit link know list comprehension old question post little short similar one result scramble length
get value environment variable python environment variable access os.environ see list environment variable key present attempt access raise keyerror avoid check key exist return true false use get print key useful want use default default do way view value parameter set value check foo set access environment variable use try see content pythonpath pythonhome environment variable helpful second question environment variable print environment variable value import os module get environment variable set environment variable planning use code production web application code use web framework django flask use project envparse use read value define type note kennethreitz autoenv recommend tool make project specific environment variable use autoenv note keep file private inaccessible public number great library envs example allow parse object environment variable rad example try install python decouple import file get environment variable read python library edit october follow @peter comment test true fast use dict access environ performance drive approach call environ expensive well call save dictionary full example worry expose private environment variable sanitize env_dict assignment django see django environ first import os use print environment variable value course replace yourvariable variable want access tricky part use nested loop liner use list comprehension order print environment variable import foreign library use
convert follow string datetime object datetime.strptime parse input string user specify format timezone naive datetime object obtain date object use exist datetime object convert use link strptime docs python python strptime strftime format string docs python python strftime.org format string cheatsheet note use third party dateutil library handle date format convenient strptime guess correct format useful writing test readability important performance install check strptime time module inverse strftime convert yyyy dd string datetime object use caution documentation support parse arbitrary iso string intend inverse operation datetime.isoformat full feature iso parser dateutil.parser.isoparse available third party package dateutil put project convert neat expression check timestring need get confuse datetime conversion string datetime object strptime datetime object format strftime jun 1:33pm equal b b month locale ’s abbreviate name(jun day month pad decimal number(1 year century decimal number(2015 hour hour clock pad decimal minute pad decimal number(33 p locale ’s equivalent pm(pm need strptime e convert string output different format date use panda dateutil.parse output many timestamp imply timezone ensure code work timezone use attach timezone time foreign object enter system python assume offset know location use pytz package query iana time zone database offset use tehran example half hour offset see pytz determine offset particular date convert utc time apply offset note date adoption timezone give weird offset iana decide use local mean time weird hour minute derive longitude chicago use timestamp standardized time adopt chicago string iso format python + use follow simple code date string contain date time timestamp include function datetime.datetime.isoformat support follow format match single character see solution use pandas convert date format string object timing convert op original date time example many option convert string pandas timestamp use to_datetime check doc need special timestamps many property method access addition solution use parser module second answer question beautiful construct string literal work downside slow accept answer strptime output long time think parser method convenient handle time format mention useful add suffix day decouple suffix logic use number date django timezone aware datetime object example conversion important django python use_tz true create small utility function versatile helpful convert string datetime time zone arrow offer many useful function date time bit code provide answer question show arrow capable formatting date display information locale see http://arrow.readthedocs.io/en/latest/ check dateparser dateparser provide module parse localize date stre format find web page install think easy way parse date straightforward way use dateparser.parse function wrap functionality module sample code output use easy_date make easy want date format convert pass individual field pass split string value convert date type get result value date format similar javed answer want date string combine simon javed logic get output datetime.date(2021 seem use pandas timestamp fast string iso string use csio8601 want specify format string respect date time format use hack pass step want convert datetime format modify last line format example try run snippet well clarity see answer real world data real problem mismatch incomplete inconsistent multilanguage region date format mix dataset ok production code fail let go exception happy fox need try catch multiple datetime format fmt1,fmt2 fmtn suppress handle exception strptime mismatch particular avoid need yukky n deep indented ladder try catch clause solution use show start date time column last login time object string datum frame use parse_date option read_csv mention convert string datetime pandas datetime format output short sample mapping yyyy mm dd date string object
determine get full path directory python file contain write file note incantation work use os.chdir change current work directory value file constant relative current work directory change os.chdir call get current work directory use documentation reference module constant function use current work directory os.getcwd file attribute help find file execute locate stack overflow post explain get path current execute file python find useful reference pathlib module introduce python pep pathlib module object orient filesystem path make path relate experience well order get current work directory use path.cwd get absolute path script file use path.resolve method get path directory script locate access .parent recommend call remember file reliable situation get path current execute file python note path.cwd path.resolve path method return path object posixpath case string python cause pain build function work string byte object support path object convert path object string use path.open method latter option require change old code see open(p work python pep add file system path protocol implement python add support pathlike object open function pass path object open function get current directory full path output get current directory folder name alone output myfolder pathlib use way get directory contain current script find current directory file os agnostic way use python brand new high level pathlib module allow call pathlib.path.cwd get path object represent current work directory many new feature info new api find get current directory full path answer want current directory want folder name path folder answer think succinct way find name current execution context search location execute script use sys.argv[0 get full path question use os.getcwd work directory os.chdir(r'd:\steam\steamapps\common set work directory recommend use sys.argv[0 question immutable return current file module object path affect os.chdir snippet sys.argv[0 work work compile pyinstaller magic property set main level sys.argv[0 way executable call mean affect work directory
understanding range function object type python generate content fly similar generator case expect follow line take inordinate amount time order determine quadrillion range quadrillion value generate seem matter many zero add calculation less take amount time instantaneous try thing calculation instant try implement range function result nice range object hood make fast martijn pieter answer choose completeness see abarnert first answer good discussion mean range full fledge sequence python information warning regard potential inconsistency contain function optimization python implementation abarnert answer go detail provide link interested history optimization python lack optimization xrange python answer wim provide relevant c source code explanation interested python range object produce number smart sequence object produce number demand contain start stop step value iterate object integer calculate iteration object implement object.__contains hook calculate number part range calculate constant time operation need scan possible integer range range object documentation advantage range type regular list tuple range object take small amount memory matter size range represent store start stop step value calculate individual item subrange need minimum range object miss several thing real range support .count method hash equality testing slicing give idea simplify contain implementation focus integer test give real range object integer value include subclass int slow scan initiate see match use containment test list contain value do continue support numeric type happen support equality test integer expect support integer arithmetic see original python issue implement containment test constant time python integer unbounde math operation grow time grow make o(log operation execute optimise code python store integer value bit chunk run memory see performance impact due size integer involve fundamental misunderstanding think range generator fact kind iterator tell generator iterating exhaust range sequence list test mean follow rule sequence difference range list range lazy dynamic sequence remember value remember start stop step create value demand getitem side note print(iter(a notice range use listiterator type list work listiterator use special list fact provide c implementation getitem work fine range say sequence.__contain constant time fact obvious example sequence list say easy implement range.__contain check val start step extra complexity deal negative step generate test value well way seem language guarantee happen ashwini chaudhari point give non integral value convert integer mathematical test fall iterate value compare cpython pypy version happen contain optimization obvious good idea reason ironpython newkickasspython leave fact cpython include range generator my_crappy_range make sense test contain least way make sense obvious iterate value generator testing cause iterate consume value first value use source luke cpython range .__contain method wrapper delegate simple calculation check value range reason speed use mathematical reasoning bound direct iteration range object explain logic use example range(4 full c code include bit verbose memory management reference count detail basic idea meat idea mention comment line final note look range_contain function bottom code snippet exact type check use clever algorithm describe fall dumb iteration search range use check behaviour interpreter use v3.5.0 add martijn answer relevant part source c range object write native code pylong object int python use function determine result function check specified range look bit complex c int object fall iterate find value whole logic translate pseudo python wonder optimization add range.__contain add xrange.__contains first ashwini chaudhary discover issue open optimize x]range.__contains patch accept check backporte xrange behave long time see buy commit patch point xrange sequence object doc say range object little behavior support index iteration len function true xrange object support thing come index len include contain linear search think worth make full sequence time part implement abstract base class pep important figure builtin type mark implement abcs xrange range claim implement collections.sequence handle little behavior notice problem issue patch issue add index count range work optimize contain share math index use count change go backporte 2.x bugfix add new method point rc status chance get optimization backporte reject fact get iteration free indexing alone xrange object get custom iterator first version reimplemente get detail wrong give range(5 false daniel stutzbach update version patch restore previous code include fallback generic pysequence_itersearch range.__contain use optimization apply answer explain offer experiment illustrate nature range object see range object object remember range use many time iterate time generator lazy approach evaluation extra optimization range value range compute real use due extra optimization way integer big consider sys.maxsize sys.maxsize range(sys.maxsize due optimization easy compare give integer min max range decimal(sys.maxsize range(sys.maxsize slow case optimization range python receive unexpected decimal python compare number aware implementation detail rely change future object return range range object object implement iterator interface iterate value generator list tuple implement contain interface call object appear right hand side operator contain method return bool item leave hand side object range object know bound stride easy implement take example range(4 try range(x large x value use generator comprehension avoid invoke range.__contains optimisation tldr range arithmetic series calculate object get index list contain method compare start end range
want change column label pandas dataframe use df.rename function refer column rename column rename minimal code example follow method work produce output remember assign result modification inplace specify inplace true v0.25 specify errors='raise raise error invalid column rename specify see v0.25 rename doc use inplace false return copy return copy modify dataframe place set inplace true default behaviour version likely change future assign header assign .column attribute rename method take function example document work text datum significant update column rename version construct sample dataframe result follow possible use old method signature rename function accept function apply column name supply list set_axi method equal length number column index inplace default true inplace default false future release wrong assign column good solution advantage use use part method chain return new copy dataframe store intermediate step chain variable reassigning column want remove sign column name rename column pandas easy task replace exist name name provide order provide use way edit new_name wish work great need rename column correct misspelling accent remove special character focus thing state edit column name store list know replace column name want solve problem replace strip first character column header op do step want focus replace exist column object new give list replacement column name df.column new new list new column name simple get drawback approach require edit exist dataframe column attribute do inline show way perform pipeline edit exist dataframe setup focus need rename replace column name pre exist list create new sample dataframe df initial column name unrelated new column name solution pd.dataframe.rename say dictionary mapping old column name new column name use pd.dataframe.rename create dictionary include call rename follow take advantage fact iterate df iterate column name work great original column name unique break setup non unique column solution pd.concat use key argument first notice happen attempt use solution map new list column name end repeat y765 use key argument function iterate column df solution reconstruct use single dtype column end dtype object column convert require dictionary work single dtype mixed dtype solution gimmicky trick transpose set_index pd.dataframe.set_index allow set index inline corresponding set_column transpose set_index transpose single dtype mixed dtype caveat solution apply single dtype mixed dtype solution use lambda pd.dataframe.rename cycle element new solution pass lambda take ignore expect iterator give default value use cycle time regard value point folk sopython chat add protect variable context believe need protect worth mention explain bit happen scene dataframe set series series turn extension numpy.array numpy.array property name series pandas respect attribute linger place use hack pandas behavior lot answer talk df.column attribute list fact series mean attribute happen decide fill name column series note name index come column low attribute linger set df.column df.one.name set df.one.name df.column give df.one.name give return pandas reuse define series pandas way multi layer column name much magic involve want cover answer see pick achievable set column list let understand rename small example rename column use mapping rename index row_name use mapping suppose dataset name df df rename many pandas function inplace parameter set true transformation apply dataframe call example case preserve original dataframe see people fall case create dataframe expensive task example create dataframe require query snowflake database case make sure inplace parameter set false type transformation look number different pandas gui tool ' m creator call mito spreadsheet convert edit python code let say dataframe rename column use method use limitation method column change full column list pass method applicable index label example pass throw error length mismatch expect axis element new value element method pandas rename method use rename index column row change row column get dataframe df.column dump list manipulate reassign dataframe name column good way know way well way evaluate main technique put answer question use cprofile gage memory execution time @kadee @kaitlyn @eumiro function fast execution time function compare round second answer moral answer good way new list column order exist column assignment simple dictionary keyed old column name new column name follow list dictionary mapping strip lead symbol list comprehension list new column name try way replace original column label strip unwanted character original column label run loop df.column append strip column df.column single statement use list comprehension strip method python strip give character begin end stre real simple use assign column name order put use option rename use regular expression method generic add additional delimiter comma separate variable future proof work code output note approach previous answer work multiindex multiindex need follow deal load column name provide system control come follow approach combination general approach specific replacement go create dictionary dataframe column name use regular expression order throw certain appendix column name add specific replacement dictionary name core column expect receive database apply dataframe go want remove sign use code addition solution provide replace column read file use name header=0 first create list name use column name case column name replace name list nifty little function use cut type example work assume use regular expression solution remove need manual encoding use regular expression need rename feature xgboost line answer df.column df_new_col good processing time timeit comparison df column try change name use lstrip strip methods index output simple fun pythonic solution step get column dataframe list method rename dataframe attribute specify want rename column dictionary need specify column rename key new name get value change follow pattern remove character column use dictionary comprehension
want test key exist dictionary updating value key write follow code think good way accomplish task well way test key dictionary test existence key dict use dict.get provide default value key exist provide default value key use dict.setdefault assignment use defaultdict collection module use key my_dict key my_dict.keys use dictionary o(1 hash oppose o(n linear search list key test presence key dictionary use keyword common use check existence key dictionary mutating default initialize value e.g. value list example ensure empty list append insert first value key case find collections.defaultdict type interest old code find use has_key deprecate method check existence key dictionary use key_name dict_name shorten code good cosmetic improvement believe good way additional information speed execution accept answer propose method loop use defaultdict recommend get recommend use setdefault method sound want dictionary python get('key default method set default value case key use python ternary operator use eafp easy ask forgiveness permission see stack overflow post check give key exist dictionary get idea first inspect method call dictionary method brutal method check key exist get method interesting method item key sound much work let examine get right method dict printing show key return none use get information key present consider create dict single key none lead get method reliable case value none story happy ending use comparator get correct result examine python byte code show compare operator reliable get way get result dependent thing read http://paltman.com/try-except-performance-in-python-a-simple-test/ use try block use has_key method fyi add chris b good answer work reason call int return defaultdict scene construct dictionary name factory function documentation python dictionary method call contain method return true dictionary key else return false way check key exist use boolean operator return explanation know python none object length evaluate false evaluate true boolean operation evaluate leave right return operand true false let see example string evaluate true rest evaluate division error raise switch order evaluate raise exception use pattern check key exist return correct result key exist want print boo take result boo use loop iterate dictionary get name key want find dictionary check exist use condition
line way delete key dictionary raise keyerror delete key dictionary use argument form dict.pop return my_dict[key key exist dictionary none second parameter specify my_dict.pop('key key exist keyerror raise delete key guarantee exist use raise keyerror key dictionary answer line way ask consider way delete object dict atomic possible key my_dict statement delete del execute case del fail keyerror give safest use line course liner take time figure my_dict.pop("key none add answer save other google time key dictionary remove return value return default default give key dictionary keyerror raise documentation del my_dict[key my_dict.pop(key remove key dictionary key exist key exist key my_dict del my_dict[key none time fast del try statement remove lot key dictionary line code think use map succinct pythonic readable need catch error pop value dictionary use lambda inside map python3 use list comprehension work e cause error mydict e key use dictionary comprehension create new dictionary key remove delete condition error key exist delete key python dictionary follow approach use del keyword approach follow keep mind process delete key dictionary make specific key exclude dictionary addition observe return dictionary order mydict run shell execute notice order mydict try print see key include exclude dictionary approach make new dictionary assigning follow statement variable try print follow parent order use pop method difference del pop use pop method store key value need follow fork gist future reference find useful use exception handling want verbose slow pop method key exist matter key latter method bet fast approach method dangerous key remove line keyerror raise way use item dict comprehension item couple dict comprehension help achieve task key value pair deletion drawback place dict technique new dict create key n’t wish include output prefer immutable version want keyerror declare temporary class set default value dict.get value equal class mean key exist
see convert integer string python convert float string round use read input number close duplicate question receive string user input want convert hope input convert type python3 version is_float see checking string convert float python accurate name function is_convertible_to_float(value unit test do use python2 check python3 different behavior string convertable float confound difference number interior underscore allow float("1_3.4 float(13.4 true think know number good think big surprise catch broad exception way kill canary gobble exception create tiny chance valid float string return false float line code fail reason content string write life critical software duck type prototype language python get large problem method deserve mention ast.literal_eval use evaluate string contain python expression untrusted source need parse value safe eval consider possibility commas string representation number case float("545,545.2222 throw exception use method locale convert string number interpret commas locale.atof method convert float step locale set desire number convention example united states number convention united states uk commas use thousand separator example american locale comma handle separator example european number convention majority country world commas use decimal mark period example french locale comma handle decimal mark method locale.atoi available argument integer averse third party module check fastnumber module provide function call fast_real question ask pure python implementation user codelogic harley correct keep mind know string integer example call int("545 first cast float string list use map function good type python parse numeric string corresponding float value parse stre integer want know parse float string float int string int good ask mix set problem simple answer float integer conversion various basis know base advance default note prefix python expect literal see remove prefix know base advance know correct prefix python pass base motivation code represent code specific value need convert basis let python correct syntax use apropos prefix get automatic conversion integer follow literal valid python binary prefix 0b octal prefix hexadecimal prefix 0x useful describe binary flag file permission code hex value color example note quote see integer start python deprecate octal syntax bad look value python raise syntaxerror convert python octal octal work prefix question seem little bit old suggest function parsestr make similar return integer float give ascii string convert none return untouched code course adjust want float("545.2222 int(float("545.2222 yaml parser help figure datatype string use yaml.load use type(result test type use function convert string type take account round wrong use json.load see become type float regex string prepared normalized casting number usage way verify number typecast python use constructor function type pass string value try cast parameter example scene python call object float method return float representation parameter powerful define type use class float method cast float use float(myobject handle hex octal binary decimal float solution handle string convention number know test case output illustrate talk test pass string function return int float string depend pass correct version totoro answer try parse string return int float depend string represent rise parse exception unexpected behaviour deal mixed integer float want consistent way deal mixed data solution proper docstre output use pythonic way come number character import easy model use function convert object str int float base actual string supply look int float object float int method default use float use int float method convert string integer float want use third party module follow robust solution fast handle literal number many solution fail interpretation question hint vague possible look work injection vulnerability string example import os os.abort background string come possibility theoretical speculation question vague clear vulnerability exist
get last element list way prefer some_list[-1 short pythonic fact much syntax some_list[-n syntax get nth last element some_list[-1 get last element some_list[-2 get second last way some_list[-len(some_list give first element set list element way instance note get list item index raise indexerror expect item exist mean some_list[-1 raise exception some_list empty empty list last element str list object end empty astr alist want use object sameness significance distinction make return empty list object empty str object last element"-like exception object depend want list pop method delete last element simple way display last element python many method achieve goal short sweet use get last element pass subscript notation index slice take negative integer argument modify example documentation indicate item sequence index reference case string python -1 reference last element character method materialize second list purpose get last element sake completeness support iterable list variable name head bind unnecessary create list intend list apropo know list least accept subscript notation commenter say wish python function lisp rid lot unnecessary lambda function simple define use operator.itemgetter case complicated find performant get last element different way new programming avoid section couple different part algorithm change algorithm place unintended impact line code try provide caveat condition miss comment think leave caveat slice list return new list slice -1 end go want element new list fail list empty attempt access index raise indexerror need handle slicing purpose do need feature python inner scope loop perform complete iteration list last element reference variable name assign loop last thing list last thing name item bind use get last element mutate original list remove return last element original list modify default argument use index argument valid use case common know 'd completeness reverse return iterator support iterator protocol pass result reverse think good reason need rest reverse iterator look prevent indexerror list index range use syntax method lst[-1 good approach general iterable consider code solution query output retrieve last element list change list retrieve last element list mutate change original list mutate original list recommend reason look less pythonic use list[len(list)-1 assume list empty use code want get indexerror list empty common language way items[len(items easy way get last element require pythonic knowledge strange post unpack use operator get element end index access last element list python access last element negative indexing -1 access last element pop method pop method remove last element list method method method method method outputting avoid indexerror list index range use piece code let consider list python list manipulate give part element use follow command get last element use length get last element list empty get indexerror exception get arr[-1 my_list[-1 return last element list negative sequence index represent position end array negative indexing mean begin end refer last item -2 refer second last item need take put index example get output use next iter simple solution find answer mentioning adding try some_list[~0 tilde symbol
sort list dictionary specific key value give sorted name become sorted function take key= parameter use operator.itemgetter define function completeness add reverse true sort descend order sort list dictionary key='name sort list dictionary key='age my_list want python key argument efficient neater lambda imo understand operator.itemgetter mileage want list multiple key follow hackish relie convert value single string representation comparison work expect number include negative one format stre padding use number key use arbitrary value itemgetter set value item name attribute guess mean sort use custom comparison function pass function calculate custom sort key efficient key calculate item comparison function call many time standard library contain generic routine get item arbitrary object itemgetter try use schwartzian transform perl give perl schwartzian transform computer science schwartzian transform perl programming idiom use improve efficiency sort list item idiom appropriate comparison base sort ordering base order certain property key element compute property intensive operation perform minimal number time schwartzian transform notable use name temporary array implement comparison function compare dictionary value name key see sort mini pythoninfo wiki use low example use pandas package method runtime large scale slow traditional method propose other benchmark value tiny list large list dict alternative general solution sort element dict key value advantage specify key work key miss dictionary let say dictionary element use key argument sort pass custom function check need original list dictionary modify place sort method use custom key function key function list sort sort place need original list call sorted function pass list key function assign return sorted list new variable printing data_one new_data big fan filter lambda good option consider time complexity loop good µsec loop loop good µsec loop performance concern use operator.itemgetter lambda build function perform fast hand craft function itemgetter function seem perform fast lambda base testing https://wiki.python.org/moin/pythonspee builtin function run fast hand build equivalent example map(operator.add v1 v2 x+y v1 v2 comparison sort speed use lambda itemgetter technique sort list order verify execution final statement code block indicate @claudiu @monojohnny comment section answer give sort list dictionary key age name sql statement order age name use print(newlist name bart age name milhouse age name homer age sort multiple column descend order cmp array global cmp function contain field name inv = desc asc
possible upgrade python package time pip note feature request official issue tracker build flag start pip version freeze become exclusive use python parse json output use pip<22.3 use old version pip grep editable package definition suggest replace grep+cut sed awk perl -n1 flag xargs prevent stop update package fail thank note infinite potential variation try keep answer short simple suggest variation comment use follow python code pip freeze print warning fixme error pip pip 10.0.1 upgrade local package install pip review upgrade package pip review fork pip tool see pip tool issue mention @knedlsepp pip review package work pip tool package work pip review look new maintainer pip review work window version follow work window good other directory command prompt example c:/user username open text file replace = se execute problem certain package stall upgrade numpy go directory comment name add run uncomment section great copying python global environment way pip review method select upgrade package upgrade fail run continue pipupgrade help upgrade system local package requirements.txt file upgrade package break change pipupgrade ensure upgrade package present multiple python environment compatible python python pip pip pip pip note ' m author tool window version consult excellent documentation rob van der woude option seem straightforward readable explanation pip list --outdate output list outdate package format awk command nr>2 skip record line print select first word line suggest sergioaraujo remove tail +3 awk handle skip record follow liner prove help pip pip list freeze |||| se xargs -n1 pip install old version xargs -n1 keep go error occur need fine grain control omit raise error add flag define error ignore piping follow line separate error |||| se s/^<first character error>.*// work example print package outdate robust solution pip3 use pip remove 3s os x oddity os x july ship old version se dozen year old extend regular expression use solution solve issue popular solution solution design tested1 problem popular solution command use simple portable pip syntax combination se sh overcome issue detail se operation scrutinize comment version2 detail test use linux 4.8.16 200.fc24.x86_64 cluster test linux unix flavor run cygwin64 instal window test io need see anatomy command exact equivalent pip3 command comment upgrading python pip component use upgrading python pip component potential cause deadlock package database corruption problem upgrading thing upgrade package upgrade need project break easy way upgrade package package update file write pip upgrader update version requirements.txt file package choose package activate virtualenv important install new version upgrade package current virtualenv cd project directory run requirement place non standard location send argument know package want upgrade send argument upgrade release post release version add argument command full disclosure write package seem concise explanation pip list --outdate get line cut set space delimiter mean get first column line pass xargs run command pip install line append argument -n1 limit number argument pass command pip install liner version ramana answer https://github.com/cakebread/yolk get yolk use virtualenv want upgrade package add virtualenv base old script job accord documentation step step simple fast solution find pip issue discussion source use awk update package window powershell update update python package window linux output list instal package requirement file edit replace = use replace command editor upgrade outdated package source resource quick read update python line powershell administrator right python pip version 10.0.1 work break package special wheel list pip<22.3 instal pure bash z shell liner achieve format way pip>=22.3 -o freeze exclusive use liner try amazing yolk make easy information yolk lot thing find useful use ramana answer work good add catch site package check exclude development package locate system site package directory try skip package remove pypi endolith hope easy pip.install(dist.key upgrade true look pip use command line docs mention internal api pip developer use docstring easy window necessary troublesome install package update pip packages linux shell update pip package window powershell point send pull request pip folk use pip library solution write effective seemed work use printf space separate package name powershell solution python python upgrade package make sure dependency break see outdated package install type json jq answer code update python package activate virtualenv pip variation rbp answer bypass editable development distribution share flaw original download reinstall error package prevent upgrade package relate bug report bit disjointed migration bitbucket script update outdated package new version pip output legacy format version + use work launch shell use pur simple point update requirements.txt file reflect upgrade upgrade file usual windows cmd snippet follow try code ramana find ubuntu write sudo command script work fine ubuntu saucy salamander way script python take ramana answer make pip3 friendly macos easy find cmd key allow wrap shell command line return output answer state possible solution comment include issue permission use command little change follow solved note add sudo allow command run root permission line cmd pip check make sure dependency break bat script upgrade pip default package default python version run bottom python code terminal command prompt use pipx liner want upgrade package instal pip avoid upgrade package instal tool apt use script use ubuntu work distro base post pip install pip upgrader pip upgrade path interactive pip requirement upgrader upgrading requirement package package pain ass update version requirements.txt file
want get new string third character end string mystring[2 end omit second part mean end omit first part start start python call concept slice work string take look comprehensive introduction completeness mention third parameter array slice step reverse string simple select alternate character ability step string maintain consistency able array slice start end substr php perl work way parameter begin length python behaviour different expect begin end difficult spot beginner correct replacement substr(s begin length common way achieve string slicing mystring[a b give substre index b example seem miss full shallow copy common idiom create copy sequence type intern string shallow copy list see python list slice syntax use obvious reason way substre string python get new string 3rd character end string mystring[2 end work assign bind name end constant singleton none slice notation important argument default give none pass leave second part mean end leave first part start start example note include start slice go include stop step none default slice use step step negative integer python smart go end begin explain slice notation great detail answer explain slice notation question get right end call slice notation example leave second parameter end string add point discussion use none empty space specify start end helpful function provide empty space argument python slice object mystre contain account number offset length extract account number way acct mystring[6:][:9 op accept want try experimental fashion work error raise default string padding occur get situation need translate php script python many usage substr(stre begin length choose python string[beginne end calculate lot end index easy way use string[beginning:][:length save lot trouble miss find complete answer page original question(s variable discuss go search allow comment add conclusion m sure interested accessing page leave first part leave middle get simple substring 5th character count start blank case use hardcode index mess order avoid python offer build object slice want know many money leave normal solution use slice use slice gain readability code -1 declare print start maximum limit-1 output note -1 len(a)-1 output code declare print index last element remember set maximum limit print string print string remember index list string start simple solution use loop find give substre string let say string variable want check give match string exist main string
way convert string lowercase use canonical pythonic way purpose case insensitive matching use case fold str method python python want look pyicu py2casefold several answer address python handle plain string literal unicode python paste shell encode literal string byte use low map change byte aware get string script python object non ascii python warning python byte string encoding give intend coding ambiguous see unicode docs pep need unicode string handle conversion accomplish unicode string literal disambiguate u prefix note u prefix work python note byte different str byte escape character \u follow byte width bit representation unicode letter form str need convert unicode python unicode type universal encoding format many advantage relative encoding use unicode constructor str.decode method codec convert str unicode method convert unicode type unicode_literal recommend work text unicode software work unicode string convert particular encoding output get lowercase type str encode python string python unicode encode python string python string decode unicode type python work non english word case decode('utf-8 help overwrite variable use work call try un recommend output write use swapcase uppercase letter become lowercase vice use case mention convert upper low low upper output
create class static variable method python variable declare class definition method class static variable @millerdev point create class level variable distinct instance level variable different c++ different c static member access use reference instance see python tutorial say subject class class object @steve johnson answer regard static method document build function python library reference @beidy recommend classmethod staticmethod method receive class type first argument @blair conrad say static variable declare class definition method class static variable gotcha carry example notice instance variable t.i get sync static class variable attribute set t. bind namespace distinct test namespace want change value static variable change scope object define put static quote python static variable sense c++ say specific static variable method python tutorial relevant information class class object @steve johnson answer regard static method document build function python library reference @beid mention classmethod similar staticmethod classmethod first argument class object example answer note static class method accomplish use build decorator usual first argument my_method bind class instance object contrast first argument my_class_method bind class object case test none argument bind argument optional implement static variable mutable static variable contradiction term millerdev point answer problem python class attribute static variable consider line x.i add new instance attribute x change value test class attribute partial expect static variable behavior sync attribute multiple instance class see gotcha achieve turn class attribute property static variable remain sync class instance note class instance decide define version decide deserve note speak static variable property special type descriptor property behavior equivalent mutable static variable sync class instance immutable static variable behavior omit property setter attempt set instance attribute return attributeerror note method work instance class work use class example line assert test.i = x.i produce error attribute test different object many people find surprising go inspect test class definition second version take note line member test property object type object return property function find confuse think perspective language go study property object order python attribute return descriptor protocol method resolution order mro present solution gotcha try follow minimum understand assert test.i = x.i cause error present python solution informational purpose endorse good solution doubt emulate static variable behavior language python necessary useful help understand python work update attempt awful insist hint python elegant language shoe horn behave language necessary use code ethan furman answer emulate static variable behavior language use metaclass metaclass class class default metaclass class python new style class post python believe type example define metaclass apply class python metaclass create attempt emulate static variable behavior language work replace default getter setter deleter version check see attribute request static variable catalog static variable store staticvarmeta.static attribute attribute request attempt resolve use substitute resolution order dub static resolution order sro do look request attribute set static variable give class parent class attribute appear sro class fall default attribute set delete behavior mro add class variable class fly class instance change class variable use classmethod need static method get class argument use decorator static property time look python definition variable change type mutable immutable class attribute instance attribute static attribute sense c++ use static method pythonic sense relation class use classmethod define method independent class special thing note static property instance property show example mean assign value instance property try access property instance static value use property declare python class static slot memory static method python call classmethod take look follow code notice call method myinstancemethod get error require method call instance class method mystaticmethod set classmethod use decorator @classmethod kick giggle call myinstancemethod class pass instance class possible static class variable worth effort proof concept write python exact detail wrong code tweak match mean static variable use test define member variable member method variable static non static depend variable express example result @dataclass definition provide class level name use define instance variable initialization method init want class level variable @dataclass use typing.classvar type hint classvar type parameter define class level variable type usage example enforce class static use metaclass accident try initialize myclass get staticclasserror interesting point python attribute lookup use create virtual variable assignment create note lookup use self label static sense associate particular instance value depend class instance object datatype possible primitive type bool int float str different oop language inherit class static attribute exist attribute exist inherit class python start look parent class find parent class value return decide change value inherit class static attribute create runtime next time read inherit static attribute value return bacause define object list dict work reference safe use static attribute inherit object address change change attribute value example integer datum type solution base refdatatype library possible write static variable method python static variable variable declare class level call static variable access use class name instance variable variable relate access instance class instance variable static method similar variable static method access use class name need create instance keep mind static method call non static method python regard answer constant static variable use descriptor example result raise exception ignore set value pass thing look java style static class variable look answer official doc howto information descriptor static datum member output explanation good way find use class create object use object example make class name staticflag class present static var success private static var tryit class represent regular class need use make object flag staticflag flag send reference regular object object add list tryarr script result summarize other answer add many way declare static method variable python put decorator method(function declare make static method eg method receive argument function type return static version function pass @classmethod similar effect function @staticmethod time additional argument need accept function similar self parameter instance variable @classmethod use parameter function case want modify class definition eg method variable declare outside method class static refer python documentation master oop python avoid potential confusion like contrast static variable immutable object primitive object type integer float string touple immutable python mean object refer give name change aforementione object type name reassign different object object change make variable static take step disallow variable name point object point note general software concept specific python see other post information implement static python use class factory use nonlocal keyword add scope context class create hack use eval(str obtain static object kind contradiction python records.py file class object define static method constructor save argument file import record need select object instantiate demand accord type datum read object_name recordone class name call cur_type eval(object_name instantiate cur_inst = cur_type(args instantiate call static method cur_type.getname example abstract base class implementation goal backend instantiate static eval return object instantiate give static behavior attempt share static variable example increase instance script work fine use list dictionary get static behavior instance put way static variable create user define class come existence define static variable follow keyword self @staticmethod class variable static method class share instance access assign value variable try assign value method call case work throw error assume look static variable pythonic sort job consent adult use class variable provide variable instance access update beware many answer use class variable break subclasse avoid reference class name give functionality use sheldon.foo address variable pass test allow work great advice thing watch create class check raymond hettinger video https://www.youtube.com/watch?v=htlu2dfodtg create class variable x instance variable name instance method class method static method test3 show explain class variable answer class method static method answer instance method answer
example output python python print add \n space avoid know append string python use sep= end= parameter print function add newline end string add space function argument want print pass string parameter use parameter time trouble buffer flush output add flush = true keyword argument python import print function python use future module allow use python solution note flush keyword available version print function import future python work python early version need flush call sys.stdout.flush rewrite print statement file import use sys.stdout.write need call ensure stdout flush python early simple describe print cr guido van rossum paraphrase possible print carriage return append append comma last argument print instance loop print number line separate space note parameterless print add final newline note title question use printf python people look base title python support printf style substitution multiply string value use python style print function python break exist keyworded print statement file ruin python print keyword create separate printf.py file use file example show printf style print line print function python optional end parameter let modify end character output hellohello sep separator output hellohellohello want python add start file use functools.partial create new function call printf easy way wrap function default parameter python print function call python translate change end want python add end print function print new line python python python extra space print python misleading python avoid general way print newline python append print statement remove \n use end= example loop print newline python add trail comma say print ignore \n example loop visit link try problem solve work unix windows test mac os x. python follow execute python filename.py python3 filename.py use end= lenooh satisfied query discover article search python suppress newline use idle raspberry pi develop python putty want create progress bar putty command line want page scroll want horizontal line reassure user freak program cruncxe halt send lunch merry infinite loop plea leave ' m fine take time interactive message progress bar text print('skimme search_string \b end= initialize message prepare next screen write print backspace ⌫ ⌫ ⌫ rubout period wipe extend line period parrot user input \b trim exclamation point search_stre text space print force place punctuation follow space first dot progress bar simulate message prime page number format length lead zero take notice user progress process reflect count period build right progress bar meat sys.stdout.write('\b\b\b ' + format(page line first erase leave back cursor numeric character \b\b\b ⌫ ⌫ ⌫ rubout drop new period add progress bar length write digit page progress wait full buffer output channel close force immediate write sys.stdout.flush build end print bypass print(txt end= code loop mundane time intensive operation print return wipe digit add period write digit incremente digit wipe rewrite mean necessary flourish exemplifie print prime period forget fancy backslash b ⌫ backspace write format page count printing period bar time space newline use sys.stdout.flush pair note raspberry idle python shell honor backspace ⌫ rubout print space create apparent list fraction want print loop want print new line time example want print add comma print output many answer seem little complicated python default value end \n change space use end= space printf notice answer correct want make shortcut write end= parameter end define function accept number parameter accept parameter file flush name use end sep output code give follow output want print output straight line add attribute call end print output space add ending output example output remember function output work 2.7.8 enthought canopy os terminal module import time travel require python3 example output world method add spearator provide text output world need import library use delete character remove newline space
call function use string function name example give module foo method bar getattr use class instance bind method module level method class method list go use local return dictionary current local symbol table use global return dictionary global symbol table base patrick solution get module import use simple contribution class need instance file use example class give string complete python path function go get result say function good answer accord python programming faq primary advantage technique string need match name function primary technique use emulate case construct answer hope want eval behavior add auto importing case extra dictionary want check go deep worth need pass function class name app name string use eval use summon function current context real function use wish main benefit get eval relate error point summon function get function relate error call question call method class use method name assignment variable duplicate mark duplicate post relate answer scenario method class want call method class add detail original example offer wide scenario clarity output python function1 function2 none suggest discover use python hope help getattr elegant 7x fast method get return value function local class method module eval elegant = implement error handle principle use getattr example module import class module class exist typo well nameerror raise function exist attributeerror raise use handle error python3 use getattribute method see follow example list method name string mention operator.attrgetter getattr call method name object object parent call class parent class super(self.__class self face similar problem convert string function use eval ast.literal_eval want execute code stre foo.bar want assign function name string mean call function demand code question add module name foo follow warn eval exec dangerous method confirm safety warning eval exec dangerous method confirm safety warning eval exec dangerous method confirm safety mean get pointer inner function module well pythonic way possible punctual case simple answer allow clear screen example example eval exec print top cleaning use windows change clear cls linux mac user leave example execute
use virtualenv virtualenvwrapper switch virtualenv fine use workon command exit virtual environment work system environment right way get exit shell start new one kind annoying command work command exist go create activate virtualenv give shell function name put thing normal look code virtualenvwrapper support deactivate way escape virtualenvs try leave anaconda environment command depend version conda recent version install conda function shell case run old conda version implement deactivation use stand alone script use work try know bash source work think odd wrapper workflow virtualenv implement complement counterpart source activate mileage vary define alia workoff opposite workon remember activate python virtual environment deactivate find miniconda3 environment run deactivate source deactivate work run deactivate name environment able exit deactivate python environment example window powershell example linux ubuntu lts desktop use virtualenvwrapper order ease way work virtualenv instal virtualenvwrapper use standard shell open ~/.zshrc use zsh add line activate exist virtualenv use command workon order deactivate virtualenv tutorial step step install virtualenv virtualenvwrapper particular case go work directory activate env work folder deactivate try work use deactivate feature provide venv activate script require trust deactivation function code reset environment variable take account original activation switch configuration work do meantime fine introduce new non risk leave environment modify possible process alter environment variable parent use separate sub shell sure venvs leave residual change bash file pythonvenv bin activate exit ctrl]+[d deactivate function create sourcing activate discover usual mean look command ~/bin wish create execute function deactivate problem script name deactivate contain single command deactivate cause endless loop execute venv common mistake avoid execute deactivate function exist create sourcing activate use zsh autoenv base autoenv zsh autoenv source know whiteliste .autoenv.zsh file use project root directory handle enter leave event nest stash variable overwrite restore example leave dtree directory virtual environment exit development tree utile name hide mean link illuminati case able activate virtual environment use env name\scripts\activate deactivate use deactivate run update window pc deactivate recognize internal external command use moment env name\scripts\deactivate solve problem conda deactivate source deactivate work work try deactivate name environment problem work installer script take look bin activate_this.py reverse example sure work intend miss
check object attribute example tell attribute property use try see zweiterlinde answer offer good advice ask forgiveness pythonic approach general practice python property likely time call let exception propagate trap try block hasattr property likely time sure use fall exception block jarret hardie answer hasattr trick add many python community recommend strategy easy ask forgiveness permission eafp look leap lbyl see reference eafp lbyl little disappointed far eafp lbyl @code pythonista idiomatic python preferred use hasattr catch attributeerror want value attribute default good option use getattr think look recommend want detect python properties- disadvantage attribute error property get code catch do- docs library warn reason recommendation hasattr detect property link pipermail python dev/2005 december/058498.html accord pydoc hasattr(obj prop call getattr(obj prop catches exception valid wrap attribute access try statement catch attributeerror use hasattr suggest avoid user @jpalecek mention attributeerror occur dostuff lose approach well edit approach serious limitation work object iterable check comment use python high convenient alternative check object particular attribute ' m sure good approach use use getattr use comment welcome right answer want add hasattr use conjunction assert avoid unnecessary statement make code readable case property miss program exit assertionerror printing provide error message object lack property case state answer assert use test condition happen purpose crash early case corrupt program state case property miss assert appropriate object dictonary dictionary hasattr work many people tell use has_key dictionary depreciate dictionary use use hope expect hasattr try avoid prefer getattr getattr hasattr use use getattr get property property return none depend situation check isinstance kind object use corresponding attribute introduction abstract base class python approach become powerful abc allow sophisticated way duck type situation useful different object attribute name different meaning use hasattr lead strange error nice example distinction iterator iterable see question iter method iterator iterable name different hasattr useless isinstance abc provide clean solution agree situation hasattr approach describe answer appropriate solution intuitive approach simple use dir(object return list available function attribute object check object contain attribute use hasattr builtin method instance object want check attribute stuff method signature hasattr(object name bool mean object attribute pass second argument hasattr give boolean true false accord presence name attribute object possible option depend mean output allow check none value attribute careful instantiate compare undefined multiple place work case warn paragraph multiple undefined match modify pattern undefine notimplemented notimplemented confused notimplementederror build semi match intent js undefined reuse definition match drawback booleans look weird log stack trace get know appear context use hasattr check object class attribute python example person class show use hasattr p object show output use person class show output
folder structure import function some_file.py try work note answer intend specific question programmer come search engine answer look structure file package see answer modify search path default import file python search directory entry point script run sys.path include location package installation directory little complex cover case add python path runtime wrong make sure folder contain init__.py allow include package answer talk pythonpath module parallel location question shorthand make module visible first import sys second append folder path third make blank file call init subdirectory tell python package fourth import module folder think way use environment variable pythonpath describe documentation python2 python3 problem python look python directory file finding specify talk directory python change application.app.folder.file import func_name add dot say look folder application folder look python directory answer lack clarity test python folder structure myfile.py content import statement main.py print try python relative import lead dot high level hierarchy begin current directory problem work get bit many gotcha relative import read answer comment detail fix attempt relative import non package init__.py hint init__.py directory level need python leave run top level directory top level directory pythonpath phew python import source file link documentation simplest solution ' m include answer completeness example first file import name foo.py code import file inspire example documentation output note variable name module name filename need match code work output import module introduce python give control module import refer documentation information know add init__.py file folder function want import job use sys.path.append absolute path ideal move application environment use relative path work current work directory depend script invoke application folder structure fix use os.path get full path module wish import example structure let say want import mango module follow vanilla.py course need mango_dir variable understand work look interactive session example check documentation worth note deal multiple folder make easy use package use dotted module name face challenge import multiple file manage overcome consider application root directory python project create empty init__.py file application app folder folder make change follow get definition func_name work python3 linux good practice create package run access module module main_module.py high level directory structure use access sub package parent package level package module use top level directory file main_module.py create run file folder testing run main_module.py output open picture file note package structure want access photo use absolute directory high level directory let suppose run main_module.py want open module_1.py module_1.py contain correct wrong module_1.py photo.png directory add parent directory pythonpath order achieve use os depend path module search path list sys.path add parent directory follow work window case class import file look main file include code bumped question several time like share solution follow solution develop application python version python support jan/1/2020 python need init__.py project subdirectory due implicit namespace package see require package python like import class folder a. instal package develop new project use try catch check error code example instal application post tutorial installation include happy code ' m special use python window complete information windows linux relative absolute path work sys.path need relative path use script several pc different main directory use window use separator file name course double python string valid example note think convenient event less window native linux compatible simple write copy windows explorer purpose loading module specific path assist development custom module create symbolic link folder test script point root custom module module reference take precedence module instal name script run folder test linux work modern os support symbolic link advantage approach point module sit local svc branch work copy simplify development cycle time reduce failure mode manage different version module import mysubfolder import myfile myfile mysubfolder work project want user install pip install follow file list a.py b b b.py instal module running follow directory different location filesystem /moustache armwrestle able run confirm a.cats equal a.b.dog equal intend case look solution work python add folder contain script launch pythonpath run folder application app2 some_folder add path base dir execute command run file module add init__.py some_folder directory add base dir python path class accessible non relative import code import python script give path matter locate python version safe way find codebase psutil line psutils.test.__init__.py recent commit usage example important caveat module treat top level relative import parent package fail expect spend much time follow work os window python note python v3.10.0 use init__.py file work wy hsu 1st solution work reposte absolute file reference clarity alternative solution work understand work think dot reference current directory print path current folder current directory list top provide clarity work comment hope help problem use pycharm project structure code configuration import setting example.py raise import error problem open pycharm consider skylake root path run code fix mark backend directory source root fix problem use importlib import module want import module folder use string example code folder call script call need folder change scriptname variable use script reference module function call hello snake module run function test python create symlink module want import symlink make sure interpreter locate module current directory script import module work remove symlink ignore symlink commit symlinke module approach let work module locate parallel script execute multiple folder sub folder import class module main directory example tree structure project want import usermodel class user_model.py main.py file use import class user_controller.py file use line overall give reference main project directory import class file python file project directory solution people necessary init__.py package import work refresh python shell press f5 go run module way change directory read file python change directory want work different file different directory python shell change directory sys cameron say clicked add new folder wonder able import realize right click create python package classic file system folder post mortem method add init__.py make python treat file system folder package mention answer add answer case go route ' ve problem number time ' come page lot last problem run server fix directory debug want run different sub directory work different module read different file directory end work pythonic guess use main top module want debug run different usual path case want run script import exec command work use change dir function os module import info
retrieve item random following list use random.choice secure random choice generate passphrase wordlist use secrets.choice secret new python old version python use random.systemrandom class want select item list select item set recommend use pull single item list choice clunky use sample syntax random.sample(some_list random.choice(some_list choice work single output sequence list tuple random.choice(tuple(some_set option get single item set edit use secret many point require secure pseudorandom sample use secret module edit pythonic liner want pythonic liner select multiple item unpack need index use random.randrange python use secret module preferable random module cryptography security use print random element list print random index detail see pep propose script remove pick item list empty maintain set remove pick element choice list empty run give different answer python python numpy solution numpy.random.choice question work accept answer import random random.choice add programmer import numpy difference method concern actual use case reproducibility sample item return array pass size argument need index use random.choice assume follow list simple way retrieve item random list want suggest secrets.choice standard library new python equivalent former recommendation use systemrandom object random module choice method available early python want deterministic pseudorandom selection use choice function bind method random object seem random see resee random.choice random fix seed get reproducible result seed design pass seed systemrandom sr random.systemrandom(42 pass seed argument see systemrandom object use random module working list randomization sample method return new list contain element population leave original population unchanged result list selection order sub slice valid random sample run code https://onecompiler.com/python/3xem5jjvz code variable define random index code variable code smart way python duplicate answer use random.shuffle example recommend numpy way use explicit rng use randint
non work example desire output need double relevant part python documentation format string syntax format string contain replacement field surround curly brace contain brace consider literal text copy unchanged output need include brace character literal text escape double python recent version python use f string see pep498 string use double produce desire need resolve expression bracket use literal text need set bracket produce escape doubling brace op write comment try format small json purpose false select .format(data get false select common escaping brace issue come deal json suggest clean alternative use json library preferable json string complicated example want format string character double format f f output bob want print try try well reference useful example want print argument readable .format('argument note omit argument position python need keep curly brace string need curly brace side variable avoid double curly bracket use f string part string want f magic apply use regular dumb string literal contain unsafe special character let python string join stack multiple string note line break string require add readability write code show ️ warning hurt eye make dizzy output case want print curly bracket use fstring go lot define utility function use arbitrary brace substitute note work bracket string length iterable string multi character delimiter run want inject string preformatte json solution create helper method get job do performance issue late party success place bracket replacement element print speak op ask want brace format string help reason syntax case .format recognize throw error override use double curly brace try text format want print side curly brace stumble problem try print text copy paste latex document extend answer make use name replacement field let say want print product mulitple variable index latex follow code job name field many index stay readable use wall separate format string part regular string part clear example output add wall output use double prevent fstring value injection example here postgre update statement update integer array column take expression capture array port fstring actual query statement valid postgre satement want print curly brace example use add brace string want example try interpolate code string suggest use jinja2 full featured template engine python enforce duplicate curly brace whole bunch answer suggest need curly brace f string template format need output string contain curly brace set curly brace f string parametrize bracket verbose
round try use round get analogous issue standard library decimal class see format decimal show decimal place run old problem float point number number represent command line show full float point form memory float point representation round version number computer binary store float point number integer divide power represent similar fashion double precision number bit digit precision regular float bit digit precision float point type python use double precision store value example decimal place display currency value example couple well choice new format specification string format specification mini language note return string order get float wrap float note wrapping float change build round work fine python later example check documentation let give example python f string template string format think neat work long example operator need parenthesis feel simplest approach use format function example produce float number string round decimal point number represent float want round number mathematical formula algorithm require want use round want restrict display certain precision use round format string want display alternate round method ton mix approach want exact math want float usual example deal money store cent integer use lead output error try output multiple variable see comment try code round problem input output solve python fix backporte python rounded number convert float string str float repr float decimal float str decimal decimal type necessary storage result arithmetic operation round round error accumulate inaccuracy possible parse number fix improve repr algorithm python = output string function str(float round valid digit python prevent excessive invalid digit similar unfixed repr output insufficientl subtraction similar number much rounded operation python use length str repr fix old version numpy excessive invalid digit fix python current numpy fix python version result str repr function output similar function numpy see release note python language change fourth paragraph conversion float point number string round platform conversion occur many different place str float complex number float complex constructor numeric formatting serialize serialize float complex number use marshal pickle json module parse float imaginary literal python code decimal float conversion relate repr float point number return result base short decimal string ’s guarantee correct round half round mode give string base round x decimal digit relate issue information format float python similar current numpy.float64 type use bit ieee double precision bit mantissa big difference np.float64.__repr format excessive decimal number bit lose valid ieee number exist result nice conversion repr(float(number_as_stre reversible numpy hand float.__repr format digit important sequence gap conversion reversible numpy.float64 number convert normal float order format human numeric processor nothing necessary python + use return explanation round function take argument number round number decimal place return return decimal place modify output format python way note python version option preferred information option suggest link string format python documentation information option link suffice information various flag reference convert float point number certain precision copy string use format operator round value decimal place python matt point python provide f string use nested parameter display result multiple option option option build round support python python tutorial appendix call float point arithmetic issue limitation read explain happen example match let bit tempt use round function chop single digit expect make difference problem binary float point value store possible binary approximation try round n’t make good get consequence sum value yield alternative solution problem use decimal module use combination decimal object round method tell work read float point confusion try decimal object result simple solution fix float point type dynamic language python javascript use technique use decimal follow simple use decimal module round decimal float point arithmetic achieve round result make dry critique other format round use lambda function way get simple solution use format function note convert number float format method return string work many year many language handle money use python decimal module round number resolution good way follow work resolution decimal step answer see work float(52.15 case test solution use conversion value float string important way value type float decimal integer string hope help k numerator n denominator .2f mean want precision decimal place turn number decimal percentage percentage(1,3 output > calculate use function truncate value help use function pass bytes input easy way get convert data size byte kb mb gb method use string slicing quick simple first convert float string choose length like single line convert value string keep stre digit character inclusive hope help
get number element list item len function use several different type python build type library type example find number element list use builtin function len return python object include list object header sort c implementation list similar builtin object size python particular attribute call ob_size number element object cache checking number object list check list size use len put list boolean context treat false empty true non empty len(s return length number item object argument sequence string byte tuple list range collection dictionary set frozen set len implement len data model doc call implement build function len return length object integer object n’t define nonzero python bool python method len method return consider false boolean context see len method list return fact see get information describe type test specific length course test equality special case test length list inverse case test equality explain short item item readable performant useful due fact make lot sense box functionality simple hack build class length property use identical list object add benefit oop friendly length property mileage vary len use require python normal list equivalent length_hint make possible get length list iterator useful certain circumstance length_hint definition hint time len see several answer suggest access len deal build class list lead problem custom class len length_hint implement safety check example allow negative length length exceed certain value sys.maxsize value safe use len function len method completeness educational possible use len function condone good option program python serve purpose learn algorithms index operation colon list implicit optional lesson new programmer n’t get number item list count point question become good time count example high performance code connect system call socket write c connect(int sockfd const struct sockaddr addr addrlen calculate length element give responsibility call code notice length address pass save step count length option make sense keep track number item add object pass mind take space memory see naftuli answer example keep track length improve performance take space memory note use len function length track answer question example use len function find length iterable python len function work string conclude len work sequence collection sized object define len inbuilt function call len python help condition output work different case string output variable string list count number character alphabet string print output get number element sequential object goto method python len eg len method work datum type iterable i.e iterate rough estimate len method way find length element list compare method performance analysis output output output note order compare change input list large set give good amount time difference compare method output see time take naive large compare method len length_hint good choice use term len work c implementation py_ssize_t maximum length object pyobject_size function return size object determine size object return case code block execute exception raise result code block execute re c integer convert python int call long c code python type store integer return list python implement store sequence various type datum order changeable duplicate value python method find length list build function call len get total number element list len method take argument provide list return length give list convenient way find length list python length list find use loop method call naive method summarize declare counter variable initialize use loop traverse data element encounter element increment counter variable length array store counter variable represent number element list method define operator class define length list time analysis help understand much time take execute method help choose conclusion time take naive method len length_hint
want compare reading line stre input stdin use python c++ shock see c++ code run order magnitude equivalent python code c++ rusty m expert pythonista tell ' m wrong misunderstand tldr answer include statement use fget tldr result scroll way bottom question look table c++ code python equivalent result note try mac os v10.6.8 snow leopard linux red hat linux former pro latter beefy server pertinent tiny benchmark addendum recap completeness think update read speed file box original sync c++ code line file fast disk comparison several solution approach default cin synchronize stdio cause avoid input buffering add top main see well performance input stream buffer read character time stream read large chunk reduce number system call expensive file base stdio iostream separate implementation separate buffer lead problem use example input read cin need second integer value available scanf function independent buffer lead unexpected result avoid default stream synchronize stdio common way achieve cin read character time need use stdio function introduce lot small amount input big problem read million line performance penalty significant library designer decide able disable feature improved performance provide sync_with_stdio method link emphasis add synchronization turn standard stream allow buffer fast case curiosity take look happen hood use dtruss strace test c++ syscall sudo dtruss python syscall sudo dtruss ' m year edit original post use construction wrong couple different way time execution cat benchmark user sys cpu usage display time cat benchmarke program bad real time accurate depend implementation cat pipeline local os possible cat write final giant buffer exit long reader process finish work use cat unnecessary fact counterproductive add move part sufficiently old system single cpu certain generation computer cpu mere fact cat run color result subject input output buffer processing cat earn useless use cat award randal schwartz well construction statement shell open pass program time execute program subprocess open file descriptor file read responsibility program try benchmark get real reading performance spurious complication mention possible wrong fix consider number thing wrong original post a. fix time program b. time entire pipeline wrong reason use cat mention reason natural people comfortable redirection facility posix shell case cat need file read require privilege access want grant privilege program benchmarke sudo cat sda |||| bin time my_compression_test output practice modern machine add cat pipeline real consequence say last thing hesitation examine last result edit claim cat consume cpu test run take remain second cat pay read system call equivalent transfer file disk buffer cache well pipe write deliver wc correct test read call write pipe read pipe call save cheap predict able measure difference cat file |||| wc -l file find noticeable digit percentage difference slow test pay similar penalty absolute time amount small fraction large total time fact quick test gigabyte file garbage linux ubuntu system obtain result good result prime cache course notice pipeline result claim take cpu time user+sys real wall clock time use shell bash build time command cognizant pipeline ' m multi core machine separate process pipeline use separate core accumulate cpu time fast realtime use bin time see small cpu time realtime show time single pipeline element pass command line shell output give millisecond bin time give hundredths second efficiency level wc cat make huge difference realtime whopping cpu use random time test box add significant difference style testing say benefit fault decide run cat bin time my_program program receive input pipe pace send cat chunk large write cat run bin time my_program big_file program receive open file descriptor actual file program many case librarie language write take different action present file descriptor reference regular file use mmap(2 map input file address space use explicit read(2 system call difference large effect benchmark result small cost run cat binary course interesting benchmark result program perform case show program librarie interesting use mmap practice good run benchmark way discount cat result small factor forgive cost run cat reproduce original result computer use g++ mac add follow statement c++ version loop bring inline python version sync_with_stdio improve speed second set large buffer bring second getline stream operator scanf convenient care file loading time load small text file performance care buffer entire file memory assume fit example want wrap stream buffer convenient access control file consider use flat binary datum format text reliable read deal ambiguity whitespace small fast parse follow code fast code post visual studio bit mb file line length beat python attempt factor way reason line count c++ version great count python version eof flag get set attempt make read eof correct loop example scanf reason slow scanf("%s parse string look space char space tab newline cpython cache avoid harddisk read first element answer slow get huge performance boost scanf time slow python see second solution switch cin first suggestion make cin sloooooooooooow switch scanf fget see boost performance fget fast c++ function string input know sync thing nice try fget
remove element list index find list.remove scans list item value use del specify index element want delete support slice section tutorial want pop default pop argument remove last item other mention pop del efficient way remove item give index sake completion thing do many way python use slice place removal item original list least efficient method work python list useful efficient reiterate working user define object support pop define getitem note note method modify list place pop del make copy list start index a[:index index last element a[index+1 create new list object add reassign list variable old list object dereference garbage collect provide original list object reference variable make method inefficient produce undesirable side effect variable point original list object remain un modify thank @markdickinson point stack overflow answer explain concept slicing note work positive index use object getitem method define add method define return object contain item operand essence work object class definition work list define getitem add method comparison way term efficiency assume follow predefine del object[index method efficient method work object define del method follow code disassembly pop method efficient del method use need delete item code disassembly slice add method least efficient code disassembly note disassemble ignore last line return none line load global value index pop useful remove keep item list del trashes item want remove element specific position list 2nd 3rd 7th element use delete second element third element delete fourth element original list filter 2nd 3rd 7th element original list get new list mention remove single element list advantage different method note remove multiple element potential error element original list remove list shorten loop intention remove multiple index delete element high index use del statement example want remove last item code example want remove last item code depend want want return element remove use pop want delete element use del del allow use slice use follow method way remove element(s list index a[x point element index x y-1 declare portion list empty list element remove search item want delete simple example output e use follow code remove element list want remove index element datum list use mention good practice del pop need know value alternate solution stack element want eta hmm work negative index value ponder update suppose patch idea seem brittle interesting thought experiment seem proper way append list comprehension ponder l list value remove index list sound work list list keep short want use pop remove element element list use del call last element python -1 multiple index remove course use del pop remove element list base index pop print member remove list list delete member print use del pop prefer del specify index slice give user control data example start list show remove last element del slice remove last element result use pop
simple way determine variable list dictionary build function identify type object use type need exact type object isinstance check object ’s type want use isinstance time robust support type inheritance get actual type object use build type function pass object parameter return type object object course work custom type note type return immediate type object n’t able tell type inheritance cover use isinstance function course work build type isinstance prefer way ensure type object accept derive type need type object reason use isinstance prefer type second parameter isinstance accept tuple type possible check multiple type isinstance return true object type use type pythonic use try block way class quack list quack dict behave type clarify preferred method tell difference variable type call duck type long method return type variable respond subroutine expect treat expect example class overload bracket operator getattr setattr use funny internal scheme appropriate behave dictionary try emulate problem type(a type(b check subclass b evaluate false hope true object subclass list work list checking type present answer prevent isinstance work instance object attribute sample take python console beware new style class aviable python class type merge lead unexpected result reason favorite way testing type class isinstance build function determine type object type work avoid double underscore attribute class public case builtin function well behavior simple way determine variable list dictionary get object type need able tell difference different question use type use isinstance cover case user clever sensible subclasse str accord principle liskov substitution want able use subclass instance break code isinstance support well look specific abstract base class collection number use duck typing type check code duck typing support liskov substitution elegance less verbosity use type isinstance warn clobber list type assign variable current scope name see dict reassign string test fail get use type careful use isinstance type question old stumble find proper way think need clarify python check python issue arise classic class go version matter try answer title question determine type arbitrary object suggestion use use isinstance many comment answer address concern main issue type approach work old style instance execute snippet yield argue people expect class approach close correctness work crucial case pass object old style class instance object lack attribute small snippet code think satisfie legitimate question consistent fashion previous answer worth mention existence collections.abc contain several abstract base class abcs complement duck type example check list 're interested see object allow get item use collections.abc.sequence interested object allow set delete item i.e mutable sequence opt many abc define mapping object use map iterable callable et cetera full list see documentation many practical case use type isinstance use @functools.singledispatch use define generic function function compose multiple function implement operation different type word want use code follow small example work additionaly use abstract class cover several type use type output extract str use output use type(variable).__name read type well solution isinstance boolean true false keyword mean python return true booleans instance integer type clever return false general extract string object class name use comparison sake completeness isinstance work type checking subtype instance make perfect sense none answer include accept cover use issubclass
see type variable unsigned bit use type builtin function check variable give type use isinstance note python type c appear question look type build function see example unsigned type python positive integer large positive integer negative integer literal sequence character float point integer simple variable example want know type right way wrong way python right way use name attribute get name object special attribute need use dunder name get method inspect module python name start underscore part public api good practice user avoid use necessary type give class object avoid get first idea people access type object method look attribute type seem weird example see type variable unsigned bit sign bit python specific implementation detail general worry python sate curiosity python int sign integer equal implementation word width limited system implement long c. integer get big convert python long unlimited precision confuse c long example bit python deduce int sign bit integer python old int go use python long int unlimited precision get information python float implement double use class nonpublic api get type variable use type worry much implementation detail python deal issue know enough looking answer recommend ipython interactive interpreter deal question let type variable_name return whole list information object include type doc string type convert string number integer possible float point argument truncate include string representation float point number convert string use optional base error supply base convert non string argument integer range long object return way use class example simple type checking python little irrelevant check type object isinstance(object type mention question ambiguous ' m mean view try query type native python object @atzz answer steer right direction try generate python object semantic primitive c type uint32_t int16_t use struct module determine number bit give c type primitive reflect array module make array low level type maximum integer support python int give sys.maxint sys.getsizeof return actual size python object residual memory float datum precision datum use sys.float_info mean python use ctype first case python sign unsigned bit integer second case use type reference ctype type see official documentation python type describe type use represent integral value int correspond platform int type c arbitrary precision integer grow need upper limit int convert long expression produce result store int simple python python depend level mean python integer type int constrain sys.maxint unlimited precision historical reason python code make bit difference interpreter convert long number large want know actual data type use underlie interpreter implementation dependent cpython locate object intobject.c object longobject.c find system type look cdleary answer use struct module python2.x use python3.x use use type function function view type variable list class check website information https://www.w3schools.com/python/ref_func_type.asp python type language variable create string reassign integer float interpreter n’t complain check type variable use type isinstance build function let see action python3 example let compare method performance python3 type slow use type(variable = str work ’s bad idea speed difference function important distinction work mean practice let say want custom class act list additional method subclass list type add custom function type isinstance return different result compare new class list get different result isinstance check my_list instance list subclass list myawesomelist subclass list forget difference lead subtle bug code isinstance prefer way compare type consider inheritance desire behavior python want check give object behave string list ’ stre check string custom subclass use isinstance hand check give variable specific type subclass use type use use type(var some_type type(var = = some_type 32bit 64bit 16bit python simple worry see check type use ctype library type unsigned integer ctype type documentation use see new python many datum type python write code list contain type datum type example printing type output ask type wrong use polymorphism find necessary define method want possible type input call ask need work build type type define third party library inherit use derivative wrap class object orient way resolve problem insist check exact type place dirty use class property type function find update ifs additional case commit oo way prevent let define new class new type input
give single item count occurrence list python relate different problem counting occurrence different element collection get dictionary list histogram result single integer problem see use dictionary count item list want single item count use count method count call go entire list element call count loop n times mean total check catastrophic performance want count multiple item use count total check use use python want number occurrence element counting occurrence item list count occurrence list item use count counting occurrence item list know tallying list create tally counter counting item count count occurrence item l use list comprehension count method dictionary dict((x l.count(x x set(l example count item counter fast counter class collection library example counter check count tallying list try method value appear counter constant factor script use output way get number occurrence item dictionary example list list.count method work fine list tuple method collections.counter dump iterable counter list counter retain data structure count element usage counter base python dictionary key element key need hashable set allow redundant element add subtract iterable counter multi set operation counter good builtin answer example instructive sum occurence character equal b great use case need count iterable case true work fine sum boolean result true equivalent answer suggest use pandas pandas common library standard library add requirement non trivial builtin solution use case list object standard library project require pandas foolish make requirement functionality compare suggest solution new one perfplot small project mine large array turn fast solution establish want code reproduce plot list.count(x return number time x appear list see http://docs.python.org/tutorial/datastructures.html#more-on-list want count value use numpy array bincount follow give use pandas value_count rescue sort result base frequency want result list list use pandas output look count particular element say try output problem today roll solution think check slow large list solution bit counter solution python antoher possiblity get count element list mean itertools.groupby duplicate count return notice combine first first group group present list happen input list l sorted benefit group fact separate unique count unique group count desire input list return note create unique count many answer provide easy readable code compare groupby solution show draw parallel duplicate count example old question find liner make fast use loop store dict result suggest use numpy bincount work 1d array non negative integer result array confuse contain occurrence integer min max original list set miss integer well way numpy use unique function attribute return_count set true return tuple array unique value array occurrence unique value pair work data type list count number diverse element common type give use countof method build module operator use filter take lukasz example give list dictionary show element list output use timeit see operation efficient np.array count operation efficient require extra pass remove duplicate functional implementation return return dict return implement counter way output give return amount occurence your_value use df_counts.index df_counts.value get datum create list name name jack repeat order check occurrence run loop list name x. iteration loop variable attain value receive user store variable the_item variable how_many_times incremente attaining value print how_many_times store value occurance word jack
delete item dictionary python modify original dictionary obtain dict item remove del statement remove element note mutate exist dictionary content dictionary change reference instance return new dictionary make copy dictionary dict constructor make shallow copy make deep copy see copy module note make copy dict del assignment mean go constant time linear time use linear space small dict problem plan make lot copy large dict want different datum structure hamt describe answer pop mutate dictionary want keep original copy think solution good way want solution create new dictionary use key old dictionary include specify key lot nice answer emphasize thing use dict.pop method generic del statement remove item dictionary mutate original dictionary need make copy see detail raise keyerror key provide present dictionary take care capture exception perform check pop much concise way provide default return value use pop get value key remove provide necessary none use del check fast due pop function complication cause case pop default value good enough main question make copy dictionary save original dictionary new key remove people suggest make full deep copy copy.deepcopy overkill normal shallow copy use enough dictionary keep reference object value key remove key dictionary reference remove object reference object remove garbage collector reference memory make deep copy require calculation compare shallow copy decrease code performance make copy waste memory provide work gc shallow copy mutable object dictionary value plan modify return dictionary key make deep copy shallow copy deep copy del statement look dictionary name foo key call bar delete bar foo note modify dictionary operate want keep original dictionary create copy dict call make shallow copy want deep copy use copy.deepcopy method copy paste convenience delete item dictionary return copy modify original dict wrong datum structure use sure copy dict pop copy work build new dict comprehension copying take time replace constant time operation linear time copy alive take space linear space copy data structure hash array map try design use case add remove element return copy logarithmic time sharing storage original.1 course downside performance logarithmic constant large base make non mutating api identical dict mutating api different hamt battery include python.2 pyrsistent library solid implementation hamt base dict replacement various type python nifty evolver api porting exist mutating code persistent code possible want explicit return copy mutate use d3 d1.remove('a question ask ' get mutable datum structure dict list embed pmap aliase issue fix go immutable way embed pmap pvector hamts become popular language scala clojure haskell play lock free programming software transactional memory relevant python fact hamt stdlib use implementation contextvar withdraw pep explain hidden implementation detail library public collection type result call del d['key production good practice check key exist d. use del remove dict value pass key value link del method way create copy alter dictionary good idea result large memory demand log old dictionary(if necessary modify top level design approach pass dictionary key want function validate dictionary key okay exist remove value dictionary print leave over output b hope help error handling assume key dict want check first raise code snippet help add comment line help understand code use well approach variation use list comprehension approach base answer post efficient way remove key empty string dict python follow code make copy dict species delete item trans_hi method line
delete column dataframe use use follow possible access column series df.column_name expect work good way use drop axis number row column delete column reassign df drop column number column label try delete 1st 2nd 4th column work text syntax column note introduce v0.21.0 october drop method accept index column keyword alternative specify axis guess right syntax difficult make del df.column_name work result syntactic limitation python del df[name translate df.__delitem__(name cover python use delete column place note inplace true add pandas v0.13 work old version assign result case delete first second fourth column delete first column optional parameter inplace original datum modify create copy column selection addition deletion delete column column name print df df.drop(df.columns[[0 axis=1 inplace true print df df.pop('three print df actual question pose miss answer need understand problem require us dive python magic method we point answer del df['column map python magic method df.__delitem__('column implement pandas drop column point link python magic method fact del use precarious circumstance call use caution argue del df['column_name use encourage del df.column_name consider theory del df.column_name implement work pandas use magic method delattr introduce certain problem problem df['column_name implementation less degree define column dataframe call dtype column assume want delete column del df.dtypes make delattr method confuse delete dtype attribute dtype column del df.column_name pandas grow architecture need reconsider order kind cognitive dissonance occur user use df.column_name cause cognitive dissonance multiple way delete column --obvious way column attribute special case special enough break rule del df.dtypes delete dtype attribute dtype column face ambiguity refuse temptation guess nice addition ability drop column exist way cover use case drop exist column label add errors='ignore example version good practice use notation reason attribute notation df.column_name work number index pandas version change drop method include index column parameter match signature rename reindex method prefer use axis parameter denote column index predominant keyword parameter use pandas method add choice version pandas drop column exist solution post eitan lavi prior version achieve result conditional list comprehension use go delete multiple column base column number delete multiple column base column name lot effort find efficient solution difficult justify add complexity sacrifice simplicity df.drop(dlst errors='ignore preamble delete column select column show additional method consider focus general solution delete multiple column allow attempt delete column present use solution general work simple case setup consider pd.dataframe df list delete dlst result look equate delete column select column break type start manufacturing list array label represent column want keep column want delete df.columns.difference(dlst np.setdiff1d(df.columns.value dlst df.columns.drop(dlst errors='ignore list(set(df.columns.values.tolist()).difference(dlst x x df.columns.values.tolist dlst column label sake compare selection process assume evaluate evaluate construct array list boolean slicing column boolean sake comparison evaluate robust timing function test relative time run df.drop(dlst errors='ignore seem effort improve performance fact good solution use reindex hack list(set(df.columns.values.tolist()).difference(dlst close second drop np.setdiff1d remove delete specify column specify column drop method suppose df dataframe column remove column0 code remove multiple column col1 col2 coln insert column need remove list remove drop method code original dataframe df big memory constraint keep column know name extra column need create new dataframe column need delete column use iloc function dataframe slicing typical column name unwanted value default row first column parameter delete first column dot syntax work javascript python way delete column pandas dataframe look place deletion create new dataframe specify column use dataframe function create new dataframe get result good get del drop take advantage use autocomplete intellisense string literal work fine current pandas version remove column specific column use method truncate example output view general python standpoint del obj.column_name make sense attribute column_name delete need regular attribute property define deleter reason translate pandas make sense pandas dataframe
confuse nicer specific reason iterable join e.g list tuple dict set content joiner string example use string raise follow error typeerror sequence item expect str instance int find discuss string method thread python dev achive accept guido thread begin jun str.join include python release sep support unicode python support str method include join release oct additional thought friend guido decision record historical mail decide str.join(seq funny seem right barry go guido van rossum join method string class list class agree look funny see historical note learn python expect join method list take delimiter argument lot people feel way story join method python string n’t useful method separate string module contain string function function take string first argument function deem important put string make sense function low upper split many hard core python programmer object new join method argue method list n’t move stay part old string module lot useful stuff use new join method see code write way bother use old string.join function mark pilgrim dive python agree counterintuitive good reason join method list join method python join method list inspect argument decide call join byte str way make sense join string method create string iterable stuck method list iterable list tuple string list method cast iterator string list join element single string example let roll list join method use note first create list iterable join string iterable waste memory processing power add extra step use list method use builtin string method algorithm python use create final string str.join pass iterable provide generator expression materialize list create final string pass generator well list comprehension str.join exception str.join operation stre operation make sense str object miscellaneous iterable think natural orthogonal operation split understand applicable iterable implement list readability see language think feasible iterability interface add interface convention central way add set thing iterable declare convert string join element list.it result orient easy memory understanding make exhaustive cheatsheet methods_of_string reference result string sequence list tuple appear result string result string make sense method string variable my_list object instance class list str join function belong class str syntax use object take my_list input join list tuple join iterable iterable include generator map filter beauty use generator map filter cost little memory create reason efficient grant str ability grant join iterator list tuple set dict generator map filter object common parent course range zip return str use str.join agree issue boil answer comment explanation come historical reason str.join confuse nice looking impractical real world code defeat readable function method chain separator result previous computation experience constant code value clean code enable read direction use will several function pipe result read direction begin end chain function curry map help lot
read line file python store line element list want read file line line append line end list code read entire file memory remove whitespace character newline space end line work large file read process line line python use loop walrus operator depend plan file encode want set access mode character encoding see input ouput strip newline character explicit necessary want yield array line file open return file iterate iterate file get line file tuple take iterator instantiate tuple instance iterator give line tuple create line file accord python method file object simple way convert text file list need iterate text file line use old answer use readline care closing file liner work traditional way want \n include want \n include follow suggest note approach downside store line memory general case bad idea file large run memory large waste memory allow processing line read process line efficient require pass well approach general case follow define process function way want example implementation superman class leave exercise work file size go file pass generic parser work text file content use python script directory txt use append output read file list need thing python make easy thing short way read file list add explanation assume want open specific file deal file handle file handle use function open file python open take mandatory argument optional one python filename string represent path file example note file extension need specify important window user file extension hide default view explorer second argument mode r default mean read need case case want create file write file need different argument excellent answer want overview reading file omit mode pass open file read mode case read binary file window use mode rb platform b binary mode ignore show open file let talk fact need keep open file handle file process exit python garbage file handle use fail close file open close throw exception avoid use try python provide context manager pretty syntax open identical try last approach recommend approach open file python open file read open function return file object support python iteration protocol iteration give line print line file note line contain newline character \n end want check python build universal newline support \r\n windows \r mac newline want remove last character last character window last line trail newline use check end trail newline remove remove whitespace include \n character end string remove trail whitespace careful important line end \r\n window newlines take care \r know open file read time store content list simple option use list function case want strip trailing newline use list comprehension simple .readline method file object default return list line include trail newline character want recommend line.rstrip line f approach avoid keep list contain line memory additional option desire output suboptimal read complete file string split newline take care trail newline split character include ideal keep file string list line memory clean pythonic way read line file list focus opening file read content efficient pythonic way example way prefer method opening file read write clean require extra step closing file do use statement open file reading assign variable infile code statement finish run file close need focus bring datum python list iterable efficient flexible case desire goal bring line text file separate element accomplish use splitline method follow final product testing code introduce python pathlib convenient method reading text file follow splitlines call turn string contain whole content file list line file pathlib lot handy convenience read_text nice concise worry open closing file need file read go good choice option use list comprehension file efficient way work do python interpreter variable list array want get result option numpy.genfromtxt example make data numpy array many row file read write text file python python work unicode thing notice common file ending advanced file write reading application follow see comparison data serialization format case look way make configuration file read short article configuration file python read file command line stdin use fileinput module pass file read simple way simple way line give inefficient way store version content memory big issue small file thank mark amery easy way splitline function example output list line face large huge file want read imagine hackerrank code competition read big chunk line memory buffer time iterate line line file level case set remembered line order preserve rid duplicate line call file object use statement python implementation file get closed reading process leak open file handle cpython normal python implementation people use problem file object garbage collect close file consider good practice ensure file close python implementation use case empty line document read content filter prevent empty string element use data dataframe type use value get ndarray get list use array.tolist filename handling file path(filename object open(filename f one follow explain use case excellent question let create sample datum file object lazy iterator iterate multiple file use lazy iterator file multiple file pass list filename f fileinput.input return lazy iterator use iterator time provide functional code avoid verbosity use terse fileinput.input(filename apropos want list reason avoid possible insist pass result fileinput.input(filename list direct answer call f.readline return content file optional hint number character break multiple list way get file object way way pass filename open builtin use new path object pathlib module become fond use list consume file iterator return list direct method mind read entire text memory single string split liner path object splitline string method default splitline remove newline want keep newline pass keepend true want read file line line append line end list bit silly ask give ' demonstrate end result several method need filter operate line make list let humor request use list.append allow filter operate line append use list.extend bit direct useful preexisting list use list comprehension map filter desirable close circle pass list create new list operate line see many way get line file list recommend avoid materialize large quantity datum list use python lazy iteration process datum possible prefer fileinput.input path.open f. use loadtxt command numpy check few condition genfromtxt use follow read line use list comprehension try mention method example file use name find file presume file directory code change fpath include proper file name folder path mention example list want give lst use method time take creation lst equal method python(3 helper library class use simplify file use fileio.line function remember mode r default check empty line default parameter optional remove read write delete method leave fileio.line turn separate method call read_line
pad numeric string zero leave string specific length pad string pad number stre format documentation use rjust method string object example create character length string padding necessary zfill use general string format documentation string format f string python use f string python python want opposite str(n).zfill(width work string int float python compatible str.zfill intend note intend handle numeric string request move begin string help str.zfill performant alternative method compare apple apple method note slow calculate little digging find implementation zfill method object stringlib transmogrify.h let walk c code first parse argument mean allow keyword argument check length long case return stre zfill call pad pad function call ljust rjust center copy content new string fill padding call pad zfill move precede begin string note original string numeric require one come understand quick answer time string symbol replace padding character default empty space symbol allign character leave string symbol format_spec use python = clean way use f string string format prefer format int sign handle number output see print documentation exciting detail update python year last line print function statement note prefer old school printf style imnsho read use notation january old dog new trick add use int length string f string appear covered zip code save integer quick timing comparison make different test different repetition difference huge test zfill solution fast ok output look pad integer limit significant figure time f string f'{a:04.1f translate decimal/(float point leave pad digit character total approach use list comprehension condition checking length demonstration repeat prepend get rightmost width slice quick dirty little expression make function output
python empty string variable elegant way check empty string value find hard code time check empty string good empty string falsy python python reference mean consider false boolean context preferred way know variable string variable type use see documentation truth value testing value false boolean context pep programming recommendation section sequence strings list tuple use fact empty sequence false use clarify sequence evaluate false true boolean context empty equal false true elegant way check true falsy e.g. want strip white space bite explicit know sure string pass validation string test way test noneness stripping use fact empty string false falsy approach similar apache stringutils.isblank guava strings.isnullorempty use test string none empty blank exact opposite test stre none empty blank concise form code write similar bartek answer javascript inspire test solid way follow solution possible problem edge case check fail len(mystre fail mystre object class inherit str override len method mystre mystring.__eq fail mystring override eq ne = mystring fool mystring override eq mystre mystre equivalent fail mystre stre subclass string return identity check reason work python use string pooling call string internment use instance string intern see compare string use produce different result intern start cpython big problem identity check string internment find standardised string intern mean necessary intern implementation dependant compare string use general evil trap work time string pooling follow strange rule rely falsyness string work object override bool way fool mention beginning call eq method empty string fool overriding method mystre work subclass str theoretical work relevant real usage see framework subclasse str use mystring return wrong output say case mention solution work post academic work test empty blank string short way want differentiate empty null string suggest use len(stre suggest use stre other say caveat string full whitespace apply forget strip stringname give false string empty guess simpler elegant seem complete clear find hardcoding(sic time check empty string good foo = bad practice magical value check magical value know magical number compare descriptive variable name think empty_stre descriptive variable name go empty_stre think great variable name compare descriptive variable name mean good descriptive variable name base context think empty string building form user enter value want check user write good variable name not_filled_in make code readable parse csv file want empty string parse none csv text base represent none use predefine keyword good variable name csv_none make code easy change adapt new csv file represent none string question piece code correct compare first question empty string deserve special treatment tell future coder empty string consider none mix business logic csv value none code implementation compare need separation concern want check string empty work empty string false string whitespace true want respond @1290 sorry way format block comment none value empty string python space answer andrew clark correct mystring answer @rouble application specific answer op question get trouble adopt peculiar definition blank string particular standard behavior produce none non blank string treat none space blank string well way example meet @rouble requirement break expect bool behavior string experimentation string isnotwhitespace true variable foo string non whitespace character use python end wrap method definition desire expression true string empty non empty string none non string object produce false caveat object override str thwart logic return falsy value clear approach benefit consider check integer integer string primitive value type treat assign empty value string python compare string empty test emptiness test string equal empty string empty string expect behaviour apache stringutils.isblank guava strings.isnullorempty reading file line want determine line empty make sure use new line character empty line sure input string recommend use isinstance(object classinfo link addition show example list true bool value evaluate true script type="text javascript dcl react.js.gz"></script div data datacamp exercise datum lang="python code datum code def test_string(my_stre isinstance(my_stre str my_stre print("it string my_stre string def not_fully_test_string(my_string my_stre print("it string str(my_string string print("teste string test_stre test_string(true string2 string test_stre print("\ntesting string not_fully_test_string(["string1 string2 not_fully_test_string("my string not_fully_test_stre use possible difference variable boolean false empty string add simple condition script difference make case useful quick function build replace blank string n list list python useful posting list list mysql database accept blank certain field field mark schema case due composite primary key elegant solution number space prmatta post mistake
remove last character string newline try method rstrip see doc python python python rstrip method strip kind trail whitespace default newline perl chomp strip newlines addition rstrip method strip lstrip example say pythonic way get line trail newline character splitline canonical way strip end line eol character use string rstrip method remove trail \r \n example mac window unix eol character use \r\n parameter rstrip mean strip trailing combination \r \n work case nuance matter rare case example process text file contain hl7 message standard require trail \r eol character window machine use message append \r\n eol character end line look \r\r\n use take entire \r\r\n want case slice last character note perl chomp function strip specify character end stre note rstrip act perl chomp modify string perl result python mean value a\n x = x.rstrip give result strip whitespace end stre newline use think problem rstrip("\n want make sure line separator portable antiquated system rumor use \r\n gotcha rstrip strip repeat whitespace contain right character work use line line.rstrip('\n strip newline end stre remove newline end string s. assignment need rstrip return new string modify original string get geeki regexps replicate perl chomp behavior array \n line terminator note modify string place strip extra trail whitespace take \r\n account use strip demo rstrip thing chomp many level read http://perldoc.perl.org/functions/chomp.html see chomp complex main point chomp remove line end rstrip remove many see rstrip remove newline close approximation typical perl chomp usage accomplished re.sub careful foo".rstrip(os.linesep chomp newline characters platform python execute imagine chimpe line windows file linux instance use foo".rstrip("\r\n mike say example python documentation use perl chomp function remove linebreak sequence end string plan python process function need order useful line file program python come faq python.org advocate s.rstrip("\r\n python question clean line break multiple line str object oldstr split list accord delimiter \n join list new str(newstr newstr find convenient able chomp line iterator parallel way get un chomp line file object follow code sample usage bubble regular expression base answer post early comment answer think use clear explicit solution problem str.rstrip remove trail newline char want remove newline char trail want remove trail newline char \r \n \r\n \r\r \n\n feel people want remove occurrence trail newline character \r\n \n create non capture group way .rstrip('\n .rstrip('\r clear other stumble thread str.rstrip strip many trail character possible string foo\n\n\n result false positive foo want preserve newline strip single trail workaround solution special case newline character last character case file inputs element collection index follow slice newline character look perfect analog perl chomp particular rstrip handle multi character newline delimiter splitline point answer different question combine join splitlines remove replace newline string follow remove trail newline chomp believe pass true keepend argument splitline retain delimiter splitline call remove delimiter last line regex replace \n,\t,\r regex join use need complicated stuff type line ending encounter \n \r \r\n simple regular expression re.sub r"\r?\n?$ able catch get catch last argument limit number occurence replace mimic chomp extent example = c true concerned speed say looong list string know nature newline char string slicing fast rstrip little test illustrate output work window linux bit expensive sub look solution catch
define static method call class instance use staticmethod decorator note code use old method define static method use staticmethod function decorator use support ancient version python identical first example use @staticmethod use nice decorator syntax use staticmethod situation static method necessary python see use many time separate top level function clearer follow verbatim documentation static method receive implicit first argument declare static method use idiom @staticmethod form function decorator see description function definition function definition detail call class c.f instance c().f instance ignore class static method python similar find java advanced concept see classmethod information static method consult documentation standard type hierarchy standard type hierarchy new version change version function decorator syntax add think steven answer original question order set class method assume first argument go call instance make sure call method class note answer refer python python get typeerror call method class example code rollcall method assume first argument instance call instance class long rollcall call class instance code work fine try call rollcall instance cause exception raise send argument rollcall define accept argument rex.rollcall send correct number argument cause exception raise represent dog instance rex function expect n numerical decoration come precede rollcall method state method static call instance work insertion @staticmethod method definition stop instance send argument verify try follow code @staticmethod line comment check staticmethod decorator need use @staticmethod decorator declare method expect self parameter call class decorator case want able call instance use function static method python possible static method python call initialize class static method create bit pythonic use underscore camelcase method use decorator syntax syntax equivalent use describe builtin example static method str.maketran python function string module python option use describe classmethod difference classmethod get class implicit first argument subclasse get subclass implicit first argument note cls require name first argument experience python coder do use use alternative constructor builtin example dict.fromkey simple option put function class use method function modify use internal object state side effect keep class reusable utility function move let say file call dogs.py use call dogs.barking_sound dogs.dog.barking_sound need static method part class use staticmethod decorator particularity static method object behave certain kind beauty strike come organize module level code become bit intuitive self document context certain component mean use pan name distinct test case straightforward approach test module map actual module test purist find viable apply approach organize project utility code people rush create util package end module loc rest dozen loc good prefer start convert package create module beast deserve static method method call create object class example example method add call class name object name summarize other answer add many way declare static method variables python whole program refer python documentation master oop python python static method create way use staticmethod output result use @staticmethod output result use @staticmethod decorator define static method show detail explain @staticmethod decorator @classmethod decorator answer @classmethod @staticmethod python explain instance method answer instance method python encounter question time time use case example fond make sense create object class cmath state cmath object cmath collection method relate way example functions cmath act complex number
append file overwrite set mode open append w write documentation list available mode need open file append mode set ab mode see open open mode write position end file append open allow read seek read write end file example note use open w seek end file consider happen program open file start write seek write operating system opening file guarantee follow write append end file file grow write detail mode operate test linux seek write append end file fact fopen manpage state opening file append mode first character mode cause subsequent write operation stream occur end file precede call example real program use close file see documentation simple useful python many variation main mode mode append file easy mode make code few line mode read write binary format want pass mode argument see docs open permutation mode argument update truncate w binary b mode start good bet print write test.txt create use line open(filename indicate appending file mean allow insert extra datum exist file use follow line append text file parameter signifie append mode want use open time write function want write end use r+'† w+ parameter grant freedom allow create file exist empty content file exist credit function go @primusa open file mode set file position end file opening file mode let write file position end force write end want append file declare variable myfile open file name test.txt open take argument file want open string represent kind permission operation want file file mode option multiple process write file use append mode datum scramble append mode make operating system put write end file irrespective writer think position file common issue multi process service nginx apache multiple instance process write log file consider happen try seek write use append mode operating system place write end file append mean open file go end file opening mean open file write end file warning work write record shoot write call split datum multiple write writer get write mangle datum beginner problem attempt open write file loop problem time file open writing truncate clear solve opening append mode case solve problem invert logic file open get overwrite time keep write open open write pointless python make thing work way add require code benefit simple way append text end file use open statement instruct open file append mode allow read write access good practice use file.close close file open do use
want measure time take execute function get timeit work use time.time measure elapse wall clock time point give execution time second option python use perf_counter process_time depend requirement recommend use time.clock thank amber deprecate unix return current processor time float point number express second precision fact definition mean processor time depend c function name window function return wall clock second elapse first call function float point number base win32 function queryperformancecounter resolution well microsecond deprecate version behaviour function depend platform use perf_counter process_time depend requirement define behaviour use timeit.default_timer former provide good clock available platform version python timeit.default_timer assign time.time time.clock depend os python default_timer time.perf_counter platform see python time.clock time.time accuracy see time.clock deprecate python want use time.perf_counter system wide timing process wide timing way use use time.clock new function process_time include time elapse sleep measure time second output give function like time easy way use timeit call command line try use time.time time.clock compare speed function give mislead result ps put print statement function wish time time measure depend speed terminal fun context manager remember start time entry block freeze end time block exit little trickery run elapse time tally block context manager function core library place thing contextmanager code sufficient trick runnable demo code note design function return value elapse frozen block exit call return duration second toy example prefer confusing note format write ss printout interpret time_elapse way compare traditional way installation refer pypi page detail easy way calculate duration operation official doc finding go many good answer article debate timeit time.time timeit advantage problem timeit simple use need setup thing get ugly bunch import want decorator use block measure time build available option option use timebudget library timebudget versatile simple library use line code pip install option use small module create little timing utility module call drop file project start use external dependency runstat small time function put decorator front want time portion code put block advantage several half back version float want point highlight use time.time measure execution give overall execution time command include run time spend process computer time user notice good want compare different code snippet algorithms function information timeit want deep insight profiling update use http://pythonhosted.org/line_profiler/ lot last year find helpfull recommend use python profile module python cprofile pstat module offer great support measure time elapse certain function add code exist function example python script run profiler generate stat file run use cprofile module profile function collect stat file note add code exist module do module stat file run pstat module follow run interactive statistic browser give lot nice functionality particular use case check stat function example check stat function show follow dummy example much give idea do good part approach edit exist code get number help profile tiny timer class return ss string usage context manager time code usage need time value benchmark.py adapt http://dabeaz.blogspot.fr/2010/02/context-manager-for-timing-benchmarks.html use profiler module give detailed profile output find informative ipython use timeit measure average processing time result simple python output microsecond single execution explanation timeit execute anonymous function time default result give second result single execution amount microsecond average slow operation add low number iteration wait output second total number iteration elegant short way use timeit take line code jupyter notebook generate nice interactive diagram example code line start extra line code need use snakeviz seem possible run snakeviz notebook info snakeviz website measure time operation compare time operation want able time function use simple decorator use function want time time call function_to_time print take name function time document type hint decorator use general utility example usage output doctest check type hint late response serve purpose way think super clean keep mind print function python python work function cheer use timeit example test take parameter use python need wrapper function function parameter print_elapsed_time function use way result pros con function pass start time convert time human readable time ask question case want simple uniform way measure elapse time several line code use python make use assignment expression a.k.a walrus operator achieve elegant way make library want measure function https://github.com/karlheinzniebuhr/pythonbenchmark unique class base approach offer printable string representation customizable round convenient access elapse time string float develop python usage lambda obtain time elapse time stamp practice unit time measure second float repeat method convenience call timeit multiple times return list result list take mean time default timeit turn garbage collection timing time.timer solve problem timeit.timer make independent timing comparable gc important component performance function measure gc(garbage collector enable first statement setup string example source python docs base contextmanager solution give https://stackoverflow.com/a/30024601/5095636 hereunder lambda free version flake8 warn usage lambda e731 test use time module get current timestamp execute code get timestamp time take first timestamp second timestamp timeit module good timing small piece python code use form 1- command line module short code pass argument 3- code time measure timeit magic function follow running function time use benchmark timer disclaimer ' m author use benchmarktimer class measure time take execute piece code give flexibility build timeit function run scope rest code output output ' m late party approach cover want benchmark piece code want find first class method eat execution time obvious build follow metaclass solve problem allow usage follow print combine answer replace precise answer use example use addition timeit ipython use timeit multi line code snippet use jupyter notebook put magic timeit begin cell
check string represent numeric value python work seem clunky testing come user input stre represent int float see read input number convert input ask user input give valid response ensure input represent int float requirement proceed non negative unsigned integer use isdigit documentation isdigit python2 python3 python unicode string isnumeric ugly slow dispute regex string parse method uglier slow ' m sure much call function return try catch introduce much overhead common exception catch extensive search stack frame issue numeric conversion function kind result example hack number way python lay think code perfect good solution s.replace benchmark compare different approach string number block try method approach handle scientific notation float notation support scientific notation support scientific notation 1e50 support follow function test exception want take account string nan want is_number return false nan code work python convert representation number number talk identity issue thank piece code use g. return true string digit return false edit see comment add case pass salt arbitrary condiment ref update alfe point check float complex handle say rare case need check complex number represent float ugly slow seem clunky take get use pythonic way point alternative bad advantage thing way polymorphism central idea duck typing walk talk duck duck decide need subclass string change determine convert float decide test object thing change code language solve problem use interface save analysis solution thread point python duck type side equation go use syntax plan much programming python mean thing want take consideration python throw catch exception compare lot language fast .net instance heck language throw exception communicate non exceptional normal program condition time use loop worry much performance aspect code notice significant problem int use float need trick float number point negative number add lstrip get universal way answer provide step step guide function example find string use check give stre positive integer sample result str.isdigit return false string negative number float number example check negative integer float write custom function check sample run function return true nan number string python valid float represent number example order check number nan use math.isnan want import additional library check check compare use = python return false nan float compare example function is_number update return false nan sample run ps operation check depend type number come additional choose version is_number function fit requirement string non number try slower regular expression string valid number regex slow appropriate method depend input find performance bind use new third party module call fastnumber provide function call isfloat full disclosure author include result timing know old add answer believe cover information miss high vote answer valuable find follow method connect count need input accept assume use vocal definition integer work check integer x.replace('-','').isdigit work check first position x.replace .isdigit work check decimal x.replace(':','').isdigit work check ratio x.replace('/','',1).isdigit work check fraction different function handle parse scalar value float.parse note wonder change exception typeerror documentation float.try_parse note want return boolean false value type none indicate failure course want different change fail parameter want extend float include parse need monkeypatch float class add method want respect exist function code sidenote prefer call monkey punching feel abuse language ymmv usage great sage pythonas say holy see sharpisus well cast float catch valueerror fast way float mean require string parse regex slow due fact tune operation use unicode string method want http://www.tutorialspoint.com/python/string_isnumeric.htm http://docs.python.org/2/howto/unicode.html put check nan infinity complex number seem specify 2j result see method good consistent result give check_replace function fast result give check_exception function exception fire mean code efficient overhead throw exception large note check successful cast method accurate example work check_exception test function return false valid float benchmark code result python macbook pro result python pro result pypy macbook pro input follow a="50 b=50 c=50.1 d="50.1 input function find give variable numeric numeric string consist optional sign number digits optional decimal part optional exponential part valid numeric value hexadecimal e.g. binary notation allow is_numeric function test is_float function find give variable float float string consist optional sign number digits test ast use str.isdigit method detect int value detect float general case float take care integer decimal let take string example try follow isnumeric isdigit isdecimal speed ► aforementione method similar speed return true character stre numeric character character false numeric character include digit character character unicode numeric value property u+2155 vulgar fraction fifth numeric character property value numeric_type digit numeric_type decimal numeric_type = numeric str.isdecimal return true character stre decimal character character false decimal character use form number base u+0660 arabic indic digit decimal character character unicode general category nd available string type python need determine string cast basic type float int str bool find internet create example capture type use think solution fine correct regexp implementation seem lot regexp hate answer think unjustified regexps clean correct try original question check string represent number float title want use numeric float value check valid case try make lot sense reason want validate string number regex work fine hard get correct think regex answer example parse string integer part .7 float python concern tricky check single regex fractional portion require ' include regex show raise interesting question number include inf valid float python include number number represent python number large float max ambiguity parse number example number legal way represent python let var set treat expression float("--20 work info regex believe cover int float python parse example test value run benchmarke code @ron reiter answer show regex normal regex handle bad value exception make sense result speed test let say stre likely number try strategy fast string likely number interested integer check worth test isdigit head interested check float number use try code whitout escape ryann suggest want return false nan inf change line float(s return = = x = return true float inf nan work large float = x return true example = work problem lead thread convert collection datum string number intuitive way realize read original code need different way want integer result string represent integer want number string result stick data structure adapt original code produce derivative code handle exponent float integer use regex simple way let say loop string want add array turn number replace myvar.apppend operation want string turn number idea try use float operation use return error determine string number use function mention notice string nan inf variation consider number propose improved version function return false type input fail variant user helper function know m late party figure solution solution follow eafp principle python explanation value string float try parse int throw valueerror catch error parse value float return generalize exception technique useful way return useful value true false example function put quote round string leave number need quick dirty filter make variable definition r. try sorry zombie thread post want round code completeness gimme number +42.42e-42j number true simple common use case human write string keyboard number read answer end return false -)inf check https://trinket.io/python/ce32c0e54e fast simple option check data type want test value os stre numeric test similar problem define isnumber function want convert list string float high level term give separate float(s isfloat(s function result return function float(s fail whole process fail ignore faulty element valid number include list filter bad element certain exclude comprehension modify propose solution inspire nullable numerical type c type represent struct numerical value add boolean indicate value valid use follow handle
find name class use create instance object python ' m sure use inspect module parse class attribute try name attribute class type(x).__name give name class think want use python note method work new style class python class new style class code use old style class follow work want name class string type sample code input interactive interpreter produce main__.a oppose produce name attribute invoke pass result a.__class str constructor parsing handle use follow code want explicit behavior preferable class name define separate module sample code provide test python python example use classmethod decorator usage good question simple example base ghz help grab special name attribute find need qualified name give class function grab type qualname case deal nested class method differ output get example introspection want consider use qualname stand qualified name function class example documentation link qualname get instance classname first use type str extract class name
python include standard library new package venv differ package match regex |py)?(v||virtual||pip)?env| personal recommendation beginner start learn virtualenv pip tool work python variety situation pick tool start need answer question difference name thing venv virtualenv virtualenv popular tool create isolate python environment python library familiar tool recommend learn useful tool work instal bunch file directory env/ modifying path environment variable prefix custom bin directory env exact copy python python3 binary place directory python program look librarie relative path first environment directory part python standard library bless pypa python packaging authority activate install package virtual environment use pip pyenv use isolate python version example want test code python need way switch activate prefix path environment variable ~/.pyenv shim special file match python command python pip copies python ship command special script decide fly version python run base pyenv_version environment variable version file ~/.pyenv version file pyenv make process download instal multiple python version use command pyenv install pyenv virtualenv plugin pyenv author pyenv allow use pyenv virtualenv time use python pyenv virtualenv try run python venv available virtualenv use virtualenv pyenv pyenv virtualenv want convenience feature virtualenvwrapper set extension virtualenv see docs give command mkvirtualenv lssitepackage workon switch different virtualenv directory tool useful want multiple virtualenv directory pyenv plugin pyenv author pyenv integrate virtualenvwrapper pyenv pipenv aim combine pipfile pip virtualenv command command line virtualenv directory place ~/.local share virtualenvs xxx xxx hash path project directory different virtualenv directory current work directory pipenv mean use develop python application oppose librarie alternative pipenv poetry list question package name pyvenv confused pyenv previous section script ship python remove python problem mention confusing name run python3 venv effect pyvenv venv package ship python run use python3 venv reason distro separate separate distro package python3 venv ubuntu debian serve purpose virtualenv subset feature see comparison virtualenv continue popular venv former support python avoid use virtualenv python3.3 use standard ship library venv create new virtual environment type virtualenv try copy python binary virtual environment bin directory update library file link embed binary build python source non system directory relative path name python binary break make copy distributable python big flaw inspect embed library file link os x use otool example virtual environment type avoid virtualenvwrapper pipenv pyvenv deprecate pyenv seem use virtualenv use stay think venv pyenv build venv create virtual environment shell fresh sandboxe user installable library multi safe fresh virtual environment start standard library ship python install librarie pip install virtual environment active sandboxe none new library install visible virtual environment delete whole environment start worry impact base python install user installable library virtual environment target folder create sudo directory need sudo permission install librarie multi safe virtual environment activate shell see python version use build virtual environment pyenv similar venv let manage multiple python environment pyenv rollback library install start state need admin privilege point update library think good use venv last couple year find many problem build system emacs package python standalone application builder installer come issue virtualenv think python well platform eliminate additional option use venv edit tweet bdfl use venv stdlib bunch shell alias switch guido van rossum @gvanrossum october add conclusion paragraph go pipenv rabbit hole deep dark hole last answer year feel useful update discussion late development python virtual envelope topic find answer continue rage debate merit pipenv venv envelope solutions- make endorsement pypa endorse conflicting standard future development virtualenv promise make choice focus tool anoint one pypa note venv tool virtualizing environment third party solution native tool pypa endorse venv create virtual envelope change version use venv recommend create virtual environment pipenv- venv use create virtual envelope roll package management vulnerability checking functionality use pipenv deliver package management pipfile pypa endorse pipenv package management seem imply pipfile supplant pipenv use virtualenv tool create virtual envelope venv endorse pypa go tool create virtual envelope settle virtual envelope solution difficult enough pypa endorse different tool use different virtual envelope solution rage github debate venv virtualenv highlight conflict find github debate reference link steer virtualenv development direction accommodate venv future release build venv target python venv create environment use perform subsequent operation facilitate guarantee offer look future convergence rival virtual envelope solution use virtualenv vary venv give problem pipenv solve fact pypa give blessing appear bright future virtualenv deliver propose development objective choose virtual envelope solution long case pipenv venv repeat criticism pipenv see produce analysis maintain point use solution future see questionable due lack continuous development dry spell month pipenv develop large material update release let start problem tool want solve system package manager python version want want install multiple python version side side python python python use pyenv want install run multiple application different conflict dependency use virtualenv venv interchangeable difference virtualenv support old python version minor unique feature venv standard library develop /application/ need manage dependency manage dependency resolution dependency project use pipenv poetry develop /package/ want specify dependency library user need install use setuptool use virtualenv virtualenv folder scatter various project folder want centralised management environment simple project management use virtualenvwrapper variant pyenv virtualenvwrapper use pyenv recommend jan update @flimm explain difference want know difference tool want decide good next question use choose official way manage virtual environment pipenv combine addition previous install requirement active virtual environment create none active happy pipenv use pyenv pyenv virtualenvwrapper pipenv pipenv installing requirement debian apt install libffi dev install pyenv base https://www.tecmint.com/pyenv-install-and-manage-multiple-python-versions-in-linux/ pyenv virtualenv install pyenv virtualenvwrapper standalone library pyenv plugin 2nd option create virtual environment project workingdir exist switch project project file fix version version limitation neccessary possible tool install current virtual environment pip tool pipenv let say use pipenv create pipfile pipfile.lock file fix version 2nd want reinstall version pipfile.lock present remember pipfile.lock relate python version recreate use different see write problem remove removed package pipfile writing pipfile see use pipenv use replace edit change stack pyenv pyenv virtualenvwrapper poetry use apt pip installation virtualenv virtualenvwrapper install pyenv plugin pyenv virtualenvwrapper easy way poetry great python newcomer question frustrate confused month virtual environment package manager(s invest learning know use year come good article answer vexing question https://jakevdp.github.io/blog/2016/08/25/conda-myths-and-misconceptions/ jake vanderpla year old provide practical answer history python package virtual environment manager trench state art develop frustrating data science big datum cloud computing communities conda use virtual environment manager full function package manager python javascript sql java html5 jupyter notebook use pip conda pip venv variant answer use pip conda package available many time require package available pip format easy solution use pip learn use conda build package maintainer convince package owner generate conda package new release pip base package differ many important practical dimension answer question package dimension package maturity stability venv virtualenv mature stability community support online documentation see virtualenv version today virtualenv virtualenv tool create isolate python environment python subset integrate standard library venv module venv module offer feature library name prominent virtualenvwrapper set script help people use virtualenv wrapper maintain last update virtualenvwrapper recommendation avoid pip virtual environment possible use conda conda provide unified approach maintain team professional open source developer reputable company provide funding support version team maintain pip venv virtualenv pipenv many pip variants limit resource comparison pip virtual environment plurality frustrating beginner pip base virtual environment tool complexity fragmentation fringe unsupported package inconsistent support drive use conda datum science work recommendation use pip base virtual environment manager last resort conda package exist difference venv variant scare time limited learn new package pipenv venv pyvenv pyenv virtualenv virtualenvwrapper poetry other dozens difference complexity take day understand go path find support package go belly maintainer resign get busy maintain need get job do spirit helpful link help dive head lose dante inferno pip guide python virtual environment choose core python package invest career long term get job do short term important business analysis question try get task do professional software engineer build scalable performant system require least amount maintenance effort time imho conda take latter place deal pip plurality problem conda miss step pip package migration tool make moot question convert pip package conda package pypi.org conda forge merge pip necessary conda package universal many python programmer lazy create conda package program python need conda language agnostic multi lingual support conda god send supports cloud software engineering data science need multilingual support javascript sql jupyter notebook extension conda play docker cloud native environment encourage learn master conda enable side step many complex question pip base tool answer keep simple need package need guidance workaround remain edge case check article link herein learn pip base virtual environment hope helpful original poster give pip conda aficionado thing think
@classmethod @staticmethod mean python different use use use understand @classmethod tell class method inherit subclass point define class method add @classmethod @staticmethod definition classmethod staticmethod similar slight difference usage entity classmethod reference class object first parameter staticmethod parameter let assume example class deal date information boilerplate class use store information certain date timezone information let assume date present utc init typical initializer python class instance receive argument typical instance method first non optional argument self hold reference create instance class method task do use classmethod let assume want create lot date class instance date information come outer source encode string format dd mm yyyy suppose different place source code project look purpose implement feature overload python lack overload use classmethod let create constructor let look implementation review advantage static method staticmethod similar classmethod take obligatory parameter class method instance method let look next use case date string want validate task bind date class use require instantiation staticmethod useful let look next piece code see usage staticmethod access class function call method access object internal field method classmethod rostyslav dzinko answer appropriate thought highlight reason choose @classmethod @staticmethod create additional constructor example rostyslav use @classmethod from_string factory create date object unacceptable parameter do show code millenium_new_year instance date class observe factory process code create date object matter mean date class subclasse subclass create plain date object property subclass see example datetime2 instance datetime wtf well @staticmethod decorator use case undesire want factory method aware class call @classmethod need rewrite date.millenium part code change ensure class code learn cls subclass result object instance cls let test reason know @classmethod use @staticmethod @classmethod mean method call pass class first argument instance class method mean use class property method particular instance @staticmethod mean method call pass instance class method put function class access instance class useful method use instance @staticmethod function function define class callable instantiate class first definition immutable inheritance @classmethod function callable instantiate class definition follow sub class parent class inheritance overridden subclass first argument @classmethod function cls class good link topic use use use need decorator principle minimize number argument function see clean coder useful instance method class method accept argument typeerror understanding semantics argument user error define some_function work dot lookup instance perform order note dotted lookup instance invoke method callable attribute argument self give dotted lookup access instance method instance class argument cls give dotted lookup access method instance class subclass argument give method work function define example module namespace look restrictive information pass method instance method need information make function method easy reason unitt easy reason function few argument easy reason easy unitt akin instance class static method keep mind instance class ask easy reason couple favorite builtin example str.maketran static method function string module convenient accessible str namespace dict.fromkey class method return new dictionary instantiate iterable key subclasse see get class information class method useful use static method need class instance argument function relate use object convenient function object namespace use class method need instance information need class information class static method constructor hardcode class subclass use use @classmethod want change behaviour method base subclass calling method remember reference call class class method use static want behaviour remain unchanged subclass example little compilation @staticmethod way write method class reference object call need pass implicit argument self cls write write outside class use python need encapsulate method class method need part class @staticmethod come handy case @classmethod important want write factory method custom attribute(s attach class attribute(s overridden inherit class comparison method @classmethod @classmethod compare init think init way python realize class constructor overload c++ notice reference class first argument definitioin init use self construct_from_func use cls @staticmethod @staticmethod compare object method different way think useful class method use superclass define method behave call different child class static method use want return thing child class call ' m beginner site read answer get information want upvote want get start stackoverflow answer understand short @classmethod turn normal method factory method let explore example @classmethod labor create instance scatter example @classmethod test see instance create class definition collect conclusion @classmethod decorator convert conventional method factory method use classmethod make possible add many alternative constructor necessary class method modify class state bind class contain cls parameter static method modify class state bind class does't know class instance
long query split several line python way javascript use several sentence join operator efficient way ' m concerned performance stage code readability example try similar python work use split long string ' m pythonicest way look awkward actual code talk multi line string use triple quote start end use single quote course start end treat result string string note stre start end quote become part stre example lead blank point string contain blank newline construct long line python include extra blank newline deliberate example show effect skip blank result commas require place string join pair parenthesis account need blank newline want multiline string long single line string use parenthesis make sure include commas string segment tuple sql statement construct multiline string fine extra white space multiline string contain problem good way achieve want note comment concatenate sql query way sql injection security risk wait happen use database parameterized query feature prevent leave answer answer question ask break line work example find happy find build long string build sql query case good levon suggest good vulnerable mistake approach use way look pythonic include variable use notation well way name parameter .format python use format string literal f string find good long string describe example value condition string other mention parenthesis method add parenthesis inline comment allow use backslash line continuation comment allow receive syntaxerror unexpected character line continuation character error base example https://docs.python.org/3/library/re.html#re.verbose general approach long string python use triple quote split join output regard op question relate sql query answer disregards correctness approach building sql query build long string readable aesthetic way additional import disregard computational load entail use triple quote build long readable string break list use split strip white space join insert variable use format command produce approach line pep find useful time note curly bracket original string use format function find follow good simple safe pythonic way write raw sql query python use python sqlite3 module tl;dr use wrap string official python documentation string literal span multiple line way use triple quote end line include string possible prevent add end line follow example produce follow output note initial newline include add @levon answer create multiline string output string newlines blank space remove remove extra space use regex ouput use want remove annoying blank space line follow ummm know long time question post find style use assign long multiline string variable project take bit extra runtime preserve beauty code variable assign string indent go actual code work miss white space end line example rolefrom triple quote multiline string contain line break extra space sql problem try format return continuous line enquire property combine idea levon jesse faheel ddrscott format suggestion write query interesting vars.extend(option n_options(len(option hint darkfeline make mistake lead space separator name placeholder see documentation cursor.execute function pythonic way know old question python change see answer go way use cut current line move place sql statement separate file action.sql load file sql statement separate python code parameter sql statement need fill python use string format field option think readable code variable indented output stre liner newline à la scala way think pythonic way op demand want final str jump line put \n start first argument second replace note white line template require white space |||| official python documentation string literal span multiple line way use triple quote end line include string possible prevent add end line follow example produce follow output note initial newline include pep style guide recommend use parenthesis preferred way wrap long line use python imply line continuation parenthese bracket brace long line break multiple line wrap expression parenthese use preference use backslash line continuation example use recursive function build complex sql query technique use build large string maintain code readability p.s look awesome python sqlparse library print sql query need approach privilege read case long string way depend level indentation limit character line say view python style guide vague take eero aaltonen approach privilege read common sense understand style guide help make life mess define long string dict keep newline omit space end define string constant use list join multi line comment string use string join list element \n'(newline comma space
generate random integer inclusive python example try random.randrange try random.randint doc state return random integer b. try generate pseudorandom integer range inclusive secret module new python well random module cryptography security use print integer inclusive range detail see pep note depend use case random module set random seed useful pseudorandom reproducible result possible secret module random module test python try follow > numpy.random.randint numpy.random.uniform numpy.random.choice random.randrange random.randint speed ► np.random.randint fast ~10 time fast np.random.choice random.randrange random.randint note np.random.randint generate random integer open interval low high np.random.uniform generate distribute number open interval low high np.random.choice generate random sample half open interval low high argument np.arange(n random.randrange(stop generate random number range(start stop step random.randint(a b return random integer b. > astype(int cast numpy array int data type choose size give numpy array length choose size array example choose size use expect see output follow form different random integer return time run expect integer output array differ example give many post demonstrate get random integer original question ask generate random integer plural generate random integer inclusive python clarity demonstrate get multiple random integer give code multiple random integer sample random integer detail post generate multiple random integers.1 option address imply question see r. hettinger talk chunk aliasing use example random module comparison random function standard library numpy convert many distribution numpy sample random integers.3 example @john lawrence aspden @s mohamme @siddthekid @user14372 @zangw et al 2@prashanth mention module show integer @siddharth satpathy need random python module part standard library use code set variable num1 random number inclusive try random.shuffle case continuous number randint randrange good choice several distinct value sequence list use choice choice work item continuous sample need strong secrets.choice python new want use numpy use get list sample try import random module python make choose choice number basic try put value computer choose variable go use late print function work generate random integer output good way use import random function library import popitem remove return arbitrary value dictionary n. use mathematical approach work time let say want use random.random function generate number b. achieve follow num = b a)*random.random course generate number documentation page random module warning pseudo random generator module use security purpose use os.urandom systemrandom require secure pseudo random number generator introduce python consider secure available python current time write string.digit range use answer comprehension mix match accord need think add answer quantumrand use anu quantum number generator require internet connection concern random number useful https://pypi.org/project/quantumrand/ example output doc lot different example include dice roll list picker well luck python add character abcd abcd alter character pool pull change range alter number character generate openturn allow simulate random integer define associated distribution userdefine define class follow simulate outcome distribution print bracket becausex point dimension generate outcome single call getsample produce detail topic http://openturns.github.io/openturns/master/user_manual/_generated/openturns.userdefined.html
try install version use fresh virtualenv create site package option current version show pypi way install old version try instal show mysql_python-1.2.3 py2.6.egg info site package problem specific package wrong option mean information see pip install see issue try instal version uninstall current exist driver use pip install -i mysql_python==1.2.2 find work look pip installation log pip install -iv mysql_python==1.2.2 find pypi url link work verify http://pypi.python.org/pypi/mysql-python/1.2.2 download link 404 fallback url link direct due sourceforge.net recent upgrade pypi stale url install driver follow step use version range pip install command package instal want downgrade add reinstall way suggest post mention version pip use = mention version number install version instal ignore instal package install specific python package version first time upgrade downgrade use mysql_python version available use different version view available package version index exclude version believe package instal pip overwrite version use -i ignore previous version instal version cache return following requirement satisfied pillow==5.2.0 ubuntu anaconda3 lib site package use cache dir appear break change introduce version pip downgrade compatible version command tell pip install version module low version virutalenv screw site installation python command work python version package python jenkins command pip install python jenkins>=1.1.1 run issue use pip -i flag want document uninstall exist package proceeding install top old mean file delete version leave place cause weird behavior file share name instal module example let say package name package package file use import datetime package@2.0.0 point standard library datetime module package@3.0.0 add local datetime.py replacement standard library version reason let say run pip install package==3.0.0 realize want version run pip install package==2.0.0 old datetime.py file remove call import datetime import wrong module case manifest strange syntax error new version package add file compatible python downgrade package version support python continue import module base argue uninstalling old package preferable use update instal package version way install package pip install package name = version b pip install -v package name = = version use option installing(when know package instal pip install pyreadline = instal new separate package exist package different version b 2.and see instal pip list list package contain package wish install specific version well option uninstall package version first pip uninstall package name 4.and go reinstall package specific version pip install -v package name==version pip install -v pyreadline = want update late version know late version type pip install mysql_python --upgrade update late version available use package version
print json file python use parameter json.dump json.dump specify many space indent parse file use json.load command line mention commentary question thank petzke python3 suggestion python favourite tool json processing command line concern simple pretty printing want manipulate json overcomplicate need write separate script file end map key u"some key python unicode make select field difficult go direction pretty printing use jq get color bonus way easy extendability addendum confusion comment use jq process large json file hand large jq program pretty printing file consist single large json entity practical limitation ram pretty print gb file consist single array real world data maximum resident set size require print gb use jq note jq use python pip install jq use build module pprint https://docs.python.org/3.9/library/pprint.html read file json data print output valid json pprint use single quote json specification require double quote rewrite pretty print format json file use pprint.pformat pygmentize killer tool see combine python json.tool pygmentize see link pygmentize installation instruction demo image use function sweat remember json str dict look print use pprint https://docs.python.org/3.6/library/pprint.html print compare pprint.pprint able pretty print command line able control indentation set alias similar use alias way work display save file simple example pretty print json console nice way python require json computer local file try pprintjson print json file use pprintjson cli pretty print json stdin use pprintjson cli pretty print json string use pprintjson cli pretty print json string indent print json string save output file output.json think well parse json avoid error similar requirement dump content json file log easy use put function help case error json serializable answer work save human readable call string non dictionary element dictionary want load save pickle file load torch.save(obj f work fine work output know return string print work seem put dump print statement note pprint suggest work note object convert dict dict(dic code check condition context want save pytorch string keep get error code note pytorch use torch.save pickle file readable check relate post https://discuss.pytorch.org/t/typeerror-tensor-is-not-json-serializable/36065/3 pprint indent argument look output compare json.load convert json data dictionary use json.dumps prettyprint json perfect job improve add indent want able read clean json way go
check object give type inherit give type check object type str beginner expect string number expect python input convert type expect string integer wrong canonical question read question use check string represent number float int read input number ask user input give valid response appropriate use isinstance check instance str subclass str check type str exclude subclass str alternative see build function python library reference relevant information python well way check string catch unicode strings unicode subclass str str unicode subclass basestre python basestring exist strict separation string str binary datum byte isinstance accept tuple class return true instance subclass str unicode pythonic way check type object check python encourage duck typing try use object method way want use function look writable file object check subclass file try use method course nice abstraction break isinstance(obj cls use isinstance(o str return true str type inherit str type(o str return true str return false type inherit str question ask answer type hint add python type hint python allow type check different way type language type hint python associate expect type argument function runtime accessible datum associate function allow type check example type hint syntax case want error trigger foo('oop annotate type argument int add type hint cause error occur script run add attribute function describe expect type program query use check type error program use find type error mypy need install mypy package manager think come cpython seem level officialness type checking way different type checking type compile language type dynamic python type checking do runtime impose cost correct program insist happen chance explicit type check restrictive need cause unnecessary error argument need list type iterable sufficient upside explicit type check catch error give clear error message duck type exact requirement duck type express external documentation thorough accurate error incompatible type occur originate python type hint mean offer compromise type specify check additional cost usual code execution type package offer type variable use type hint express need behavior require particular type example include variable iterable callable hint specify need type behavior type hint pythonic way check type pythonic check type rely duck typing type hint new jury pythonic solution uncontroversial general comparison type hint provide form documentation enforce allow code generate easy understand error catch error duck typing check unusual sense outside runtime hand duck typing pythonic way long time impose cognitive overhead static type less verbose accept viable type python use |||| isinstance check type variable use name type ex link docs complex type validation typeguard approach validate base python type hint annotation perform complex validation clean readable fashion think cool thing use dynamic language python check call require method object catch attributeerror allow call method unrelated object accomplish different task mock object testing use lot get data web urllib2.urlopen return file object turn pass method read file implement read method real file ' m sure time place use isinstance accept answer answer question provide answer ask question good way check give object give type checking object inherit give type use isinstance issubclass type check base type answer comment quick point lot idea type checking python addition python type hint change go difficulty type check duck typing exception handling think type checking need point type hint use type checking appropriate thing python consider follow example check input iterable integer run major issue way check element integer loop check element loop entire iterator leave intended code option kind situation check loop check store check option downside complicate code perform similar check many place force move type check top function use iterable code option obvious downside destroy entire purpose iterator entire point store datum need think check check element check input type iterable iterable base class type implement iter iterable alternative approach forgo type checking focus exception handle duck typing say wrap code try block catch error occur let exception rise code way go catch exception compare option check run code typeerror place check loop input store input iterate approach enable duck typing check specific type move check specific behavior look input fail expect case loop num add exact reason make exception handle nice downfall float int satisfie behavioral requirement work bad practice wrap entire code try block seem issue reason change mind user expect function return int intend break code exception come wide variety source use try whole code block end catch exception intend wanted check num iterable integer element like catch exception code generator raise place informative exception fun exception raise code explanation line write typeerror occur order fix exception handling response point code become abomination kinda see go check thing bad code look compare original code readable argue extreme hand simple example practice code complicated see happen modify small example enable type checking focus try force specific type type hinting allow way make type clear user advantage use type hint code look good static type analysis perform editor use type hint store function class make usable dataclasse show function use help need sanity check input type right base description bad lack type hint base structure attribute require subclasse user downside type hinting word answer question provide type checking type checking type hinting course come conclusion type checking necessary want semblance typing type hint hugo mean list array point whole problem type checking want know object question list want know kind sequence single object try use sequence say want add object exist sequence sequence object add trick work string sequence string tricky string think single object sequence character bad sequence single length string choose design api accept single value sequence make thing easy put single value pass need cause error string look sequence simple way check type compare type know think good way type variable use type library example see https://docs.python.org/3/library/typing.html
want write function python return different fix value base value input index language use switch case statement python appear switch statement recommend python solution scenario original answer write python introduce match case statement provide first class implementation switch python example match case statement powerful simple example use dictionary like default use dictionary get(key default function like way addition dictionary method use elif obtain switch case default functionality course identical switch case fall leave break statement complicated test format nice series nest ifs close python = wow python + match case syntax switch case structural pattern match select feature match case match value match value similar simple switch case language match structural pattern capture variable parse object saving variable capture variable useful parse datum json html come number different pattern capture variable feature mean need use dotted constant color.re constant treat capture variable overwrite sample usage python favorite python recipe switch case short simple simple scenario compare + line code assign multiple variable use tuple usage test favorite nice recipe close one see actual switch case statement feature example comment indicate context manager solution use foo case case foo cleaner large switch statement linear quadratic behavior nice touch part value answer loop ability break fallthrough willing play choice keyword little bit get context manager example pattern learn twisted python code use time dispatch token execute extend piece code state machine state method dispatch self.state switch extend inheriting base class defining method time method base class edit use case smtp receive helo wire relevant code twist mail modify case look receive helo foo.bar.com get quit rcpt foo tokenize part helo actual method lookup name take original method call use pattern implement state machine getattr(self state + self.mode go drop cent reason case switch statement python python follow principle right way come various way recreate switch case functionality pythonic way accomplish elif construct feel pep deserve nod beautiful thing python simplicity elegance derive principle lay pep include right way let say want return value want use method change object use approach state python evaluate method dictionary value object incremente decremente x. solution get list contain function argument way function pointer argument list return evaluated result evaluate return function call solution run function foo1 foo2 function example parameter example parameter example value complicate case block consider use function dictionary lookup table do good idea step debugg view dictionary function note use case dictionary lookup call function dictionary case block create remember want call function use hash style lookup search extra statement switch build python module extend python call espy enhance structure python available python python example case switch statement perform follow code use espy translate python expand dict switch idea want use default value switch answer old accept one seem worth update first official python faq cover recommend elif chain simple case dict large complex case suggest set visit method style use many server framework case faq mention pep write get official decision add c style switch statement pep defer python reject separate proposal pep answer course pep link additional information interested reason history thing come multiple time see pep cut actual recommendation bother line code handle case line bash write encourage readable unidiomatic decade pep reject issue c style case statement powerful version consider dead bring python idea refer old decision idea full ml style pattern matching arise year language swift rust adopt problem hard get much use pattern match algebraic data type guido sympathetic idea come proposal fit read strawman example change dataclass sporadic proposal powerful enum handle sum type various proposal different kind statement local binding pep set proposal discuss -idea proposal perl style match mishmash elif regex single dispatch type switching find common switch structure express python follow format clear way statement python version expression evaluate value solution use combination solution post easy read support default look lambda x 2 dict use x=23 find dict use default lambda x x x=44 use dispatch dict output find simple answer look google search figure simple decide post prevent less scratch head key tuple switch statement behavior fall include random fall provide confused reading accept answer clear code analogous check source dictionary mapping function like mark bies answer variable use modify lambda function parameterless run results[value](value edit notice use none type dictionary emulate switch case short easy read default value support expression condition return value efficient solution dictionary example python scan condition return default value simple test condition evaluate fall case evaluate expression switch evaluate break statement example print dammit trail whitespace inline code block expression evaluate expression evaluate expression evaluate else solution tend use make use dictionary advantage try evaluate function time ensure outer function get information inner function need lot answer say switch python way like point switch statement abuse construct avoid case promote lazy programming case point switch statement python offer waste time method obvious sort operation handle dictionary complex prone error compact vast majority use case switch statement fall case little reason use one ' think problem ask switch python ask want switch python interesting question expose flaw design build say switch use state machine lexer parsers automata use degree general start symmetrical input go asymmetrical output useful need make sure use switch hammer see bunch nail code defining allow use straightforward syntax case bundle map keep try redefine switch way rid lambda give tweak definition allow map multiple case code supply default option replicate case dictionary switch consolidate dictionary look value ugly like basic efficiency use hash lookup expression loop key think good way use python language idiom keep code testable show previous answer use dictionary take advantage python structure language keep case code isolate different method class use module global function class method test isolation depend need play static method attribute possible take advantage method class key choice_table way avoid isinstance abuse keep clean testable suppose process lot message packet net mq packet structure management code generic way code possible complexity spread code flow render code structure expand greg hewgill answer encapsulate dictionary solution use decorator use @case decorator good news do neopyswitch module install use pip mapping key code issue people show use dict real trick try emulate whole drop thing think write case statement use feature go drop imagine single statement hope pardon silly format hope valid python code give drop course boolean check expression want evaluate wrap lambda make accept execute item list make tuple bool bool function second bool indicate drop worry lose syntax highlight case suite follow value value c create helper function use example ' find follow answer python documentation helpful enough sequence elif elif proposal switch statement syntax consensus range test see pep complete detail current status case choose large number possibility create dictionary mapping case value function call example call method object simplify use getattr build retrieve method particular name suggest prefix method name visit example prefix value come untrusted source attacker able call method object minor variation mark biek answer uncommon case duplicate user bunch function call delay argument pack worth build bunch function line short readable open question think readable briefer switch lambda partial particular use advantage work keyword argument make switch case implementation use use class use return predetermine fix value create dictionary possible input index key corresponding value want function compute return value feel switch see enough answer want point simple powerful solution output similar answer abarnert solution case call single function case switch avoid lambda partial ultra conciseness able handle keyword argument example usage note chain call put commas important put expression use extra parenthesis main call implicit line continuation example raise error switch value handle switch(5)(1 provide default value default=-1 return use list store case call correspond function select explain screwdesk follow work situation need simple switch case call bunch method print text play lambda global hit simple option help option remember switch statement syntactic sugar elif control statement delegate job base certain condition fulfil decision path wrapping module able call job base unique use inheritance fact method python virtual provide derive class specific job implementation specific case handler
read stdin code golf challenge require use stdin input use fileinput module fileinput loop line input specify file name give command line argument standard input argument provide note line contain trail newline remove use line.rstrip way sys.stdin file object call function read readline read want read split newline need import sys work want prompt user input use raw_input python input python want read command line option access sys.argv list find wikibook article python useful reference note include newline character end remove newline end use line.rstrip @brittohalloran say python build function input raw_input see python documentation build function example learn python unix test windows do try code golf challenge require input take stdin get python use sys fileinput import read sys.stdin example pipe datum stdin see sys.stdin default text mode say file inputs.txt accept file write complete replicable demo use method builtin function input use raw_input python sys.stdin datum unmodified processing non operation begin let create file input use code see check create file help python builtin function input read standard input newline strip complementing print add newline default occur get eof end file point raise eoferror use input python raw_input python read stdin create python module call stdindemo.py let print ensure expect input read newline strip line print add newline modify input modification cancel complement input get end file character raise eoferror ignore exit program linux unix pipe cat redirect file stdin execute module script help builtin input python make demo script use sys.stdin efficient way iterate file object use file object iterator complementary method write stdout input use print make sure look right redirect inputs file golf command file descriptor stdin stdout pass open python note need w write stdout work system shave character python import take lot space comment suggest golfing python create extra list memory str.join work give list contrast top answer suggest sys.stdin implement file api include iterator protocol answer suggest remember interpreter need ctrl linux mac z window enter send end file character process answer suggest print(line add \n end use print(line end= python need future import print_function real use case fileinput reading series file answer propose other simple pythonic note script wait eof start iterate line input mean tail error_log |||| process line expect correct script use case update comment clear python buffer involve wait buffer fill eof print call issue echo standard input standard output building anwer use sys.stdin follow read argument file argument fall stdin use make python script behave many gnu unix programs cat grep se example compatible python version run script many way use stdin short replace echo string use filename argument use stdin special filename follow chip code help read stdin block eof string amazed mention hack python2 drop set call work way try check read stdin store inputs data follow read sys.stdin read binary datum window need careful sys.stdin open text mode corrupt \r\n replace \n solution set mode binary window python detect python use sys.stdin.buffer use follow method return stre stdin use json parse work pipe prompt window test linux prompt line break indicate end input python simple form cat(1 add newline line use mark file executable use chmod cat.py problem solution pass datum stdin block love answer check datum stdin first read end python use assignment expression use command tricky way read stdin flexible case pass shell script command command put shell command quote parenthesis start sign count number line goldendict history file issue get work read socket pipe socket close start return empty string active loop solution test linux hope works system start listen socket work bash call telnet point browser regard line sys.stdin try python follow suggestion large file recommend reason mention happen long time end pythonic solution work big file run script os.read(0 read xbytes represent stdin unbuffered read low level sys.stdin.read test linux python
several way write stderr difference method method preferred find short flexible portable readable optional function eprint save repetition use way standard print function choice readable say intend portable version edit pythonic third think readability performance thing mind code pythonic list comprehension big thing use readability python python print go python3 http://docs.python.org/3.0/whatsnew/3.0.html say old print sys.stderr fatal error new print("fatal error file sys.stderr many feel unnatural relegate destination end command alternative look object orient go generic specific note write replacement print mention log log create communicate error message basic configuration set stream handler write script follow result run command line contain world print stdout python choice print spam print list dict convert string print sys.stderr spam spam sys.stderr.write(str({'spam spam say first approach obvious way other rule beautiful ugly edit answer python python standard think right answer follow use python ' m able add keyword argument example avoid carriage return python use print box straightforward need include sys.stderr mimic standard print function output edit hind sight think potential confusion change see behaviour update make answer good use simple function other point use partial save line code potential confusion worth save line code original make easy version use partial big help wrap function use check print stderr stdout follow ride code http://coreygoldberg.blogspot.com.au/2009/05/python-redirect-or-turn-off-stdout-and.html downside partial assign value sys.stderr wrap function time creation mean redirect stderr affect function plan redirect use kwargs method mention aaguirre page apply stdout state answer print offer pretty interface convenient print debug information write convenient format output certain way consider maintainability decide switch stdout regular file print syntax change python need support version write work python 3.4.3 cut little typing show get work try redirect stderr file see happen fact little introduction python slurp stderr go work want exit program fatal error use import sys header simple test find time fast answer question different way print python depend python version use exact output want differnce print write function stderr standard error pipe build unix linux system program crash print debug information traceback python go stderr pipe print print wrapper format input input space argument newline end call write function give object give object default sys.stdout pass file i.e print input file python2 use python2 python2 trail python3 become parameter use trail comma avoid newline print python3 look print('text print end= syntax error python2 http://python3porting.com/noconv.html check sceario python3 python future import make print function avoid syntax error difference start file use print future import print_function future import work python python early option convert complex print simple use separate print function work python2 python3 case point note stdout standard output pipe build unix linux system replacement print use alternative case print wrapper wrap input space newline end use write function write reason fast note trace debugg use logging https://docs.python.org/2/library/logging.html#logger-object fun way way
spend day yesterday search clear answer instal pip package manager python find good solution install tldr modern mac python3 ensurepip pip3 check pip documentation list support mechanism install https://pip.pypa.io/en/stable/installation/#supported-method recommend avoid instal pip os provide python command install python official installer use homebrew pyenv python ensurepip unable run python3 pip run python3 ensurepip install pip use end life version python use old answer outdated result break installation need admin privilege run try run follow command python v2.7 default mac run follow command python v3 follow instal python gif image say go follow use work detail read solution give easy solution install pip macos come python environment instal make sure python instal open terminal run follow command command return version number mean python exist mean access easy_install consider use macos os x. ℹ️ run follow command pip instal able use instal package p.s end blogge post install pip macos os x easy_install deprecate use download install pip ' m surprised mention python capable instal pip external command internet connection require create similar install easy_install install homebrew os x. install python homebrew version python ship os x great learning good development version ship os x date official current python release consider stable production version source homebrew package manager os x. find detail homebrew page instal run follow install late python pip setuptools mac install easy_install install pip install external module example install homebrew add path add line install python python v3 install pip3 order use pip add alia add line macos come python pip well manage homebrew install install python warning modern macos install python python need brew install python@2 install python python install python pip instal use pip version use pip3 execute python3 use version install package pip3 separate python old version upgrade pip create virtual environment work python use project folder folder check version deactivate environment pip available os x easy_install open terminal type prompt password enter normal login password installation complete able use pip expect note work python package simple solution follow installation instruction pip home site consist main advantage solution install pip python version use run get-pip.py mean use default os x installation python run get-pip.py install pip python install system solution use package manager homebrew macport os x create redundant installation python environment package manager create inconsistency system depend call installation python python python instal solution want install pip python instal separate copy python popular option python come macos take responsibility make sure use copy python intend benefit late python release protection hose system thing go wrong install python use homebrew confirm work instal python show symbolic link path cellar pip instal python want upgrade typing ready install package pypi use get-pip.py install pip docs warn get-pip.py coordinate package manager leave system inconsistent state need give pip include python note pip package manager python easy_install good mix python instal pip point python instal last get habit use pip2 pip3 sure python get new library happy hacking download file get-pip.py type make sure directory get-pip.py supply correct path file detail visit installation pip documentation http://thegauraw-blog-blog.tumblr.com/post/47601704154/how-to-install-pip-in-both-windows-ubuntu-easiest-way install homebrew executable brew brew install python pip work recent version yosemite el capitan believe least sierra need run brew postinstall python3 brew install python3 use homebrew accord official homebrew page 1st march python formula upgrade python python@2 formula add instal python keg python python2 add path default manual brew link maintain python2 python3 python@3 alias install python run follow command pip instal install package pip install package want pip3 ff brew brew install python3 execute pip3 command option update path include py27 pip bin directory add pip available new terminal window install upgrade pip download installation pip documentation run follow sudo python get-pip.py example install python first use pip3 install package python instal pip ship use pip install package run follow notice pip3 want use python want install pip need sudo frustrating try install package install pip local folder local pip install package choice sudo download python setup tool pypi website use tar file download download folder run easy_install use install pip easy install work old mac mountain lion solve problem wget open url browser save recommend anaconda lead open datum science platform power python many basic package instal anaconda conda come installation pip
generate string size make number uppercase english letter answer line start python use random.choice secure version see post detail clean function reuse work import string module contain sequences common ascii character random module deal random generation string.digit concatenate list character represent uppercase ascii chars digit use list comprehension create list element example use create list id_generator function python create list memory generate element fly ask create n time string elem ask python create n random character pick sequence character range(size create sequence size character character pick char join empty string sequence stre stack overflow quesion current top google result random string python current top answer excellent method prng random secure assume many people research question generate random string encryption password make small change code use random.systemrandom random use urandom nix machines cryptgenrandom window secure prng use random.choice random.systemrandom().choice application require secure prng devastating give popularity question bet mistake make many time use use new secret module mention mseifert answer module doc discuss convenient way generate secure token good practice uuid okay purpose use build uuid package import uuid example format example simple random way use choose letter repetition allow enlarge random basis time note prevent character reuse multiply size character set make multiple repetition possible pure random choice go stre length pick x first character choice example odd get second character odd get first character random.sample implementation odd get subsequent character chance get first character lowercase_str random value cea8b32e00934aaea8c005a35d85a5c0 uppercase_str cea8b32e00934aaea8c005a35d85a5c0 python use secret module need secure random module answer identical vazquez abram additional note list comprehension fast case str.join use generator expression easy flexible way use strgen module pip install stringgenerator generate character random string upper case letter digit get unique list guarantee special character stre random html color need aware digit uppercase character strgen fast developer time solution solution ignacio fast run time perform right answer use python standard library use form want use systemrandom fallback available make sure require character set represent use unicode make sure successive invocation produce unique string use subset string module character class require lot code answer provide various attempt generalize solution limitation strgen solve great brevity expressive power use simple template language pypi disclosure ' m author strgen module base stack overflow answer lightweight way create random string random hexadecimal number well version accept answer think answer lol go need random string pseudo random use os.urandom source method annoying random.choice method ignacio post take advantage nature pseudo random algorithms bank bitwise shift generate new random number character create generator take bit number time none leave join result generator random number right bit timeit character string time character string randbit lose use approach production code dislike worker edit update suit question uppercase digit use bitwise operator use numpy random.choice function documentation way letter confuse use follow logic generate character random sample need multiply use method generate random string length z import random = range(ord('a'),ord('z range(10 recommendation security relate avoid roll use secret module vet security good practice section doc ask uppercase letter substitute ascii_uppercase ascii_letter uppercase password canonical approach problem specify use choice function random module random.choice function pick random entry list create list append character statement end str j u q c str take care leaving hope enjoy functional python generate indefinite infinite iterator join random sequence generate indefinite sequence select symbol give pool break sequence length part join work sequence support getitem default generate random sequence alpha numeric letter modify generate thing example generate random tuple digit want use next generation make callable want generate sequence fly set join identity other mention need security set appropriate select function default selector choice select symbol multiple time chunk want member select chunk possible usage use sample selector complete selection chunk length join call next fetch generate chunk grant example seem bit cumbersome give cap number want include lowercase letter key work take anurag uniyal response work length string change loop i.e range(1,length simple algorithm easy understand use list discard character need look different answer take time read documentation secret secret module use generate strong random number suitable manage data password account authentication security token related secret secret use preference default pseudo random number generator random module design modelling simulation security cryptography looking offer find handy function want mimic google drive ids secrets.token_urlsafe([nbyte none return random url safe text string contain nbyte random bytes text base64 encode average byte result character nbyte none supply reasonable default use use follow way output character length know different op question expect helpful many looking use case look simple one suggest next option paranoic mode method def randstr_1(char str length int str char math.ceil(length len(char char = letters[0 length char list(char random.shuffle(character return def randstr_2(char str length int str return .join(random.choice(char range(char benchmark timeit import timeit setup import os subprocess time stre random math def randstr_1(letter str length int str letter = math.ceil(length len(letter letter = letters[0 length letter = list(letter random.shuffle(letter return .join(letter def randstr_2(letter str length int str return .join(random.choice(letter range(length print('method method run time length print(length character eff1 = timeit("randstr_1(string.ascii_letter .format(length setup setup number=10 eff2 timeit("randstr_2(string.ascii_letter .format(length setup = setup number=10 print('\t{}s s'.format(round(eff1 round(eff2 print('\tratio \n'.format(eff1 eff1 round(eff2 eff1 output method method run time character 0.001411s ratio = character ratio = character ratio = character 0.855136s ratio = character 1.360735 ratio = character 6.754923 ratio = character ratio = performance first method well def randstr_2(char str length int str return .join(random.choice(char range(char benchmark timeit import timeit setup import os subprocess time stre random math def randstr_1(letter str length int str letter = math.ceil(length len(letter letter = letters[0 length letter = list(letter random.shuffle(letter return .join(letter def randstr_2(letter str length int str return .join(random.choice(letter range(length print('method method run time length print(length character eff1 = timeit("randstr_1(string.ascii_letter .format(length setup setup number=10 eff2 timeit("randstr_2(string.ascii_letter .format(length setup = setup number=10 print('\t{}s s'.format(round(eff1 round(eff2 print('\tratio \n'.format(eff1 eff1 round(eff2 eff1 output method method run time character 0.001411s ratio = character ratio = character ratio = character 0.855136s ratio = character 1.360735 ratio = character 6.754923 ratio = character ratio = performance first method well benchmark output performance first method generate random byte containig letter digit os.urandom(16).translate((f'{string.ascii_letters}{string.digits}-_'*4).encode('ascii want easy use customisable key generator use key generator pypi package github find complete documentation customise give string jist want many option example hope help disclaimer use key generator library make none answer guarantee presence certain category character upper low digit answer result password digit surprised function part standard lib use use code generate string repeat random text value get repeat random text value generator generate component element set set set go answer none look easy suggest try passgen library use create random password generate random string choice length punctuation digits letter case code case random generator function duplicate use set store value generate note cost memory large string amount slow bit generator stop give amount maximum possible combination reach code output string need contain letter number use output use new library python = chancepy find simple clean change vary length vary characterpool alpha alpha numeric numeric strange character want
load python module give full path note file filesystem user access rights python + use doc python use deprecate python python use equivalent convenience function compile python file dll see http://bugs.python.org/issue21436 advantage add path sys.path use imp simplifie thing import module single package example import module add directory environment variable add follow line alternative file linux excecute source alternative terminal credit source stack exchange question top level module file package directory init__.py accept solution work python + follow code need note add line begin sys.module line exec_module execute try bind relative import top level init__.py top level module name case mymodule mymodule load get error systemerror parent module mymodule load perform relative import need bind name load reason fundamental invariant relative import system invariant hold sys.modules['spam sys.modules['spam.foo import appear foo attribute former discuss sound want import configuration file whole lot side effect additional complication involve run able access result namespace standard library provide api form interface available python python add directory configuration file sit python load path normal import assume know name file advance case config messy work come modify version @sebastianrittau wonderful answer python think allow load file extension module use spec_from_file_location advantage encoding path explicit sourcefileloader machinery try figure type file extension load file use method spec_from_file_location specify loader place implementation base @samgrondahl useful modification utility library haggis function call haggis.load.load_module add couple neat trick ability inject variable module namespace load use method imp module mean load import manipulate sys.path list specify path module import module example give module code work python version other test ugly work version use import chdir script project different directory mean solve problem follow method situation src main believe use imp.load_module load specify module need split module name path want load mypath mymodule.py need get job do add sebastian rittau answer least cpython pydoc declare import file sake completeness reference current implementation moment write pydoc.py ' m pleased say vein xkcd use implementation mention issue verbatim use pkgutil module walk_package method get list package current directory trivial use importlib machinery import module want create python module create python module test_check.py import import module module package dedicated test python version jython pypy depend size project area python seem tortuous understand bit hack use code chris calloway start manage get work basic function appear use non deprecate module python pretend understand seem work program find chris solution work command line program make package use imp call import_file use http://pypi.python.org/pypi/import_file http://code.google.com/p/import-file/ import module give filename extend path restore system path block reference simple solution use importlib imp package test python work python use namespace import module advantage solution need know actual name module like import order use code useful case path module configurable argument import package module runtime python recipe http://code.activestate.com/recipes/223972/ work say well sake completeness want suggest exec function available python python exec allow execute arbitrary code global scope internal scope provide dictionary example module store module function foo run follow make bit explicit load code grant additional power ability provide custom builtin access attribute key important design custom dict class global provide access write global portable import function base importlib module example directory structure inclusion dependency order implementation late change store https://sourceforge.net/p/tacklelib/tacklelib/head/tree/trunk/python/tacklelib/tacklelib.py testlib.std1.py testlib.std2.py output test python pro con update high python high bypass requirement declare tkl_import_module module declare tkl_import_module top level module function inject child module single call kind self deploy import update add function tkl_source_module analog bash source support execution guard import implement module merge import update add function tkl_declare_global auto export module global variable child module module global variable visible part child module update function move tacklelib library see link linux add symbolic link directory python script locate work interpreter create /absolute path script module.pyc update change content /absolute path module include follow file mypythonscript.py allow import compile pyd python module simple way suppose want import file relative path pyfunc.py make guard get long path utility function use pathlib infer module name path default load python file folder replace parent folder name give path glob select specific file answer supplement sebastian rittau answer respond comment module name quick dirty way get likely python module name give filename go tree find directory init__.py file turn filename python + use pathlib make sense python people use imp way relative import possibilitie improvement optional init__.py file necessitate change general trick way loading file c implementation file look use importfile pydoc good way think official documentation imp access import internal find simple answer special import module absolute path exec exec take code string code object eval take expression get value object eval load module exec import wildcard namespace
want combine single dictionary voila pairwise dict constructor zip function useful imagine simple way produce follow dictionary python zip return lazy iterator performant approach dict(zip(key value require time global lookup dict zip form unnecessary intermediate datum structure deal local lookup function application close runner use dict constructor use native syntax dict comprehension list comprehension other put choose need map filter base keys value python zip return list avoid create unnecessary list use izip aliased zip reduce code change move python izip itertool become zip python izip well zip python avoid unnecessary list creation ideal case look help dict see take variety form argument optimal approach use iterable avoid create unnecessary datum structure python zip create unnecessary list python equivalent python zip create iterable object want avoid create unnecessary datum structure want avoid python zip create unnecessary list generator expression pass dict constructor list comprehension pass dict constructor case extra layer operative unnecessary computation place zip iterable case list comprehension extra list create expect performant bit python provide nix ubuntu order fast slow dict(zip(key value win small set key value large set difference performance become great commenter say min seem bad way compare performance mean max useful indicator real usage use min algorithms deterministic want know performance algorithm good condition possible operate system hang reason try compare need exclude kind result analysis use mean kind event skew result use max get extreme result affected event commenter say python use mean value dict comprehension small list large list 10k random number dict call fast presume mean dict(zip 10k random number sound unusual use case make sense direct call dominate large dataset surprised dominate give take run test skew number use mean max consider result meaningless let use realistic size top example see dict(zip run large dataset try python economical memory consumption compare zip output use dictionary comprehension python ≥ natural way use dictionary comprehension need transform key value create dictionary generator expression use example take look code pythonista idiomatic python python go dict comprehension dict comprehension example need simple code n’t familiar zip do line code use code make sure length list length same.then zip function turncate good solution tranpose example add list value dictionary make sure key"(list1 first parameter doubt try solve graph relate problem issue need define empty adjacency list want initialize node empty list thought check mean worth zip operation simple assignment key value pair time time factor important ice breaker perform timeit operation approach n_node get iteration shorthand iteration shorthand iteration shorthand iteration shorthand iteration shorthand iteration shorthand iteration shorthand see certain point iteration approach n_th step overtake time take shorthand approach n-1_th step do follow way solution dictionary comprehension enumerate solution loop enumerate work set value wish list dict use real life example list tuples db query pair tuple column query answer provide method zip function multiple way think fundamental way approach create loop dictionary store value dictionary recursive approach idea use loop function call reach end course approach use value effective solution result print
select column b df save new dataframe df1 unsuccessful attempt column name string slice manner try couple option know context variable want slice return view column pass list getitem syntax matter index name say code know name column familiarize idea view pandas object copy object first method return new copy memory desire sub object desire slice indexing convention give new variable refer chunk memory sub object slice original object happen second way indexing modify method get regular copy happen change think sliced object alter original object good look use iloc know column position index column position change hard code index use iloc get_loc function column method dataframe object obtain column index use dictionary access column name use iloc version column slice manner try use indexer get column return column c e. demo generate dataframe get column e note integer slicing e include column work select row base label get row r6 column accept boolean array select column correspond entry array true example df.columns.isin(list('bcd return true true true false false dtype bool true column name list b c false assume column name index','a','b','c datum want third fourth column know name script run ems point answer df.ix slice column bit .column slice interface use vanilla dimensional python list indexing slicing syntax warning index bad name dataframe column label use real df.index attribute index array column return df['index real dataframe index return df.index index special kind series optimize lookup element value df.index look row label df.column attribute pd.index array look column label late version pandas easy way column name string slice manner pandas wit column name select iloc specific column index number loc column name use use pandas.dataframe.filter method filter reorder column useful chain method provide list column drop return dataframe column need use drop function pandas dataframe saying return dataframe column b c. drop method document find method useful detail find start use list miss label deprecate favor answer question prior version use .loc[list label work key find raise keyerror behavior deprecate show warn message recommend alternative use .reindex read indexing select datum use pandas create dataframe dataframe select column name use get column test_2 select column row row use call slicing notice take column test_1 test_3 slice want peter ann column test_1 test_3 get want get element row index column name df['b'][0 simple imagine use df.ix[0,'b mixed usage index label note v0.20 deprecate favour loc iloc try use pandas.dataframe.get see documentation different easy approach iterate row different approach discuss previous answer base assumption user know column index drop subset user wish subset dataframe use range column instance c e pandas.dataframe.drop option subset datum base list column define user cautious use copy dataframe inplace parameter set true option use pandas.columns.difference set difference column name return index type array contain desire column follow solution output use df.pop use see several answer remain unclear select column interest answer gather list reference column use list follow list numpy array extracted_feature specify column original dataset column extract use end use machine learning feature selection discuss way think cover stack overflower user select multiple column extract view df name datum frame create new datum frame select column want extract view require column show exclude column drop column index example select output use method truncate select middle column output use function think easy way reach goal import pandas pd
follow class declaration inherit object python apart compatibility python reason python many reason python style class depend presence absence object base class classic style class object base class new style class inherit build type object base class doubt write class want go new style class perk numerous list support descriptor follow construct make possible descriptor new static method let customize new class instance create method resolution order mro order base class class search try resolve method call relate mro super call see consider super inherit object forget exhaustive description previous bullet point perk new style class find downside new style class class memory demanding create many class object doubt issue negative sink sea positive python thing simplify new style class refer class difference add object require type character equivalent name object basis python inherit object get perk python inherit object write code try python agnostic need work python python make difference python insert scene python python explanation define base class python allow drop object definition open door hard track problem python introduce new style class python old style class old discussion old style class bury doc non existent doc problem syntax old style class python alternative syntax new style class python python use gae web2py code coder bring style class definition code go end outdated base object old style class n’t ’s radar n’t hit spell long way save developer tear new style object feature introduce new style object different object model classic object thing work old style object instance super @property descriptor see article good description new style class link description difference difference old style new style class python history learn python hard way python original rendition class break many serious way time fault recognize late support order fix problem need new class style old class keep work use new correct version decide use word object lowercase class inherit make class confusing class inherit class name object make class object class forget inherit object know difference new style class old style class new style class inherit object class class inherit object example old style base class look old style child class look see old style base class inherit class old style class course inherit inheriting object guarantee certain functionality available python class new style class introduce python historical create old style class use type old style object get instance new style object get class syntax class creation statement absence superclass want inherit superclass object root class python object root new style class python new style class today good style class use word object create class other mention python inherit object superclass guess explicit implicit hell reference
project euler code contest maximum time run people boast fast particular solution run python approach kludgey add time code main good way profile long python program take run python include profiler call cprofile give total run time time function tell many time function call make easy determine make optimization call code interpreter invoke cprofile run script make make little batch file call profile.bat run get edit update link good video resource pycon title python profiling youtube make pycallgraph generate visualisation python code edit update example work late release write pip install pycallgraph instal graphviz run command line profile particular part code generate pycallgraph.png file similar image worth point use profiler work default main thread get information thread use bit gotcha unmentione profiler documentation want profile thread want look function doc create subclass use profiledthread class standard give flexibility m sure worth use third party code use class python wiki great page profiling resource http://wiki.python.org/moin/pythonspeed/performancetips#profiling_code python doc http://docs.python.org/library/profile.html show chris lawlor cprofile great tool use print screen file use ubuntu make sure install python profile output file get nice visualization use follow tool pycallgraph tool create call graph image install run view use view png file use gimp get dot graph large cairo renderer bitmap scale fit make image small create svg file ps make sure install graphviz provide dot program alternative graphing use @quodlibetor @maxy comment answer help think deserve answer cprofile generate .pstat file want run thing pycallgraph use gprof2dot get pretty svgs blam use dot thing pycallgraph use output look similar get impression lose less information simple quick way find time go draw pie chart big piece problem function simple run handy tool call snakeviz research topic snakeviz web base profiling visualization tool easy install use usual way use generate stat file prun analysis snakeviz main viz technique use sunburst chart show hierarchy function call arrange layer arcs time info encode angular width good thing interact chart example zoom click arc arc descendant enlarge new sunburst display detail cprofile great profiling kcachegrind great visualizing result pyprof2calltree handle file conversion require system package setup ubuntu result create tuna visualize python runtime import profile helpful install create runtime profile import profile python require run tuna file worth mention gui cprofile dump viewer runsnakerun allow select zoom relevant part program size rectangle picture proportional time take mouse rectangle highlight call table map double click rectangle zoom portion show call portion portion call descriptive information helpful show code bit helpful dealing build library call tell file line find code want point op say profiling appear mean time keep mind program run profile line_profiler present inspire pprofile describe line granularity thread aware deterministic statistic pure python profiler provide line granularity line_profiler pure python use standalone command module generate callgrind format file analyze |k||q]cachegrind| vprof python package describe provide rich interactive visualization various python program characteristic run time memory usage nice profiling module line_profiler call use script kernprof.py download understanding cprofile give information total time spend function individual line code time issue scientific computing single line take lot time remember cprofile catch time spending say terminal simple solution case fancy ui fail install run ignore cprofile replace pyinstrument collect display tree call right execution install profile display result work python2 edit documentation api profiling part code find lot great answer use command line external program profiling sort result miss way use ide eclipse pydev touch command line instal see doc answer info statistical profiler austin instrumentation require meaning get profile datum python application raw output useful pipe flamegraph.pl get flame graph representation data give breakdown time measure microsecond real time spend use web application quick visualisation collect sample pprof instal get austin python pipx install austin python use covert pprof format code instal use austin extension interactive experience source code heat map top function collect call stack use terminal use tui live graph mode follow joe shaw answer multi threaded code work expect figure runcall method cprofile self.enable self.disable call profile function call code want minimal interference exist code virtaal source useful class decorator make profile specific method function easy output view kcachegrind get quick profile stat ipython notebook embed line_profiler memory_profiler straight notebook useful package pympler powerful profiling package capable track class object function memory leak example doc attach give give give give return size object bytes pympler.asizeof use investigate much memory certain python object consume contrast sys.getsizeof asizeof size object track lifetime function pympler package consist huge number high utility function profile code cover see documentation attach verbose profile implementation make cumulative profiler mean run function several time row watch sum result use cumulative_profiler decorator python specific remove nonlocal work old version example profiling function baz baz run time print specify amount time create plugin pycharm analyse visualise result line_profiler pycharm editor line_profiler mention answer great tool analyse much time spend python interpreter certain line pycharm plugin create find https://plugins.jetbrains.com/plugin/16536-line-profiler need helper package python environment call line profiler pycharm instal pip plugin instal plugin pycharm screenshot result cprofile great quick profiling time end error function solve problem initialize environment variable hope useful gprof2dot_magic magic function profile python statement dot graph jupyterlab jupyter notebook github https://github.com/mattijn/gprof2dot_magic installation make sure ve python package gprof2dot_magic dependency gprof2dot graphviz instal usage enable magic function load gprof2dot_magic module profile line statement dot graph way use yappi https://github.com/sumerc/yappi useful combined rpc server debug register method start stop print profiling information way program work start profiler time call startprofiler rpc method dump profile information log file call printprofiler modify rpc method return caller get output useful short script help optimize server type process give printprofiler method call multiple time time profile compare different program usage scenario new version yappi follow code work add https://stackoverflow.com/a/582337/1070617 write module allow use cprofile view output https://github.com/ymichael/cprofilev see make sense collect statistic new tool handle profile python pyvmmonitor unique feature note commercial free open source depend want see profile simple time metric give bash bin time output detailed metric use flag check time metric give function understand much time spend function use inbuilt cprofile python go detailed metric performance time metric worry memory thread profiling option line_profiler profiler use find timing metric line line memory_profiler tool profile memory usage heapy project guppy profile object heap use common one tend use want find try read book good book start performance mind move advanced topic use cython jit(just time compile python develop profiler inspire pypref_time https://github.com/modaresimr/auto_profiler add decorator show tree time consume function @profiler(depth=4 want know hell python script enter inspect shell inspect shell let print alter global run function interrupt run script auto complete command history linux inspect shell pdb style debugger https://github.com/amoffat/inspect-shell use wristwatch statistical profiler call statprof sample profiler add minimal overhead code give line base function base timing suited soft real time application game precision cprofile version pypi bit old install pip specify git repository run https://stackoverflow.com/a/10333592/320036 find cprofiler ressource optimization purpose debug make testing module simple python script speed testing case line py file test use scriptprofilerpy speedup code 10x minute module scriptprofilerpy run code add timestamp put module https://github.com/lucas-blp/scriptprofilerpy use output find function quick easy use want command line option use add @profile function profile output function look scalene new python profiler cover many use case minimal performance impact https://github.com/plasma-umass/scalene profile cpu gpu memory utilisation granular level support multi threaded parallelize python code ' m root server use lsprofcalltree.py run program open report callgrind compatible software qcachegrind
python include standard library new package venv differ package match regex |py)?(v||virtual||pip)?env| personal recommendation beginner start learn virtualenv pip tool work python variety situation pick tool start need answer question difference name thing venv virtualenv virtualenv popular tool create isolate python environment python library familiar tool recommend learn useful tool work instal bunch file directory env/ modifying path environment variable prefix custom bin directory env exact copy python python3 binary place directory python program look librarie relative path first environment directory part python standard library bless pypa python packaging authority activate install package virtual environment use pip pyenv use isolate python version example want test code python need way switch activate prefix path environment variable ~/.pyenv shim special file match python command python pip copies python ship command special script decide fly version python run base pyenv_version environment variable version file ~/.pyenv version file pyenv make process download instal multiple python version use command pyenv install pyenv virtualenv plugin pyenv author pyenv allow use pyenv virtualenv time use python pyenv virtualenv try run python venv available virtualenv use virtualenv pyenv pyenv virtualenv want convenience feature virtualenvwrapper set extension virtualenv see docs give command mkvirtualenv lssitepackage workon switch different virtualenv directory tool useful want multiple virtualenv directory pyenv plugin pyenv author pyenv integrate virtualenvwrapper pyenv pipenv aim combine pipfile pip virtualenv command command line virtualenv directory place ~/.local share virtualenvs xxx xxx hash path project directory different virtualenv directory current work directory pipenv mean use develop python application oppose librarie alternative pipenv poetry list question package name pyvenv confused pyenv previous section script ship python remove python problem mention confusing name run python3 venv effect pyvenv venv package ship python run use python3 venv reason distro separate separate distro package python3 venv ubuntu debian serve purpose virtualenv subset feature see comparison virtualenv continue popular venv former support python avoid use virtualenv python3.3 use standard ship library venv create new virtual environment type virtualenv try copy python binary virtual environment bin directory update library file link embed binary build python source non system directory relative path name python binary break make copy distributable python big flaw inspect embed library file link os x use otool example virtual environment type avoid virtualenvwrapper pipenv pyvenv deprecate pyenv seem use virtualenv use stay think venv pyenv build venv create virtual environment shell fresh sandboxe user installable library multi safe fresh virtual environment start standard library ship python install librarie pip install virtual environment active sandboxe none new library install visible virtual environment delete whole environment start worry impact base python install user installable library virtual environment target folder create sudo directory need sudo permission install librarie multi safe virtual environment activate shell see python version use build virtual environment pyenv similar venv let manage multiple python environment pyenv rollback library install start state need admin privilege point update library think good use venv last couple year find many problem build system emacs package python standalone application builder installer come issue virtualenv think python well platform eliminate additional option use venv edit tweet bdfl use venv stdlib bunch shell alias switch guido van rossum @gvanrossum october add conclusion paragraph go pipenv rabbit hole deep dark hole last answer year feel useful update discussion late development python virtual envelope topic find answer continue rage debate merit pipenv venv envelope solutions- make endorsement pypa endorse conflicting standard future development virtualenv promise make choice focus tool anoint one pypa note venv tool virtualizing environment third party solution native tool pypa endorse venv create virtual envelope change version use venv recommend create virtual environment pipenv- venv use create virtual envelope roll package management vulnerability checking functionality use pipenv deliver package management pipfile pypa endorse pipenv package management seem imply pipfile supplant pipenv use virtualenv tool create virtual envelope venv endorse pypa go tool create virtual envelope settle virtual envelope solution difficult enough pypa endorse different tool use different virtual envelope solution rage github debate venv virtualenv highlight conflict find github debate reference link steer virtualenv development direction accommodate venv future release build venv target python venv create environment use perform subsequent operation facilitate guarantee offer look future convergence rival virtual envelope solution use virtualenv vary venv give problem pipenv solve fact pypa give blessing appear bright future virtualenv deliver propose development objective choose virtual envelope solution long case pipenv venv repeat criticism pipenv see produce analysis maintain point use solution future see questionable due lack continuous development dry spell month pipenv develop large material update release let start problem tool want solve system package manager python version want want install multiple python version side side python python python use pyenv want install run multiple application different conflict dependency use virtualenv venv interchangeable difference virtualenv support old python version minor unique feature venv standard library develop /application/ need manage dependency manage dependency resolution dependency project use pipenv poetry develop /package/ want specify dependency library user need install use setuptool use virtualenv virtualenv folder scatter various project folder want centralised management environment simple project management use virtualenvwrapper variant pyenv virtualenvwrapper use pyenv recommend jan update @flimm explain difference want know difference tool want decide good next question use choose official way manage virtual environment pipenv combine addition previous install requirement active virtual environment create none active happy pipenv use pyenv pyenv virtualenvwrapper pipenv pipenv installing requirement debian apt install libffi dev install pyenv base https://www.tecmint.com/pyenv-install-and-manage-multiple-python-versions-in-linux/ pyenv virtualenv install pyenv virtualenvwrapper standalone library pyenv plugin 2nd option create virtual environment project workingdir exist switch project project file fix version version limitation neccessary possible tool install current virtual environment pip tool pipenv let say use pipenv create pipfile pipfile.lock file fix version 2nd want reinstall version pipfile.lock present remember pipfile.lock relate python version recreate use different see write problem remove removed package pipfile writing pipfile see use pipenv use replace edit change stack pyenv pyenv virtualenvwrapper poetry use apt pip installation virtualenv virtualenvwrapper install pyenv plugin pyenv virtualenvwrapper easy way poetry great python newcomer question frustrate confused month virtual environment package manager(s invest learning know use year come good article answer vexing question https://jakevdp.github.io/blog/2016/08/25/conda-myths-and-misconceptions/ jake vanderpla year old provide practical answer history python package virtual environment manager trench state art develop frustrating data science big datum cloud computing communities conda use virtual environment manager full function package manager python javascript sql java html5 jupyter notebook use pip conda pip venv variant answer use pip conda package available many time require package available pip format easy solution use pip learn use conda build package maintainer convince package owner generate conda package new release pip base package differ many important practical dimension answer question package dimension package maturity stability venv virtualenv mature stability community support online documentation see virtualenv version today virtualenv virtualenv tool create isolate python environment python subset integrate standard library venv module venv module offer feature library name prominent virtualenvwrapper set script help people use virtualenv wrapper maintain last update virtualenvwrapper recommendation avoid pip virtual environment possible use conda conda provide unified approach maintain team professional open source developer reputable company provide funding support version team maintain pip venv virtualenv pipenv many pip variants limit resource comparison pip virtual environment plurality frustrating beginner pip base virtual environment tool complexity fragmentation fringe unsupported package inconsistent support drive use conda datum science work recommendation use pip base virtual environment manager last resort conda package exist difference venv variant scare time limited learn new package pipenv venv pyvenv pyenv virtualenv virtualenvwrapper poetry other dozens difference complexity take day understand go path find support package go belly maintainer resign get busy maintain need get job do spirit helpful link help dive head lose dante inferno pip guide python virtual environment choose core python package invest career long term get job do short term important business analysis question try get task do professional software engineer build scalable performant system require least amount maintenance effort time imho conda take latter place deal pip plurality problem conda miss step pip package migration tool make moot question convert pip package conda package pypi.org conda forge merge pip necessary conda package universal many python programmer lazy create conda package program python need conda language agnostic multi lingual support conda god send supports cloud software engineering data science need multilingual support javascript sql jupyter notebook extension conda play docker cloud native environment encourage learn master conda enable side step many complex question pip base tool answer keep simple need package need guidance workaround remain edge case check article link herein learn pip base virtual environment hope helpful original poster give pip conda aficionado thing think
@classmethod @staticmethod mean python different use use use understand @classmethod tell class method inherit subclass point define class method add @classmethod @staticmethod definition classmethod staticmethod similar slight difference usage entity classmethod reference class object first parameter staticmethod parameter let assume example class deal date information boilerplate class use store information certain date timezone information let assume date present utc init typical initializer python class instance receive argument typical instance method first non optional argument self hold reference create instance class method task do use classmethod let assume want create lot date class instance date information come outer source encode string format dd mm yyyy suppose different place source code project look purpose implement feature overload python lack overload use classmethod let create constructor let look implementation review advantage static method staticmethod similar classmethod take obligatory parameter class method instance method let look next use case date string want validate task bind date class use require instantiation staticmethod useful let look next piece code see usage staticmethod access class function call method access object internal field method classmethod rostyslav dzinko answer appropriate thought highlight reason choose @classmethod @staticmethod create additional constructor example rostyslav use @classmethod from_string factory create date object unacceptable parameter do show code millenium_new_year instance date class observe factory process code create date object matter mean date class subclasse subclass create plain date object property subclass see example datetime2 instance datetime wtf well @staticmethod decorator use case undesire want factory method aware class call @classmethod need rewrite date.millenium part code change ensure class code learn cls subclass result object instance cls let test reason know @classmethod use @staticmethod @classmethod mean method call pass class first argument instance class method mean use class property method particular instance @staticmethod mean method call pass instance class method put function class access instance class useful method use instance @staticmethod function function define class callable instantiate class first definition immutable inheritance @classmethod function callable instantiate class definition follow sub class parent class inheritance overridden subclass first argument @classmethod function cls class good link topic use use use need decorator principle minimize number argument function see clean coder useful instance method class method accept argument typeerror understanding semantics argument user error define some_function work dot lookup instance perform order note dotted lookup instance invoke method callable attribute argument self give dotted lookup access instance method instance class argument cls give dotted lookup access method instance class subclass argument give method work function define example module namespace look restrictive information pass method instance method need information make function method easy reason unitt easy reason function few argument easy reason easy unitt akin instance class static method keep mind instance class ask easy reason couple favorite builtin example str.maketran static method function string module convenient accessible str namespace dict.fromkey class method return new dictionary instantiate iterable key subclasse see get class information class method useful use static method need class instance argument function relate use object convenient function object namespace use class method need instance information need class information class static method constructor hardcode class subclass use use @classmethod want change behaviour method base subclass calling method remember reference call class class method use static want behaviour remain unchanged subclass example little compilation @staticmethod way write method class reference object call need pass implicit argument self cls write write outside class use python need encapsulate method class method need part class @staticmethod come handy case @classmethod important want write factory method custom attribute(s attach class attribute(s overridden inherit class comparison method @classmethod @classmethod compare init think init way python realize class constructor overload c++ notice reference class first argument definitioin init use self construct_from_func use cls @staticmethod @staticmethod compare object method different way think useful class method use superclass define method behave call different child class static method use want return thing child class call ' m beginner site read answer get information want upvote want get start stackoverflow answer understand short @classmethod turn normal method factory method let explore example @classmethod labor create instance scatter example @classmethod test see instance create class definition collect conclusion @classmethod decorator convert conventional method factory method use classmethod make possible add many alternative constructor necessary class method modify class state bind class contain cls parameter static method modify class state bind class does't know class instance
long query split several line python way javascript use several sentence join operator efficient way ' m concerned performance stage code readability example try similar python work use split long string ' m pythonicest way look awkward actual code talk multi line string use triple quote start end use single quote course start end treat result string string note stre start end quote become part stre example lead blank point string contain blank newline construct long line python include extra blank newline deliberate example show effect skip blank result commas require place string join pair parenthesis account need blank newline want multiline string long single line string use parenthesis make sure include commas string segment tuple sql statement construct multiline string fine extra white space multiline string contain problem good way achieve want note comment concatenate sql query way sql injection security risk wait happen use database parameterized query feature prevent leave answer answer question ask break line work example find happy find build long string build sql query case good levon suggest good vulnerable mistake approach use way look pythonic include variable use notation well way name parameter .format python use format string literal f string find good long string describe example value condition string other mention parenthesis method add parenthesis inline comment allow use backslash line continuation comment allow receive syntaxerror unexpected character line continuation character error base example https://docs.python.org/3/library/re.html#re.verbose general approach long string python use triple quote split join output regard op question relate sql query answer disregards correctness approach building sql query build long string readable aesthetic way additional import disregard computational load entail use triple quote build long readable string break list use split strip white space join insert variable use format command produce approach line pep find useful time note curly bracket original string use format function find follow good simple safe pythonic way write raw sql query python use python sqlite3 module tl;dr use wrap string official python documentation string literal span multiple line way use triple quote end line include string possible prevent add end line follow example produce follow output note initial newline include add @levon answer create multiline string output string newlines blank space remove remove extra space use regex ouput use want remove annoying blank space line follow ummm know long time question post find style use assign long multiline string variable project take bit extra runtime preserve beauty code variable assign string indent go actual code work miss white space end line example rolefrom triple quote multiline string contain line break extra space sql problem try format return continuous line enquire property combine idea levon jesse faheel ddrscott format suggestion write query interesting vars.extend(option n_options(len(option hint darkfeline make mistake lead space separator name placeholder see documentation cursor.execute function pythonic way know old question python change see answer go way use cut current line move place sql statement separate file action.sql load file sql statement separate python code parameter sql statement need fill python use string format field option think readable code variable indented output stre liner newline à la scala way think pythonic way op demand want final str jump line put \n start first argument second replace note white line template require white space |||| official python documentation string literal span multiple line way use triple quote end line include string possible prevent add end line follow example produce follow output note initial newline include pep style guide recommend use parenthesis preferred way wrap long line use python imply line continuation parenthese bracket brace long line break multiple line wrap expression parenthese use preference use backslash line continuation example use recursive function build complex sql query technique use build large string maintain code readability p.s look awesome python sqlparse library print sql query need approach privilege read case long string way depend level indentation limit character line say view python style guide vague take eero aaltonen approach privilege read common sense understand style guide help make life mess define long string dict keep newline omit space end define string constant use list join multi line comment string use string join list element \n'(newline comma space
generate random integer inclusive python example try random.randrange try random.randint doc state return random integer b. try generate pseudorandom integer range inclusive secret module new python well random module cryptography security use print integer inclusive range detail see pep note depend use case random module set random seed useful pseudorandom reproducible result possible secret module random module test python try follow > numpy.random.randint numpy.random.uniform numpy.random.choice random.randrange random.randint speed ► np.random.randint fast ~10 time fast np.random.choice random.randrange random.randint note np.random.randint generate random integer open interval low high np.random.uniform generate distribute number open interval low high np.random.choice generate random sample half open interval low high argument np.arange(n random.randrange(stop generate random number range(start stop step random.randint(a b return random integer b. > astype(int cast numpy array int data type choose size give numpy array length choose size array example choose size use expect see output follow form different random integer return time run expect integer output array differ example give many post demonstrate get random integer original question ask generate random integer plural generate random integer inclusive python clarity demonstrate get multiple random integer give code multiple random integer sample random integer detail post generate multiple random integers.1 option address imply question see r. hettinger talk chunk aliasing use example random module comparison random function standard library numpy convert many distribution numpy sample random integers.3 example @john lawrence aspden @s mohamme @siddthekid @user14372 @zangw et al 2@prashanth mention module show integer @siddharth satpathy need random python module part standard library use code set variable num1 random number inclusive try random.shuffle case continuous number randint randrange good choice several distinct value sequence list use choice choice work item continuous sample need strong secrets.choice python new want use numpy use get list sample try import random module python make choose choice number basic try put value computer choose variable go use late print function work generate random integer output good way use import random function library import popitem remove return arbitrary value dictionary n. use mathematical approach work time let say want use random.random function generate number b. achieve follow num = b a)*random.random course generate number documentation page random module warning pseudo random generator module use security purpose use os.urandom systemrandom require secure pseudo random number generator introduce python consider secure available python current time write string.digit range use answer comprehension mix match accord need think add answer quantumrand use anu quantum number generator require internet connection concern random number useful https://pypi.org/project/quantumrand/ example output doc lot different example include dice roll list picker well luck python add character abcd abcd alter character pool pull change range alter number character generate openturn allow simulate random integer define associated distribution userdefine define class follow simulate outcome distribution print bracket becausex point dimension generate outcome single call getsample produce detail topic http://openturns.github.io/openturns/master/user_manual/_generated/openturns.userdefined.html
try install version use fresh virtualenv create site package option current version show pypi way install old version try instal show mysql_python-1.2.3 py2.6.egg info site package problem specific package wrong option mean information see pip install see issue try instal version uninstall current exist driver use pip install -i mysql_python==1.2.2 find work look pip installation log pip install -iv mysql_python==1.2.2 find pypi url link work verify http://pypi.python.org/pypi/mysql-python/1.2.2 download link 404 fallback url link direct due sourceforge.net recent upgrade pypi stale url install driver follow step use version range pip install command package instal want downgrade add reinstall way suggest post mention version pip use = mention version number install version instal ignore instal package install specific python package version first time upgrade downgrade use mysql_python version available use different version view available package version index exclude version believe package instal pip overwrite version use -i ignore previous version instal version cache return following requirement satisfied pillow==5.2.0 ubuntu anaconda3 lib site package use cache dir appear break change introduce version pip downgrade compatible version command tell pip install version module low version virutalenv screw site installation python command work python version package python jenkins command pip install python jenkins>=1.1.1 run issue use pip -i flag want document uninstall exist package proceeding install top old mean file delete version leave place cause weird behavior file share name instal module example let say package name package package file use import datetime package@2.0.0 point standard library datetime module package@3.0.0 add local datetime.py replacement standard library version reason let say run pip install package==3.0.0 realize want version run pip install package==2.0.0 old datetime.py file remove call import datetime import wrong module case manifest strange syntax error new version package add file compatible python downgrade package version support python continue import module base argue uninstalling old package preferable use update instal package version way install package pip install package name = version b pip install -v package name = = version use option installing(when know package instal pip install pyreadline = instal new separate package exist package different version b 2.and see instal pip list list package contain package wish install specific version well option uninstall package version first pip uninstall package name 4.and go reinstall package specific version pip install -v package name==version pip install -v pyreadline = want update late version know late version type pip install mysql_python --upgrade update late version available use package version
print json file python use parameter json.dump json.dump specify many space indent parse file use json.load command line mention commentary question thank petzke python3 suggestion python favourite tool json processing command line concern simple pretty printing want manipulate json overcomplicate need write separate script file end map key u"some key python unicode make select field difficult go direction pretty printing use jq get color bonus way easy extendability addendum confusion comment use jq process large json file hand large jq program pretty printing file consist single large json entity practical limitation ram pretty print gb file consist single array real world data maximum resident set size require print gb use jq note jq use python pip install jq use build module pprint https://docs.python.org/3.9/library/pprint.html read file json data print output valid json pprint use single quote json specification require double quote rewrite pretty print format json file use pprint.pformat pygmentize killer tool see combine python json.tool pygmentize see link pygmentize installation instruction demo image use function sweat remember json str dict look print use pprint https://docs.python.org/3.6/library/pprint.html print compare pprint.pprint able pretty print command line able control indentation set alias similar use alias way work display save file simple example pretty print json console nice way python require json computer local file try pprintjson print json file use pprintjson cli pretty print json stdin use pprintjson cli pretty print json string use pprintjson cli pretty print json string indent print json string save output file output.json think well parse json avoid error similar requirement dump content json file log easy use put function help case error json serializable answer work save human readable call string non dictionary element dictionary want load save pickle file load torch.save(obj f work fine work output know return string print work seem put dump print statement note pprint suggest work note object convert dict dict(dic code check condition context want save pytorch string keep get error code note pytorch use torch.save pickle file readable check relate post https://discuss.pytorch.org/t/typeerror-tensor-is-not-json-serializable/36065/3 pprint indent argument look output compare json.load convert json data dictionary use json.dumps prettyprint json perfect job improve add indent want able read clean json way go
check object give type inherit give type check object type str beginner expect string number expect python input convert type expect string integer wrong canonical question read question use check string represent number float int read input number ask user input give valid response appropriate use isinstance check instance str subclass str check type str exclude subclass str alternative see build function python library reference relevant information python well way check string catch unicode strings unicode subclass str str unicode subclass basestre python basestring exist strict separation string str binary datum byte isinstance accept tuple class return true instance subclass str unicode pythonic way check type object check python encourage duck typing try use object method way want use function look writable file object check subclass file try use method course nice abstraction break isinstance(obj cls use isinstance(o str return true str type inherit str type(o str return true str return false type inherit str question ask answer type hint add python type hint python allow type check different way type language type hint python associate expect type argument function runtime accessible datum associate function allow type check example type hint syntax case want error trigger foo('oop annotate type argument int add type hint cause error occur script run add attribute function describe expect type program query use check type error program use find type error mypy need install mypy package manager think come cpython seem level officialness type checking way different type checking type compile language type dynamic python type checking do runtime impose cost correct program insist happen chance explicit type check restrictive need cause unnecessary error argument need list type iterable sufficient upside explicit type check catch error give clear error message duck type exact requirement duck type express external documentation thorough accurate error incompatible type occur originate python type hint mean offer compromise type specify check additional cost usual code execution type package offer type variable use type hint express need behavior require particular type example include variable iterable callable hint specify need type behavior type hint pythonic way check type pythonic check type rely duck typing type hint new jury pythonic solution uncontroversial general comparison type hint provide form documentation enforce allow code generate easy understand error catch error duck typing check unusual sense outside runtime hand duck typing pythonic way long time impose cognitive overhead static type less verbose accept viable type python use |||| isinstance check type variable use name type ex link docs complex type validation typeguard approach validate base python type hint annotation perform complex validation clean readable fashion think cool thing use dynamic language python check call require method object catch attributeerror allow call method unrelated object accomplish different task mock object testing use lot get data web urllib2.urlopen return file object turn pass method read file implement read method real file ' m sure time place use isinstance accept answer answer question provide answer ask question good way check give object give type checking object inherit give type use isinstance issubclass type check base type answer comment quick point lot idea type checking python addition python type hint change go difficulty type check duck typing exception handling think type checking need point type hint use type checking appropriate thing python consider follow example check input iterable integer run major issue way check element integer loop check element loop entire iterator leave intended code option kind situation check loop check store check option downside complicate code perform similar check many place force move type check top function use iterable code option obvious downside destroy entire purpose iterator entire point store datum need think check check element check input type iterable iterable base class type implement iter iterable alternative approach forgo type checking focus exception handle duck typing say wrap code try block catch error occur let exception rise code way go catch exception compare option check run code typeerror place check loop input store input iterate approach enable duck typing check specific type move check specific behavior look input fail expect case loop num add exact reason make exception handle nice downfall float int satisfie behavioral requirement work bad practice wrap entire code try block seem issue reason change mind user expect function return int intend break code exception come wide variety source use try whole code block end catch exception intend wanted check num iterable integer element like catch exception code generator raise place informative exception fun exception raise code explanation line write typeerror occur order fix exception handling response point code become abomination kinda see go check thing bad code look compare original code readable argue extreme hand simple example practice code complicated see happen modify small example enable type checking focus try force specific type type hinting allow way make type clear user advantage use type hint code look good static type analysis perform editor use type hint store function class make usable dataclasse show function use help need sanity check input type right base description bad lack type hint base structure attribute require subclasse user downside type hinting word answer question provide type checking type checking type hinting course come conclusion type checking necessary want semblance typing type hint hugo mean list array point whole problem type checking want know object question list want know kind sequence single object try use sequence say want add object exist sequence sequence object add trick work string sequence string tricky string think single object sequence character bad sequence single length string choose design api accept single value sequence make thing easy put single value pass need cause error string look sequence simple way check type compare type know think good way type variable use type library example see https://docs.python.org/3/library/typing.html
want write function python return different fix value base value input index language use switch case statement python appear switch statement recommend python solution scenario original answer write python introduce match case statement provide first class implementation switch python example match case statement powerful simple example use dictionary like default use dictionary get(key default function like way addition dictionary method use elif obtain switch case default functionality course identical switch case fall leave break statement complicated test format nice series nest ifs close python = wow python + match case syntax switch case structural pattern match select feature match case match value match value similar simple switch case language match structural pattern capture variable parse object saving variable capture variable useful parse datum json html come number different pattern capture variable feature mean need use dotted constant color.re constant treat capture variable overwrite sample usage python favorite python recipe switch case short simple simple scenario compare + line code assign multiple variable use tuple usage test favorite nice recipe close one see actual switch case statement feature example comment indicate context manager solution use foo case case foo cleaner large switch statement linear quadratic behavior nice touch part value answer loop ability break fallthrough willing play choice keyword little bit get context manager example pattern learn twisted python code use time dispatch token execute extend piece code state machine state method dispatch self.state switch extend inheriting base class defining method time method base class edit use case smtp receive helo wire relevant code twist mail modify case look receive helo foo.bar.com get quit rcpt foo tokenize part helo actual method lookup name take original method call use pattern implement state machine getattr(self state + self.mode go drop cent reason case switch statement python python follow principle right way come various way recreate switch case functionality pythonic way accomplish elif construct feel pep deserve nod beautiful thing python simplicity elegance derive principle lay pep include right way let say want return value want use method change object use approach state python evaluate method dictionary value object incremente decremente x. solution get list contain function argument way function pointer argument list return evaluated result evaluate return function call solution run function foo1 foo2 function example parameter example parameter example value complicate case block consider use function dictionary lookup table do good idea step debugg view dictionary function note use case dictionary lookup call function dictionary case block create remember want call function use hash style lookup search extra statement switch build python module extend python call espy enhance structure python available python python example case switch statement perform follow code use espy translate python expand dict switch idea want use default value switch answer old accept one seem worth update first official python faq cover recommend elif chain simple case dict large complex case suggest set visit method style use many server framework case faq mention pep write get official decision add c style switch statement pep defer python reject separate proposal pep answer course pep link additional information interested reason history thing come multiple time see pep cut actual recommendation bother line code handle case line bash write encourage readable unidiomatic decade pep reject issue c style case statement powerful version consider dead bring python idea refer old decision idea full ml style pattern matching arise year language swift rust adopt problem hard get much use pattern match algebraic data type guido sympathetic idea come proposal fit read strawman example change dataclass sporadic proposal powerful enum handle sum type various proposal different kind statement local binding pep set proposal discuss -idea proposal perl style match mishmash elif regex single dispatch type switching find common switch structure express python follow format clear way statement python version expression evaluate value solution use combination solution post easy read support default look lambda x 2 dict use x=23 find dict use default lambda x x x=44 use dispatch dict output find simple answer look google search figure simple decide post prevent less scratch head key tuple switch statement behavior fall include random fall provide confused reading accept answer clear code analogous check source dictionary mapping function like mark bies answer variable use modify lambda function parameterless run results[value](value edit notice use none type dictionary emulate switch case short easy read default value support expression condition return value efficient solution dictionary example python scan condition return default value simple test condition evaluate fall case evaluate expression switch evaluate break statement example print dammit trail whitespace inline code block expression evaluate expression evaluate expression evaluate else solution tend use make use dictionary advantage try evaluate function time ensure outer function get information inner function need lot answer say switch python way like point switch statement abuse construct avoid case promote lazy programming case point switch statement python offer waste time method obvious sort operation handle dictionary complex prone error compact vast majority use case switch statement fall case little reason use one ' think problem ask switch python ask want switch python interesting question expose flaw design build say switch use state machine lexer parsers automata use degree general start symmetrical input go asymmetrical output useful need make sure use switch hammer see bunch nail code defining allow use straightforward syntax case bundle map keep try redefine switch way rid lambda give tweak definition allow map multiple case code supply default option replicate case dictionary switch consolidate dictionary look value ugly like basic efficiency use hash lookup expression loop key think good way use python language idiom keep code testable show previous answer use dictionary take advantage python structure language keep case code isolate different method class use module global function class method test isolation depend need play static method attribute possible take advantage method class key choice_table way avoid isinstance abuse keep clean testable suppose process lot message packet net mq packet structure management code generic way code possible complexity spread code flow render code structure expand greg hewgill answer encapsulate dictionary solution use decorator use @case decorator good news do neopyswitch module install use pip mapping key code issue people show use dict real trick try emulate whole drop thing think write case statement use feature go drop imagine single statement hope pardon silly format hope valid python code give drop course boolean check expression want evaluate wrap lambda make accept execute item list make tuple bool bool function second bool indicate drop worry lose syntax highlight case suite follow value value c create helper function use example ' find follow answer python documentation helpful enough sequence elif elif proposal switch statement syntax consensus range test see pep complete detail current status case choose large number possibility create dictionary mapping case value function call example call method object simplify use getattr build retrieve method particular name suggest prefix method name visit example prefix value come untrusted source attacker able call method object minor variation mark biek answer uncommon case duplicate user bunch function call delay argument pack worth build bunch function line short readable open question think readable briefer switch lambda partial particular use advantage work keyword argument make switch case implementation use use class use return predetermine fix value create dictionary possible input index key corresponding value want function compute return value feel switch see enough answer want point simple powerful solution output similar answer abarnert solution case call single function case switch avoid lambda partial ultra conciseness able handle keyword argument example usage note chain call put commas important put expression use extra parenthesis main call implicit line continuation example raise error switch value handle switch(5)(1 provide default value default=-1 return use list store case call correspond function select explain screwdesk follow work situation need simple switch case call bunch method print text play lambda global hit simple option help option remember switch statement syntactic sugar elif control statement delegate job base certain condition fulfil decision path wrapping module able call job base unique use inheritance fact method python virtual provide derive class specific job implementation specific case handler
function extract extension filename use manual string splitting attempt treat b.c extension extension .c treat extension extension new version ' m surprised mention pathlib pathlib awesome get text extension dot simple use case option split dot error file extension work hide file unix system general use prefer worth add find wonder jpg show list solution work linux find newline end extension string prevent match succeed add strip method end example find great stuff pathlib module available python splitext problem file double extension possible solution old topic wonder none mention simple api python call rpartition case get extension give file absolute path type example give csv join pathlib suffix surprised mention benefit function use split filename require additional library splitext function split file path tuple value root extension pathlib module get file extension direct string representation technique see lot solution mention think look split split occurrence look partition solution split question answer add solution regex use follow code split file name extension true liner regex matter additional middle see result click try use endswith identify file extension python bellow example funsie collect extension dict track folder pull extension want method require dictonary list set use .endswith use build string method search name list end file do str.endswith(filename[index compare extension https://docs.python.org/3/library/stdtypes.html#string-method example example example example example output example easy way use mimtypes example know late simple solution simple method get filename extension single line solution need import package give file name common
read stdin code golf challenge require use stdin input use fileinput module fileinput loop line input specify file name give command line argument standard input argument provide note line contain trail newline remove use line.rstrip way sys.stdin file object call function read readline read want read split newline need import sys work want prompt user input use raw_input python input python want read command line option access sys.argv list find wikibook article python useful reference note include newline character end remove newline end use line.rstrip @brittohalloran say python build function input raw_input see python documentation build function example learn python unix test windows do try code golf challenge require input take stdin get python use sys fileinput import read sys.stdin example pipe datum stdin see sys.stdin default text mode say file inputs.txt accept file write complete replicable demo use method builtin function input use raw_input python sys.stdin datum unmodified processing non operation begin let create file input use code see check create file help python builtin function input read standard input newline strip complementing print add newline default occur get eof end file point raise eoferror use input python raw_input python read stdin create python module call stdindemo.py let print ensure expect input read newline strip line print add newline modify input modification cancel complement input get end file character raise eoferror ignore exit program linux unix pipe cat redirect file stdin execute module script help builtin input python make demo script use sys.stdin efficient way iterate file object use file object iterator complementary method write stdout input use print make sure look right redirect inputs file golf command file descriptor stdin stdout pass open python note need w write stdout work system shave character python import take lot space comment suggest golfing python create extra list memory str.join work give list contrast top answer suggest sys.stdin implement file api include iterator protocol answer suggest remember interpreter need ctrl linux mac z window enter send end file character process answer suggest print(line add \n end use print(line end= python need future import print_function real use case fileinput reading series file answer propose other simple pythonic note script wait eof start iterate line input mean tail error_log |||| process line expect correct script use case update comment clear python buffer involve wait buffer fill eof print call issue echo standard input standard output building anwer use sys.stdin follow read argument file argument fall stdin use make python script behave many gnu unix programs cat grep se example compatible python version run script many way use stdin short replace echo string use filename argument use stdin special filename follow chip code help read stdin block eof string amazed mention hack python2 drop set call work way try check read stdin store inputs data follow read sys.stdin read binary datum window need careful sys.stdin open text mode corrupt \r\n replace \n solution set mode binary window python detect python use sys.stdin.buffer use follow method return stre stdin use json parse work pipe prompt window test linux prompt line break indicate end input python simple form cat(1 add newline line use mark file executable use chmod cat.py problem solution pass datum stdin block love answer check datum stdin first read end python use assignment expression use command tricky way read stdin flexible case pass shell script command command put shell command quote parenthesis start sign count number line goldendict history file issue get work read socket pipe socket close start return empty string active loop solution test linux hope works system start listen socket work bash call telnet point browser regard line sys.stdin try python follow suggestion large file recommend reason mention happen long time end pythonic solution work big file run script os.read(0 read xbytes represent stdin unbuffered read low level sys.stdin.read test linux python
single double lead underscore object name represent python class name lead underscore indicate programmer attribute method intend use class privacy enforce way use lead underscore function module indicate import style guide weak internal use indicator import import object name start underscore python doc identifi form lead underscore trailing underscore replace classname__spam classname current class name lead underscore(s stripped mangling do regard syntactic position use define class private instance class variable method variable store global variable store instance private class instance class warn page name mangle intend give class easy way define private instance variable method worry instance variable define derive class muck instance variable code outside class note mangle rule design avoid accident possible determined soul access modify variable consider private foo convention way programmer indicate variable private mean python foo real meaning interpreter replace name classname__foo way ensure name overlap similar name class foo convention way python system use name conflict user name form underscore mean python world difference class variable global convention excellent answer tidbit miss single lead underscore convention use foobar import module foobar define list name import module include lead underscore let say convention case obscure corner;- lead underscore convention use private name c++ call protect one example name method intend overridden subclass one overridden base class raise single lead underscore name indicate code use instance class subclass say method mean call example make thread safe queue different queue discipline fifo import queue subclasse override method put client code call hook method organize public method put know template method design pattern see interesting presentation base video talk mine subject addition synopsis transcript edit video link description talk break find video semiprivate mean convention consider superprivate actual meaning namemangle prevent accidental reserve builtin method variable access .__mangle variable want double underscore namemangle rename variable instance._classname__mangle example t._b accessible hide convention find exist due namemangle access instance._classname__variable double underscore name access hide value single underscore begin python real private method underscore start method attribute name mean access method part api code snippet take django source code django form code error public property method property call get_error private access underscore cause lot confusion use create private method use avoid method overridden subclass access let see example output create subclass b customization test method output see a.t call b.__t method expect fact correct behavior method call test rename mangle a__t b__t override create method start mean want able override intend access class underscore begin end see method call method python mean call let take look operator native function call magic method hook python call specific situation example init call object create new call build instance let take example detail see guide magic method pdf accord mean underscore python appear tuple lead underscore case go alias localization function operate text put proper language base locale example sphinx find import sphinx.locale assign alias localization function many people refer raymond talk make little easy writing say intention double underscore privacy intention use opposite privacy freedom make subclass free override method break other say keep local reference perimeter circle derive class tire override implementation perimeter touch area call tire(5).area theory use circle.perimeter computation reality use intend behavior need local reference circle perimeter perimeter perimeter give derive class chance override double underscore name mangle little chance local reference parent class get override derive class make subclass free override method break other class inherit method override break need double_leading_underscore var variable lead single underscore python classic variable intend inform other use code variable reserve internal use differ point classic variable import wildcard import object module define exception define variable single underscore special case lead single underscore variable use convention trash variable store value access import wildcard import eg loop print talk class time need access variable var single trail underscore variable classic variable use convention avoid conflict python keyword eg var double lead underscore variable lead underscore trailing underscore use class attribute variable method variable subject name mangle outside class python rename attribute class_name>__<attribute_name > example use variable class behave single lead underscore variable var double lead trail underscore variable lead trailing underscore call dunder name convention use python define variable avoid use convention prevent name conflict arise python update dunder variable behave single lead underscore variable subject name mangling use class import wildcard import want make variable read imho good way use property getter pass property complete control datum understand ask little different question find question ask set private variable mark duplicate think add additional info great answer correct.i provide simple example simple definition mean mean some_variable ► public see some_variable ► public see convention indicate private warning enforcement do python some_varaible ► python replace variable name classname__some_varaible name mangling reduce hide visibility private variable honest accord python documentation private instance variable access inside object n’t exist python example simple illustrative example double underscore property affect inherit class follow setup create child instance python catch guard much complex environment single leading underscore convention difference interpreter point view name start single underscore double lead trail underscore use build method init bool double lead underscore trail counterpart convention class method mangle interpreter variable basic function name difference exist question good method function object module prefix underscore prefix double_underscore name name mangle module example happen name begin underscore import import module module import name show help(module private instance variable access object n’t exist python convention follow python code name prefix underscore spam treat non public part api function method datum member consider implementation detail subject change notice reference https://docs.python.org/2/tutorial/classes.html#private-variables-and-class-local-reference get fact easy answer express usage determine see use indicate function public use example api import restriction make behave much internal c use avoid name collision inheritace hirarchy avoid latebinde private c want indicate public use act protect use want indicate public use act private use much problem author class think attribute method name private accessible class definition use private convention user class make subclass need access name superclass modify difficult impossible subclass code use mangle name ugly fragile good problem opinion ide warn override method find error take overriden method base class case method use double underscore hide private method follow pattern output stumble today try use double underscore class method get nameerror name define error frame simple word let compare python variable accessibility convention access modifier java reference https://www.tutorialsteacher.com/python/public-private-protected-modifier
proper way declare custom exception class modern python primary goal follow standard exception class instance extra string include exception print tool catch exception modern python mean run python correct python python way thing custom mean exception object include extra datum cause error string arbitrary object relevant exception trip follow deprecation warn python 2.6.2 seem crazy baseexception special meaning attribute name message gather pep-352 attribute special meaning try deprecate guess name forbid ugh ' m aware exception magic parameter args ' know use sure right way thing go lot discussion find suggest try args python update answer suggest override init str__/__unicode__/__repr seem lot type necessary miss question override pass extra args way pass dict error message second param get e.error python use complex form super modern python exception need abuse .message override want informative message exception raise give traceback end myexception hovercraft full eel want flexibility exception pass dictionary argument get detail block bit complicate detail store args attribute list need possible pass multiple item exception access tuple index discourage intend deprecation need single piece information method sufficient subclass exception describe tutorial fine exception type specific exception perfect pass give docstre doc exception build non system exit exception derive class user define exception derive class mean exception type specific exception subclass exception generic exception result derive exception doc provide docstre forced use pass keyword set attribute create custom init avoid pass dict positional argument future user code thank use deprecate message attribute assign avoid deprecationwarne need write str build one nice cooperative inheritance ensure use miss question problem order catch name import create catch exception prepare handle type exception catch exception prepare handle similar criticism way initialize super deprecationwarne access message attribute edit override pass extra args way pass dict error message second param get e.error require argument pass self interesting constraint future user appreciate direct violate liskov substitutability demonstrate error compare see exception work default attribute use traceback omit want sort exception template work exception compatible way subclass default tuple representation add str method exceptiontemplate class python https://docs.python.org/dev/whatsnew/3.8.html recommend method forget document custom exception neccessary need way go exception datum fetch payload none important make pickle able dump call error.__reduce loading work expect investigate find solution use python return statement need much datum transfer outer structure seem clear pythonic advanced exception use annoying use framework catch possible error define exception good practice follow define base class inheriting exception allow catch exception related project organize exception class separate module good idea create specific exception subclass base exception class subclass custom exception class create hierarchy add support extra argument(s custom exception define init method variable number argument call base class init pass positional argument remember baseexception exception expect number positional argument store extra argument(s instance raise exception extra argument use design adhere liskov substitution principle replace instance base exception class instance derive exception class allow create instance derive class parameter parent override repr unicode method use message args provide construct exception args attribute exception object see good article definitive guide python exception basic principle information organizing module wrapping exception recommend read guide message forbid deprecate application work use message want rid deprecation error course create custom exception class application many subclass exception other valueerror similar adapt usage variable many exception application good idea common custom base class user module case init str need repeat exception call message variable message trick case need init str different exception deprecation get error whole lot extra code need class maximum customisation define custom error want define intermediate class inherit exception class try example simple approach error raise print main look clean neater issue method python find work use code come thread custom exception fault class complex make declare custom expressive exception variable argument trivial finalviolation singletonviolation sub class typeerror catch code fault inherit exception allow derivative exception inherit exception choice finalviolation singletonviolation accept argument create multi arg error main__.vesselloadingerror hovercraft full eels init variable make test sample output
get number row pandas dataframe df dataframe df use follow code reproduce plot suppose df dataframe use len(df len document return length index timing info set way root answer due additional function call course correct say bit call len(df.index matter case find len(df readable table summarise different situation want count dataframe series completeness recommend method(s footnote show example method describe table first setup seem silly compare performance constant time operation difference level worry seem trend answer ' m completeness method len(df.index mention answer fast note analogous len(df.index len(df.column fast method take character type s.size term speed recommend len(df note size attribute return number element count row series dataframe define size attribute return result df.shape[1 method describe count non null value mean nan ignore call dataframe.count return non nan counts column series use series.count similar effect dataframe use dataframegroupby.size count number row group series use seriesgroupby.size case series return make sense dataframe group share row count similar use groupby.count groupby.size note size return series count return series call specific column dataframe following method return thing count call entire groupby object call specific column len return number items(the length list object(also work dictionary string tuple range object get row count dataframe use len(df len function see official page access row column df.index df.column use get element number use len(df.index give number row len(df.column give number column use df.shape return number row column tuple access item index want access number row use df.shape[0 number column use df.shape[1 previous answer use df.axe get tuple row column index use len function build jan philip gehrcke answer reason len(df look code df.shape @property run dataframe method call len hood len(df less function call df.shape[0 come pandas r background see pandas complicated select row column wrestle find way deal get number column get number row let say df dataframe df.shape give shape dataframe i.e row col assign command require case want get row count middle chained operation use example useful want put long statement len function use len len look weird df name dataframe method use len function len(df give number row dataframe name df method use count function df[col].count count number row give column col df.count give number row column dataframe df print comma format row count use explore datum example use len(df len(df.index encounter error solution alternative method finding amount row dataframe think readable variant pandas.index.size note comment accepted answer suspect pandas.index.size len(df.index timeit computer tell n slow loop ' m sure work datum omit work use find number row run code snippet looking row number give len(df.index work fast way list think dataset datum name dataset data_fr number row data_fr nu_row
try build shared library use c extension file generate output file use command execute command get error message try suggest solution internet problem exist problem python.h manage locate file machine look instal header file static library python dev use package manager install system wide apt ubuntu debian yum centos rhel dnf fedora zypper opensuse apk alpine apt cyg cygwin note python3 dev cover minor version python3 use python need install python3.8 dev ubuntu run python install want use version python link python3 install associate dev package example python ubuntu particular need think point name change pythonm.n dev python count thing install development package python case debian ubuntu mint do command second thing include file default include path python library link executable default add flag replace python version word compile command fedora run python python make sure dev file come hard code library include path use pkg config output correct option specific system add gcc line use tox run test multiple version python need install python dev librarie version python testing change work find file include python.h include path python.h sufficient add include path command line gcc -i usr lib thank @erm3nda need install package python2 devel python3 devel depend python version use install use bit bit depend installation example modify setup.exe filename python major version check answer option install cygwin package command line aws api centos aw ec2 install run python34 sudo yum install python34 devel use python edge install match python dev sudo apt get install dev execute sudo python3 dev install python dev solve issue case fix ubuntu install package libpython dev libpython3 dev use python situation work use swig try compile python work fine version existe_wrap.c:147:21 fatal error python.h existe el archivo el directorio compilation terminate run ubuntu installation compile problem manage solve issue generate file command encounter error instal coolprop ubuntu ubuntu python work try instal update gcc lib try apt file difficult remember package name miss file reside generic useful package file example make expert guess choose problem arrive different python version instal use pip system case non system pip find right version python header happen try pip install package python bundle application system python apt install pythonxx dev work case solution find right python header output see system python header look example set compiler flag use gcc call pip ubuntu workspace blender git lib linux_centos7_x86_64 python include python3.7 m python.h centos follow instruction instal several vms https://www.digitalocean.com/community/tutorials/how-to-install-python-3-and-set-up-a-local-programming-environment-on-centos-7 able build mod_wsgi work virtualenv opensuse comrade solution none solution work reference try pip install amazon linux ami base docker image python non docker solution docker solution note get error compile c++ use prefer use docker image example try install python:3.9.4 slim generate error see update image python:3 work fine use python amazon linux base rhel rhel answer give work install python development file operating system python provide operate system come many answer question show myriad way achieve different system do problem tell compiler locate compile python come program call python config compilation need output link program python library embed python program output example python config program name python version debian ubuntu example name python3 config python3.6 config python dev libpython dev first thing apt install help case advice install foreign function interface package sudo apt get install libffi dev sudo pip install cffi help see error c/_cffi_backend.c:2:20 fatal error python.h file directory try locate python.h find install python dev python3 dev include correct header path compiler ubuntu instal package recommend answer problem line other edit bad practice know secret come cython source code file compile error file change python python version python python3 change file c filename name makefile file makefile run file command error occur attempt install ctds centos trick mention include yum install python34 devel problem python.h find include python3.4 include m. try use option point include dir pip3.6 install option option="--include dirs=/usr include ctds result lpython3.6 find link ctds work fix development environment need correct include libs python.h need include path gcc version python use example include python3.6 m python.h instal python dev error persist check error gcc miss first download state https://stackoverflow.com/a/21530768/8687063 install gcc apt ubuntu debian yum centos rhel dnf fedora zypper opensuse apk alpine appear try remove install use python3 python3 install package require header appear error resolve install dev module mean python.h compiler default include path instal system wide os use path flag specify additional directory compiler look header follow path gcc find library link use name situation encounter python.h directory include include give path gcc -i include python3.8。python version replace confirm run centos need run following case python instal want link specific python version get relevant include path python specify include path build specific python version use shell script use cmake build project use example install python dev python3 dev error report force set header path system python header path include c_include_path=/usr include python3.8/:/usr local include:/tmp export c_include_path compile pass
several way write stderr difference method method preferred find short flexible portable readable optional function eprint save repetition use way standard print function choice readable say intend portable version edit pythonic third think readability performance thing mind code pythonic list comprehension big thing use readability python python print go python3 http://docs.python.org/3.0/whatsnew/3.0.html say old print sys.stderr fatal error new print("fatal error file sys.stderr many feel unnatural relegate destination end command alternative look object orient go generic specific note write replacement print mention log log create communicate error message basic configuration set stream handler write script follow result run command line contain world print stdout python choice print spam print list dict convert string print sys.stderr spam spam sys.stderr.write(str({'spam spam say first approach obvious way other rule beautiful ugly edit answer python python standard think right answer follow use python ' m able add keyword argument example avoid carriage return python use print box straightforward need include sys.stderr mimic standard print function output edit hind sight think potential confusion change see behaviour update make answer good use simple function other point use partial save line code potential confusion worth save line code original make easy version use partial big help wrap function use check print stderr stdout follow ride code http://coreygoldberg.blogspot.com.au/2009/05/python-redirect-or-turn-off-stdout-and.html downside partial assign value sys.stderr wrap function time creation mean redirect stderr affect function plan redirect use kwargs method mention aaguirre page apply stdout state answer print offer pretty interface convenient print debug information write convenient format output certain way consider maintainability decide switch stdout regular file print syntax change python need support version write work python 3.4.3 cut little typing show get work try redirect stderr file see happen fact little introduction python slurp stderr go work want exit program fatal error use import sys header simple test find time fast answer question different way print python depend python version use exact output want differnce print write function stderr standard error pipe build unix linux system program crash print debug information traceback python go stderr pipe print print wrapper format input input space argument newline end call write function give object give object default sys.stdout pass file i.e print input file python2 use python2 python2 trail python3 become parameter use trail comma avoid newline print python3 look print('text print end= syntax error python2 http://python3porting.com/noconv.html check sceario python3 python future import make print function avoid syntax error difference start file use print future import print_function future import work python python early option convert complex print simple use separate print function work python2 python3 case point note stdout standard output pipe build unix linux system replacement print use alternative case print wrapper wrap input space newline end use write function write reason fast note trace debugg use logging https://docs.python.org/2/library/logging.html#logger-object fun way way
spend day yesterday search clear answer instal pip package manager python find good solution install tldr modern mac python3 ensurepip pip3 check pip documentation list support mechanism install https://pip.pypa.io/en/stable/installation/#supported-method recommend avoid instal pip os provide python command install python official installer use homebrew pyenv python ensurepip unable run python3 pip run python3 ensurepip install pip use end life version python use old answer outdated result break installation need admin privilege run try run follow command python v2.7 default mac run follow command python v3 follow instal python gif image say go follow use work detail read solution give easy solution install pip macos come python environment instal make sure python instal open terminal run follow command command return version number mean python exist mean access easy_install consider use macos os x. ℹ️ run follow command pip instal able use instal package p.s end blogge post install pip macos os x easy_install deprecate use download install pip ' m surprised mention python capable instal pip external command internet connection require create similar install easy_install install homebrew os x. install python homebrew version python ship os x great learning good development version ship os x date official current python release consider stable production version source homebrew package manager os x. find detail homebrew page instal run follow install late python pip setuptools mac install easy_install install pip install external module example install homebrew add path add line install python python v3 install pip3 order use pip add alia add line macos come python pip well manage homebrew install install python warning modern macos install python python need brew install python@2 install python python install python pip instal use pip version use pip3 execute python3 use version install package pip3 separate python old version upgrade pip create virtual environment work python use project folder folder check version deactivate environment pip available os x easy_install open terminal type prompt password enter normal login password installation complete able use pip expect note work python package simple solution follow installation instruction pip home site consist main advantage solution install pip python version use run get-pip.py mean use default os x installation python run get-pip.py install pip python install system solution use package manager homebrew macport os x create redundant installation python environment package manager create inconsistency system depend call installation python python python instal solution want install pip python instal separate copy python popular option python come macos take responsibility make sure use copy python intend benefit late python release protection hose system thing go wrong install python use homebrew confirm work instal python show symbolic link path cellar pip instal python want upgrade typing ready install package pypi use get-pip.py install pip docs warn get-pip.py coordinate package manager leave system inconsistent state need give pip include python note pip package manager python easy_install good mix python instal pip point python instal last get habit use pip2 pip3 sure python get new library happy hacking download file get-pip.py type make sure directory get-pip.py supply correct path file detail visit installation pip documentation http://thegauraw-blog-blog.tumblr.com/post/47601704154/how-to-install-pip-in-both-windows-ubuntu-easiest-way install homebrew executable brew brew install python pip work recent version yosemite el capitan believe least sierra need run brew postinstall python3 brew install python3 use homebrew accord official homebrew page 1st march python formula upgrade python python@2 formula add instal python keg python python2 add path default manual brew link maintain python2 python3 python@3 alias install python run follow command pip instal install package pip install package want pip3 ff brew brew install python3 execute pip3 command option update path include py27 pip bin directory add pip available new terminal window install upgrade pip download installation pip documentation run follow sudo python get-pip.py example install python first use pip3 install package python instal pip ship use pip install package run follow notice pip3 want use python want install pip need sudo frustrating try install package install pip local folder local pip install package choice sudo download python setup tool pypi website use tar file download download folder run easy_install use install pip easy install work old mac mountain lion solve problem wget open url browser save recommend anaconda lead open datum science platform power python many basic package instal anaconda conda come installation pip
generate string size make number uppercase english letter answer line start python use random.choice secure version see post detail clean function reuse work import string module contain sequences common ascii character random module deal random generation string.digit concatenate list character represent uppercase ascii chars digit use list comprehension create list element example use create list id_generator function python create list memory generate element fly ask create n time string elem ask python create n random character pick sequence character range(size create sequence size character character pick char join empty string sequence stre stack overflow quesion current top google result random string python current top answer excellent method prng random secure assume many people research question generate random string encryption password make small change code use random.systemrandom random use urandom nix machines cryptgenrandom window secure prng use random.choice random.systemrandom().choice application require secure prng devastating give popularity question bet mistake make many time use use new secret module mention mseifert answer module doc discuss convenient way generate secure token good practice uuid okay purpose use build uuid package import uuid example format example simple random way use choose letter repetition allow enlarge random basis time note prevent character reuse multiply size character set make multiple repetition possible pure random choice go stre length pick x first character choice example odd get second character odd get first character random.sample implementation odd get subsequent character chance get first character lowercase_str random value cea8b32e00934aaea8c005a35d85a5c0 uppercase_str cea8b32e00934aaea8c005a35d85a5c0 python use secret module need secure random module answer identical vazquez abram additional note list comprehension fast case str.join use generator expression easy flexible way use strgen module pip install stringgenerator generate character random string upper case letter digit get unique list guarantee special character stre random html color need aware digit uppercase character strgen fast developer time solution solution ignacio fast run time perform right answer use python standard library use form want use systemrandom fallback available make sure require character set represent use unicode make sure successive invocation produce unique string use subset string module character class require lot code answer provide various attempt generalize solution limitation strgen solve great brevity expressive power use simple template language pypi disclosure ' m author strgen module base stack overflow answer lightweight way create random string random hexadecimal number well version accept answer think answer lol go need random string pseudo random use os.urandom source method annoying random.choice method ignacio post take advantage nature pseudo random algorithms bank bitwise shift generate new random number character create generator take bit number time none leave join result generator random number right bit timeit character string time character string randbit lose use approach production code dislike worker edit update suit question uppercase digit use bitwise operator use numpy random.choice function documentation way letter confuse use follow logic generate character random sample need multiply use method generate random string length z import random = range(ord('a'),ord('z range(10 recommendation security relate avoid roll use secret module vet security good practice section doc ask uppercase letter substitute ascii_uppercase ascii_letter uppercase password canonical approach problem specify use choice function random module random.choice function pick random entry list create list append character statement end str j u q c str take care leaving hope enjoy functional python generate indefinite infinite iterator join random sequence generate indefinite sequence select symbol give pool break sequence length part join work sequence support getitem default generate random sequence alpha numeric letter modify generate thing example generate random tuple digit want use next generation make callable want generate sequence fly set join identity other mention need security set appropriate select function default selector choice select symbol multiple time chunk want member select chunk possible usage use sample selector complete selection chunk length join call next fetch generate chunk grant example seem bit cumbersome give cap number want include lowercase letter key work take anurag uniyal response work length string change loop i.e range(1,length simple algorithm easy understand use list discard character need look different answer take time read documentation secret secret module use generate strong random number suitable manage data password account authentication security token related secret secret use preference default pseudo random number generator random module design modelling simulation security cryptography looking offer find handy function want mimic google drive ids secrets.token_urlsafe([nbyte none return random url safe text string contain nbyte random bytes text base64 encode average byte result character nbyte none supply reasonable default use use follow way output character length know different op question expect helpful many looking use case look simple one suggest next option paranoic mode method def randstr_1(char str length int str char math.ceil(length len(char char = letters[0 length char list(char random.shuffle(character return def randstr_2(char str length int str return .join(random.choice(char range(char benchmark timeit import timeit setup import os subprocess time stre random math def randstr_1(letter str length int str letter = math.ceil(length len(letter letter = letters[0 length letter = list(letter random.shuffle(letter return .join(letter def randstr_2(letter str length int str return .join(random.choice(letter range(length print('method method run time length print(length character eff1 = timeit("randstr_1(string.ascii_letter .format(length setup setup number=10 eff2 timeit("randstr_2(string.ascii_letter .format(length setup = setup number=10 print('\t{}s s'.format(round(eff1 round(eff2 print('\tratio \n'.format(eff1 eff1 round(eff2 eff1 output method method run time character 0.001411s ratio = character ratio = character ratio = character 0.855136s ratio = character 1.360735 ratio = character 6.754923 ratio = character ratio = performance first method well def randstr_2(char str length int str return .join(random.choice(char range(char benchmark timeit import timeit setup import os subprocess time stre random math def randstr_1(letter str length int str letter = math.ceil(length len(letter letter = letters[0 length letter = list(letter random.shuffle(letter return .join(letter def randstr_2(letter str length int str return .join(random.choice(letter range(length print('method method run time length print(length character eff1 = timeit("randstr_1(string.ascii_letter .format(length setup setup number=10 eff2 timeit("randstr_2(string.ascii_letter .format(length setup = setup number=10 print('\t{}s s'.format(round(eff1 round(eff2 print('\tratio \n'.format(eff1 eff1 round(eff2 eff1 output method method run time character 0.001411s ratio = character ratio = character ratio = character 0.855136s ratio = character 1.360735 ratio = character 6.754923 ratio = character ratio = performance first method well benchmark output performance first method generate random byte containig letter digit os.urandom(16).translate((f'{string.ascii_letters}{string.digits}-_'*4).encode('ascii want easy use customisable key generator use key generator pypi package github find complete documentation customise give string jist want many option example hope help disclaimer use key generator library make none answer guarantee presence certain category character upper low digit answer result password digit surprised function part standard lib use use code generate string repeat random text value get repeat random text value generator generate component element set set set go answer none look easy suggest try passgen library use create random password generate random string choice length punctuation digits letter case code case random generator function duplicate use set store value generate note cost memory large string amount slow bit generator stop give amount maximum possible combination reach code output string need contain letter number use output use new library python = chancepy find simple clean change vary length vary characterpool alpha alpha numeric numeric strange character want
load python module give full path note file filesystem user access rights python + use doc python use deprecate python python use equivalent convenience function compile python file dll see http://bugs.python.org/issue21436 advantage add path sys.path use imp simplifie thing import module single package example import module add directory environment variable add follow line alternative file linux excecute source alternative terminal credit source stack exchange question top level module file package directory init__.py accept solution work python + follow code need note add line begin sys.module line exec_module execute try bind relative import top level init__.py top level module name case mymodule mymodule load get error systemerror parent module mymodule load perform relative import need bind name load reason fundamental invariant relative import system invariant hold sys.modules['spam sys.modules['spam.foo import appear foo attribute former discuss sound want import configuration file whole lot side effect additional complication involve run able access result namespace standard library provide api form interface available python python add directory configuration file sit python load path normal import assume know name file advance case config messy work come modify version @sebastianrittau wonderful answer python think allow load file extension module use spec_from_file_location advantage encoding path explicit sourcefileloader machinery try figure type file extension load file use method spec_from_file_location specify loader place implementation base @samgrondahl useful modification utility library haggis function call haggis.load.load_module add couple neat trick ability inject variable module namespace load use method imp module mean load import manipulate sys.path list specify path module import module example give module code work python version other test ugly work version use import chdir script project different directory mean solve problem follow method situation src main believe use imp.load_module load specify module need split module name path want load mypath mymodule.py need get job do add sebastian rittau answer least cpython pydoc declare import file sake completeness reference current implementation moment write pydoc.py ' m pleased say vein xkcd use implementation mention issue verbatim use pkgutil module walk_package method get list package current directory trivial use importlib machinery import module want create python module create python module test_check.py import import module module package dedicated test python version jython pypy depend size project area python seem tortuous understand bit hack use code chris calloway start manage get work basic function appear use non deprecate module python pretend understand seem work program find chris solution work command line program make package use imp call import_file use http://pypi.python.org/pypi/import_file http://code.google.com/p/import-file/ import module give filename extend path restore system path block reference simple solution use importlib imp package test python work python use namespace import module advantage solution need know actual name module like import order use code useful case path module configurable argument import package module runtime python recipe http://code.activestate.com/recipes/223972/ work say well sake completeness want suggest exec function available python python exec allow execute arbitrary code global scope internal scope provide dictionary example module store module function foo run follow make bit explicit load code grant additional power ability provide custom builtin access attribute key important design custom dict class global provide access write global portable import function base importlib module example directory structure inclusion dependency order implementation late change store https://sourceforge.net/p/tacklelib/tacklelib/head/tree/trunk/python/tacklelib/tacklelib.py testlib.std1.py testlib.std2.py output test python pro con update high python high bypass requirement declare tkl_import_module module declare tkl_import_module top level module function inject child module single call kind self deploy import update add function tkl_source_module analog bash source support execution guard import implement module merge import update add function tkl_declare_global auto export module global variable child module module global variable visible part child module update function move tacklelib library see link linux add symbolic link directory python script locate work interpreter create /absolute path script module.pyc update change content /absolute path module include follow file mypythonscript.py allow import compile pyd python module simple way suppose want import file relative path pyfunc.py make guard get long path utility function use pathlib infer module name path default load python file folder replace parent folder name give path glob select specific file answer supplement sebastian rittau answer respond comment module name quick dirty way get likely python module name give filename go tree find directory init__.py file turn filename python + use pathlib make sense python people use imp way relative import possibilitie improvement optional init__.py file necessitate change general trick way loading file c implementation file look use importfile pydoc good way think official documentation imp access import internal find simple answer special import module absolute path exec exec take code string code object eval take expression get value object eval load module exec import wildcard namespace
want combine single dictionary voila pairwise dict constructor zip function useful imagine simple way produce follow dictionary python zip return lazy iterator performant approach dict(zip(key value require time global lookup dict zip form unnecessary intermediate datum structure deal local lookup function application close runner use dict constructor use native syntax dict comprehension list comprehension other put choose need map filter base keys value python zip return list avoid create unnecessary list use izip aliased zip reduce code change move python izip itertool become zip python izip well zip python avoid unnecessary list creation ideal case look help dict see take variety form argument optimal approach use iterable avoid create unnecessary datum structure python zip create unnecessary list python equivalent python zip create iterable object want avoid create unnecessary datum structure want avoid python zip create unnecessary list generator expression pass dict constructor list comprehension pass dict constructor case extra layer operative unnecessary computation place zip iterable case list comprehension extra list create expect performant bit python provide nix ubuntu order fast slow dict(zip(key value win small set key value large set difference performance become great commenter say min seem bad way compare performance mean max useful indicator real usage use min algorithms deterministic want know performance algorithm good condition possible operate system hang reason try compare need exclude kind result analysis use mean kind event skew result use max get extreme result affected event commenter say python use mean value dict comprehension small list large list 10k random number dict call fast presume mean dict(zip 10k random number sound unusual use case make sense direct call dominate large dataset surprised dominate give take run test skew number use mean max consider result meaningless let use realistic size top example see dict(zip run large dataset try python economical memory consumption compare zip output use dictionary comprehension python ≥ natural way use dictionary comprehension need transform key value create dictionary generator expression use example take look code pythonista idiomatic python python go dict comprehension dict comprehension example need simple code n’t familiar zip do line code use code make sure length list length same.then zip function turncate good solution tranpose example add list value dictionary make sure key"(list1 first parameter doubt try solve graph relate problem issue need define empty adjacency list want initialize node empty list thought check mean worth zip operation simple assignment key value pair time time factor important ice breaker perform timeit operation approach n_node get iteration shorthand iteration shorthand iteration shorthand iteration shorthand iteration shorthand iteration shorthand iteration shorthand see certain point iteration approach n_th step overtake time take shorthand approach n-1_th step do follow way solution dictionary comprehension enumerate solution loop enumerate work set value wish list dict use real life example list tuples db query pair tuple column query answer provide method zip function multiple way think fundamental way approach create loop dictionary store value dictionary recursive approach idea use loop function call reach end course approach use value effective solution result print
select column b df save new dataframe df1 unsuccessful attempt column name string slice manner try couple option know context variable want slice return view column pass list getitem syntax matter index name say code know name column familiarize idea view pandas object copy object first method return new copy memory desire sub object desire slice indexing convention give new variable refer chunk memory sub object slice original object happen second way indexing modify method get regular copy happen change think sliced object alter original object good look use iloc know column position index column position change hard code index use iloc get_loc function column method dataframe object obtain column index use dictionary access column name use iloc version column slice manner try use indexer get column return column c e. demo generate dataframe get column e note integer slicing e include column work select row base label get row r6 column accept boolean array select column correspond entry array true example df.columns.isin(list('bcd return true true true false false dtype bool true column name list b c false assume column name index','a','b','c datum want third fourth column know name script run ems point answer df.ix slice column bit .column slice interface use vanilla dimensional python list indexing slicing syntax warning index bad name dataframe column label use real df.index attribute index array column return df['index real dataframe index return df.index index special kind series optimize lookup element value df.index look row label df.column attribute pd.index array look column label late version pandas easy way column name string slice manner pandas wit column name select iloc specific column index number loc column name use use pandas.dataframe.filter method filter reorder column useful chain method provide list column drop return dataframe column need use drop function pandas dataframe saying return dataframe column b c. drop method document find method useful detail find start use list miss label deprecate favor answer question prior version use .loc[list label work key find raise keyerror behavior deprecate show warn message recommend alternative use .reindex read indexing select datum use pandas create dataframe dataframe select column name use get column test_2 select column row row use call slicing notice take column test_1 test_3 slice want peter ann column test_1 test_3 get want get element row index column name df['b'][0 simple imagine use df.ix[0,'b mixed usage index label note v0.20 deprecate favour loc iloc try use pandas.dataframe.get see documentation different easy approach iterate row different approach discuss previous answer base assumption user know column index drop subset user wish subset dataframe use range column instance c e pandas.dataframe.drop option subset datum base list column define user cautious use copy dataframe inplace parameter set true option use pandas.columns.difference set difference column name return index type array contain desire column follow solution output use df.pop use see several answer remain unclear select column interest answer gather list reference column use list follow list numpy array extracted_feature specify column original dataset column extract use end use machine learning feature selection discuss way think cover stack overflower user select multiple column extract view df name datum frame create new datum frame select column want extract view require column show exclude column drop column index example select output use method truncate select middle column output use function think easy way reach goal import pandas pd
follow class declaration inherit object python apart compatibility python reason python many reason python style class depend presence absence object base class classic style class object base class new style class inherit build type object base class doubt write class want go new style class perk numerous list support descriptor follow construct make possible descriptor new static method let customize new class instance create method resolution order mro order base class class search try resolve method call relate mro super call see consider super inherit object forget exhaustive description previous bullet point perk new style class find downside new style class class memory demanding create many class object doubt issue negative sink sea positive python thing simplify new style class refer class difference add object require type character equivalent name object basis python inherit object get perk python inherit object write code try python agnostic need work python python make difference python insert scene python python explanation define base class python allow drop object definition open door hard track problem python introduce new style class python old style class old discussion old style class bury doc non existent doc problem syntax old style class python alternative syntax new style class python python use gae web2py code coder bring style class definition code go end outdated base object old style class n’t ’s radar n’t hit spell long way save developer tear new style object feature introduce new style object different object model classic object thing work old style object instance super @property descriptor see article good description new style class link description difference difference old style new style class python history learn python hard way python original rendition class break many serious way time fault recognize late support order fix problem need new class style old class keep work use new correct version decide use word object lowercase class inherit make class confusing class inherit class name object make class object class forget inherit object know difference new style class old style class new style class inherit object class class inherit object example old style base class look old style child class look see old style base class inherit class old style class course inherit inheriting object guarantee certain functionality available python class new style class introduce python historical create old style class use type old style object get instance new style object get class syntax class creation statement absence superclass want inherit superclass object root class python object root new style class python new style class today good style class use word object create class other mention python inherit object superclass guess explicit implicit hell reference
project euler code contest maximum time run people boast fast particular solution run python approach kludgey add time code main good way profile long python program take run python include profiler call cprofile give total run time time function tell many time function call make easy determine make optimization call code interpreter invoke cprofile run script make make little batch file call profile.bat run get edit update link good video resource pycon title python profiling youtube make pycallgraph generate visualisation python code edit update example work late release write pip install pycallgraph instal graphviz run command line profile particular part code generate pycallgraph.png file similar image worth point use profiler work default main thread get information thread use bit gotcha unmentione profiler documentation want profile thread want look function doc create subclass use profiledthread class standard give flexibility m sure worth use third party code use class python wiki great page profiling resource http://wiki.python.org/moin/pythonspeed/performancetips#profiling_code python doc http://docs.python.org/library/profile.html show chris lawlor cprofile great tool use print screen file use ubuntu make sure install python profile output file get nice visualization use follow tool pycallgraph tool create call graph image install run view use view png file use gimp get dot graph large cairo renderer bitmap scale fit make image small create svg file ps make sure install graphviz provide dot program alternative graphing use @quodlibetor @maxy comment answer help think deserve answer cprofile generate .pstat file want run thing pycallgraph use gprof2dot get pretty svgs blam use dot thing pycallgraph use output look similar get impression lose less information simple quick way find time go draw pie chart big piece problem function simple run handy tool call snakeviz research topic snakeviz web base profiling visualization tool easy install use usual way use generate stat file prun analysis snakeviz main viz technique use sunburst chart show hierarchy function call arrange layer arcs time info encode angular width good thing interact chart example zoom click arc arc descendant enlarge new sunburst display detail cprofile great profiling kcachegrind great visualizing result pyprof2calltree handle file conversion require system package setup ubuntu result create tuna visualize python runtime import profile helpful install create runtime profile import profile python require run tuna file worth mention gui cprofile dump viewer runsnakerun allow select zoom relevant part program size rectangle picture proportional time take mouse rectangle highlight call table map double click rectangle zoom portion show call portion portion call descriptive information helpful show code bit helpful dealing build library call tell file line find code want point op say profiling appear mean time keep mind program run profile line_profiler present inspire pprofile describe line granularity thread aware deterministic statistic pure python profiler provide line granularity line_profiler pure python use standalone command module generate callgrind format file analyze |k||q]cachegrind| vprof python package describe provide rich interactive visualization various python program characteristic run time memory usage nice profiling module line_profiler call use script kernprof.py download understanding cprofile give information total time spend function individual line code time issue scientific computing single line take lot time remember cprofile catch time spending say terminal simple solution case fancy ui fail install run ignore cprofile replace pyinstrument collect display tree call right execution install profile display result work python2 edit documentation api profiling part code find lot great answer use command line external program profiling sort result miss way use ide eclipse pydev touch command line instal see doc answer info statistical profiler austin instrumentation require meaning get profile datum python application raw output useful pipe flamegraph.pl get flame graph representation data give breakdown time measure microsecond real time spend use web application quick visualisation collect sample pprof instal get austin python pipx install austin python use covert pprof format code instal use austin extension interactive experience source code heat map top function collect call stack use terminal use tui live graph mode follow joe shaw answer multi threaded code work expect figure runcall method cprofile self.enable self.disable call profile function call code want minimal interference exist code virtaal source useful class decorator make profile specific method function easy output view kcachegrind get quick profile stat ipython notebook embed line_profiler memory_profiler straight notebook useful package pympler powerful profiling package capable track class object function memory leak example doc attach give give give give return size object bytes pympler.asizeof use investigate much memory certain python object consume contrast sys.getsizeof asizeof size object track lifetime function pympler package consist huge number high utility function profile code cover see documentation attach verbose profile implementation make cumulative profiler mean run function several time row watch sum result use cumulative_profiler decorator python specific remove nonlocal work old version example profiling function baz baz run time print specify amount time create plugin pycharm analyse visualise result line_profiler pycharm editor line_profiler mention answer great tool analyse much time spend python interpreter certain line pycharm plugin create find https://plugins.jetbrains.com/plugin/16536-line-profiler need helper package python environment call line profiler pycharm instal pip plugin instal plugin pycharm screenshot result cprofile great quick profiling time end error function solve problem initialize environment variable hope useful gprof2dot_magic magic function profile python statement dot graph jupyterlab jupyter notebook github https://github.com/mattijn/gprof2dot_magic installation make sure ve python package gprof2dot_magic dependency gprof2dot graphviz instal usage enable magic function load gprof2dot_magic module profile line statement dot graph way use yappi https://github.com/sumerc/yappi useful combined rpc server debug register method start stop print profiling information way program work start profiler time call startprofiler rpc method dump profile information log file call printprofiler modify rpc method return caller get output useful short script help optimize server type process give printprofiler method call multiple time time profile compare different program usage scenario new version yappi follow code work add https://stackoverflow.com/a/582337/1070617 write module allow use cprofile view output https://github.com/ymichael/cprofilev see make sense collect statistic new tool handle profile python pyvmmonitor unique feature note commercial free open source depend want see profile simple time metric give bash bin time output detailed metric use flag check time metric give function understand much time spend function use inbuilt cprofile python go detailed metric performance time metric worry memory thread profiling option line_profiler profiler use find timing metric line line memory_profiler tool profile memory usage heapy project guppy profile object heap use common one tend use want find try read book good book start performance mind move advanced topic use cython jit(just time compile python develop profiler inspire pypref_time https://github.com/modaresimr/auto_profiler add decorator show tree time consume function @profiler(depth=4 want know hell python script enter inspect shell inspect shell let print alter global run function interrupt run script auto complete command history linux inspect shell pdb style debugger https://github.com/amoffat/inspect-shell use wristwatch statistical profiler call statprof sample profiler add minimal overhead code give line base function base timing suited soft real time application game precision cprofile version pypi bit old install pip specify git repository run https://stackoverflow.com/a/10333592/320036 find cprofiler ressource optimization purpose debug make testing module simple python script speed testing case line py file test use scriptprofilerpy speedup code 10x minute module scriptprofilerpy run code add timestamp put module https://github.com/lucas-blp/scriptprofilerpy use output find function quick easy use want command line option use add @profile function profile output function look scalene new python profiler cover many use case minimal performance impact https://github.com/plasma-umass/scalene profile cpu gpu memory utilisation granular level support multi threaded parallelize python code ' m root server use lsprofcalltree.py run program open report callgrind compatible software qcachegrind
build reverse function python str object good way implement method supply concise answer elaborate efficiency example str object convert different object use slicing slice notation take form start stop step case omit start stop position want whole string use step step leave character @paolo s[::-1 slow approach readable debatable .join(reversed(s experience question academic look quick answer use slice step slow due method name lookup fact join form list give iterator str.join readability reusability put slice function interested academic exposition keep read build reverse function python str object couple thing python string know python string immutable change string modify string create new string sliceable slicing string give new string point string point give increment take slice notation slice object subscript subscript create slice include colon brace create slice outside brace need create slice object readable require call string method str.join call function slow let put function come use reverse slice make readable understandable familiar slice intent original author let create slice object subscript notation give descriptive name pass subscript notation implement function think clear use descriptive name usage instructor want start empty string build new string old pure syntax literal use loop bad remember string immutable time look append character new_string create new string time cpython know optimize certain case trivial case collect substring list join see timing cpython take long cpython optimize string concatenation timing cpython optimize string concatenation implementation rely cpython efficient implementation place string concatenation statement form b = b optimization fragile cpython work type present implementation use refcounte performance sensitive part library form use ensure concatenation occur linear time various implementation answer provide address follow concern @odigity horrify first solution paolo propose take seat horror feel read first comment pythonic good job disturb bright community think use cryptic method basic good idea s.reverse python special circumstance aware string iterable type rationale exclude string.reverse method give python developer incentive leverage power special circumstance simplify term mean individual character string operate part sequential arrangement element array programming language understand work review example02 provide good overview cognitive load associate understand slice notation work python much adopter developer wish invest much time learn language basic principle understand power approach fix string manipulation method favorable think alternate approach function iterator simple function declaration desire developer implement string.reverse method good understand rationale aspect python answer bit contain section benchmark exist solution solution wrong solution exist answer correct unicode modifier grapheme cluster ignore deal look speed reversal algorithms see time list comprehension reverse string[::-1 case low fix typo want reverse string common sense complicated example follow string brown finger pointing leave yellow finger point grapheme unicode code point additional skin modifier reverse give method get brown finger point yellow finger pointing leave reason brown color modifier middle apply unicode grapheme cluster bite complicate modifier code point library handle grapheme correct answer slow less perplexing way look happy yppah english read start go way take step reverse string python use reverse interesting way similar exotic way use bytearray support produce fancy solve program way interview output recursive method example reverse string use loop work loop string assign value reverse order string code recieve input user print output equal reverse input adding output come case sentence view code output want character string reverse sequence string try code line say variable b value list say var list use split input variable input become list remember split use case int(input output add end code print follow example understand end code output code end output
display figure gui save figure file use matplotlib.pyplot.savefig file format specify extension give rasterize vectorized output addition undesirable whitespace image remove note show plot plt.show follow plt.savefig file image blank other say plt.savefig fig1.savefig way save image find certain case figure show spyder plt.ion interactive mode work force closing figure window giant loop see documentation open figure loop able open figure need fig.show test solution find link matplotlib documentation address issue http://matplotlib.org/faq/howto_faq.html#generate-images-without-having-a-window-appear say easy way prevent figure popping use non interactive backend eg agg matplotib.use(<backend prefer use plt.close fig option hide certain figure loop display figure post loop datum processing choose interactive backend interesting test update spyder set backend way spyder load matplotlib early prevent use matplotlib.use use plt.switch_backend('agg turn enable support spyder pref run matplotlib.use('agg command hint concept current figure use find important use save figure work.figure export png answer correct find want open figure object example want change label size add grid processing perfect world rerun code generating plot adapt setting alas world perfect addition save pdf png add load figure object manipulate setting write stack source code local dictionary function method stack tell generate figure careful method generate huge file use plot function create content want use clause select plotting screen file use spyder disable interactive mode plt.ioff command launch scientific startup want enable use plt.ion remember let savefig finish closing gui plot way see image look close gui run script time replace plt.savefig use solution want display image save image use import matplotlib question matplotlib pyplot savefig output blank image thing note use plt.show plt.savefig give blank image detail example use matplotlib.pyplot save plot use line jupyter notebook remove add plt.savefig rest plt code cell image show notebook add file name picture python file get name add argument make look well extra note comment post use line make sure add image save savefig close plot add plot plt.clf add previous plot notice plot similar plot previous plot loop save figure plot become massive make script slow give today available question make lot people use jupyter notebook python console easy way save plot .png call matplotlib pylab class jupyter notebook plot figure inline jupyter cell drag figure image local directory forget inline first line suggest use save iphython image display different note look different angle get work open cv open cv import go case need work open cv plt.savefig sufficient recommend use wrapper render control plot example mpltex https://github.com/liuyxpp/mpltex prettyplotlib https://github.com/olgabot/prettyplotlib use decorator lot publish academic paper various journal american chemical society american physics society opticcal society american elsivier example find follow image save image extension(png jpg resolution want function save figure fig_id name want save figure hope help work problem save image small find hell make big seem make big full screen https://matplotlib.org/stable/api/figure_api.html#matplotlib.figure.figure.set_size_inche fig.set_size_inches((w h hope help use agg due gui server debug ubuntu gui vsc debug try display plot save file web ui find save show require save plot blank suppose show clear plot reason
problem requirements.txt file look local archive directory contain package other create new virtualenv activate tried install package accord local archive directory get output seem indicate installation check reveal none package instal import package none find site package directory virtualenv go wrong work explanation filename install give requirement file option use multiple time work index ignore package index look link url --find link url url path html file parse link archive local path file:// url directory look archive directory list virtualenv install file file similar problem try = update instal problem realize generic library development miss know help use detail check help option find option install give requirement file option use multiple time information use pip install option help option pip install command complete set option use pip install complete list option short answer form explanation short form ask pip install give requirement file pip start installation check availability list item requirement file start installation requirement unavailable workaround install available package instal list package use follow command red color warning notify unavailable package ignore comment line start blank line use first create virtual environment python python activate environment install package available requirement.txt file want fast install local archive probe pypi first download archive fulfill requirement install use find link index try work lot system muck developer follow direction find internet common pip python look path site package reason encounter oddness start happy system unhappy system least be ignorant system cause other unhappy unhappy pip python3.6 use local lib site package python use local lib python2.7 site package want make sure instal requirement right python hear break try fix devop version break work try fix instal file virtual env python issue try install requirements.txt file virtual environment find solution create virtualenv way activate environment use instal requirements.txt file use installation successful able import module use pip3 install make sure file pull origin add .gitignore window lead less format relate path issue c:\folder\subfolder\requirements.txt pip install work time face problem requirement conflict dependency install package line line follow liner hope help solve running command command install dependency librarie django project
python equivalent python simplehttpserver docs simplehttpserver module merge http.server python tool adapt import convert source command python depend installation equivalent use utility many nix util accept stdin argument pass test create file addition petr answer want bind specific interface interface use flag snippet trick port number use standard port http communication mention http.server module equivalent python simplehttpserver warn https://docs.python.org/3/library/http.server.html#module-http.server warning recommend production implement basic security check http.server invoke use switch interpreter command run server default port number give port number run server command run http server port default server bind interface option -b/--bind specifie specific address bind ipv4 ipv6 address support example follow command cause server bind localhost python version support ipv6 bind argument default server use current directory option -d/--directory specify directory serve file example follow command use specific directory directory bind introduce python project run test python write small script start local server alias note control python version conda environment use python python3 use python want add work python3 use port number one use
write json datum store dictionary datum file give error typeerror stre buffer dict data python dictionary need encode json write use maximum compatibility python modern system utf-8 support write nice file use see json documentation get utf8 encode file oppose ascii encode accept answer python use code simple python window argument open necessary avoid store encode copy datum memory result dump output utf8 encode bytestring python use codecs.getwriter call redundant python require python readability size use ensure_ascii = false give well readability small size improve readability add flag indent=4 sort_key = true suggest dinos66 argument dump dump way get indent sorted structure json file cost large file size answer slight modification aforementione answer write prettify json file human eye read pass sort_key true indent space character good take care ensure ascii code write json file explanation parameter json.dump look utility package mpu super simple remember .json application follow see comparison data serialization format case look way make configuration file read short article configuration file python try dump greek exotic language problem unicode error weird character peace symbol other contain json formated datum twitter solution follow sort_key optional enough reputation add comment write finding annoying typeerror think bug json.dump function python dump python dictionary list datum contain non ascii character open file encode utf-8 parameter matter work python illustrate follow phihag answer code answer break python exception typeerror unicode str data contain non ascii characters python debian work fine python write datum file use json use json.dump json.dump use write store datum file example list store file write json indentation pretty print need debug format json want helpful error message use import simplejson library import json function previous answer correct simple example try write pandas dataframe file use json format recommend accepted answer run json serializable error use fix open("file w output output.write(str(response good fix json file create double quote great look quick dirty json datum write file follow write file write dictionary file json turn dict json string use json library add indent json datum look pretty want key turn json use combination refer json documentation much feature write json file extra hint usage json.dump answer problem question trick dump numpy data type numpy data type dictionary json.dump need additional parameter credit go typeerror object type ndarray json serializable fix error typeerror object type int64 json serializable run want return string list case array print list spread row blow output large many array caveat difficult access item dump dictionary get original array mind string array make dictionary readable exchange
command line program python take finish want know exact time take finish run ' look timeit module seem small snippet code want time whole program simple way python assume program take tenth second run print linux unix window see stackoverflow question measure execution time command windows command line verbose output put module site package directory insert import time top module call timing.log program significant stage program want show include import timing print start end time elapse time forgive obscure secondstostr function format float point number second mm ss.sss form note python version code find output datetime module provide time delta object show day hour minute necessary human readable way example sample output j.f sebastian mention approach encounter tricky case local time safe use time.clock return processor time allow calculate time use process unix documentation say case function use benchmarke python timing algorithm paul mcguire answer use python interested modification answer work python nix imagine window clock use time find useful vote answer work use python profiler cprofile measure cpu time much time spend function many time function call useful want improve performance script know start answer stack overflow question good good look documentation example profile script use cprofile command line use timeit module work python python return second execution time simple write thew main function start program execution want get execution time get error take parameter start calculate time.clock deprecate version behavior function depend platform use perf_counter process_time depend requirement define behavior time.perf_counter return value fractional second performance counter clock high available resolution measure short duration include time elapse sleep system wide time.process_time return value fractional second sum system user cpu time current process include time elapse sleep time.clock deprecate python remove python use time.perf_counter cell use jupyter time magic command measure execution time capture execution time particular cell capture execution time whole notebook program create new notebook directory new notebook execute cell suppose notebook call new notebook directory follow snippet print elapse time nice human readable ss > format similar response @rogeriopvl add slight modification convert hour minute second use library long run job sample output function suggest use simple decorator create problem many place create convenience package horology install pip install horology elegant way output simple function output take care unit round work python newer ' look timeit module seem small snippet code want time whole program run function time print elapse time use time.time function timer emulate bin time python see python subprocess bin time capture time info ignore output measure cpu time include time time.sleep function use profile module cprofile python pass timeit command want use timer profile module use see profile python script like paul mcguire answer come context manager form suited need ipython timeit script use simple function time part code execution use call code measure retrieve function timing call function code comment time appear front comment example output look tried find time difference use follow script use line_profiler line_profiler profile time individual line code take execute profiler implement c cython order reduce overhead profiling result timeit class python use calculate execution time small block code default_timer method class use measure wall clock timing cpu execution time process execution interfere useful small block code sample code follow python need make complicated answer use build timeit install package open command prompt cmd administrator type pip install code output timeit module use time execution times python code detailed documentation example python documentation timeit measure execution time small code snippet follow answer create simple convenient instrument usage output paul mcguire answer work case trouble run call program import file time python program execution measure inconsistent depend effective way use order growth learn big notation try evaluate performance python program specific machine counting step second use simple algorithm adapt program want evaluate simple way elapse time program write follow code end program use tic toc ttictoc use script use metakermit update answer python require monotonic package code follow want measure time microsecond use follow version base answer paul mcguire nicojo python code add colour log = function print time information txt first argument log string mark timing atexit = python module register function call program exit default linux unix system test macos come time command terminal use run python script get real user sys time information execution run script default output clear least default time command take option argument format output version time build bash provide minimal version one locate bin time bin time command accept additional argument favorite show output new line follow problem encounter finding run time different method find prime number number user input take program wrong approach different run time obtain case wrong problem take input start time take input time take user type input calculate run time correct approach remove start_time = time.time begining add main block output method use see significant difference total run time compare wrong approach method perform well method approach approach(wrong approach wrong think easy way decorator define follow python decorator use function class method
convert integer string reverse see parse string float int float handle handle decimal point tricky float point value see convert float string round specific advice link documentation str(x convert object string call x.__str repr(x x str method try typecast type coercion python convert variable explicit way convert object string use str function work object method call str define fact equivalent convert int float manage non integer input python use f string new feature convert string compare str function use python provide str function reason detailed answer check article convert python int string python string int python = > use f format decent way opinion use want convert int string specific digit method recommend detail refer stack overflow question display number lead zero introduction f string python work call str cost readability fact fast string format several way convert integer string python use function f string f'{integer .format()function s'% keyword s'% integer method convert integer string see example simple solution program int use convert string representation integer note variable format string convert integer variable composed number str use convert integer string use list print output highlight variable string understand difference list store stre integer view code first output
get filename extension path python get name file extension print documentation important note filename multiple dot extension last remove example print see answer handle case use .stem pathlib python + return note file multiple extension remove last extension example path('file.tar.gz').stem return file.tar make important note filename last remove example see answer address python + use pathlib solution python pathlib pathlib module offer high level path object want keep path file remove extension work multiple dot extension example find index first dot basename slice basename get filename extension note @iceador comment @user2902201 solution rsplit simple solution robust multiple period limit number split maxsplit end string spelt my.report filename example file_extension use pathlib trivial filename extension none awkward handle general case multiple extension instance extension .tar .tar.gz.bz rsplit known extension take first element thought throw variation use need use array index function return root ext pair safe use root ext os.path.splitext(path example import os able call path.basename possible call basename import os use import mean use os.foo refer os method remove multiple extension problem filename extension snippet deal instance work python grab basename path split value dot return initial part filename set example run case value print multiple extension aware procedure work str unicode path work python behavior import os return filename extension(c:\users\public\videos\sample videos\wildlife get filename temp module window system use drivername prefix need drive letter directory name use improve @spinup answer work filename extension read answer notice many good solution look get name extension go solution use os module method support file multiple extension note solution window support file name character simple split pop magic see https://stackoverflow.com/a/424006/1250044 extract filename respect window posix difference convenience simple function wrap method os.path test python easy way resolve save time computation cost look see use regex problem interpret question give path return basename extension path file.json = > file path my.file.json = my.file python live pathlib use pathlib.path.stem right way go ugly solution way efficient pathlib base approach filepath field separate slash slash present filename split filepath last field filename extension last element list create splitting filename dot reverse filename split dot reverse second element file name extension performance follow equivalent many working implementation describe add use pathlib work compound filetype normal one
create virtual environment specify version python note python see aelfinn answer use short option create virtualenv instance specify python executable want use python documentation suggest create virtual environment use note venv permit create virtual environment version python install use virtualenv package pyvenv script use create virtual environment deprecate python step follow share host environment need install compile python source create venv python version python line virtual env applicable situation want replicate exact environment work deploy easy way thank comment work instal system level bin use homebrew use path give want find path python installation work python condense window work get windowserror error access deny instal virtualenv want python 2.5.2 mac osx snow leopard pip install virtualenv pip command associate python version virtualenv instal version python see version python see see python version output default version python use new environment create specify version python instal computer use new environment flag virtualenv my_env create folder current directory contain python executable file copy pip command use install package http://docs.python-guide.org/en/latest/dev/virtualenvs/ virtualenv copy python location computer create my_env directory system python bin various python version instal default instal various python instal name use name full path problem get virtualenvwrapper work end put option work virtualenvwrapper specify full path python interpreter use new environment(when want use default python version virtualenv virtualenvwrapper create environment location specify workon_home environment variable keep environment place november need install python environment env python base arch linux system python long system downgrade python install package need want use package python virtual environment venv download python version source file download python source file https://www.python.org/downloads/source/ vancouver app python_version src python-3.7.4.tgz extract archive source file vancouver app python_version src python-3.7.4/ installation note system env venv examine instal python version create venv specific python version https://docs.python.org/3/tutorial/venv.html create virtual environment module use create manage virtual environment call venv venv install recent version python available multiple version python system select specific python version run python3 version want create virtual environment decide directory want place run venv module script directory path python3 venv tutorial env create tutorial env directory n’t create directory contain copy python interpreter standard library various support file create python venv python operate env system add test python venv suppose python instal virtualenv want make use update activate virtualenv python shell check version update python version instal virtualenv venv example change different version virtual environment give instal computer command work fine virtualenv python2 myenv python2 virtualenv python3 myenv python3 call virtualenv python version want example point virtualenv path window run see python version instal virtual environment approach work remember use time goal switch new version python pain lead mistake option set environment variable thing set file manage environment variable login session use time specify command line mac use pyenv virtualenvwrapper create new virtualenv need homebrew assume instal mac fun freeze requirement reinstall new virtualenv use command substitution find python2 virtualenv python2 path new use virtualenvwrapper mkvirtualenv python2 env_name mac(high sierra install virtualenv python3 create virtualenv python2 mention multiple answer use virtualenv clean solution small pitfall aware alia python set bash_aliase alia use virtual environment scenario run python virtual env output interpreter use create environment seem little overcomplicated window window run python use python launcher py install different python version run create virtual environment call env current directory use python version example create virtual environment call env use activate path complex stuff require utilize answer windows https://stackoverflow.com/a/22793687/15435022 window use py launcher find right python executable assume instal create environment python3 activate use pyenv manage python version check python version create virtual environment venv activate virtual environment check python version need remove previous virtual environment end seamless experience use virtualenv add benefit possible python version use pyenv bundle pyenv virtualenv plugin https://realpython.com/intro-to-pyenv/#virtual-environments-and-pyenv usage pyenv virtualenv installation https://github.com/pyenv/pyenv-installer say good possible alternative use virtualenv pip poetry pyenv indicate handle different python version option support pypa org pip pypi restart release end release late pipenv work usage window python want downgrade project python use venv create new environment call venv download https://www.python.org/downloads/windows/ install download window x86 executable installer- use follow command line directory want create environment c:\users\ \python\python36\python.exe venv venv activate environnent use command line venv\scripts\activate.bat check python version call python python linux ubuntu python need get virtualenv python full step get work find python version source want example https://www.python.org/downloads/release/python-378/ download gzippe source tarball unzip tar zxvf python-3.7.8.tgz amend require version number different copy unzip folder bin sudo cp -r python-3.7.8 bin check content want see ls check python set reporting relate primary install python check new install relate install want run check install venv create venv add activate venv check version answer correct work fine unix base system linux mac os x. try create virtualenv python2 python3 follow command use venv2 venv3 name python2 python3 python2 python3 check python installation location use window use pthon path work link create virtualenv bug virtualenv upgrading pip fix pip install virtualenv debian debian system discover simple solution solve problem virtual environment suppose virtual environment create version python2 need recent feature python3.7 run command add python3.7 package available system work windows python installation create python virtual environment exist python installation install version python define location version python command virtualenv payroll document env bin python3 stepbystep create virtual environment visual studio code folder use powershell administrator mode create vscode folder want create virtual environment next type command pip3 install virtualenv d:\code_python_ve pip3 install virtualenv d:\code_python_ve python3 venv project_env d:\code_python_ve project_env\scripts\activate.bat d:\code_python_ve ls list new directory project_env d:\code_python_ve code start visual studio code make sure command code create launch.jason follow content search go debug window add new configuration code ubuntu global python work enable python environment use recommend venv python development install venv module sudo apt install python3.8 venv module need create virtual env use python version want env switch virtual env surprise mention conda find lot straightforward method mention let say python python project work python create isolated virtual env conda command download see list available python version use command conda search create virtual environment python version x.y.z use command conda create yourenvname python = x.y.z activate venv conda activate yourenvname deactivate conda deactivate delete virtual environment do use command conda remove yourenvname answer question complicate tl dr install many version python prefer system use use venv install virtual environment try see python refer say python example result program file python36 python answer install version python system multiple time example instal directory c:\program files\python37 use python specify python program\ file python37 python forget escape space path sudo add apt repository ppa deadsnake ppa sudo apt update sudo apt install python_version ex sudo apt install python3.8 python_version venv env venv env env bin activate step solve python version env issue simple linux window suppose want use python ' use macos
difficulty concept args kwargs learn understand programming task helpful think enter list dictionary argument function time pass argument simple example explain args kwargs use tutorial find use variable name args kwargs placeholder use args kwargs code syntax name args kwargs convention hard requirement use use args many argument passed function pass arbitrary number argument function example kwargs allow handle name argument define advance use name argument explicit argument get value pass args kwargs name argument come first list example use function definition args occur kwarg use syntax call function example see case take list tuple item unpack match argument function course function definition function call place use args kwargs useful subclasse way extend behaviour foo class know much foo convenient programming api change myfoo pass argument foo class example use different type parameter favorite place use syntax dave webb final example ' m sure compare use name lot easy type case args kwargs useful write wrapper function decorator need able accept arbitrary argument pass function wrap example simple decorator print argument return value function wrap args kwargs special magic feature python think function unknown number argument example reason want function sum unknown number number want use build sum function write function use sumfunction(3,4,6,3,6,8,9 kwargs diffrent function kwargs give arbitrary keyword argument function access dictonary call somefunction(text="foo print foo imagine function want restrict number parameter take example use function name args kwargs kw convention make easy read code place handy use struct module struct.unpack return tuple struct.pack use variable number argument manipulate datum convenient able pass tuple struck.pack eg ability force write mean change size tuple change go edit long line note args/**kwarg part function call syntax operator particular side effect run use args expansion print statement print function seem reasonable compile syntax error compile print argument tuple want solution settle parameter use proxy function proxy pass input parameter target function parameter hide actual parameter name avoid look python docs docs.python.org faq good explanation mysterious miss args mister kwargs courtesy original dead link nutshell use optional parameter function method use dave say args use know many argument pass kwargs want handle parameter specify name value
force python print function flush buffer output screen python print take optional flush argument python call print default print print sys.stdout see documentation file object run python see command line option unbuffere binary stdout pythonunbuffere = see man page detail internal buffering relate relevant documentation python force normal print function flush need use set flush keyword argument true documentation print(*object sep= end='\n file sys.stdout flush false print object stream file separate sep follow end sep end file present give keyword argument non keyword argument convert string str write stream separate sep follow end sep end string none mean use default value object give print write end file argument object write(stre method present none sys.stdout use output buffer determine file flush keyword argument true stream flushed suggest way use python high provide flush = true keyword argument print function backport flush argument python use python less want code compatible suggest follow compatibility code note future import top module compatibility code cover use much thorough treatment see module call file.flush print example print statement python change default print function use functools.partial global scope module look new partial function python see work normal override new default note change current global scope print name current global scope overshadow builtin print function unreference compatibility function use python current global scope want function module global scope give different name declare global function change module global namespace put global namespace specific behavior want think good option use flag get unbuffered output doc force stdin stdout unbuffered system matter put stdin stdout binary mode note internal buffering file.readline file object line sys.stdin influence option work want use file.readline loop get behavior python process environment environment inherit environment set environment variable nonempty string linux osx windows docs pythonunbuffere set non empty string equivalent specify option help print function python note flush argument suggest blog post reopen sys.stdout unbuffered mode stdout.write print operation flush python print function extend python doc entry use command line switch work little bit clumsy mean program behave user invoke script -u option use custom stdout print call use sys.stdout flush use unbuffered file python overwrite print function default set flush true dan idea work result believe problem inherit file class necessary accord documentation sys.stdout stdout stderr need n’t build file object object acceptable long write method take string argument change make work fine version provide writeline fileno python struggle understand flush option working want loading display solution find first line flush previous print second line print new update message know line syntax exist
see file mention use list string define symbol module export module import use module example follow code foo.py export symbol bar baz symbol import comment code execute completion default behaviour import import symbol begin underscore give namespace reference https://docs.python.org/tutorial/modules.html#importing-from-a-package note affect module import behavior member mention accessible outside module import module import member > list public object module interpret import override default hide begin underscore explain python keep see variable set different init__.py file declare public name module name user expect use expectation change programmatic effect module mean import module name import documentation code autocompletion tool inspect determine name show available module doc file require make python treat directory contain package do prevent directory common name string hide valid module occur module search path simplest case empty file execute initialization code package set variable init__.py declare package package make module import tie init__.py file file make directory actual python package example say follow file package let create file python follow paste follow python shell present complete api use import package package implementation detail use create module clutter package namespace work decide module big many thousand line split first make subpackage directory name module move implementation create init__.pys subpackage declare api provision package level add thing api manage subpackage level subpackage module level add new name api update init__.py e.g. module_2 ready publish baz top level api top level init__.py user aware availability baz use know tool pydoc inform change baz ready prime time default python export name start import import demonstrate shell session import bring us_non_public name us.py module rely mechanism package python standard library fact rely alias import example ctypes/__init__.py use convention elegant remove redundancy name name add redundancy import lot forget last thing support intend implementation detail forgot prefix naming function write early development lifecycle module other use code know use use package standard library use make sense stick prefix convention lieu downside use write name function class export twice information keep separate definition use decorator solve problem get idea export decorator david beazley talk packaging implementation seem work cpython traditional importer special import hook system guarantee adopt trivial add name example utility library define decorator define work run main import function api provision import work add precise answer refer module original question mention init__.py file python package come play xxx import variant import statement use apply package module behaviour module explain answer exact behaviour package describe detail short package level thing module deal module package contrast specify name module specifie module load import current namespace use package import big difference omit declaration package init__.py statement package import import exception explain documentation see link hand omit module star import import name start underscore define module change pydoc show module2.py pydoc module1 pydoc module2 declare module underscore internal detail help use thing use live interpreter session customize module import package import module file mean import package directory init__.py file package contain module let human know public feature module.[@aaronhall pydoc recognize them.[@longpoke see swiss cheddar bring local namespace gouda symbol start underscore available file package list string name public module object feature available wildcard import module customize import package.[@martinstettner excerpt python mysql connector init__.py default case asterisk package complicate obvious behavior expensive use file system search module package read doc object define init__.py import define statement import import submodule package sound.effect current namespace ensure package sound.effect import run initialization code init__.py import name define package include name define submodule load init__.py include submodule package load previous import statement venerate tradition stack overflow answer professor mansplainer mot reproach ask question first place wildcard import avoid confuse reader many automate tool pep @toolmakersteve affect module import statement consider example foo/__init__.py implicit define foo import import name define foo/__init__.py explicit define foo import import explicit define = foo import import name note implicit case python import name start force import name use view python document use document public api python module optional use relevant excerpt python language reference public name define module determine checking module namespace variable name define sequence string name define import module name give consider public require define set public name include name find module namespace begin underscore character contain entire public api intend avoid export item part api library module import use module pep use similar wording make clear import name part public api absent well support introspection module declare name public api use attribute set empty list indicate module public api import name consider implementation detail module rely indirect access import name document part contain module api package init module expose functionality submodule point answer use enable import package import statement use follow convention package init__.py code define list name take list module name import package import encounter affect foo import work code module body body function class use asterisk statement request attribute module foo begin underscore bind global variable import module foo attribute attribute value list name bind type statement foo package init__.py define list name take list submodule name import foo import encounter defined statement foo import import name define package include name define submodule load init__.py note list documentation import statement define sequence string name define import module use tuple save memory cpu cycle forget comma case module define single public name see import bad define pep8 global variable name let hope variable mean use module convention function module design use import use mechanism prevent export global use old convention prefix global underscore want indicate global module non public pep8 provide code convention python code comprise standard library main python distribution follow close original intent
question discussion singleton design pattern desirable anti pattern religious war discuss pattern implement python way pythonic instance define pythonic mean follow principle least astonishment multiple class become singleton use case logger important wish clutter several class add gumph inherit decorate good method pro con object create use myclass true singleton object myclass function class call class method x = = pro cons pros cons pros con module file pro con recommend method use metaclass base class sample implementation python3 want run init time class call add statement singleton.__call word metaclasse metaclass class class class instance metaclass find metaclass object python type(obj normal new style class type type logger code type class your_module.singleton instance logger type class your_module.logger call logger logger python ask metaclass logger singleton allow instance creation empte process python ask class call getattr reference attribute myclass.attribute metaclass decide definition class mean implement definition see example http://code.activestate.com/recipes/498149/ recreate c style struct python use metaclasse thread concrete use case metaclasse provide example seem related declarative programming use orm situation use method subclass define new method execute time call subclassofsingleton responsible call method return store instance metaclass call instance create want customize mean call class decide type general make sense use metaclass implement singleton singleton special create metaclass way customize creation class use metaclass give control case need customize singleton class definition way singleton need multiple inheritance metaclass base class subclass create class use multiple inheritance need make sure singleton class first leftmost metaclass redefine call unlikely issue instance dict instance namespace overwrite hear singleton pattern violate single responsibility principle class thing way worry mess thing code need change separate encapsulate metaclass implementation pass test metaclass responsible enforcing pattern create class subclass need aware singleton method fail test note myclass function class call class method write work python2 require use complicate scheme metaclasse subclasse type type possible use create intermediary base class run time metaclass use baseclass public singleton base class hard explain illustrate next ironic aspect approach use subclasse implement metaclass possible advantage pure metaclass singleton return true topic notice base class implementation original post wrong instance need referenced class need use super recurse new static method pass class class method actual class create call thing true metaclass implementation write comment add method well decorator version code need singleton clear main problem stem class base class weird class subclass identical class name exist class attribute mean define method call method name base class super recurse mean class customize new derive class need init call use case well example want use singleton say comment log seem natural candidate singleton right people say singleton bad common reason implicit share state global variable top level module import explicit share state object pass instantiate good point exception mention various place singleton constant use global constant enum accept consider sane matter none user mess user true constant singleton second exception mention opposite singleton datum sink datum source logger feel natural use singleton various user change logger way user care share state negate primary argument singleton pattern make reasonable choice ease use task http://googletesting.blogspot.com/2008/08/root-cause-of-singletons.html kind singleton ok singleton reachable object immutable object immutable singleton global state constant easy turn kind singleton mutable slippery slope singleton bad go bad side note java enumeration kind singleton put state enumeration kind singleton acceptable effect execution code side effect log perfect example load singleton global state acceptable hurt application behave different give logger enable information flow way application logger think logger global state information flow logger application logger acceptable inject logger want test assert log general logger harmful full state module import overthinke use singleton try use global use module import define global variable singleton attribute add function singleton method need singleton python define data function module singleton use singleton class go use filename mysingleton define work first time file import python execute code liner use object instantiate want check stack overflow question simple elegant way define singleton python several solution recommend watch alex martelli talk design pattern python part part particular part talk singleton share state object use function attribute simple implementation singleton decorate class get singleton use instance method example code prefer solution find clear straightforward use double check instance thread create additional thing consider make sure deserialization create instance https://gist.github.com/werediver/4396488 recommend elegant solution use metaclasse output see output object instantiate override new method return instance class boolean initialize class first time dead easy work method seem neat want program run python python work protect separate variant test python version fail python version give syntax error python thank mike watkins http://mikewatkins.ca/2008/11/29/python-2-and-3-metaclasses/. want program work python python need presume object assignment need replace baseclass try try code illustrated toss ring simple decorator benefit think solution downside occur classmethod staticmethod real class callable factory class hiding use ' happen run need rectify use custom metaclass factory implement getattr delegate attribute access real class relate pattern find useful say kind thing require unique pattern instantiate class argument result get instance singleton argument adapt become concise say agree general advice think need thing stop moment ask time yagni missunderstand singleton pattern solution simple pragmatic pythonic code fullfill goal code output m̲͟͟o̲͟͟s̲͟͟t̲͟͟ ̲͟͟r̲͟͟e̲͟͟c̲͟͟e̲͟͟n̲͟͟t̲͟͟ ̲͟͟v̲͟͟e̲͟͟r̲͟͟s̲͟͟i̲͟͟o̲͟͟n̲͟͟s̲͟͟ ̲͟͟o̲͟͟f̲͟͟ ̲͟͟p̲͟͟y̲͟͟t̲͟͟h̲͟͟o̲͟͟n̲͟͟ ̲͟͟a̲͟͟l̲͟͟r̲͟͟e̲͟͟a̲͟͟d̲͟͟y̲͟͟ ̲͟͟t̲͟͟h̲͟͟e̲͟͟ ̲͟͟o̲͟͟p̲͟͟ ̲͟͟w̲͟͟a̲͟͟n̲͟͟t̲͟͟s call singleton usage generic mean function usage output notice foo print agree general pythonic suggestion module level global output use decorator class singleton similar singleton lambda c decorator answer solution instance name class mysingleton solution create instance get instance class mysingleton prevent create additional instance type(mysingleton return instance similar answer fab singleton pattern require able call constructor multiple time singleton create see create spoof constructor impairs legibility suggestion rule use constructor field instance user code know sure elvis create king encourage user use method make complete override delattr raise exception attempt make delete instance override del raise exception know program end thank help comment edit welcome use jython work thread safe point note answer look want singleton sense object identity comparison case use sentinel value answer simple make object mythe object python nature thing identity prefer decorator syntax deriving metaclass cent benefit decorator provide con need different instance base constructor parameter solution need improve solution provide siddhesh suha sathe provide suggest consider use module python module object pass variable inject class pro true class auto cover inheritance use metaclass proper purpose make aware con problem serialziation try deserialize object file pickle use call create new file use base class inheritance new prevent make simple accident thought share pro con remember find solution find elegant expert point view decorator meta class multiple inheritance want singleton delete new method new python oop general expect set straight terrible approach code base tolli answer explanation create new class inheriting give cls modify cls case want example singleton(list create instance override new easy function return instance caller expect raise typeerror condition meet attempt inherit decorate class new return instance cls new instance init method invoke self new instance remain argument pass new instance initialize function replace init function see work liner proud job need lazy initialization instance singleton follow easy thread safe way singleton initialize module import struggle time follow config object load call separate module metaclass allow global class instance store builtin dict present appear neat way store proper program global use metaclass want use instance property example simple implementation combine @agf @(siddhesh suha sathe solution use metaclass take consideration constructor args return instance create foo class exact args prefer use static method getinstance create singleton object allow method emphasize use singleton design pattern want point first method define dictionary lookup today understand see solution spread place guess copy paste talk make sense metaclass solution decorator solution time decorator call new function define new instance variable instance entry make global work inheritance similar simple well adjustable solution add simple allow inheritance mocking access wrap possible inner dict lookup course pardon understand mystery dictionary lookup fault understand particular intent @staale mention simple way make singleton python use module global variable attribute global function method add important amazing answer inheritance work make singleton module b.py inherit singleton module a.py start b.py line import respect private variable import default caveat want highlight check idea hash instance key args kwargs https://stackoverflow.com/a/73495782/2910384 solution cause namespace pollution module level definition find easy follow like able write lazy initialization class available body definition possible break initialization static instance eager initialization lazy initialization eager initialization
replace none empty string call function f order issue general list comprehension condition note use different language construct conditional expression part comprehension syntax part list comprehension use filter element source iterable conditional expression use kind situation choose expression value base condition ternary operator exist language example specific problem solve previous answer address general idea use conditional list comprehension example show conditional write list comprehension note first list comprehension order expression item iterable condition last list comprehension x_str_change order expression1 condition expression2 item iterable find hard remember expression1 expression2 head want guess design resemble normal language want stay rain go plain english type list comprehension mention stated extract_apple apple apple_box apple_is_ripe mark_apple apple_is_ripe leave_it_unmarke apple apple_box let use question review concept think good first see fundamental extrapolate different case answer provide specific answer question give general context answer question statement list comprehension involve thing provide concise way create list structure consist bracket contain expression follow clause clause condition item iterable add new_list condition example condition number add new_list example condition number multiple add new_list howcome condition use new_list prior expression write use statement example sake argument use condition number number multiple add new_list condition need help conditional expression ternary operator conditional expression name say python expression condition first condition evaluate condition true exp1 evaluate return condition false exp2 evaluate return conditional expression condition example real python value condition age value put list comprehension conditional condition number add number add number rest add odd problem structure list x xs end expression correct way read python ternary conditional operator way use lambda inline illustrative example exploit fact evaluate false true value generate function range list comprehension evaluate follow solution great single construct ternary statement list comprehension difficult read use function aid readability solution difficult extend adapt workflow mapping input dictionary alleviate concern syntax list comprehension list comprehension perform keep mind follow equivalent expression different format think switch subject verb order sentence code x+1 x l code x+1 x+5 x l rearrange expression make list item iterable seem good generalize possible form give specific answer question reader know answer determined generalize form think get headache try decide final else clause use last form value item need use conditional clause conditional3 use switch add add value output list example create new list eliminate empty string whitespace string original list string need ternary opinion question call answer combine conditional logic comprehension venv python list_comp.py affichage de my_list affichage my_result_list row = unicode(x.strip()))[x none x row
use list comprehension syntax create dictionary example iterate pair key value use dict comprehension python simple case early version python use dict constructor give separate array key value use dict constructor zip python python dictionary comprehension look python see fortran answer fact need iterate iterable comprehend map dict constructor python list comprehension syntax use create dictionary example iterate pair key value look phrase dict comprehension assume blah iterable tuple close let create blah syntax mapping part make dict comprehension set comprehension pseudo code approximate colon see work retain insertion order python python order guarantee comprehension feature mapping component filter component provide arbitrary expression add filter part end testing last character divisible filter datum mapping key value python go zip python version python version july december add @fortran answer want iterate list key key_list well list value value_list throw example imagine follow list want turn dict key index value element list follow line code example dictionary creation use dict comprehension tre create alphabet dictionary pair english letter correspond position english alphabet notice use enumerate get list alphabet index list swap alphabet index generate key value pair dictionary hope give good idea dictionary comp encourage use make code compact code create dictionary use list comprehension multiple list different value use pd.dataframe enumerate pass val match key list try assume list country capital create dictionary list output add @ekhtiar answer want make look dict list use rare case want filter duplicate use set good list number python support dict comprehension allow express creation dictionary runtime use concise syntax dictionary comprehension take form key value key value iterable syntax introduce python backporte python able use version python instal canonical example take list create dictionary item position first list become key item correspond position second list become value zip function use comprehension return iterator tuples element tuple take position input iterable example return iterator contain tuples output possible python comprehension use list set dictionary write way detailed example dictionary comprehension conditional statement loop create new dict pair merge previous dict approach require reduce functool assume blah tuple list let see method approach use iteration give date use loop eg
json file write script print json data program raise exception parse json extract value data valid json format mask parameter elements json file look use code datum find value try see start make sense data.json look code note work python depend statement python use future import with_statement python see justin peel answer answer base access single value go modified data.json file call print datum console use line expect output print(data_item['parameters'][0]['id expect output print(data_item['parameters'][0]['id
difference code snippet use type use isinstance summarize content good answer isinstance cater inheritance instance derive class instance base class check equality type demand identity type reject instance subtype subclass want code support inheritance course inheritance handy bad stop code use use isinstance bad checking identity type support inheritance isinstance good mind bad checking equality type normal pythonic prefer solution duck typing try use argument certain desire type try statement catch exception arise argument fact type type duck mimicking it;- clause try use argument type basestring special case builtin type exist let use isinstance str unicode subclass basestring string sequence loop index slice want treat scalar type incovenient frequent use case treat kind string scalar type one loop way container list set dict way basestring isinstance help overall structure idiom say basestre abstract base class abc")—it offer concrete functionality subclass exist marker use isinstance concept grow python pep introduce generalization accept implement start python pep make clear abcs substitute duck type big pressure see abc implement recent python version offer extra goody isinstance issubclass mean instance derive class particular class register abc show subclass instance instance abc abcs offer extra convenience actual subclass natural way template method design pattern application see part ii tm dp general python independent abc underlie mechanic abc support offer python see version similar see version standard library module collection version similar version see offer several useful abcs purpose answer key thing retain abc natural placement tm dp functionality compare classic python alternative mixin class userdict.dictmixin make isinstance issubclass attractive pervasive python go use contrast make checking type equality bad practice recent python version use example isinstance achieve type case truck object vehicle get word isinstance true subclass see compare type object python type checking allow instance subclasse multiple possible basis type checking support type reference sidenote appropriate class singleton python want allow type argument treat expect object expect raise appropriate error know polymorphism know duck typing code work presume argument duck pass thing actual sub type duck work duck code work case desirable type check sensible thing different object type example pandas dataframe object construct dict record case code need know type argument handle answer question allow demonstrate difference say need ensure certain behavior function get certain kind argument common use case constructor check type try pass dict subclass dict able expect code follow principle liskov substitution subtype substitute type code break raise error use isinstance support liskov substitution return ordereddict([('foo bar fizz buzz fact well collection provide abstract base class enforce minimal protocol various type case expect mapping protocol follow code become flexible note type use check multiple class use type(obj b c test equality type use multiple basis control flow allow type difference isinstance support subclass substitute parent break program property know liskov substitution well invert dependency check specific type want support substituting subclass case want avoid type checking type prefer type checking isinstance know precise class instance latter preferred handle subclass fact example write isinstance second parameter tuple use basestre abstract class practical usage difference handle boolean true false keyword mean python return true booleans instance integer type clever return false accord python documentation statement start python build factory function int str name correspond type isinstance preferred type real difference find code find implement default behavior isinstance get similar abc.__instancecheck accord instancecheck abc.__instancecheck use test get conclusion type isinstance well mix use relative import use import add sys.path difference type isinstance type return type object isinstance return boolean speak isinstance elegant way check object certain type aware inheritance chain hand aware inheritance chain need pick go type(x interesting case type check bool
float('nan represent nan number check use math.isnan usual way test nan see equal numpy.isnan(number tell nan way test variable nan output answer work nan implement follow standard value inequality comparison return true example output seem check equal fast run check nan -inf inf use true number false nan inf raise exception thing string type good thing require import library math numpy numpy damn big double size compile application math.isnan compare number nan number comparison succeed enter post ' issue function problem run code raise exception solution make check method stuck numpy ieee support python end work python solaris box python ubuntu receive data web service send nan string nan sort string datum simple float(value throw exception use follow variant accept answer requirement method tell variable nan none none type nan type remove nan float item(s list mix datum type mix type iterable solution use numpy short circuit evaluation mean isnan call value type float false evaluate false evaluate right hand side python checking string value x math.isnan(x np.isnan(x raise error check give value nan know beforehand number following seem solve issue comparison pd.isna math.isnan np.isnan flexibility deal different type object table show type object give method flexible method check different type miss value none answer cover flexibility pd.isna math.isnan np.isnan return true nan value check different type object none string method return error checking list mix type cumbersom flexible return correct boolean different kind type nan type float string panda take function feature extraction nltk
plenty url copy site thought solution recur question solve attempt relative import non package message build exact replica package pep-0328 import do console make function name spam egg appropriate module work answer 4th url list alumnus response url visit relative import use module name attribute determine module position package hierarchy module name contain package information set main relative import resolve module top level module regardless module locate file system response look promise hieroglyph question make python return attempt relative import non package answer involve tell python give error message mean non package define package precise answer put term easy enough kindergartener understand script module explanation short version big difference run python file import file know directory file determine package python think depend load file python run import way load python file top level script module file load top level script execute instance type python myfile.py command line loaded module import statement encounter file top level script time top level script python file run start thing name file load give name store name attribute aware load modulex module shell command line use package.subpackage1.modulex name main instance example import modulex note import execute name package.subpackage1.modulex import modulea name package.modulea run modulex command line name main run modulea command line name main module run top level script lose normal name name main access module contain package additional wrinkle module name depend import directory import package make difference run python directory try import file directory subdirectory instance start python interpreter directory package subpackage1 import modulex name modulex modulex package.subpackage1.modulex python add current directory search path interpreter enter find import module current directory know directory part package package information become part module name special case run interpreter type python start enter python code fly case name interactive session main crucial thing error message module name dot consider part package matter file disk matter name name depend load include question relative import use module name attribute determine module position package hierarchy module name contain package information set main relative import resolve module top level module regardless module locate file system relative import relative import use module name determine package use relative import import foo dot indicate step number level package hierarchy instance current module name package.subpackage1.modulex modulea mean import work module name many dot import statement relative package module name main consider package name dot use import statement try get relative import non package error script import relative try run modulex command line name set main mean relative import fail name reveal package note happen run python directory module try import module describe python find module current directory realize part package remember run interactive interpreter name interactive session main relative import interactive session relative import use module file solution want run modulex want consider part package python package.subpackage1.modulex tell python load module top level script want run modulex want run script say myfile.py use function modulex case put package directory run thing package.modulea import spam work fine note solution package directory package example accessible python module search path sys.path able use package python module name package resolution purpose determine name attribute package attribute avoid use explicit symbol name refer module name python module name package name name package none problem python origin confusion people take relative import path relative example write faa.py mean identify loaded python execution part package case module name example some_packagename.faa file load current directory python run name refer package relative import fail simple solution refer module current directory use much long anwer foreign language try make short write import module think module import current directory top level package run .py file script know top level refuse work start py package.module directory package python know top level similar java bin_directory package.class carping many other come note post dorian b article solve specific problem develop module class use web service want able test code use debugg facility pycharm run test self contain class include follow end class file want import class module folder change import statement relative notation local reference remove dot read dorian suggestion try liner work test pycharm leave test code place use class class test use web service statement check see run module main use module test main obvious offer note case frustrated relative import issue make use general recipe modify fit example use right deal python librarie write package contain interdependent file want able test part let call say need access lib.filea function f1 f2 lib.fileb class class3 include print call help illustrate work practice want remove future import print_function line particular example simple show need insert entry sys.path see lar answer case need level package directory use os.path.dirname(os.path.dirname(__file__))—but hurt safe sys.path test import file insert path instance filea fileb want import utility package clutter sys.path path many time nice sys.path boilerplate idea note function python run import lib lib import foo regular package import ordinary code package lib name take first code path import run python lib foo.py package none name main take second code path lib directory sys.path need add import filea run lib directory python foo.py behavior case run lib directory python foo behavior similar case path lib directory sys.path add import apply run python import foo sys.path add absolute version path deep package nest structure want import make difference omit sys.path manipulation quirk run whole thing behavior depend content exist empty import routine export routine.name lib.name get module import package main run main code python warn warn new warn behavior part call double import trap additional detail see issue nick coghlan say next trap exist current version python include sum follow general guideline add package directory directory package python path note violate rule file load loaded part package modification design allow access file package note single level package want extra clean rewrite modify sys.path achieve import put way delete copy add copy solution recommend useful situation module generate @brenbarn answer say take understand case @brenbarn answer apply help case use familiar example add relative import modulea give try write test script subpackage1 directory import modulex dread error describe op solution move test script level package import package.subpackage1.modulex explanation explain relative import make relative current name test script import modulex directory module name modulex modulex encounter relative import interpreter back package hierarchy top import modulex name modulex package.subpackage1.modulex relative import find name change depend code question run global namespace part import module code run global space name name module run global namespace example type console run module script use yourscriptnamehere.py name become main see lot python code name main use test code run global namespace allow module double script try import console follow lar suggest wrap approach experimental new import library ultraimport give programmer control import allow file system base import relative import script parent package necessary ultraimport work matter run code current work directory ultraimport make import unambiguous need change sys.path need try block relative import absolute write dir directory somefile.py caller ultraimport foo.py live directory caveat import script contain relative import ultraimport builtin preprocessor rewrite subsequent relative import ultraimport continue work limited original python import ambiguous much similar problem want change python module search path need load module script spite script import relative brenbarn explain use follow hack rely imp module deprecate version drop favour importlib possible importlib know hack work example access member modulex subpackage1 script reside subpackage2 folder clean approach seem modify sys.path use loading module mention federico relative import use module name attribute determine module position package hierarchy module name contain package information set main relative import resolve module top level module regardless module locate file system write little python package pypi help viewer question package act workaround wish able run python file contain import contain upper level package package project import file directory https://pypi.org/project/import-anywhere/ case see valueerror attempt relative import top level package pull hair solution follow need step level high file hierarchy import bar.py interpreter start dir result error import process go current directory import bar.py interpreter start succeed unit test python3 discover work dir/ dir package/.
check directory exist use directory use os.path.exist file directory use pathlib python introduce pathlib module standard library provide object orient approach handle filesystem path is_dir exist method path object use answer question path string join operator pathlib available python pathlib2 module pypi close os.path.isdir return true pass name directory exist directory return false use os.path.exist check build function give boolean true specify directory available give boolead true specify directory file available check path directory give boolean true path directory use os.path.isdir(path follow code check refer directory code exist exist workplace create toss provide os.stat version python source python ≥ use pathlib.path.mkdir old version python see answer good quality small flaw give take try os.path.exist consider creation note comment ' race condition directory create os.path.exist call fail oserror blanket catch oserror continue foolproof ignore failure create directory due factor insufficient permission full disk option trap oserror examine embed error code see cross platform way get information python oserror second os.path.exist suppose create directory first check remove second one fool depend application danger concurrent operation less danger pose factor file permission developer know particular application develop expected environment choose implementation modern version python improve code bit expose fileexistserror allow keyword argument call exist_ok provide lot capability listdir throw exception input path invalid convenient unipath module relate thing need install use pip similar build pathlib difference treat path string path subclass str function expect stre pass path object need convert string example work great django thing step import module import module run code step use path.exist function path.exist method use find file exist step use use isfile command determine give input file step use use os.path.dir function determine give input directory complete code pathlibpath.exist python pathlib module include python late version handle file system path python check folder exist use object orient technique article refer check directory exist python
try understand thread python look documentation example many example sophisticated ' m trouble understand show task divide multi threading question ask real simplification simple multithreading python map pool code come article blog post check affiliation parallelism line well model day day threading task summarize end lines code multithreaded version description map cool little function key inject parallelism python code unfamiliar map lift functional language lisp function map function sequence map handle iteration sequence apply function store result handy list end implementation parallel version map function provide library multiprocesse little know fantastic step child multiprocessing.dummy multiprocessing.dummy multiprocesse module use thread important distinction use multiple process cpu intensive task thread multiprocessing.dummy replicate api multiprocesse wrapper thread module timing result pass multiple argument work python pass multiple array pass constant array use early version python pass multiple argument workaround thank user136036 helpful comment simple example try alternative url return content respond case threading use simple optimization subthread wait url resolve respond put content queue thread daemon keep process main thread end common main thread start subthread get queue wait do put emit result terminate take subthread run daemon thread proper use thread python connect operation cpython use multiple core run cpu bind task reason thread block process wait queue good way farm work thread collect work result way threadsafe save worrying lock condition event semaphore inter thread coordination communication concept note actual parallelization python use multiprocesse module fork multiple process execute parallel due global interpreter lock python thread provide interleaving fact execute parallel useful interleaving operation look interleave operation parallelize global interpreter lock threading module place start simple example let consider problem sum large range sum subrange parallel note stupid example execute interleave add overhead context switch cpython due global interpreter lock other mention cpython use thread wait due gil want benefit multiple core cpu bind task use multiprocesse note queue require threading simple example imagine show process run answer alex martelli help modify version think useful least update work python python find useful create many thread core execute large number task case call shell program give function f thread pass argument python facility launch parallel task make work easy thread pooling process pooling follow give insight threadpoolexecutor example source processpoolexecutor source see lot example real work perform cpu bind example cpu bind task compute prime number use method result mac os core machine use blaze new concurrent.future module executor approach seem familiar get hand dirty side note keep universe sane forget close pool executor use context awesome perfect example thread monitor asynchronous event look code play code opening ipython session wait minute documentation tutorial use python thread queue module seem overwhelming beginner consider concurrent.futures.threadpoolexecutor module python combine clause list comprehension real charm borrowing post know choose multithreade multiprocesse async asyncio usage python new build library order make concurrency parallelism concurrent.future demonstrate experiment run task method thread pool output note contribute simple example explanation find useful tackle problem answer find information python gil global interpreter lock simple day day example write use multiprocessing.dummy simple benchmark global interpreter lock gil python allow multi thread true sense word multi threading package want multi thread speed code good idea use python construct call global interpreter lock gil gil make sure thread execute time thread acquire gil little work pass gil next thread happen human eye seem thread execute parallel take turn use cpu core gil passing add overhead execution mean want make code run use threading package good idea reason use python threading package want run thing efficiency concern fine convenient running code need wait make lot sense thread library let use extra cpu core multi threading outsource operate system multi process external application call python code example spark hadoop code python code call example python code call c function expensive multi thread stuff matter lot people spend lot time try find bottleneck fancy python multi threaded code learn gil information clear code simple example csv import use threading library inclusion differ different purpose helper function driver function multi thread simple example helpful run understand multi threading working python use lock preventing access thread previous thread finish work use line code tlock threading.boundedsemaphore(value=4 allow number process time keep hold rest thread run finish previous process none previous solution use multiple core gnu linux server administrator right run single core use low level interface spawn multiple process code work python3 version second anwser test non_thread_func cost time time spend thread_func easy understand simple way thread code run thread print number code shorthand loop version code run thread print number result
m problem deal unicode character text fetch different web page different site use beautifulsoup problem error reproducible work page barfs throw unicodeencodeerror try think find work throw unicode relate error section code cause problem show stack trace produce string snippet run suspect page page site encode other unencoded site base uk provide datum mean uk consumption issue relate internalization dealing text write english idea fix problem read python unicode howto error first example use str convert unicode encode text byte use encode string work unicode classic python unicode pain point consider follow good call str(a let see happen dip go good fix error encode byte tell python codec use voil\u00e0 issue call str python use default character encoding try encode byte give case representation unicode character fix problem tell python deal string give use time fine use excellent exposition topic see ned batchelder pycon talk http://nedbatchelder.com/text/unipain.html find elegant work remove symbol continue keep string string follow important notice use ignore option dangerous drop internationalization support code use see convert unicode try help google figured help python use subtle problem cause print fail environment variable set wrong lc_all set c debian discourage set debian wiki locale problem try print unicode character terminal support try instal language pack package fix provide english translation datum update support package include python install different language package necessary depend character try print linux distribution require order make sure default english locale set unicode character handle shell terminal easy install configure write code make sure use right encoding code example problem double check system configuration locale file default locale e.g. value lang lc_ctype shell check locale shell support demonstrate problem solution fresh vm initialize provision vm use vagrant see available ubuntu box print unicode characters trade mark sign instal language pack problem solve try follow command shell find support locale follow command export running script test print special character test ubuntu find case strip character simple work hope help rehash call cop answer situation throw troublesome character string good solution protest voice testing result update original answer write python python note prefer leave indicator unsafe unicode character specify replace ignore call encode error handler suggestion want name function toascii matter preference robust py2/3 version use opted use replace peppered character swap replace fancy unicode quote apostrophes curl leave right simple vertical one part ascii set expand swap add line begin script second line definition python source code encode info pep put code line python file work python least python error enviroment variable enconde error ignore encode work simple helper function find add variable open terminal fire command case issue print statement lot times issue terminal printing help export pythonioencode use follow check documentation say unicodedata.normalize(form unistr return normal form form unicode string unistr valid value form nfkc nfd nfkd unicode standard define various normalization form unicode string base definition canonical equivalence compatibility equivalence unicode several character express various way example character latin capital letter c cedilla express sequence u+0043 latin capital letter u+0327 combine cedilla character normal form normal form c normal form d. normal form nfd know canonical decomposition translate character decompose form normal form nfc apply canonical decomposition compose combine character addition form additional normal form base compatibility equivalence unicode certain character support unify character example u+2160 roman numeral thing u+0049 latin capital letter support unicode compatibility exist character set normal form kd nfkd apply compatibility decomposition replace compatibility character equivalent normal form kc apply compatibility decomposition follow canonical composition unicode string normalize look human reader combine character n’t compare equal solve simple easy late answer error relate terminal encoding support certain character fix python3 use solution work add u string represent string unicode string general case write unsupported encoding string let say data_that_causes_this_error file results.txt work problem google lead add general solution work idea read ned presentation claim understand work edit answer put comment explain appreciate strike error run manage.py migrate django localize fixture source contain code declaration mysql configure utf8 ubuntu appropriate language pack value default locale issue django container use docker miss lang env var set lang restart container run migration fix problem update python try follow python editor set system`s default locale encode format read pep coercing legacy locale base locale recommend solution work live dump non ascii character leave strip throw error many answer @andbdrew example address immediate aspect op question think subtle important aspect ignore matter end try make sense encoding python python management character representation different feel big chunk confusion people read encoding python version aware suggest interested understanding root cause op problem begin read spolsky introduction character representation unicode move batchelder unicode python python try avoid conversion variable cause issue simple tip avoid example solve encode error packet_data datum next line initialize packet_data set character encode running script resolve issue issue try output unicode character stdout print support output different file beautifulsoup documentation solve codec library problem happen django project deploy use apache apache sets environment variable lang = c sysconfig httpd open file comment change flavior setting use lang option wsgidaemonprocess command case able set different lang environment variable different virtualhost work output use unicodedata avoid unicodeencodeerror example
follow dataframe df add column(s assignment move column mean front set first column leave order column untouche easy way reassign dataframe list column rearrange need rearrange col way move last element first position reorder dataframe get list column output produce rearrange drop first function assign column name order want mean column come front pandas edit pandas original answer https://pandas.pydata.org/pandas-docs/stable/user_guide/dsintro.html#column-selection-addition-deletion case want case general form try follow solution solution solution solution solution solution solution solution cpu time user ms sys µs total ms wall time µs solution cpu time user µs sys ns total µs wall time µs solution cpu time user ns sys ms total ms wall time ms solution cpu time user ms sys µs total ms wall time µ solution cpu time user ms sys µs total ms wall time µs solution cpu time user µs sys µs total µs wall time µs need create new list column desire order use df = df[col rearrange column new order use general approach example last column indicate -1 insert first column use approach reorder column desire order present dataframe suppose df column b c. simple way column name long type specify new order list integer position datum generic example seem type column name different order fact column mean make clear relate actual position column name specific case op question main problem approach call code multiple time create different result time need careful question answer deprecate suggest use want specify order want sort solution spell want sort list column name pandas question python list manipulation question many way think answer neat way think neater solution solution similar @joeheffer solution liner remove column mean dataframe attach index column name reorder dataframe column use list name df = df.filter(list_of_col_name run similar question want add settle like method change column order work alternate method base comment seem fast micro benchmark reindex think prefer latter directness function avoid list variable dataset order take argument dataset second column datum set want bring front case datum set call frame variable a1 a2 b1 b2 total date bring total front want bring total date front edit useful way use unfamiliar table look variable particular term var1 var2 execute way move exist column modify exist dataframe place follow borrow part aman answer type column name want change set index new location case like move column position want bring column front dataframe know name column generate pivot statement situation bring column front know name let follow column come follow general solution add n column df follow use set unordered collection unique element keep order column untouched use lambda move specific column front flipping shuffle look use reindex use axis hackiest method book straightforward solution work use df.column use simple approach use set particular long list column want handle function number column believe @aman answer know location column know location mean name resort col = cols[:-1 follow good thing like shoresh answer use set functionality remove column know location work purpose keep original column order arbitrary column label get work use indexedset bolton package need add multiple column label general case use follow code hope useful search thread general solution answer generalize enough pandas method little tedious offer simple function move arbitrary number column position use dictionary key column name value position move dataframe large pass true function return order column list use list slice datum example easy way copy header excel use .split('\t specific use case order column name pandas create new column dataframe base exist column default pandas insert new column end want new column insert next exist column derive think function straightforward need specify subset column start end similar top answer alternative use deque rotate method rotate method take last element list insert begin clean.check doc concat set exist column leave base name e.g. output think dmitriy work easy answer option use set_index method follow reset_index note first pop column intend move front dataframe avoid name collision reset index detail see change order dataframe column pandas try make order function reorder move column(s reference order command stata make py file name save directory call function python code example order function make hope reorder column(s order function
series plot subplot make single figure want legend box time want change axis size figure get reduce number way add christian alis navi say use bbox_to_anchor keyword argument place legend axis decrease font size consider decrease font size make thing hard read try play place legend different place let start generic example thing use bbox_to_anchor keyword argument shift legend outside axis boundary make legend horizontal put top figure turn rounded corner simple drop shadow shrink current plot width put legend outside axis figure note use tight_layout leave ax.set_position similar manner shrink plot put horizontal legend bottom look matplotlib legend guide take look plt.figlegend legend position bounding box axis use loc argument plt.legend loc="upp right place legend upper right corner bounding box default extent axis coordinate bound box notation x0 y0 width height = place legend axis bounding box specify tuple x0 y0 axis coordinate leave corner legend versatile approach specify bound box legend place use bbox_to_anchor argument restrict supply x0 y0 part bbox create span box legend expand direction give loc argument e.g. plt.legend(bbox_to_anchor=(1.04 loc="upper leave place legend axis upper leave corner legend position axis coordinate example give interplay different argument mode ncol show detail interpret tuple argument bbox_to_anchor l4 find question mode="expand expand legend bounding box give tuple expand legend see question useful specify bounding box figure coordinate axis coordinate show example l5 bbox_transform argument use put legend low leave corner figure place legend outside axis lead undesired situation figure canvas solution problem adjust subplot parameter adjust subplot parameter axis take less space figure leave space legend use leave space right hand side figure place legend tight layout use plt.tight_layout allow adjust subplot parameter element figure sit tight figure edge take account automatism supply rectangle box whole subplot area include label fit save figure bbox_inche tight argument bbox_inche tight plt.savefig use save figure artist canvas include legend fit save area need figure size adjust adjust subplot parameter adjust subplot position legend fit canvas change figure size find answer create figure exact size padding legend axis comparison case discuss figure legend use legend figure axis matplotlib.figure.figure.legend become useful matplotlib version later special argument need create legend artist different axis figure legend place use loc argument similar place axis reference whole figure outside axis remain adjust subplot overlap legend axis point adjust subplot parameter helpful example legend dedicated subplot axis alternative use bbox_to_anchor place legend dedicated subplot axis lax legend subplot small plot use gridspec_kw={"width_ratios":[4 axis creation hide axis put legend legend handle label obtain real plot l = ax.get_legend_handles_labels supply legend lax subplot lax.legend(h l complete example produce plot similar plot use first axis place legend use bbox_transform legend axis approach obtain legend handle need specify bbox_to_anchor argument call legend plot call result look place legend plot area use loc bbox_to_anchor keyword legend example follow code place legend right plot area info see legend guide short answer use bbox_to_anchor bbox_extra_artist answer use bbox_to_anchor specify location legend box people point answer usual issue legend box crop order prevent legend box crop save figure use parameter bbox_extra_artist bbox_inche ask savefig include cropped element save image fig.savefig('image_output.png bbox_extra_artists=(lgd bbox_inches='tight example change last line add parameter fig.savefig wish matplotlib allow outside location legend box matlab addition excellent answer new version matplotlib pylab determine put legend interfere plot possible place legend datum possible place put legend overlap datum want try answer use put legend plot short answer invoke draggable legend move want long answer prefer place legend toggle draggable mode legend drag want check example new version matplotlib make much easy position legend plot produce example matplotlib version user pass tuple coordinate loc parameter position legend bound box gotcha run plt.tight_layout get matplotlib recompute plot dimension legend visible lead follow plot reference ask find alternative problem make legend semitransparent note place legend plot edge example use python api make ipython notebook ' m team begin want install necessary package create graph allow chance keep legend plot default legend set place plot show alternative placement align edge graph border legend remove border line fit move style legend graph code gui shift legend follow option position legend graph assign value case choose upper right legendstyle = describe documentation use string center leave location matlab import pylab matplotlib see code follow try figlegend possible create legend independent axis object create dummy path make sure format object pass line work start bit code take joe method modify window width fit legend right figure solution work huge legend use extra empty image layout follow example make row bottom plot image offset legend bbox_to_anchor top cut solution similar adding bbox_extra_artist bbox_inche extra artist scope savefig call come generate plot function add addition bound box want write add ahead time figure artist use similar franck dernoncourt answer example matplotlib tutorial find simple example add transparency legend add paste interactive shell get result
setup.py configure use setup.py python file presence indication module package install package distribute distutil standard distribute python module allow install python package enough write pip use setup.py install module avoid call setup.py https://docs.python.org/3/installing/index.html#installing-index help install python package foo machine virtualenv import package foo project i]python prompt similar job pip easy_install use let start definition package folder directory contain init__.py file module valid python file extension distribution package relate package module let say want install package name foo install use command create symlink source directory site package copy thing large package create package tree follow setup.py script instal machine package tree complex case add stuff setup.py make decent long_description use pypi.org readme description package ready upload package other install package use pip install yourpackage point option package name register claim use python packaging suggest twine package uploading purpose package pypi first step build distribution use use twine uploading test.pypi.org pypi.org take minute package appear test.pypi.org satisfied upload package real permanent index pypi.org sign file package bonus reading see sample real project pep setuptool twine use twine setup.py python answer multi platform installer make file ’re familiar command line installation make make install translate python setup.py build python setup.py install package pure python byte compile other contain native code require native compiler gcc cl python interface module swig pyrex download package setup.py root folder install run develop project wonder file useful check python documentation writing setup script setup.py python script ship library program write language purpose correct installation software many package use distutil framework conjuction setup.py http://docs.python.org/distutils/ setup.py use scenario want install python package second want create python package standard python package couple important file setup.py create python package file determine content pkg info egg info folder name version description require installation file parameter read package create tar.gz manifest.in define include package bunch stuff use setup.py bunch command use help setup.py python file take name convention name different procedure script setup.py use install python module server purpose module famous usage setup.py module instal use pip old python version include pip default need instal want install module install pip alternative install module setup.py file achieve python setup.py install install python module root dictionary pip easy_install ect method use pip fail example correct python version desire package available pipperhap maintain download source run python setup.py install perform thing case compile binary require disregard python version -unless error return use setup.py install package source module development wheel file available way install install source build python extension module build converted module ready distribution use distutil setup script build instal use command setup script easy build file configure compile running python setup.py build see link command name setup.py ease use convention take name cython famous use setup.py file include compile extension require setup script user define value allow compile platform dependant execution simple example documentation compile python setup.py build module require setup script cx_freeze convert python script executable allow many command description name icon package include exclude ect run produce distributable application example documentation compile python setup.py build setup.py file script build configure python environment package distribute contain setup script uncommon combine several single setup script notice involve distutil show last example thing remember configure python package script way take name command use building instal download package setup.py open terminal mac linux command prompt window use cd help tab button set path right folder download file setup.py press enter see type python setup.py install press enter do make simple setup.py run main call install function answer mention setup.py put need install package follow section discuss thing many module function allow specify project attribute name project version function allow install function package see webpage example setuptools.setup attribute setuptools.setup enable instal type package package import project list pypi use setuptools.findpackage package find_packages(exclude=["docs","test readme.rst","description.rst package pypi download url use dependency_link dependency_links=["http://peak.telecommunity.com ideal world handle case specific thing instal dependency subprocess command get system instal right state package try avoid function get confusing differ distribution install python package download extract archive run setup.py script feel odd natural point package manager download ruby gem install rails-4.1.1.gem package manager comfortable familiar reliable hand setup.py novel specific package demand faith convention trust setup.py take command other use past regrettable tax mental willpower say workflow secure package manager understand pip run setup.py feel jarring harmony command package manager application grow fond
various string formatting method well situation follow method outcome difference string format run avoid runtime performance penalty try close duplicate question look way format string use put variable ’s value string answer first question seem sophisticated many way annoying thing take variable tuple think follow work name happen throw typeerror guarantee print need ugly .format issue second example give example clean looking use compatibility python answer second question string format happen time operation string format expression evaluate python lazy language evaluate expression call function expression log.debug("some debug info some_info first evaluate string debug info roflcopter active string pass modulo operator afaik result useful point format function use argument function result assume use python log module pass string format argument argument method format avoid format logger log python use f string substitute variable note prefix try python early get syntaxerror see https://docs.python.org/3.6/reference/lexical_analysis.html#f-string pep propose replacement operator new advanced string format python default careful discover issue try replace exist code try encode unicode_string fail look interactive session log string call byte array python3 u unicode string call string python3 give unicode object parameter operator produce unicode string original string unicode function raise unicodeencodeerror work unicode argument fine original string unicode argument string convert string call byte array give well performance format test test code python result python result look python2 difference small fast format thank @chris cogdon sample code edit test python july result much difference guess python improve edit mention python f string comment test follow code python result seem f string slow well format advantage .format see answer take object property keyword argument possible tell discover today old way format string support decimal python module decimal fix point float point arithmetic box example use python output work around consider use format method python = f string format literal new friend simple clean well performance side note take performance hit use new style format logging pass object logging.debug logging.info implement str magic method log module decide emit message object call describe python documentation https://docs.python.org/3/howto/logging-cookbook.html#formatting-style work python well https://docs.python.org/2.6/library/logging.html#using-arbitrary-objects-as-message advantage use technique fact formatting style agnostic allow lazy value function expensive_func provide elegant alternative advice give python docs https://docs.python.org/2.6/library/logging.html#optimization situation help format regex expression example raise indexerror situation use avoid write regex type_name z]{{2 useful regexe use format concatenation format add version use fstring follow give name john smith convert string result mylist = foo bar pass function other format method give example date python comparative output python version = see pep thing nest curly brace work format work example
want import function file directory follow work give error module need package need runnable script idea achieve common layout myothermodule.py main.py work fine run main.py mypackage mymodule.py fail mypackage myothermodule.py due relative import way suppose run verbose mix shebang line bin env python3 simple fix case assume name mymodule unique avoid use relative import use unique package structure complex need include directory contain package directory pythonpath want work box frob pythonpath code first kind pain clue email write certain guido van rossum m -1 propose twiddling main machinery use case seem run script live module directory see antipattern make change mind convince run script package antipattern subjective find useful package contain custom wxpython widget run script source file display contain widget testing purpose pep relative import use module name attribute determine module position package hierarchy module name contain package information set main relative import resolve module top level module regardless module locate file system point pep conflict pep relative import rely name determine current module position package hierarchy main module value name main explicit relative import fail work module package address issue pep introduce top level variable package add new module level attribute pep allow relative import work module execute use switch small amount boilerplate module allow relative import work file execute name attribute present relative import base attribute module name attribute main module specify filename package attribute set none import system encounter explicit relative import module package set set none calculate store correct value name__.rpartition normal module name package initialisation module emphasis mine name main name__.rpartition return empty string empty string literal error description relevant part cpython pyimport_importmodulelevelobject function cpython raise exception unable find package name package interp->module accessible sys.module sys.module dictionary maps module name module load clear parent module absolute import perform relative import note patch issue add block execute code package empty string error message see python new consider directory python package file package begin line code ' m include line make order operation obvious ignore affect execution init__.py contain line empty attempt import relative import aware python interpreter package standalone.py fail run module command line option search sys.path name module execute content main module import stuff set package treat proof concept actual solution suited use real world code pep workaround problem incomplete setting package go need import least precede package module hierarchy number parent directory relative directory script search module import add parent directory nth predecessor current module sys.path remove current file directory sys.path import parent module current module use qualify name set package qualified name perform relative import borrow file solution add subpackage time import package package use follow relative import need precede line boilerplate code make work allow execute filename general solution wrap function find example usage step replace explicit relative import equivalent absolute import install package make importable instance directory structure follow setup.py rest file borrow solution installation allow import package work directory assume naming issue modify use advantage step change work directory project run /path python interpreter setup.py install --user install package site package directory step let verify possible run standalone.py script note decide go route use virtual environment install package isolation installation necessary add boilerplate code script make absolute import work borrow file solution change standalone.py add parent directory package sys.path attempt import package use absolute import replace relative import absolute import standalone.py run problem feel warn try project complex structure side note pep recommend use absolute import state scenario explicit relative import acceptable absolute import recommend readable tend behave least give well error message explicit relative import acceptable alternative absolute import deal complex package layout use absolute import verbose put package init__.py file assume package use regular import package work python run issue hack workaround import else block follow systemerror parent module load perform relative import mean run module package script mix script package avoid possible use wrapper script import package run scripty function top level directory call foo pythonpath module search path package bar directory expect init__.py file script place bar live foo good note script differ module use filename argument python command use python filename shebang line load main module name main work script package context build relative import package project setuptool poetry flit help simplify packaging create console script entrypoint instal project pip create script know import package install package pip install edit place use python path packagename file.py use python path script.py script.py use packagename import fallback use command line switch tell python import module use main file work shebang line script file use python foo.bar foo bar.py find sys.path directory import execute main right package context bar package foo/ file foo bar/__main__.py path sys.path directory extreme circumstance add metadata python use resolve relative import set package file foo bar spam.py importable foo.bar.spam give global package foo.bar global file name set python import require package import mean need find directory zipfile list sys.path several option directory path script.py find path add sys.path execute python path foo.py add path sys.path package project setuptool poetry flit python packaging tool instal package add right place last resort add right directory sys.path package locate script file use file variable script global namespace use object path(__file__).resolve().parent reference directory file live absolute path pycharm user get importerror attempt relative import know parent package add notation silence pycharm parse error pycharm report able find lib.the import function change .lib.thing import function silence error aforementione importerror attempt relative import know parent package ignore pycharm parser wrong code run say obviate problem devise solution repackage package work time add upper directory lib path repackage make relative import work wide range case use intelligent strategy inspect call stack value go half dozen stackoverflow post try figure relative import similar post set suggest hit modulenotfounderror module name my_module_name develop play create run setup.py file set pythonpath realize run code test directory module find module specify path thing start work event try suggestion believe code structure find similar situation try follow export current directory pythonpath want import my_function define /my_folder_where_the_package_live my_package.py respect write code need run python3 main project directory make work example project follow structure run folder perform get importerror attempt relative import know parent package program use file current path import function modify current path dot package name resolve issue hope answer help boilerplate make module relative import package runnable standalone package use module fashion nb use sys.path.append sys.path.insert give hard trace error module name package e.g. my_script my_script.py course relative import high level package hierarchy enough case okay tried avail realize package name short directory init__.py feel elated finding inanity import directory file structure main.py see import import current directory note run use idle make sure terminal navigate directory main.py file run import local folder work see github gist follow method take follow file tree add code top main.py file package import path sys.path module class want example example.py access class relative import try import module module package concept clarify see lot example code book docs article show import module fail reason put simple sentence run code python module mechanism expect code write kind runtime thing module loading depend run code source confusion module module python file import file give file mod.py module run python mod.py module import package package folder include python module(s btw necessary python need package initialization auto load submodule need place blank init__.py directory prove package folder long file import real answer description become clear import module module package give directory run python me.py attempt relative import know parent package me.py run module use relative import solution use import happy_maker import happy_maker solution switch work directory parent folder run python directory include happy happy package me.py happy_maker.py module use relative import want run me.py use mean run module script python idiom structure python idiom main script good practice python get sibling grandparent common need want import sad_maker me.py make happy sad package go directory level sad import sad_maker me.py think good solution create package module info package need worry relative import absolute import none work specify module directory solution module module import encounter lot work django lot functionality perform manage.py script want module runnable script make manage.py directive mock project look important part dj_app dj_app submodule dj_app op bar.py dj_app op foo.py contain item want use project source issue come want dj_app script.py script method test case dj_app invoke run manage.py test set project import run test case manage.py run script note get error try run run complicated situation import end implement hack liner disagree guido hope help project structure modulea import moduleb main import modulea add snippet modulea import moduleb execute solution solution test python3 order use viewdetail userclass viewgroupdetail groupclass define init classess directory ex init step2 import viewdetail ex start.py run similar problem try write python file load module executable script main.py mylib list_util.py mylib args_util.py settle bash python polyglot solution bash version program call python3 mylib.args_util exit python version ignore bash code contain docstre bash version ignore python code use exec stop parse run line mylib args_util.py similar problem need linux service cgi plugin use common constant cooperate natural way place package start plugin parameter final solution similar solution disadvantage prefix constant common function pkg move file import outside directory help extra useful main file make files directory ex tldr append script path system path add follow entry point python script run project pycharma terminal create new experimental import library python ultraimport give programmer control import make unambiguous give well error message import fail allow relative file system base import work matter run code matter current work directory matter run script module change sys.path side effect change import work run code script issue import script subsequent relative import fail ultraimport builtin preprocessor rewrite relative import get error project structure try call throw error fix remove first statement hope help good note cache cause try different thing arrange class new directory relative import start work remove pycache follow import work python packaging import work regular implementation example show use folder structure init__.py add add setup.py add important part need install package else system use python output world test main.py require installation package similar problem solve create symbolic link package work directory -s /my_package my_package import usual import my_package know linux solution python solution valid approach
check version python interpreter run script information available sys.version string sys module human readable processing use sys.hexversion ensure script run minimal version requirement python interpreter add code compare major minor version information add micro (= releaselevel alpha','final tuple note well duck check certain feature workaround bail feature go new release replace other command line note capital v document man python ipython console use platform python_version stdlib sys.hexversion stuff good bet wrap import simple try catch syntax error @heikki point code compatible old version python put top script note depend script old version python target able load script get enough report error workaround run script import script modern code short commandline version exit handy script automate execution major minor micro module sys.version give want pick first number seth say main script check note appear want support old version need check version property sys module need take care use python language feature file available old python version example allow python work old python version match try compatibility old python version write several answer suggest query current python version check version requirement make use follow method fun follow way cpython pypy jython micropython curiosity way modern code write part http://stromberg.dnsalias.org/~strombrg/pythons/ script testing snippet code many version python get feel python feature compatible version python list comprehension scope change single expression output type python terminal see version follow sys.version_info seem return tuple return special class example use tuple work least output python console find use combination sys.version_info.minor seem suffice example check run python check specific version check see run least python check python version python -v python apt cache policy python run whereis python see many version instal verify python version command window run follow command command prompt verify output see folder configuration python version run follow command need simple simple way spyder start new ipython console run exist script version see first output print console window python 3.7.3 default apr check command line single command include major minor micro version releaselevel serial invoke interpreter path use script note f string allow use arbitrary format separator char make greppable word string put bash utility script report important version python numpy pandas sklearn macos xcode clang brew conda anaconda gcc g++ useful logging replicability troubleshootingm bug report answer great insight work linux give command python output python jun gcc red hat linux2 type help copyright credit license information window go command prompt type command get python version attempt use os.popen read variable
refer null object python python null object singleton none check none use identity operator null python none state accurate way test give none value use identity operator test variable refer object none sole instance class nonetype attempt instantiate class return object make none singleton newcomer python see error message mention nonetype wonder personal opinion message mention none name see none leave little room ambiguity see typeerror message mention nonetype know none use way none build constant start python available use module class function nonetype contrast need get reference query none class check none uniqueness python identity function return unique number assign object object variable point fact object old version python possible reassign none class attribute confine function safe assume none reference custom none write code tempt test noneness test falsehood need understand implication good idea explicit equivalent expression value==none fact apply value none expect common case outcome eq method open door voids guarantee accuracy overridden class provide special behavior consider class try none work work empty string follow test fact evaluate none falsey meaning cast boolean return false apply operator return true note property unique none addition false property share empty list tuple set dict string object class implement bool magic method return false testing variable follow way aware include exclude test mean call init_value value set none mean value set empty string empty list trigger initialization say mindful case python explicit well implicit none special status python favorite baseline value many algorithm treat exceptional value scenario use flag signal condition require special handling set default value assign none keyword argument function test return default try get object attribute test special default dictionary get method return none try access exist key try access use subscript notation keyerror raise attempt pop non exist item suppress default value set none describe use none apply consider valid value signal special situation matter know none come use signal part datum query object attribute getattr(some_obj attribute_name none get none tell attribute try access set none absent object situation access key dictionary some_dict.get('some_key know some_dict['some_key miss set none need information usual way attempt access attribute key try construct dict example show handle object dictionary case function thing use double asterisks keyword argument end find code litter try pattern differentiate none flag none datum use test value pattern value fall set valid value insert part datum data structure use control test special condition boundarie state value call sentinel use way none use signal trivial create sentinel python undefined object unique much interest program excellent replacement none flag caveat apply code function dict object mention early custom sentinel come caveat keyword none python protect undefined time module define careful expose use next instance return object singleton make call time get different object usage sentinel idiosyncratic sentinel specific library use scope limit library internal leak external code become aware purpose extend supplement library api call null language none instance object check equivalence none identity comparison none want python represent absence value use none value types.nonetype.none object len = string regard difference = testing object identity use = sufficient operation define object identity operation correct use sure speed difference look answer result true none thing float('nan use pandas isnull pandas reason work float('nan float('nan use f string solve simple function tackle empty element python code test output truth value test none test false simple expression suffice null special object type check object class nonetype information available python docs
know useful feature python programming language case think come true compare true true happen see last example translate x*10 less typing term evaluate python regex parse tree debug regex regular expression great feature python debug pain easy get regex python print regex parse tree pass undocumented experimental hide flag re.compile understand syntax spot error see forgot escape course combine flag want comment regexes enumerate wrap iterable enumerate yield item index example reference create generator object write get generator assign x. mean advantage need intermediate storage need case lead significant speed append many statement end generator replicate nest loop iter take callable argument instance iter(callable until_value function call callable yield result until_value return careful mutable default argument use sentinel value denote give replace mutable like default send value generator function example function use whitespace denote scope use c style issue step argument slice operator example special case x[::-1 useful idiom reverse decorator decorator allow wrap function method function add functionality modify argument result write decorator line function definition begin sign example show print_args decorator print decorate function argument call syntax see http://docs.python.org/ref/for.html block execute end loop call code emulate follow dict special method miss invoke miss item dict subclass collection call defaultdict much call function argument exist item recommend convert dict regular dict pass function expect subclass lot code use d[a_key catch keyerror check item exist add new item dict place value swap right hand side assignment expression create new tuple leave hand side assignment unpack unreference tuple name b. assignment new tuple unreference marked garbage collection value bind b swap note python tutorial section data structure note multiple assignment combination tuple packing sequence unpack readable regular expression python split regular expression multiple line name match insert comment example verbose syntax dive python example naming match regular expression howto write regex use thank stre literal concatenation function argument unpack unpack list dictionary function argument use example useful shortcut list tuple dict use container rot13 valid encoding source code use right code declaration top code file useful thing nice know edit fix name new type newtype exact thing class statement edit adjust title describe feature context manager statement introduce pep context manager object act run time context suite statement feature make use new keyword introduce available python future directive python include python available default use statement lot think useful construct quick demo happen scene statement call special enter exit method file object exception detail pass exit exception raise statement body allow exception handling happen particular case guarantee file close execution fall scope suite occur exception throw way abstract common exception handle code common use case include lock thread database transaction dictionary get method d['key key get exception d.get('key get none key add second argument get item none eg d.get('key great thing add number sum[value sum.get(value magic whole bunch core python feature use dotted access look member eg x.y python look member instance dictionary find look class dictionary find class dictionary object implement descriptor protocol return python execute descriptor class implement set delete method implement read version property use descriptor use build property descriptor use python implement property bind method static method class method slot thing understanding make easy see lot thing look python quirk way raymond hettinger excellent tutorial well job describe conditional assignment sound assign assign note paren necessary readability chain complicate certain point go little far note else expression example func1 call func2 case correspond function call argument arg2 follow valid class1 class2 class example extract python documentation -formatting take dictionary apply i/%s validation local dictionary pass dict -substition local variable think frown simplifie thing new style format add python module 3rd party one people seem use pythonpath environment variable add symlink directory site package directory way use files official python doc explanation convenient way modify python search path add path configuration file directory python path directory path configuration file extension line contain single path append sys.path new path append sys.path module add directory override standard module mean use mechanism instal fix version standard module exception clause use clause add additional code try clause avoid catch exception n’t raise code protect try statement see raise exception raise statement argument error handler tell python raise exception original traceback allow say mean catch sorry sorry wish print store fiddle original traceback get sys.exc_info print python do traceback module main message cypher zen python tim peters beautiful ugly explicit well implicit simple well complex complex complicated nest sparse dense readability count special case special enough break rule practicality beat purity error pass silence face ambiguity refuse temptation guess --obvious way way obvious dutch right implementation explain bad idea implementation easy explain good idea namespace honk great idea let interactive interpreter tab completion set pythonstartup environment variable nest list comprehension generator expression replace huge chunk nest loop code operator overloading set builtin detail standard library reference set type negative round round function round float number give precision decimal digit precision negative note return float str use example float point math inexact second example print see decimal module multiply boolean thing ' m web development print html parameter see code language python multiply boolean expect multiplication coerce boolean integer false true python multiply string int repeat string time python advanced slicing operation know syntax element ellipsis useful ellipsis support tuple involve fact call function time match regular expression handy sample replace fred tuple unpack python python use syntax identical optional argument function definition tuple unpack feature know powerful allow unknown number element middle list multi line string approach use backslashe use triple problem indent look poor code try indent print white space put third solution find divide string line surround parenthesis note comma line tuple account trail lead white space string need work placeholder way name name answer move question request many people know third argument build pow function allow calculate xy modulo z comparison z give result minute machine value transpose array zip enumerate cover answer find hide feature enumerate think deserve post comment python specify start index enumerate second argument place find useful enumerate entry symmetric matrix matrix symmetric save time iterate upper triangle case use enumerate different start index inner loop keep track row column index enough behaviour enumerate document help(enumerate online documentation use property make class interface strict python learn property work refer descriptor many people know dir function great way figure object interpreter example want see list string method want information particular method call help set frozenset overlook python builtin set frozenset useful list want unique use set get course get number unique list find list subset list use set().issubset python use curly brace create set set comprehension detail build base64 zlib rot13 codecs strings encode decode method use convert str unicode vice versa s.encode('utf8 handy builtin codecs compression decompression zlib bz2 available explicit import encode decode base64 course rot13 interpreter interpreter standard library code module let include read eval print loop program run whole nested interpreter copy example useful situation accept script input user query state vm real time turbogear use great effect webconsole query state live web app hide feature partial useful late evaluation function bind many parameter initial call partial want call remain parameter example bind begin end args range call second time step arg see documentation debug complex datum structure pprint module come handy quote docs python goto implement external pure python module dict constructor accept keyword argument sequence multiplication reflect operand get result reflect swap operand work evaluate expression interpreter call evaluate expression interpreter call num.___mul___(s call return notimplemented interpreter call reflect operation s.___rmul___(num operand different type see http://docs.python.org/reference/datamodel.html#object.rmul getter function module operator function itemgetter module operator use generate fast access function use sort search object dictionary chapter python library docs interleaving list comprehension realize learned haskell tuple unpack function argument python python allow antigravity module xkcd python interpreter know favorite feature python python sort function sort tuple use familiar lexicographical order useful want sort list person age name reference list comprehension build symbol example follow function unique ifie list element change order referencing list comprehension unpack syntax upgrade recent version see example simplicity love python see lot pythonic idiom metaclasse course metaclass python love different quote cool escape regular expression avoid horrible backslash salad use raw string generator think lot begin python developer pass generator grasp get sense power read david m. beazley pycon presentation generator available realize useful essential presentation illuminate new way programming recommend deep understanding generator implicit concatenation useful want make long text fit several line script use interactive shell contain value last print item textwrap.dedent utility function python come handy testing multiline string return equal expect output break indentation unittest lambda function use quick transformation value use wrap value function accept usual args kwargs syntax use keyword argument assignment want build range function depend parameter lead closure refer object value behaviour avoid turn lambda expression function depend argument keyword parameter store current value bind function call alter mod work negative number -1 -1 language javascript make wraparound windows clean first class function hide feature fact function first class object great pass variable ternary operator add use value want work consider false difference assign delete slice note assign extended slice s[start stop step assign length slice hide function attribute much python function accept tuple seem example want test variable number pass tuple look clean nice treatment infinite recursion dictionary reverse use negative step hide useful use create string join function ability create list string comma mess replace program feature useful post follow wget filename run old version python specify port http.server omit port url root server side multiple reference iterator create multiple reference iterator use list multiplication use group iterable chunk example example documentation python dictionary set comprehension support python understand kind unicode digits ascii kind slot nice way save memory hard get dict value object imagine follow object object attribute create instance build dict way work point subclasse new slot add python implement reduce_ex help copy module abuse get dict value itertools module overlook follow example use itertools.chain flatten list see http://docs.python.org/library/itertools.html#recipes application manipulate module cache make module available unavailable wish work module available extent module import last line show change sys.module affect future import statement one affect module important make change give chance try import module import none special value sys.module use negative cache indicate module find first time point look value result import operation module object use replace module object behave want delete entry sys.module cause next import normal search module import ask object module look module property useful example experiment command line import lot thing line ask module come look file property useful debug path issue builtin favorite map reduce filter powerful word ipython tab introspection pretty printing debug history management pylab worth time learn guess integer base build dictionary set length-2 sequence handy list value list array useful extent modify value return descriptor subclass do super store run python hide feature -i option execute script allow continue interactive mode slight misfeature python normal fast way join list string create enum python create enumeration enum integer value object data model override operator language class see page complete list example override operator override mul add object override thing rmul handle attribute access overridden handle arbitrary b use getattr include use call create slice syntax complicate different standard syntax use list numpy good example power array use combination use slice object handle happen many keyword language include del import handle happen many build function call object standard int str go len reverse abs argument pow modular exponentiation re.scanner class http://code.activestate.com/recipes/457664-hidden-scanner-functionality-in-re-module/ unpack function parameter execute print reverse builtin make iterate clean many case quick example produce reverse work arbitrary iterator line file generator expression zen python change function label run time string escape unicode escape encoding let say stre outer source contain \n transform new line tab decode string use string escape encoding problem normal string unicode literal \u01245 make work decode string use unicode escape encode unzip un need python blogge python unzip function go zip unzip straight calculate reflection explicit unzip
assert mean use assert statement exist programming language main use help detect problem early program cause operation fail type error python example go several layer code raise exception catch early work documentation developer read code see assert say condition hold tell program test condition trigger error condition false python equivalent try python shell assertion include optional message disable running interpreter print message assertion fail use parenthesis call assert function statement assert(condition message run assert condition message tuple first parameter disable run python optimize mode debug false assert statement ignore pass flag see relevant documentation watch parenthese point answer python assert statement analogy print extrapolate assert raise wrong correct reason work bool false houston get problem evaluate true statement assert(false redundant parenthese false evaluate content assert(false parenthese tuple non empty tuple evaluate true boolean context answer note assert similar throw exception give condition true important difference assert statement ignore compile code optimization option documentation say assert expression describe equivalent useful want test code release optimize version happy none assertion case fail optimization debug variable become false condition stop get evaluate feature catch rely realize disappear goal assertion python inform developer unrecoverable error program assertion intend signal expect error condition file find user take corrective action try way look say assertion internal self check code work declare condition impossible code condition n’t hold mean bug program program bug free condition occur occur program crash assertion error tell impossible condition trigger make much easy track fix bug programs summary tutorial python assertion write python assert statement debug aid mechanism handle run time error goal use assertion let developer find likely root cause bug assertion error raise bug program other give link documentation try follow interactive shell first statement raise exception first hint assert useful check condition true give position code begin precondition end function postcondition assert tie programming contract useful engineering practice http://en.wikipedia.org/wiki/design_by_contract doc assert statement convenient way insert debug assertion program read http://docs.python.org/release/2.5.2/ref/assert.html assert statement form simple form assert expression equivalent extended form assert expression1 expression2 equivalent assertion systematic way check internal state program programmer expect goal catch bug see example simple example save file let say b.py result python b.py summarize c2 wiki assertion boolean expression specific point program true bug program use assert statement document understand code particular program point example document assumption guarantee input precondition program state invariant outputs postcondition assertion fail alert successor understand program wrong write contain bug information john regehr wonderful blog post use assertion apply python assert statement assert statement exist programming language detect problem early program cause side effect operation expect true condition tell program test condition trigger error false python assert expression equivalent use extend expression pass optional message try python interpreter caveat see use deem toggle assert statement aim use assert occasions program verifie condition return value stop program take alternative way bypass error notice assert statement use condition use parenthesis englobe obvious advice example run assert condition message represent tuple first parameter happen cause non empty tuple python true problem example wonder regard use assert statement take example use real life program tend control parameter enter user case math non positive coefficient constant certain equation simple example boolean implementation utmost importance rely assert statement execute data processing datum validation statement turn python initialization -oo flag meaning value default pythonoptimize environment variable value assert disabled bytecode file generate use extension set true debug set false value disable stuff docstring disabled use assert statement validate sort expect datum dangerous imply security issue need validate permission raise autherror preconditional effective assert use programmer library module user interact statement assert true program continue statement assert false program give error simple assert mean use great answer second part question many year practical experience understand purpose assert other explain assert use super brief use use parenthesis assert keyword function good explanation use assert give http://wiki.c2.com/?whatareassertion point assert declare invariants code invariant condition violate bug code think executable documentation connect object orient programming encapsulate code world plain english use assert comment code developer well comment comment check debug mode program expect work remove use wrong fact python ignore assert turn optimization python rely particular use assert validate user input raise exception nice example tie let assume want special number class code represent positive integer call positiveint want many function use positive integer parameter use positiveint code check function input valid guarantee positiveint crude implementation look see use raise input validation assert end function seem superfluous trivial example imagine function bit complex obvious validate input assert end make sure bug validation code detect make intend validation code clear programmer simple comment summary use assert comment use cheap become performance problem user turn release python pycharm use assert isinstance declare object type let access method attribute parent object code auto complete example let say self.object1.object2 myclass object know reserve function python type help(enter_keyword make sure enter reserve keyword enter string python assert debug aid test condition internal self check code assert make debug easy code get impossible edge case check impossible case let say function calculate price item discount discounted_price great actual price case condition violate assert raise assertion error help developer identify impossible happen hope help short explanation relate tutorial https://www.tutorialspoint.com/python/assertions_in_python.htm write answer assert statement use check state program give point repeat say associated message parenthese option debug constant check first hand information focus question use assert use assert assert statement useful debug program discourage check user input use follow rule thumb keep assertion detect happen situation user input incorrect password short happen case diameter circle large radius happen case interesting mind use assert inspire programming contract describe b. meyer object orient software construction https://www.eiffel.org/doc/eiffel/object-oriented_software_construction%2c_2nd_edition implement eiffel programming language https://en.wikipedia.org/wiki/eiffel_(programming_language emulate programming contract use assert statement interesting keep intent example imagine write head function head function haskell http://www.zvon.org/other/haskell/outputprelude/head_f.html specification give list empty return first item list look follow implementation write return xs[0 xs none point list empty function result result correct implementation hope correct differ try take head item empty list implementation correct pass empty list function specification incorrect call call happen function raise exception return special value important rely behavior xs empty work crash program avoid surprise know pass unexpected argument function word know observable behavior reliable depend implementation specification course read specification programmer read doc imagine way insert specification code follow effect violate specification pass empty list head get warning great help write correct compliant specification program assert enter scene note head1 throw assertionerror indexerror important assertionerror runtime error signal violation specification want warning get error disable check use option risk crash expensive hope imagine program embed spaceship travel black hole disable assertion hope program robust enough crash possible example precondition use assert check postcondition return value state invariant state class note checking postcondition invariant assert cumbersome sophisticated eiffel improve overall quality program summarize assert statement convenient way detect happen situation violation specification pass empty list head first class happen situation assert statement use detect unexpected situation privilegied way ensure specification fulfil insert assert statement code represent specification hope improve quality program incorrect argument incorrect return value incorrect states class report assertion statement state fact program syntax assert condition assert condition>,<error message condition expression suppose true condition false assert statement halt program throw error message say assertionerror assertion expression want program assert condition use assert error message output input input assert condition>,<error message use assert error message output input input key point assert keyword python raise assertionerror code follow assert keyword false continue happen example output equal b. useful want raise exception code example useless remember use debug purpose track bugs format assert expression[,arguments assert encounter statement python evaluate expression.if statement true exception raised(assertionerror assertion fail python use argumentexpression argument assertionerror assertionerror exception catch handle exception use try statement handle terminate program produce traceback example code execute produce follow result use ensure parameter pass function call
sort dictionary key example input desire output note python see answer standard python dictionary unordere python sort key value pair able store dict way preserve order easy way use ordereddict remember order element insert mind way print work expect python user need use .item .iteritem dictionary order item want print order example python give python source http://www.saltycrane.com/blog/2007/09/how-to-sort-python-dictionary-by-keys/ cpython pypy python high do python collection library documentation number python module provide dictionary implementation maintain key sort order consider sortedcontainer module pure python fast c implementation performance comparison popular option benchmarke use order dict inadequate solution add remove key value pair iterate sorteddict type support index location lookup deletion possible build dict type output python dictionary unordere python cpython implementation python dictionary keep insertion order python become language feature changelog python https://docs.python.org/3.6/whatsnew/3.6.html#whatsnew36-compactdict order preserve aspect new implementation consider implementation detail rely change future desire new dict implementation language release change language spec mandate order preserve semantic current future python implementation help preserve backward compatibility old version language random iteration order effect python document python https://docs.python.org/3.7/tutorial/datastructures.html#dictionarie perform list(d dictionary return list key use dictionary insertion order want sorted use sorted(d previous version sort dict python want nest dict include sub dict other mention dictionary unordere issue display dictionary order fashion override str method dictionary subclass use dictionary class builtin dict eg note change key store order come iterate display print python console find way upd sort nested object thank @danielf python dictionary unordere sutable print assign str easy way python give plenty answer showcase popular way python dictionary thought add obvious way come google look non standard idea sample dictionary = c sort intend order ascend descend order conditional sort use method combine lamdas thread full enough good example example edge case oddity check article sort dictionary python create new dictionary sort current dictionary key question dictionary create new dictionary d1 sort use lambda function sort base key d. simple way find dictionary create new base sorted key value item try want dict retrieve item use associate method use sorted function create new dictionary code use dictionary comprehension find simplest solution sort dict key use pprint use pprint return sort dict easy way dictionary accord question solution c name dictionary program give follow output want example give bill john lucy peter give output:[18 give output change key value item print generate want correct way show distinct behavior different dictionary learn perfect way suggest tim response query sharing performance suggest solution see grant jenk solution think easy thing dict key save sort key value pair new dict make clear come single line dict sort hope helpful python dict un order problem common use case lookup simple way want create collections.ordereddict insert element sort order iterate other suggest simplest way iterate sorted keys examples- print value sort key get list value sort key function dictionary key value dictionary dictionary sort key run cpython great simple change use dict ordereddict make simplest solution get list dict key sorted order iterate dict example follow output desende order way question formulate answer answer consider thing do take acount decade decade computer science come total suprise answer grantj user suggest usage sort associative container sortedcontainer sort element base key insertion point avoid massive performance impact call minimum o(n*log(n n number element apply solution suggest take account solution call time colletion need access sorted modified add remove element guy make thing complicated simple output time comparison method show identical use pandas demo see docs documentation whole pandas suggestion allow dict keep dict sorted add item need add item future build dict scratch go second data structure list list key bisect package insort function allow insert sorted list sort list populate dict iterate dict iterate list access key order fashion worrying representation dict structure make sort know key type type support less python lt use key lambda understand liner
look php print_r function debug script see state object question want var mix pprint mix different thing use dir var inspect module get interested use builtin example use object print dictionary fancy pretty printing available interactive debugg command many 3rd party function add thing exception handle national special character printing recurse nest object accord author preference boil dir mention give attribute name want value try dict output upvoted answer exclude kind attribute accept answer show get attribute include method part non public api good complete builtin function short corollary write calculate property calculate data descriptor part public api want observe application top vote answer class lot different kind data member print var return dict object copy modify dict return var modify dict object return bad quux property set namespace apply advice accept answer other see dir return name associate object inspect.getmember mention comment flaw return name value teach student create function provide public api object extend provide copy semantic namespace object need exclude slot assign take request current property need exclude calculate property become expensive interpret current calculate show property quux know property expensive want alter logic include want exclude custom datum descriptor need customize function make sense build function know want provide functionality need create build function appropriate situation use dir function useful feature help print current state object class define str repr method python documentation call repr build function string conversion reverse quote compute official string representation object possible look valid python expression use recreate object value give appropriate environment possible string form useful description return return value stre object class define repr str repr use informal string representation instance class require use debug important representation information rich unambiguous call str build function print statement compute informal string representation object differ repr valid python expression convenient concise representation use return value stre object worth check python equivalent perl data::dumper recommendation https://gist.github.com/1071857 note perl module call data::dumper translate object data perl source code nb translate code source want object method function output use persistence common purpose debug number thing standard python pprint fail achieve particular stop descend see instance object give internal hex pointer object errr pointer whole lot use way great object orient paradigm tool box design work object perl data::dumper allow control deep want go detect circular link structure important process easy achieve perl object particular magic blessing define process recommend use help(your_object help(dir help(var case use dict dir get info want happen need detail standard library include inspect module allow get impressive amount detail real nuggest info include look attribute value object dir dict sufficient look dig current state arbitrary object keep mind python object inspect worthy consideration use debug want recursive dump accept answer unsatisfying require class good str implementation case work well try ppretty output metaprogramme example dump object magic argument gnosis util outdated work print object content json yaml indent format simple want see value complex datum structure my_var variable interest use pprint(vars(my_var get answer help method look long way particular case code inspect dictionary dictionary worth point custom class end unhelpful someobject.exampleclas object 0x7f739267f400 kind output case implement str method try solution find instance get object type output var want well solution cover case try use var throw exception example typeerror var argument dict attribute find simple work scenario third party librarie work matter varible define class init pprint contain pretty printer produce pleasing representation data structure formatter produce representation data structure parse interpreter easy human read output keep single line possible indent split multiple line need print debug info log unable use pprint break get thing dump myobject try var dir fail look var work object dict exceptions.typeerror var argument dict attribute dir look list field name give value object structure think json.dump work object default = datetime field object standard json serializer overcome datetime.datetime json serializable python try beeprint help print object variable beautiful output struggle follow code print attribute obj value many good answer liner give attribute well value config object question list separate answer want print relevant value object excl main use loop print find convenient answer var seem show attribute object dir seem show attribute parent class(es see inherit attribute str doc dict try flask debug toolbar https://pypi.python.org/pypi/flask-debugtoolbar answer modify get attribute object helpful add function temporary remove many change exist source code project modifie pprint show object field value ignore object repr member function recurse nested object work see https://github.com/mosermichael/pprintex install pip pip install printex test performance believe fast method enumerate property attribute key object python list work regular python object dict object use slot slot work dictionary object example utilize dir(obj enumerate method property object take performance hit need property work python object build type key value attribute method variable value attribute
create dataframe list list convert column specific type case want convert column float way specify type convert dataframe create dataframe first loop column change type column like dynamic way hundred column want specify column type guarantee column contain value type main option convert type pandas to_numeric provide functionality convert non numeric type e.g. string suitable numeric type see to_datetime to_timedelta astype convert type type sensible allow convert categorial type useful infer_object utility method convert object column hold python object pandas type possible convert_dtype convert dataframe column possible dtype support pd.na pandas object indicate missing value read detailed explanation usage method good way convert column dataframe numeric value use pandas.to_numeric function try change non numeric object string integer float point number appropriate input to_numeric series single column dataframe see new series return remember assign output variable column name continue use convert multiple column dataframe apply method long value convert need value convert numeric type to_numeric take error keyword argument allow force non numeric value nan ignore column contain value example use series string object dtype default behaviour raise convert value case cope string pandas fail want pandas consider miss bad numeric value coerce invalid value nan follow use error keyword argument third option error ignore operation invalid value encounter last option useful convert entire dataframe know column convert numeric type case write function apply column dataframe column convert numeric type convert column contain non digit string date leave alone default conversion to_numeric give int64 float64 dtype integer width native platform want want save memory use compact dtype float32 int8 to_numeric give option downcast integer sign unsigned float example simple series integer type downcaste integer use small possible integer hold value downcaste float pick small normal float type astype method enable explicit dtype want dataframe series versatile try go type pick type use numpy dtype np.int16 python type e.g. bool pandas specific type categorical dtype call method object want convert astype try convert notice say try astype know convert value series dataframe raise error example nan inf value get error try convert integer pandas error suppress pass errors='ignore original object return untouched astype powerful convert value example small integer convert unsigned bit type save memory conversion work wrap round become try downcast use pd.to_numeric(s downcast='unsigne help prevent error version pandas introduce method infer_object convert column dataframe object datatype specific type soft conversion example dataframe column object type one hold actual integer hold string represent integer use infer_object change type column int64 column b leave alone value string integer want force column integer type use df.astype(int version include method convert_dtypes convert series dataframe column possible dtype support pd.na miss value possible mean type suited hold value example pandas integer type value integer miss value object column python integer object convert int64 column numpy int32 value become pandas dtype int32 object dataframe df follow result column hold integer value convert int64 type capable holding miss value int64 column b contain string object change pandas string dtype default method infer type object value column change pass infer_object false column remain object column pandas know describe integer column run infer_dtype infer dtype integer convert column b convert string dtype recognise hold string value use code change datatype column place datum type give datatype want str float int need specify specific column want explicit use pandas.dataframe.astype use original question provide column name chart summarise important conversion pandas conversion string trivial show figure note conversion context refer convert text datum actual datum type hard conversion infer appropriate datum type datum object column soft conversion illustrate difference take look function take argument dataframe list column coerce data column number example e.g change column type string df dataframe create dataframe different datum type column append result create populate float point variable 1st column string data type desire 2nd column give initial datatype temp float64 use code change datatype int64 df.info see show change datatype column temp happy coding start pandas pandas.dataframe.convert_dtype control type convert case various object column dataframe object column int column value letter represent unit output good way convert numeric column use regular expression replace unit astype(float change column data type float output dataset clean able numeric operation dataframe regex astype want collect unit paste header cholesterol_mg use code way specify type convert dataframe answer convert dtype create dataframe specify type creation use dataframe.from_record read_csv(dtype= depend input format latter necessary avoid memory error big datum create dataframe structure array desire column type output read data file use dtype parameter read_csv set column type load time example read row rate bit integer genre categorical case halve memory usage load way avoid memory error big datum possible change dtype load enough memory load default type datum first place think problem slight difference make problem solve other look question worth check format input list case number float string question processing list create dataframe lose type become stre create datum frame numpy array give datum frame question entry column consider string give datum frame column correct format issue find solution satisfy solution convert float str remove way case apply first column
make multi line comment language block comment symbol use triple quote string docstre first thing class function module ignore make sure indent lead avoid indentationerror guido van rossum creator python tweet pro tip python style guide pep8 favor use consecutive single line comment find many project text editor shortcut python multiline string comment syntax sense use docstring multiline string generate bytecode -prepende comment effect act comment hand say behavior documented official documentation true comment syntax say guarantee part language specification case text editor able comment select region place front line switch text editor programming python certain text editing feature painful experience find right editor know use make big difference python programming experience perceive text editor able comment select region able shift block code leave place cursor current indentation level press enter code fold useful protect link decay content guido van rossum tweet @bsucsclub python tip use multi line string multi line comment use docstring generate code accept answer use triple quote string docstre first thing class function module ignore true comment quote string parse valid appear source code try run code get python python way multi line comment ignore parser python multiline comment case class tab example afaik python block comment comment individual line use character use notepad++ shortcut block comment ' m sure other gvim emacs similar feature think multiline string process python ide shortkey comment multiple line code feature multi line comment way comment single line code many answer comment solution seem work python take line enclose regular string interpreter ignore comment use check official documentation put comment middle script python linter recognize fold mess comment part standard recommendation well use use vim plugin commentary.vim comment long line comment press vjgcc vj select line code gcc comment n’t want use plugin use search replace replace first character current next line visual studio code universal official multi line comment toggle similar xcode shortcut macos select code block window select code block ctrl+/ stringification use comment safe stick standard prepende line example advise use multi line comment simple example highlight consider unexpected behavior look output multi line string treat comment concatenate stre form single string want comment multiple line accord pep guideline output try run quote input first question quote enclose comment look single line comment multiline comment python work example example write comment line code write comment leave space sign space sign write comment new line write comment leave space kn sign write comment line use quote python single multiline inline comment python start hash character note hash character string literal hash character dial make emergency call hash character use single multiple line comment world enclose text triple double quote support docstre john enclose text triple single quote block comment use pycharm comment uncomment line code use ctrl+/. ctrl+/ comment uncomment current line several select line single line comment django template python script press ctrl+shift+/ select block source code django template surround block comment endcomment tag select line press ctrl fine use thing remember run run entire file accept multiple line code line line run work show error answer find easy way use ide comment function use python comment support use anaconda spyder comment uncomment single multi line code find easy example block comment do text editor go begin first line comment area press ctrl+v enter visual mode use arrow key select line comment press shift+i press shift+3 press esc multiline comment exist python example consist unassigned string validate python syntactical error text editor notepad++ provide shortcuts comment write piece code word ctrl k shortcut notepad++ block comment add front line selection ctrl shift k block uncomment select line want comment use ctrl comment uncomment python code sublime text editor single line use shift comment multiple line code python use single line comment line write proper multi line comment python use multi line string syntax python documentation string docstring feature give programmer easy way add quick note python module function class method mention access docstre class object use follow call dockstring use bonus little bit safe use old version print function guis select text want comment press ctrl pycharm code edit example change shortcut ctrl ctrl shift c. warning hope answer help good luck next time write answer window select text code chunk press ctr want remove comment mac comment read drawback various way come way attempt check box pro con attempt code macro test
check list duplicate return new list duplicate common approach get unique collection item use set set unordered collection distinct object create set iterable pass build set function need real list pass set list function follow example cover try see example result original order maintain mention set unordered collection order lose converting set list arbitrary order create order important use different mechanism common solution rely ordereddict keep order key insertion start python build dictionary guarantee maintain insertion order use python late cpython note create dictionary first create list n’t need preserve order use set give lot operation work check question detail alternative way preserve order remove duplicate note set ordereddict dict solution require item hashable mean immutable deal item hashable list object use slow approach compare item item nest loop python new way remove duplicate iterable keep original order python ordereddict c implementation timing show fast short various approach python python regular dict become order compact feature hold cpython pypy present implementation give new fast way dedupe retain order python regular dict guarantee order implementation fast solution liner list(set(source_list trick set duplicate update order preserve approach line use fact ordereddict remember insertion order key change value particular key update insert true value insert value use set work lot dict ignore value care order set guarantee duplicate make new list retain order first element duplicate l example l newlist check new element appear list add need import solution use pandas numpy return numpy array use function .tolist want list use pandas function unique use numpy function unique note numpy.unique sort value list t2 return sorted want order preserve use answer solution elegant compare other compare numpy.unique allow check nested array unique select axis answer section unique solution graph speed specific solution answer remove duplicate item hashable question imply need hashable item mean offer solution require hashable item collections.counter powerful tool standard library perfect solution counter solution limit hashable key allow unhashable key counter make container class try get object default hash function fail try identity function define eq hash method allow unhashable item solution unhashable object treat hashable hash function use identity unhashable object mean equal object unhashable work suggest override change use hash equivalent mutable type use hash(tuple(my_list my_list list make solution solution keep order item use subclass ordereddict counter name orderedcounter function remd non order sort oremd order sort tell explain non order sort store order item want show speed comparison answer remove duplicate gather function answer calculate speed function put graph use matplotlib.pyplot divide round graph hashable object hash unhashable object order sequence sequence preserve order unordere sequence preserve order term unordere hashable method remove duplicate keep order work unhashable order hashable method keep order item list work unhashable order unhashable method keep order item list work unhashable axis amount second take axis number function apply generate sequence unordere hashable order hashable follow comprehension list(range(x list(range(x range(0 order unhashable list(range(y list(range(y range(x x range(0 note step range take 10x personal opinion thought look little easy read note key legend try guess vital part implementation function function bad good graph speak settle graph zoomed zoom zoomed colleague send accept answer part code codereview today admire elegance answer question happy performance try solution use set reduce lookup time compare efficiency use random sample integer unique result measurement set remove solution result bad ordereddict time original solution late answer care list order use arg expansion set uniqueness remove dupe python3 demo way simple easy output dict list use approach get error care order item unhashable find useful consider list comprehension side effect good solution alternative order preserve approach see use naive comparison o(n^2 time complexity good heavy weight ordereddict set+list combination limited hashable input hash independent o(nlogn solution update add key argument documentation python compatibility want preserve order use external module easy way note method preserve order appearance see come first time appear result get short run work time fromkey function try create new key value exist affect dictionary fromkey create dictionary key value none eliminate duplicate way reason work index method return first index element duplicate element high index refer list.index(x start end return base index list first item value x. raise valueerror item good approach remove duplicate list use set function available python convert set list use set remove duplicate note result unordere issue ' compare various suggestion perfplot turn input array duplicate element method input datum python list numpy array input array large contain unique element set dict np.unique method costant time input datum list numpy array time fast alternative surprising constant time operation code reproduce plot try use set care order much hassle orderddict other pythonic way short way trick well approach order remain preserve reduce variant ordering preserve assume list reduce variant unefficient sophisticated explanation many answer suggest different way batch operation throw original order okay depend need want iterate value order first instance value want remove duplicate fly use generator return generator iterator use anywhere use iterator output want list output use follow function example usage list dupicate use set use unique use set python easy process complicate case python build type let show method general case way line code remove duplicate element list keep sort order get result method special case special case process unhashable line code get result tuple hashable convert datum list tuple code simple remove duplicate list return fast pythonic solution comare other list reply use implementation detail short circuit evaluation allow use list comprehension visited.add(item return none result evaluate false right side result expression time simple way python answer preserve order long simple order preserve answer give duplicate remove preserve order example return list repetiotion preserve order need external import check want remove duplicate place edit return new list use inbuilt set dict.key uniqify counter think convert set easy way remove duplicate pure python function work item value json see answer non hashable value liner n log n standard library answer generator function remove duplicate make set make list print use set guarantee unique element example output follow check python require instal 3rd party module package iteration_utilitie contain function remove duplicate preserve order case want avoid overhead list addition operation use itertools.chain work unhashable item example list list slow item hashable disclosure ' m author iteration_utilitie library use set step1 get different element list step2 get common element list step3 combine list comprehesion remove duplicate care order want different pythonic way suggest use interview time complexity o(n auxiliary space o(n reference lot answer use set give element hashable list downside result algorithm function propose hybrid use set item hashable list one implement generator instance limit number item additional filtering use key argument specify way element unique instance use want filter list string string output different length instance use uniqeness filter work iterable filter uniques hashable make assumption object hashable object equal speak happen uncommon solution follow create dictionary list item key index value print dictionary key remove duplicate use python set dict.fromkey method dict.fromkey method convert list dictionary dictionary contain duplicate value dictionary unique value return dict.fromkey set dictionary contain duplicate value convert list set duplicate remove use set preserve order completeness popular question toolz library offer unique function readable funtion understandable use dict datum structure use builtin funtion well complexity o(n disclamer u get indentation error(if copy paste use code proper indentation pasting python build many function use set remove duplicate inside list example list t2 answer b remove duplicate item place create new list example list big keep shadow copy list order use follow approach iterate skip repeat value useful handle big list low memory consumption evade cost build dict set output go return list object compare length set list save set item list
typeerror str support buffer interface suggest possible method convert string byte method pythonic look doc byte point bytearray bytearray([source encoding error return new array byte bytearray type mutable sequence integer range usual method mutable sequence describe mutable sequence type well method bytes type see bytes byte array method optional source parameter use initialize array different way string give encode error parameter bytearray convert string byte use str.encode integer array size initialize null byte object conform buffer interface read buffer object use initialize bytes array iterable iterable integer range use initial content array argument array size create byte much encode string pythonic allow call constructor type source parameter make sense encode string think some_string.encode(encode pythonic use constructor self document take string encode encoding clear bytes(some_string encode explicit verb use constructor check python source pass unicode string byte use cpython call pyunicode_asencodedstre implementation encode skip level indirection call encode see serdalis comment unicode_string.encode(encode pythonic inverse byte_string.decode(encoding symmetry nice easy thought verify print type refer output good way 3rd first parameter encode default python good way fast default argument result stre code null fast check timing warn time stable repeat run deviation ~2 cent use encode argument python compatible python default character encode ascii answer different problem sequence raw unicode save str variable need able byte literal unicode struct.unpack solution reference scroll standard encoding python specific encoding python memoryview way memoryview sort mishmash byte bytearray struct module several benefit simple example byte array unicode string convert byte array need word byte word caution careful multiple interpretation byte order datum byte intentional bug catch example use utf-16 full list codec see codec registry python
method isiterable solution find call sure fool proof check iter work sequence type fail string python know answer possibility work string iter build check iter method case string getitem method pythonic programming style determine object type inspection method attribute signature explicit relationship type object look duck quack duck duck emphasizing interface specific type design code improve flexibility allow polymorphic substitution duck typing avoid test use type isinstance employ eafp easy ask forgiveness permission style programming collection module provide abstract base class allow ask class instance provide particular functionality example check class iterable getitem use abstract base class need python work new style class iter bit reliable describe documentation check isinstance(obj iterable detect class register iterable iter method detect class iterate getitem method reliable way determine object iterable call shed little bit light interplay iter iter getitem happen curtain armed knowledge able understand good list fact follow quick reminder happen employ loop python follow discussion illustrate fact get iterator object call iter(o follow condition hold true iter method return iterator object iterator object iter python next method b getitem method check instance iterable sequence checking attribute iter enough object implement getitem iter iter(o construct iterator try fetch item integer index start index iterator catch indexerror error raise raise stopiteration general sense way check iterator return iter sane try object implement iter iter function make sure object return iter iterator sanity check object implement getitem iter win object implement iter getitem iter(o call iter want make object iterable implement iter method order follow need understanding happen employ loop python feel free right next section know use item iterable object python call iter(o expect iterator object return value iterator object implement next python method iter method convention iter method iterator return object return self python call next iterator stopiteration raise happen follow demonstration make visible iteration demoiterable point get iterator unreliable check consider follow class call iter instance basiciterable return iterator problem basiciterable implement getitem important note b iter attribute consider instance iterable sequence fluent python luciano ramalho recommend call iter handle potential typeerror accurate way check object iterable quote book python accurate way check object iterable call iter(x handle typeerror exception n’t accurate use isinstance(x abc.iterable iter(x consider legacy getitem method iterable abc point iterate object provide getitem iter iterate instance basiciterable work expect python construct iterator try fetch item index start indexerror raise demo object getitem method return item supply argument getitem__(self item iterator return iter note iterator raise stopiteration return next item indexerror raise item handle loop basiciterable loop work expect example order drive home concept iterator return iter try access item index wrappeddict inherit dict mean instance iter method note call getitem delegate dict.__getitem square bracket notation shorthand point iter check iterator call iter iter(o call object iter make sure return value iter method present iterator mean return object implement next next python iter iter perform sanity check object provide getitem way check item object accessible integer index note construct iterator failiteriterable instance construct iterator failgetitemiterable succeed throw exception call next point iter win straightforward object implement iter getitem iter call iter consider follow class output loop instance point iterable class implement iter ask builtin sequence list implement iter method getitem sufficient iteration instance class delegate call getitem list.__getitem use square bracket notation work fine reason custom iterable implement iter follow python sequence iterable implement getitem fact standard sequence implement iter special handling getitem exist backward compatibility reason go future deprecate write study problem bit base conclusion good approach recommend early general consensus use iter use iter code well purpose start get annoyed object getitem consider iterable valid reason getitem iterable object code work real life example use faker code report try iterate cause attributeerror test faker use insinstance consider faker instance object getitem iterable early answer comment use iter safe old way implement iteration python base getitem isinstance approach detect true old python version base exhaustive testing isinstance work case isinstance work iter userdict use python relevant possible use isinstance(item iterable userdict cover python use type module standard library type relate thing sufficient object return iter implement iteration protocol next method see relevant section documentation python good practice try see check python iterable informal interface python leverage new abc abstract base class infrastructure builtin abcs available collection module desirable work matter convention see register non iterable object iterable raise exception runtime isinstance acquire new meaning check declare type compatibility good way go python hand object satisfy interface need go take follow example object satisfy expect throw typeerror proper abc register check unuseful contrary iter method available python recognize object class expect iterable iterate forget hand need different thing depend input type find abc infrastructure useful run check see duck duck see iterable treat complain try make generator iterate use generator take space iterable seem kind thing determine variable iterable first place good solution find far hasattr(obj contain check object implement operator advantage none solution note find nice solution accord python glossary iterable sequence type list str tuple non sequence type dict file object class define iter getitem method iterable use loop many place sequence need zip map iterable object pass argument build function iter return iterator object course give general code style python base fact easy ask forgiveness permission general expectation use need check test iterable hasattr(object_in_question iter hasattr(object_in_question getitem need check iter method python python generator object getitem method find convenient script define iterable function incorporate alfe suggest simplification test object iterable readable form thecallable function edit numpy instal numpy import iterable numpy implement code pandas build function elude python callable(obj bool iterable(obj bool easy slow answer recommend use try typeerror testing exception consider bad practice language implementation iterable(obj bool grow fond use python sake use lambda extra performance boost python matter use define function def speed lambda note function execute fast object iter test getitem iterable object rely iter special case object fall getitem require object iterable standard affect c object say manner iterable object say string python want example recursive function take string container string situation ask forgiveness lead obfuscode well ask permission many strategy say string use want note say string type bytes bytearray o.p hasattr(x iter approach say string python python matter b u thank @luismasuelli noticing let buggy iter lot way check object iterable easy way respect python duck type catch error python expect object become iterator note think understand concern callable exist check rely duck typing raise attributeerror call define object case iterable checking know answer implement function user give catch exception code implementation part function write ensure isolate iterator creation rest code capture exception distinguish typeerror isiterable func follow code return true object iterable iterable return false example check iter attribute check len attribute implement python builtin iterable include string none iterable object implement obvious reason catch user define iterable implement generator expression iter deal do line add simple expression checking generator fix problem note write = generator throw nameerror refer answer use generatortype type accept answer utdemir make useful checking call len object correct serve quick check common type string tuple float kinda late party ask question think answer know post notice iterable type getitem dict check object iterable try pun intend code use check non iterable object hasattr(myobject,'__trunc quick use check iterable use m sure solution work object background trunc method seams relate numerical type object rounded integer need find object contain trunc iter getitem
equivalent mv src/ python os.rename os.replace shutil.move employ syntax note include file name source destination argument change file rename move note case directory new file create exist windows file name exist exception raise replace file occurrence note comment answer shutil.move call case destination different disk source copy delete source file os.rename rename file command close unix mv command difference os.rename work source destination different disk file disk agnostic python use pathlib class path move file https://docs.python.org/3.4/library/pathlib.html#pathlib.path.rename os.rename need import module character necessary get file move folder call source file name use see folder name fact change shutil move destination source time check source folder sure file create exist move folder file source destination use moment functional hope help turn function accept source destination directory make destination folder exist move file allow filter src file example want move image use pattern default move directory accept answer question rename file file move many file directory work purpose os.rename useless state comment destination explicit file name care return value possible use subprocess.run method work fine work linux window give error mv command base answer describe use subprocess option curious pro con method compare shutil case use subprocess reason seem work incline stick dependent shell running script mv command linux shell bash sh work terminal git bash window terminal change mv alternate command solution enable shell use mv different disk ex c
remove lead trail whitespace string remove whitespace surround string use example note str.strip remove whitespace character include tab newline remove space specify specific character remove argument strip remove space point answer remove lead trail whitespace character \n \f space flexibility use follow detail available docs strip limited whitespace character remove lead trail whitespace mystre want strip do regular expression see thread beginner get head spin come simple shortcut str.strip work remove lead trail space space character use str.replace make sense less error point follow code generalize use str.replace helpful inheriting diff function order remove whitespace cause plenty indentation error run finished code programs pyhton following;obviously python keep tell error(s indentation line fix line get problem program relate typing mistake operator make sure read error python yell first thing check indentation right check see mixed tabs space code remember code look fine interpreter refuse run suspect quick fix bring code idle edit window edit select menu system choose format untabify region mix tab space convert tabs space go fix indentation issue find solution look create custom function try want trim specified number space leave remove lead trail whitespace string python solution remove lead trail whitespace intermediate whitespace need get clear string value multiple whitespace see remove multiple whitespace string(output world location need lead trail whitespace strip find way use method remove surround whitespace note return copy string change underline object string immutable wish remove whitespace trim edge remove much space string string begin end make know replace double space space double space
get current file directory path try want special variable file contain path current file get directory use pathlib module directory script run current work directory directory script run mean current work directory note file underscore note run loaded code file database online resource file set notion current file answer assume common scenario run python script file use path pathlib recommend way python note use jupyter notebook file return expect value path().absolute use python explanation use pathlib modern way work path need string late reason str(path find follow command return full path parent directory python script python script remark explanation link path(file).parent().absolute useful path property output absolute path path python file place absolute path learning\jupitor notebook\jupytornotebooktest2\udacity_scripts\matplotlib seaborn part2 file path learning\jupitor notebook\jupytornotebooktest2\udacity_scripts\matplotlib seaborn part2\data\fuel_econ.csv isfileexist true isadirectory false file extension ipython magic command pwd get present work directory use follow way ipython jupyter notebook pwd use follow make function use run python ii cgi order get current folder output
set dict2 = dict1 edit dict2 original dict1 change python copy object set dict2 = dict1 making refer exact dict object mutate reference keep refer object current state want copy dict rare assign dict2 = dict1 making copy dict1 result dict2 name dict1 copy mutable type dictionary use copy deepcopy copy module dict.copy dict(dict1 generate copy shallow copy want deep copy copy.deepcopy(dict1 require example regard shallow deep copy python copy module doc difference shallow deep copy relevant compound object object contain object list class instance depth easy way remember dict2 = dict1 dict2 refer dict1 dict1 dict2 point location memory normal case work mutable object python work mutable object python careful hard debug use dict2 = dict1 use copy(shallow copy deepcopy method python copy module separate dict2 dict1 correct way see dict1 dict2 different mean point reference different location memory solution work dictionary immutable value correct solution mutable value see apply copy dict1 value mutable change false dict2 dict1 change dict2 change value mutable dict part dict1 apply copy dict shallow copy mean copy immutable value new dict copy mutable value reference ultimate solution deepycopy dict1 create new dict value copy include mutable value see different mean dict2 new dict value dict1 deepcopy need use change mutable value affect original dict use shallow copy deepcopy slow work copy nested value original dict take extra memory python easy way achieve shallow copy use unpackaging operator define pep unpackage dictionary new dictionary assign dict2 confirm dictionary distinct d. deep copy need copy.deepcopy go easy way create copy dict python create copy simple(single level dictionary use dict method generate reference point exist dict use build update method python dictionary create copy nest complex dictionary use build copy module provide generic shallow deep copy operation module present python make new dictionary dictionary comprehension avoid import copy course python compat top method well addition provide solution use integrate dictionary empty dictionary e.g. shallow_copy_of_other_dict other_dict shallow copy apply example pointer difference shallow deep copys assignment statement python copy object create binding target object dict2 = dict1 result bind dict2and object dict1 refer want copy dict use copy module copy module interface difference shallow deep copy relevant compound object object contain object list class instance shallow copy construct new compound object extent possible insert reference object find original deep copy construct new compound object insert copy object find original example python result copy edit construct copy go call dict constructor additional keyword argument confuse come background variable location memory define type assign variable copy datum variable memory location python variable act pointer object assign variable make copy make variable name point object dict1 symbol reference underlie dictionary object assign dict1 dict2 assign reference change key value dict2 symbol change underlie object affect dict1 confusing easy reason immutable value reference make copy possible variable python stuff dict1 str builtin pointer hide platonic object machine set dict1 dict2,you point object memory location analogy dict2 object reference dict1 object reference dict2 check dict1 dict2 true id(dict1 id(dict2 want copy(dict2 dict1 deepcopy(dict2 difference copy deepcopy deepcopy make sure element dict2 point list copy use deepcopy much poor practice write code need opinion dict2 = dict1 copy dictionary give programmer second way dict2 refer dictionary many way copy dict object use follow code dict follow json syntax time fast deepcopy nest dictionay use dict(srcdata srcdata.copy srcdata change second level modify source dictionary option deepcopy use json trick javascript json.parse(json.stringify(obj other explain build dict want python2 create valuedict class copy sure original change refer lvalue modification pattern discuss python clean syntax lvalue modification key observation str int behave value python immutable object hood observe observe special str int dict use much way think many case valuedict make sense run peculiar behavior try deep copy dictionary property class assign variable new copy.deepcopy(my_class.a work modify new modifie my_class.a old my_class.a new copy.deepcopy(old work modify new affect my_class.a happen hope help save hour copying use loop use object dict2 independent copy dict1 modify dict2 affect dict1 work object clean way use json see code create dictionary json.dump json.loads dictionary object separate dict object
exit script die command php detail sys module documentation sys.exit([arg exit python implement raise systemexit exception cleanup action specify clause try statement honor possible intercept exit attempt outer level optional argument arg integer give exit status default type object integer consider successful termination nonzero value consider abnormal termination shell system require range produce undefined result system convention assign specific meaning specific exit code underdeveloped unix program use command line syntax error kind error type object pass none equivalent pass object print result exit code particular sys.exit("some error message quick way exit program error occur exit raise exception exit process call main thread exception intercept note nice way exit point want hard exit use os._exit(*errorcode os specific extent take errorcode window example friendly let interpreter cleanup process die hand kill entire process include run thread sys.exit say docs exit call main thread thread run simple way terminate python script early use build quit function need import library efficient simple example way use exit keep mind sys.exit exit quit os._exit(0 kill python interpreter appear script call script execfile stop execution script see stop execution script call execfile avoid prefer sys.exit friendly code raise exception need exit process inside exception handler catch systemexit function os._exit terminate c level perform normal tear interpreter example hook register atexit module execute find write multithreadde app raise systemexit sys.exit kill run thread hand os._exit exit whole process discuss sys.exit exit call inside thread python example thread kenny cartman cartman suppose kenny call die second recursive call good way reason want cartman die kenny die kenny go os._exit kenny die cartman live pass exit code return os default ' m total novice control program terminate program terminate traceback recent call last file line main file line main sys.exit systemexit edit point program end stop python try incorporate similar code use module sys biopy build stop script print error message user example find succinct throw error practice case necessary kill entire multiprocessor application process follow function work application use main process follow function work case application many alive process last kill main process rest process alive kill external command find solution use pkill cent python window bit sys.exit work several nexte loop declare boolean variable call immediateexit begin program code write start inner nested loop exception write go immediate continuation outer loop execute code write depend complexity statement need repeat section custom message personal debug well number purpose see script exit particular case process csv file want software touch software detect corrupt important exit whole python script detect possible corruption follow gradual sys.exit ing loop manage full code change need proprietory code internal task put end code quit close python script python use raise systemexit("because say
give write line line argument line problem explicit line break check style guide information use parenthesis example write multiple line effect obtain use explicit line break note style guide say use implicit continuation parenthese preferred particular case add parenthese expression wrong way go pep style guide python code prefer way wrap long line use python imply line continuation parenthese bracket brace long line break multiple line wrap expression parenthese use preference use backslash line continuation backslashe appropriate time example long multiple statement use implicit continuation backslashe acceptable case assert statement make sure indent continue line prefer place break binary operator operator example pep8 recommend opposite convention break binary operation use mathematician publisher improve readability donald knuth style break binary operator align operator reduce eye workload determine item add subtract pep8 line break binary operator donald knuth explain traditional rule computer typeset series formula paragraph break binary operation relation display formula break binary operations"[3 follow tradition mathematic result readable code python code permissible break binary operator long convention consistent new code knuth style suggest donald knuth texbook page danger use backslash end line whitespace add backslash course see backslash think see python idiom anti idiom python python put end line enclose statement paren ibm break line parenthesis brace append backslash character line break horse mouth explicit line join physical line join logical line use backslash character follow physical line end backslash part stre literal comment join follow form single logical line delete backslash follow end line character example line end backslash carry comment backslash continue comment backslash continue token stre literal token string literal split physical line use backslash backslash illegal line string literal want break line long literal string break string piece replace output print statement long string notice parenthesis affectation notice break literal string piece allow use literal prefix part string mix delimiter break call method obj.method multiple line enclose command parenthesis span multiple line instance find useful chain call pandas holoviews object method pythonic way use list join function write long string sql query take hitchhiker guide python line continuation logical line code accept limit split multiple physical line python interpreter join consecutive line last character line backslash helpful case avoid fragility white space add end line backslash break code unexpected result well solution use parenthesis element leave unclosed parenthesis end line python interpreter join next line parenthese close behaviour hold curly square brace split long logical line sign try many thing time hinder readability say example consider multiple import exceed line limit define apply string general
declare constant python java declare variable value constant python indicate programmer variable constant one write upper case raise exception constant change see constants python alex martelli note use practice python typing.final variable annotation tell static type checker mypy variable reassign close equivalent java final prevent reassignment const keyword language possible create property getter function read datum setter function write datum protect change alternative implementation use class property note code easy reader wonder constant see explanation code explanation old fashioned way code tricky explanation python language enforce people use naming convention e.g method private method use method protect method manner declare constant cap want constant change hook attribute access trick simple approach declare function problem my_constant my_constant correct way python use namedtuple create constant find succinct update raise meaningful error message prevent access dict define make instance use slot ensure additional attribute add remove dict access route course whole object redefine edit original solution ' miss trick seem work create instance allow magic setattr method kick intercept attempt set foo variable throw exception want instantiate instance class name prevent access class total pain value attach lot const object upper class class name seem bit grotty think succinct overall python constant easy alternative define function my_constant functionality constant annoying brace property way create constant declare getter property ignore setter example look article write find way use python property addition top answer use variable uppercase name use property make value read want mention possible use metaclasse order implement name constant provide simple solution use metaclasse github helpful want value informative type name advanced python use handy module feature include constant read see readme similar solution float various repository good knowledge lack fundamental feature expect constant constant arbitrary type esoteric feature add make applicable ymmv grateful feedback edit add sample code python note answer look provide complete implementation similar follow feature make metaclass prevent static property change make class use metaclass use python prevent instance prop change use inherit prop access instance constant example action example python final qualifi enforcement type checker note final keyword applicable python version declare constant value use frozen datum class use namedtuple workaround create constant work way static final variable java java constant workaround go elegant elegant approach improve python language sort language let redefine math.pi digress write realize answer question mention namedtuple continue show syntax parallel expect java need create name type namedtuple force follow example remember java define constant inside class mention class name let call foo java class equivalent python key point want need separate foo type anonymous name tuple nice sound oxymoron name namedtuple foo escape import module second point create instance nametuple call foo need separate step want assign acknowledgement think invent namedtuple approach see give similar less compact answer notice name tuple python point namedtuple standard library come idea early note python erase entire foo assignment facepalm least prevent value change well good luck mixin enum str give power reimplement setattr enum comparison str object str deprecate http://code.activestate.com/recipes/65207-constants-in-python/?in=user-97991 implementation constant class create instance read constant attribute use nums.pi get value initialize raise exception thank @mikegraham frozendict use start point change nums['one usage syntax thank @raufio answer idea override setattr implementation functionality see named_constant github tuple qualify constant tuple raise error try change value want declare tuple value place comma value check variable value use similar attempt change value error raise collection idiom create attempt improve available answer know use constant pythonic home python dynamic language forum show possible creation construct look feel constant answer primary purpose explore express language harsh detail write accompaniment blog idioms post call constant variable constant reference value immutable say variable frozen value reference mutable object client code update value(s idiom create look namespace constant variable a.k.a spaceconstants modification code snippet alex martelli avoid use module object particular modification use call class factory spaceconstant function class call spaceconstant define instance return explored use class factory implement policy base design look python stackoverflow blogpost next idiom modification spaceconstant reference mutable object frozen implementation exploit call share closure setattr getattr function value mutable object copy reference variable cache define function share closure form call closure protect copy mutable object careful use idiom getattr return value cache deep copy operation significant performance impact large object idiom immutable namespace constant variable constantspace combination simple jon betts answer stackoverflow class factory idiom immutable namespace frozen variable frozenspace derive previous pattern make variable protect property closure generate frozenspace class make class override setattr method base object class wrap constant note use python wrap string simple want use constant non constant object use constobj.value bit intensive possible cause problem keep .value show know operation constant pythonic way python constant shame es6 add support constant javascript useful thing programming language answer answer python community use convention user uppercase variable constant protect arbitrary error code find useful single file solution see docstring use file see full testcase advantage access constant whole project strict control value constant lack support custom type type dict note test python3.4 use tox testing environment create descriptor object want work constant instance level want create constant class level use metaclass serve container constant descriptor object class descend inherit constant descriptor object risk modify create subclass foo class inherit constant possibility modifying pythonic way declare constant module level variable write class function constant integer immutable python little chance altering course set red clean way namedtuple usage example approach namespace constants trick want constant care value define empty class e.g perfect way understand programmer capitalize identifi pi = understand constant otherhand want act constant ' m sure find edit constant constant simple dirty example look make php style constant reality take change value solution find clever one make class redefine set attribute method python recommendation avoid hassle capitalize identifier proper constant try different way create real constant python find pretty solution example create container constant get value container represent pure python data structure constant immutable autocomplete constant sort list.sort copability python2 python3 simple container constant python dictionary mutable seem good way declare constant python constant variable name capital word separate underscore character e.g days_in_week value mutable change give rule name tell constant mean program approach take python private keyword reason prefix name underscore know intend private code break rule programmer remove private keyword python add const keyword programmer remove keyword change constant want want break rule change rule bother break rule name make intention clear unit test make sense apply change value see happen day week real world number day week change language stop make exception case need break rule stop declare constant constant application test case see happen change upper case name tell intend constant important language force constraints code power change philosophy python paragraph mean comment answer mention namedtuple get long fit comment go namedtuple approach mention innovative sake completeness end namedtuple section official documentation read enumerate constant implement name tuple simple efficient use simple class declaration word official documentation kind prefer use practical way implement read behavior guess become example zen simple well complex practicality beat purity pconst library help github pip install pconst constant value editable use stringvar intvar constant const_val collections.namedtuple itertool python constant exist indicate variable constant change add const start variable name state constant comment create function act constant answer give type summarize say ask use python create module true constant code involve give outline need available open source license documentation example find update reflect number answer give question well approach create constant python take inspiration excellent attrs library help python programmer create class boilerplate short con package constant provide convenience wrapper attr.make_class disclaimer author short con value declare dict kwargs example thing constant function support feature library con helper simple kwarg base usage situation value derive name usage compact supply name space delimited string list tuple name base usage support stylistic convention uppercase lowercase attribute name enum style value underlie value accessible constant create build enum library object iterable convertible collection case need immutable bytearray implementation crypto library contain many literal number want ensure constant answer work attempt reassignment bytearray element raise error constant immutable constant bytearray assignment fail powerful simple pythonic approach involve use memoryview object buffer object python-2.6 constarray item assignment typeerror write util lib python const kkconst pypi support str int float datetime const field instance keep base type behavior example detail usage read pypi url pypi github wrap constant numpy array flag write call index course protect content numpy variable constant constant change throw typeerror first time constant[0 call script suppose point change get typeerror hmmmm https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.setflags.html know old question new solution add make list possible solution complete implement constant instance attribute access inheriting class follow subclasse constant create protect constant local instance class inheriting allowconstant constant act normal attribute assign writing class inherit allow less style language support constant want prevent change value access instance._constant use many container allow suggest answer feel need prevent people set instance._constant new dictionary attribute access allowconstant course none pythonic point edit make python unpythonic fun game order make inheritance bit easy modify allowconstant follow way use tuple constant variable tuple collection order unchangeable constant start python use dataclasse module outdate add cent valueerror break prevent update happen advantage add constant program change constant set add rule set constant(somethe key stre low case stre upper case string set key see importance setting constant python optimization happen require guess hope make simple help provide light minimalist metaclass implementation appear variation previous metaclass answer constant store container class instantiation need value set change delete set use case fun exercise feel free suggest improvement note terrible idea terrible implementation work small example end full implementation mean lot work ' m lazy audit hook available python answer question turn relate idea take advantage audit hook catch execution line parse code object fill condition certain prefix define throw error support assignment type import stuff local function unpack use global dict modify investigate secure accept performance penalty implementation whole application make sure work ipython be go end go way fix generalization code want find way make stuff constant object special prefix object annotation extend raufio answer add repr return value object behave little expect access .value emulate constant variable help next class example usage call constructor start new constant namespace note class protection unexpected modifying sequence type constants martelli const class source
dataframe want record column nan df.drop result dataframe drop take row question resolve consider solution suggest wouter original comment ability handle miss datum include dropna build pandas improve performance manually function come variety option useful option see doc include drop column row handy know answer sake pandas solution specific question oppose general description aman wonderful case happen use old question beat death believe useful information surface thread read look answer follow question say canonical method drop nan dataframe visual cue help way detail important argument work arrange faq format how= argument come handy note want see row null iow want boolean mask row use isna get inversion result use notna use case argument specify list column index axis=1 tell pandas want look column row axis=1 drop row column axis=1 use case argument specify minimum number null value integer thing note specify many non null value want keep many null value drop pain point new user fix easy count null value subtract column size get correct thresh argument function use argument axis=0 axis=1 tell function want drop row drop column axis=1 dropna function pandas api return new dataframe copy original change result assign see change https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.dataframe.dropna.html simplest solution solution way use simple easy way true source https://pandas.pydata.org/pandas-docs/stable/generated/pandas.dataframe.dropna.html use dataframe method notnull inverse isnull solution use fact np.nan = np.nan version add use add additional condition notice evaluate statement pandas need parenthesis dataset large number column see many column contain null value many example dataframe contain column contain least null value remove col row depend null value code note code remove null value want null value process follow method work help none method work basic idea pick record length strength great useful dealing string datum use notna query try
display lead number less digit python python printf sprintf see docs python behavior achieve format python behavior achieve f string use str.zfill print python use format string method use build single number see pep-3101 documentation new formatting function print python = new f string introduce use print variable name val fill value width specific example loop print information f string take look pep introduce print result read information string format use documentation pythonic way way original string return unchanged length great string_width example result solution f string print constant length pad rest lead zfill take number lead zero want add easy take big number turn string get length use format string http://docs.python.org/lib/typesseq-strings.html example use math module create string python way include parameter clarity want nleadingzero note do:"{0:0>{1}}".format(number nleadingzeros return string build python string format deal number digit
write line file modern python hear deprecate \n work platform use \r\n window simple documentation use line terminator write file open text mode default use single \n platform useful reading use print function available python python need import print function default alternative python use quote python documentation regard newline write output stream newline none \n character write translate system default line separator newline \n translation take place newline legal value character write translate give string read write file python tutorial python doc recommend way way statement docs.python.org good practice use keyword deal file object advantage file close suite finish exception raise way short write equivalent try block regard exact unedited python interpreter session window window expect produce outcome \n way produce outcome os.linesep equivalent hi there\r\n equivalent there\n simple use \n translate simple first port python window point use non window system produce wrong result window use os.linesep think correct way use memoriam tim toady python function python add top source file write lot datum speed concern go quick speed comparison fast print file f perform large number write average write finish 2.45s machine print take time long 9.76s say real world scenario issue go print file f find want suppress newline time time replace do set optional end parameter way choose suggest use make code easy read update difference performance explain fact write buffer return write disk take place see answer print use line buffer simple test check performance write well disadvantage term speed line buffering pronounced performance difference become pronounced average time 2.20s write print need concatenate bunch string get loooong line performance suffer use case print efficient bit rare use pathlib purpose path.write_text(data encode none error none open file point text mode write datum close file say line mean serialized character end \n character line last point consider \n end line solution append mode write cursor move new line want use w mode add \n character end write function want avoid use write writeline join string newline pass line print newline delimiter file handle keyword argument snippet assume string trail newline put special newline character need end print arbitrary number line list use list expansion pass print use \n separator window print convert window newline \r\n one use io module want insert item list format line way start try filewrit pip install filewriter write my_file.txt take iterable object str support write new line lot define lambda use print function approach benefit utilize feature available print function update mention georgy comment section possible improve idea partial function imho functional cryptic approach write text file flask use other answer answer happen line line call context manager come block context manager let see happen hood first method init know initialization method object object create obj.__init call place put init kinda code second method enter bit interesting see specific method context manager return value assign variable keyword case last method method run error capture code exit block exc_type exc_value exc_traceback variable variable hold value error occur block example variable get info enough info error know use third variable first want research context manager note writing class write context manager write context manager generator look try generator function see class clean
find location site package directory type site package directorie global user global site package dist package directory list sys.path run concise list run getsitepackage site module python code caution virtual environment getsitepackage available old version virtualenv sys.path list virtualenv site package directory python use sysconfig module user site package directory pep python install local package point non exist directory check exit status python see python site --help explanation hint run pip list pip freeze give list instal user site package package>.__path let identify location(s specific package detail let identify location specific module difference run pip show package show debian style package information first item site.getsitepackages()[0 solution liner format readability use liner look follow source old version install django documentation useful django installation ubuntu correct point lib pythonx.x dist package folder contain package operating system instal program run ubuntu site package folder contain package instal setup_tools\easy_install\pip local lib pythonx.x dist package second folder useful use case related installation read source code use ubuntu safe copy paste first code box terminal work modern stdlib way use sysconfig module available version current accepted answer method work virtual environment active note sysconfig source confuse distutils.sysconfig submodule source mention several answer latter different module lacking get_path function discuss distutil deprecate unavailable python use path docs case user find question interested purelib path case interested platlib purelib path ordinary python package instal tool pip system level see venv get function sysconfig.get_path return dict relevant installation path example linux shell script available display detail invoke execute sysconfig module commenter point sysconfig result debian system ubuntu derivative accurate user pip install package go dist package site package debian policy python packaging root cause discrepancy debian patch distutil install layout reflect change site fail patch sysconfig module example ubuntu lt focal fossa look patched python installation debian ubuntu distributing bit hack need figure new plan distutil unavailable start patch sysconfig pip use install location let say instal package django import type dir(django show function attribute module type python interpreter thing instal mercurial snow leopard think work general other note distutils.sysconfig relevant setting default site.py bit paraphrase add sys.prefix}/lib site python add path constant different say context mess site package setuptool distutil work installation program run virtualenv pythonpath user local assume use system site package native system package instal python installation debian base system find lib dist osx /library python/2.7 site package use small code list package instal pip find local bin/ write follow command list path python package note location vary base osx pip show give detail package https://pip.pypa.io/en/stable/reference/pip_show/ pip show][1 get location linux go site package folder answer answer repeat inadequate want final line show installation dir work ubuntu one ask window dist exact dir easy_install use default correct easy_install work macs fun note original code many swearword side note propose solution distutils.sysconfig.get_python_lib work site package directory recommend article return main site package directory ala well solution python seem keep track site package directory package work get dist package site package folder folder python path good output ubuntu installation work distribution virtual environment low tech nature module reside parent directory site package change dir site package dir use follow alias nix system additional note get_python_lib function mention platform different directory use platform specific module module require compilation pass plat_specific = true function get site package platform specific package try command determine pip install location python python answer old question use ipython give follow output imaplib package use poetry find virtual environment path poetry debug use information list site package different project work find relative site package directory relative base install prefix site package folder lib python2.7 site package want python2.7 site package part fact encounter system site package lib64 accept answer work system similar cheater answer solution peek deep gut distutil find path pass setup.py pain figure want figure print site package site package mention believe useful version python instal folder call site package machine case specify python version use follow
dictionary key string value integer get key maximum value case b nicer approach use intermediate list reverse key value tuple use operator.itemgetter build new list memory use stats.iteritem key parameter max function function compute key use determine rank item note key value pair 'd method return maximum value use python3 test many variant fast way return key dict max value give idea candidate method test dictionary test result python python see f1 fast python keywithmaxval top post use return key value pair use know key max value iterkey iteritem iteration dictionary python iteration key edit comment new python explain answer step max(iterable key max(arg1 args key return large item iterable large argument optional key argument describe compare element get maximum return value compare python dict hash table key dict hash object declare key due performance reason iteration dict implement iteration key use rid operation obtain key list function define function call nested function nest function access variable enclose scope stat variable available closure attribute lambda function pointer value variable define parent scope example wanna find max value key follwing simple relevant function output key max value function key return value use rank max return demand element care value surprise tuple unpack well subscript end expression readability lambda expression find well operator.itemgetter(1 imho give entry max value make list key max value value give b max key note python use stats.item stats.iteritem stat empty dictionary use max(stat key stats.get raise valueerror answer safe use none possible key dictionary get maximum key value dictionary stat max(stats.item key = lambda x x[0 c max(stats.item key = lambda x x[1 b course want get key value result use tuple indexing example get key corresponding maximum value max(stats.item key = lambda x x[1])[0 b explanation dictionary method item python return view object dictionary view object iterate max function yield dictionary item tuple form key value list(stats.item use lambda expression lambda x x[1 iteration x tuple key value choose right index select compare key value python python + release code work use iteritem dictionary method item performance note answer base comment climbs_lika_spyder answer use code test python python satisfied answer max pick first key max value dictionary multiple key value post answer case help see maximum pick case tie iterate solution comment select answer python python look return base value mydict.value key return look return top number value solution simple use max function change number value return want single ranking key use index want top ranking key use list slice simple understand approach output g choose key collections.counter appropriate start empty collections.counter add heap queue generalise solution allow extract top key order value note dict.__getitem method call syntactic sugar dict oppose dict.get return keyerror key find occur max((value key key value stats.items())[1 follow easy way extract key max value give dict output solution lambda expression seem perform small input scientific python user simple solution use pandas +1 @aric coady simple solution way select key max value dictionary case stat empty check condition finding value key first check dictionary empty process try test accept answer @thewolf fast solution basic loop loop fast result case key value example get collection key max value follow add situation want select certain key
want get list column header pandas dataframe dataframe come user input know many column call example give dataframe get list get value list use show ed chum answer build method performant .column return index return array helper function .tolist return list performance important index object define method call difference performance obvious hate type call list df quick test build version use list(dataframe thank edchum get simple pandas give column name nice list unpack generalization pep introduce python follow operation possible want list want set want tuple want store result kind person convert coffee typing sound go consume coffee p.s performance important want ditch solution favour similar ed chum answer update v0.24 preferred use see answer information visual check see discuss answer use iterable unpack need explicit loop use explicit loop operation do single line list comprehension use sorted(df preserve original order column use list(df next list(df.columns list(df.columns.values poor suggestion current version v0.24 index return df.columns numpy array return df.columns.value define .tolist method idiomatic lastly listification list(df use concise alternative aforementione method python extend unpack available list column dataframe debugg mode use list comprehension way sorted list use sorted available my_dataframe.column interesting df.columns.values.tolist time think dataframe follow dict convention iterate key object create list key column object method to_list pythonic way basic iteration dataframe return column label convert dataframe list get column label stop think look convenient code sample datum exploration ipython notebook preferred way produce easy read order list code find explicit tell other read code simple option list(my_dataframe.columns my_dataframe.columns.tolist need complex stuff answer simeon visser think sweet spot explicit time quick neat visual check try feel question deserve additional explanation fixxxer note answer depend pandas version use project get pd.__version command reason debian jessie use use old version pandas need use df.keys().tolist n’t df.column method implement advantage key method work new version pandas universal return simple list(df.columns easy way reach goal my_dataframe.columns.values.tolist lazy try list(my_dataframe dataframe happen index multiindex include column name avoid call reset_index unnecessary performance hit simple operation run need shuttle data database dataframe index map primary unique key column make sense pandas build method possible ' miss simple code solution provide nice expect frame.column_name function pandas nice use follow syntax preserve feel use pandas proper way call tolist function frame.columns.tolist listheader colname colname my_dataframe
want write function execute shell command return output string matter error success message want get result gotten command line code example thing example maintain version python simple approach use subprocess.check_output function check_output run single program take argument return result print stdout need write input stdin run popen section want execute complex shell command see note shell true end answer check_output function work maintain version python recent version flexible approach available use python need compatibility new run function recommend official documentation task provide general high level api subprocess module capture output program pass subprocess.pipe flag stdout keyword argument access stdout attribute return completedprocess object return value bytes object want proper string need decode assume call process return encode string compress liner desire pass input process stdin pass byte object input keyword argument capture error pass stderr = subprocess.pipe capture result.stderr stderr = subprocess.stdout capture result.stdout regular output want run throw exception process return nonzero exit code pass check true check returncode attribute result security concern run complex shell command pass shell = true describe end answer late version python streamline python liner spell use run way add bit complexity compare old way thing need run function use old version python need modest backwards compatibility use check_output function describe available python take take argument popen see return string contain program output answer detailed usage example python check_output equivalent execute run check true stdout pipe return stdout attribute pass stderr = subprocess.stdout ensure error message include return output security concern run complex shell command pass shell = true describe end answer need pipe stderr pass input process check_output task see popen example case need compatibility need sophisticated functionality check_output run provide work popen object encapsulate low level api subprocesse popen constructor accept single command argument list contain command first item follow number argument separate item list shlex.split help parse string format list popen object accept host different argument process io management low level configuration send input capture output communicate preferred method set stdin = pipe communicate allow pass data process stdin note aaron hall answer indicate system set stdout stdin pipe devnull get communicate work rare case need complex real time output capture vartec answer suggest method communicate prone deadlock use function security concern run complex shell command pass shell true run shell command shell true argument call run popen constructor execute single program mean fancy bash style pipe want run complex shell command pass shell true function support example raise security concern light scripting call process pass output input temptation connect pipe strong resist see deadlock hacky thing way easy work unix include cygwin python2.7 return tuple return_value output solution work python2 python3 use subprocess module problem figure simple way hope help note solution python3 specific subprocess.getoutput work python2 note redirect stdout want want error message function yield line line come wait subprocess finish get output whole case usage tricky super simple solution work many situation temporary file(here tmp create output command read desire output extra note comment remove tmp file case time job several time need delete tmp vartec answer read line make version usage accept answer use follow command run shell command use ubuntu note deprecate python use subprocess.popen example different flavor problem follow requirement combine tweak previous answer come follow code execute previous answer mileage vary attempt @senderle spin vartec solution window python get error solution work error windowserror error handle invalid find assign pipe handle get return output expect follow work call get first element tuple stdout learn believe need pipe argument ' m work custom system use different handle control std stop console popup window python + use pass true return byte want convert bytes string add text true read byte use default encoding specify different encoding use encoding="your encode text true splitting initial command subprocess tricky cumbersome use shlex.split help sample command git log year year code shlex.split code look follow solution work want print output process run add current work directory useful hope solution help reason work python need import os need run shell command multiple file trick edit see max persson solution j.f sebastian suggestion go incorporate accord @senderle use act run command bash improvement log well output use iterator get well method use getstatusoutput understand use subprocess python module able handle stdout return code command see example complete command caller implementation course extend try want function return stdout return code handle script like suggest simppl option consideration module available pypi pip install simppl run python3 simppl allow user run shell command read output screen developer suggest type use case note print stdout stderr python log module complete code show simppl work simple flexible solution work variety os version python use ipython shell mode couple advantage demonstrate want give extra option instal actual jupyter notebook oppose script accomplish output redirect text file read differentiate possible return os platform function
trouble instal get follow error pip install psycopg2 problem pg_config path run problem try add pg_config path setup.cfg file building use source file download website http://initd.org/psycopg/ follow error message baffle error help way sudo command rhel pg_config postgresql devel libpq dev debian ubuntu libpq devel centos fedora cygwin babun mac os x solve use homebrew package manager instal python dev try instal libpq dev article install virtualenv osx instal postgress.app http://postgresapp.com/ issue find pg_config app content add dir path content version late bin work export path="/application content version late bin:$path install compile binary platform pip conda advise psycopg2 binary pypi page recommend build source production binary package practical choice development testing production advise use package build source use package build source use python pip install psycopg2 process require several dependency documentation emphasis mine need pg_config compile regular usage place run standard directory contain source code ubuntu user solution work alpine library contain pg_config postgresql dev install run work centos install ubuntu use equivilent apt get package include path postgresql binary dir pip install work debain rhel base linux make sure include correct path sum face problem read lot stackoverflow post online blog final solution work postgresql(development stable version instal instal psycopg2 pg_config file file reside bin folder postgresql installation folder path setup instal psycopg2 case installation path postgresql order set path pg_config file enter follow command terminal command ensure try pip install find path pg_config time post full error trace solution blog want refer mac os x pg_config path problem generic applicable linux add python requirement use postgre ubuntu run install libpq dev postgresql header file static library compile c programs link libpq library order communicate postgresql database backend arch run debian ubuntu mac os x red hat centos fedora sudo apt get install libpq dev work ubuntu issue postgre install brew install run fix issue run os x solution work install http://www.postgresql.org/download/macosx/ open terminal run command replace say version postgre version number export path=$path:/application content versions/{{version}}/bin e.g. export path=$path:/application content versions/9.4 bin linux mint sudo apt get install libpq dev work update yum.repos.d centos base update section add exclude postgresql run follow fix issue try add path ali solution work trouble find bin folder location quick way find path mac os x open psql quick link top menu bar open separate terminal window second line path postgre installation appear pg_config file bin folder instal set path pg_config file new version install go leave next unfortunate soul get problem provide solution use sudo pip3 install binary need upgrade pip instal use command simple solution symlink correct binary postgre package harmless application able use system require mac os x use postgre app http://postgresapp.com/ specify version postgre command point late p.s change reflect need restart terminal command prompt source instal python solve arch linux window want install window port psycopg recommend psycopg documentation solve problem cent make sure postgresql version match right version suggest add clarity documentation suggest run pip install binary solved issue os x completeness install postgresql macport pg_config local lib postgresql94 bin pg_config instal macport add local bin path fix problem sudo ln local lib postgresql94 bin pg_config local bin pg_config pip install able run pg_config issue macos catalina use zsh shell instal postgre app open ~/.zshrc file add follow line close terminal reopen resolve problem want close terminal enter source terminal keep work run follow command resolve pg_config executable sudo yum install postgresql devel centos6x pip install psycopg2==2.5.2 lack answer window user solve issue add postgresql bin folder path variable substitute \11\ version postgre run least compile error update look issue psycopg2 library dependency play nice python https://github.com/psycopg/psycopg2/issues/990 simple solution mac user extend path variable include postgresql export path=$path:/library postgresql/12 bin recommend use way turn postgres mac add path postgre file appending follow path="/application content version late bin:$path add postgre path try install virtual environment use pip global site package try add psycopg2 dependency virtual environment allow python project connect docker kubernete pod run postgresql mac interested instal postgresql mac get pg_config install psycopg2_binary suggest error output pipenv install work ' experience problem offer easy solution case actual path add path command param run python setup.py script run easy solution edit test find add path pg_config form /pg_config /bin run pip install command work decide follow indication run python setup.py specify path /bin manage install psycopg2 centos make sure alternative pgsql pg_config non break symlink follow step solve issue ubuntu sudo apt get install libpq dev big issue installation library oracle linux able install pip decide install yum command command instal able create postgre user db ansible know sixtieth answer hope answer help gentoo execute follow experience issue work django application deploying aw method describe tutorial work https://realpython.com/deploying-a-django-app-and-postgresql-to-aws-elastic-beanstalk/ author explanation get follow error problem try install psycopy2 postgre python binding need postgre client driver instal instal default need install eb read custom .config file folder call .ebextension root level project .config file allow install package run arbitrary command set environment variable file directory conform json yaml syntax execute alphabetical order first thing install package pip install command complete let create file call ec2 instance run amazon linux flavor use install package need go install package git postgres client libjpeg pillow mac user add postgresql package homebrew add openssl path variable export library_path=$library_path:/usr local opt openssl lib/ pip install psycopg2 package work update python change default python let say follow code installing work previous python version want command work update change python version try mention specific version python3.8 command try follow use postgresql devel fedora series resolve issue yum install postgresql devel postgresql instal wish run docker container use psycopg2 binary find page provide good instruction instal postgresql mac pip install command work fix run follow command reference https://stackoverflow.com/a/39800677/4270698 use mac make sure instal postgresql machine use binary run issue dockerize application django try install part dependency resolve use setup binary instal first django try install binary django gunicorn mac mojave instal use brew brew info postgre show environment variable set copy paste command restart shell quick understanding pip work pip python2 pip3 python3 look fix python sudo pip3 install psycopg2 work
iterate list reverse python get reverse copy list avoid separate statement chain method .reverse get new reverse list apply reverse function collect item list iterate list extend slice syntax explain see documentation use list.reverse reverse list place slice create new list item reverse order different build way reverse list method depend need speed perspective good use build function reverse list reverse time fast short list item time fast long list compare create loop generator make sense write native language c expert create scrutiny optimization prone defect handle edge corner case put code snippet answer make script run different way reverse list describe time method run time result show last section list length item goal reverse order item exist list loop get copy work use function run list object order item reverse note follow reverse original variable give return reverse list create copy use function output make function timing script require test performance way reversing list place change original list copying list reverse see fast way create reverse copy compare method build index slicing method allow make copy part index object generic syntax object>[first_index last_index step exploit slice create simple reversed list use leave option empty set default last element object reverse step size negative indexing allow use negative number count end object index second last item step size negative start last item index backward amount reversed(indexed_object function test raw iterator create list iterator timing show create method index bad idea use build method need custom mean learn build method say huge penalty small list size scale penalty become tremendous code optimize m sure match build method implement native language follow rest script time method reversing show reverse place obj.reverse create reversed(obj iterator use slice fast way create copy prove try create way result show scale work build method suit particular type reversing word object element count increase build method outpace method build method achieve need string thing slice good need copy reverse list create duplicate list list(reversed(obj function make copy list place obj.reverse double speed meanwhile custom method take order magnitude large list scale item list reversed(<list > function call take ms setup iterator reverse place take ms use slice method take ms create copy full reversed list quick manual method make take ms item list item list item list use slicing array = array[::-1 neat trick pythonic little obscure newbie use reverse method good way go day day code readable need reverse list place interview question able use build method interviewer look approach problem depth python knowledge algorithmic approach require follow example use classic swap way it:- note work tuples string sequence string tuples immutable write change element reverse list use assign reverse list list use find contrary suggestion l.reverse fast way reverse long list python interested know other replicate timing l[::-1 slow copy list reverse add list call iterator make reversed(l add overhead course want copy list iterator use respective method want reverse list seem fast way function list python timing python timing reverse list use reversed(array good route need understand implement use build reversed take o(n time solution use want store element reverse list variable use revarray = array[::-1 revarray first variant fast output use bitwise complement array index step array reverse way use old school logic practice interview swap number front use pointer index[last use list comprehension organize value python list order manipulate organize variable numerical alphabetical order print(sorted(my_list permanent sort flag reverse true organize want sort value reverse value number priority alphabet list order python value organization awesome edit mistaken moderator claim answer copy delete old post question return list reverse reverse list example list name array reverse list name array use array.reverse useful slice method describe use reverse list place defining list slice modification use array array[::-1 minimum amount build function assume interview setting method get reversed list slicing method array[-1::-1 slice method reversed_array2 array[::-1 use builtin function third function reverse list object place mean copy pristine datum maintain good approach want maintain old version seem solution want pristine reverse version direct translation requirement python statement cryptic useful treat list stack pop element top stack end list way take advantage last characteristic stack course consume 1st array method intuitive see list consume end build front end reverse place switch reference index do use reverse return generator use reverse user input value line code way evaluate reverse use generator iterate need list class use python magic method iterator reverse reverse list clean simple class object solve issue alternative way use list comprehension ab question come python code test job interview answer note work value length
create empty dataframe add row create empty dataframe add new row end fill single field work field time well way add new row df use df.loc[i row index specify dataframe case get data datum frame upfront fast approach append data frame similar task appending data frame row row take min create datum frame list dictionary complete second case add lot row dataframe interested performance try popular method check speed runtime result second use addition dictionary code p.s believe realization perfect optimization do use pandas.concat detail example see merge join concatenate example people grow dataframe append datum list convert dataframe end understand important reason take post append concat loop append concat bad isolation problem call loop result quadratic memory usage empty dataframe nan create dataframe nan column initialize object slow un vectorizable dtype timing method fast way see differ term memory utility benchmarke code reference post remind ' m part community people understand importance teaching folk get right answer code answer wrong code argue issue use loc append add single row dataframe people look question add row requirement add row loop use datum come function see related question case important grow dataframe good idea know number entries ex ante preallocate space provide index take datum example different answer speed comparison comment size speed difference become large increase size array number row make speed difference strike 313ms 2.29s append single row dictionary use ignore_index option efficient appending see add extra row pandas dataframe set enlargement add row loc non exist key index datum example sake pythonic way build list list convert dataframe give want add new row end use figure simple nice way note caveat performance note comment answer op question toy example illustrate shikhardua answer find useful fragment trivial actual datum 1,000s row many column wish able group different column perform statistic target column reliable method building data frame row time great convenience thank shikhardua use generator object create dataframe memory efficient list add raw exist dataframe use append method list dictionary shikhardua answer row base represent table dictionary list column base list store column row order give know column end construct dataframe case dictionary key column name row order store order list c column row use dictionary c list list dictionary list dictionary method dictionary store key require create new dictionary row append list overall time complexity add entry list dictionary amortize constant time overhead due simple operation create new record datum frame add old_data_frame pass list value correspond column name create data_frame way add append row pandas dataframe use insert append row empty populate pandas dataframe want add row end append list way performant enhance dataframe class need loc[df.shape[0 loc[len(df use loop iterate value add array value concatenate dataframe come problem add new row exist dataframe character index numeric input datum new row duct index list make simple taking list input append row datum frame pandas.dataframe.append ignore_index false verify_integrity false sort false dataframe ignore_index set true see construct df.loc[subscript assign dataframe row mikhail_sam post benchmark contain other construct well method use dict create dataframe end find replace df3.loc[i preallocate dataframe code df3.values[i outcome change method perform similar use dict take use df.values[subscript = consideration note take base subscript different dataframe.index add row convert dataframe dictionary see key column dataframe value column store dictionary key column index number dataframe idea make write code datum dataframe dtype use numpy array write row predefine array convert dataframe end seem convert list dict datum frame df want add list new_list new row df want add new datum frame new_df datum frame df use code snippet use list dictionary update datum frame add shikhardua mikhail_sam answer take care add item empty dataframe issue df.index.max nan first index
string variable set value s1 = = s2 return true s1 s2 return false open python interpreter comparison succeed identity testing = = equality testing happen code emulated interpreter wonder right word b equivalent id(a = answer correct use identity comparison = use equality comparison care equality string contain character case operator use = reason work stre literal intern default wikipedia intern string speed string comparison performance bottleneck application compiler dynamic programming language runtime rely hash table string key intern check different string equal involve examine character string slow several reason o(n length string require read several region memory take time read fill processor cache mean less cache available need intern string simple object identity test suffice original intern operation implement pointer equality test single machine instruction memory reference string literal word type program source code surround quotation mark program value python compiler intern string make store memory location note happen rule happen convoluted rely behavior production code interactive session string store memory location identity operator work expect construct string method string contain character string equal string different identity store different place memory keyword test object identity value comparison use result true object object = true time value object last thing note use sys.intern function ensure get reference string point use determine equality string helpful know kind weird requirement use note intern function use builtin python move sys module python identity testing = = equality testing mean way check thing thing equivalent get simple person object name jack year old equivalent year old jack person age instance person string equivalent object side note idiomatic python see thing safe guarantee instance null object none sure use little knowledge use know object none end wonder thing work happen ' m sure thing guarantee stay different python version implementation limit experience python use compare object see object oppose different object value use determine value identical good example s1 unicode string s2 normal string type value think fact comparison evaluate false distinct object use evaluate true mean use exact object create new one create fraction second large time gap optimize use object use equality operator compare value string object example make s2 different string object equal object interpreter use object assign make object = operator test value equivalence operator test object identity python test object live address memory example python create string object b refer reason python cache reuse string optimization stre banana memory share b. trigger normal behavior use long string create list get object case say list equivalent element identical object object identical equivalent equivalent identical refer object assign b = variable refer object believe know intern string python c compile optimize mode use identical string waste memory create string object intern string content point memory result python operator return true string content point string object happen java c. useful memory saving rely test string equality various interpreter compilers jit engine operator check identity = = operator check equality language reference type affect aspect object behavior importance object identity affect sense immutable type operation compute new value return reference exist object type value mutable object allow = b = b refer object value depend implementation c c guarantee refer different unique create empty list note assign object d. statement infer string immutable type check succeed check apply int tuple immutable type compare memory location use object level comparison compare variable program use checking value level check address level equivalence check value level equivalence identity testing = = equality testing see python documentation case = = b. exception example use identity test equality test basic concept clear approach question understand difference compare memory location id(a)==id(b b return true else return false say use compare memory location = use equality testing mean compare resultant value show code act example give theory case stre literals(string get assign variable memory address show picture remain self explanatory
see top python file seem file run line several version python instal bin env ensure interpreter use environment path alternative hardcode bin python ok flexible unix executable file mean interpret indicate interpreter use start first line follow interpreter flag need talk platform course rule apply shebang line harm help copy script platform unix base linux mac call shebang line wikipedia entry explain compute shebang call hashbang hashple pound bang crunchbang refer character character interpreter directive first line text file unix operate system program loader take presence character indication file script try execute script use interpreter specify rest first line file see unix faq entry window shebang line determine interpreter run pass option interpreter specify shebang line find useful keep generic shebang line script one write answer question test windows archlinux env utility allow invoke command path remain argument specifies program name invoke search accord path environment variable remain argument pass argument program expand bit answer little example command line script get trouble incautious use bin env shebang lines json module exist python way guard kind problem use versione python command name instal python distinguish python python recent release python provide python3 name order run python script need tell shell thing shebang accomplish shebang begin character comment marker many scripting language content shebang line ignore interpreter env command accomplish grawity common use env command launch interpreter make use fact env search path command tell launch shebang line require absolute path specify location various interpreter perl bash python vary lot common use bin env perl try guess /bin perl bin perl local bin perl local pkg perl usr bin perl /home mrdaniel usr bin perl user system hand env bin env case system use env rare occassion happen non linux systems exec system call linux kernel understand shebang bash linux call exec system call path line kernel call file pass exec https://github.com/torvalds/linux/blob/v4.8/fs/binfmt_script.c#l25 read first byte file compare comparison true rest line parse linux kernel make exec call equivalent env executable search path find bin python call python interpreter see line file comment character python line ignore regular comment make infinite loop bash recognize error happen human readable require file start different byte exec system call use different handler important build handler elf executable file https://github.com/torvalds/linux/blob/v4.8/fs/binfmt_elf.c#l1305 check byte 7f 4c happen human readable let confirm read first byte ls elf executable output kernel see byte take file put memory start new process see kernel get executable binary file run linux add shebang handler binfmt_misc mechanism example add custom handler .jar file mechanism support handler file extension application run executable different architecture qemu think posix specifie shebang mention rationale section form executable script support system happen macos freebsd seem implement path search motivation likely big motivation existence shebang fact linux want run command path shebang mechanism linux know launch type file hardcoding extension command implement path search interpreter possibility major problem break decide refactor command language shebang solve problem major use case pyenv version manager major use case use bin env python bin python version manager pyenv pyenv allow install multiple python version single machine able well reproduce project virtualization manage current python version setting order path show apt get install different python version pyenv manage python locate bin python system deal update alternative symlink question sense want use python myscript.py need line system call python python interpreter run script intend use ./myscript.py call normal program bash script need write line specify system program use run make executable chmod main reason make script portable operate system environment example mingw python script use gnu linux distribution good commercial unix sw hw system os x freebsd difference make script portable use python comment line line use run py script shell command line know shebang use various situation python script instruct shell start specific version python take care rest file make sense emphasize thing miss prevent immediate understanding type python terminal provide full path executable look path environment variable turn want execute python program app.py tell shell interpreter use hashbang contributor explain hashbang expect full path interpreter run python program provide full path python binary varie consider use virtualenv address portability trick bin env use intend alter environment place run command alteration provide run command current environment result path lookup trick source unix stackexchange shell convention tell shell program execute script resolve path python binary recommend way propose documentation executable python script bsd’ish unix system python script make executable shell script put line http://docs.python.org/py3k/tutorial/interpreter.html#executable-python-script specifie interpreter want use understand create file terminal touch type file follow chmod test.py make script executable get error say python3 supprt print operator go change first line code work print test stdout python2 support print operator learn switch script interpreter try issue use create virtual environment activate environment check difference seem file run line run python program window window use line use file name extension run program associate file extension python launcher develop degree mimic linux behaviour window limited choose python interpreter run select python python system instal launcher instal py.exe python installation associate .py file launcher check line turn launch specify python interpreter version mean historical information real answer remember day lot unix operating system designer notion put stuff include python perl bash lot open source stuff true different linux distribution linux python local bin/. instal build put ~/bin solaris bad work transition berkeley unix system wind stuff ucb make long path memory stuff instal package directory symlinke binary bin bin nfs server[2 env utility develop work write env interpreter long path proper thing reasonable chance run course reasonable mean python perl set appropriate environmental variable bash ksh zsh work important people pass shell script perl python code bin python red hat linux workstation go break bad sgi think irix put python right spot sparc station run miss sparc station lot get trolling e bay bastage file system hierarchy standard https://en.wikipedia.org/wiki/filesystem_hierarchy_standard people stuff wear turnip onion belt run script virtual environment say venv execute python work venv display path python interpreter venv bin python note name virtual environment embed path python interpreter hardcoding path script cause problem add jonathan answer ideal shebang bin env python portability os portability virtual environment line bash python3 /bin bash python specify python compiler use multiple python version instal example a.py python3 script b.py python script order run file ./b.py use need give file execution privilege execute lead permission deny error give execution permission consider portability issue python2 python3 specify version program compatible distribution ship python symlinke python3 rely python python2 emphasize order tolerate difference platform new code need invoke interpreter specify python specify python2 python3 specific python2.x version see migration note distinction make shebang invoke shell script invoke system call invoke context tell interpreter version python run program multiple version python allow select executable wish use handy multiple python install different module wish choose execute python file use file name file bin env path python python python3 python duh bin env python allow python file execute program long use chmod file.py tell script python directory
consider example know self refer specific instance myclass func include self parameter need use self method code language make implicit use special syntax language agnostic consideration design decision see advantage self pointer mandatory explicit close debug question op omit self parameter method get typeerror use typeerror method take positional argument give op omit self body method get nameerror consider call function class reason use self python use special syntax refer instance attribute python decide method way make instance method pass receive first parameter method instance method call make method function leave actual name use self convention people frown use self special code object python do distinguish normal name attribute special syntax ruby require declaration c++ different python make thing explicit make obvious instance attribute assign instance attribute need know instance assign need self let say class classa contain method methoda define objecta instance class objecta.methoda(arg1 arg2 call python convert self variable refer object let take simple vector class want method calculate length look wanted define class look define global method function whole structure stay make use assume moment n’t write length method vector class work first parameter use self parameter length_new possible explicit self way understand need explicit self see python add syntactical sugar keep mind call transform easy see self fit write instance method python write class method take instance first parameter place instance parameter object instantiate object pass self parameter object datum bind object example like visualize object datum look notice self replace object name say example diagram accurate serve purpose visualizing use self object pass self parameter object keep hold datum accurate think process instantiate object object make use class template datum method pass name self parameter attribute method class remain general template referenced belong object pass object name self parameter mean object instantiate class keep track datum method see illustration example demonstrate code use class class avoid pass state thing time nice thing initialize class composition need metaclasse support custom method override operator let demonstrate code use build python class machinery show thing migrate answer duplicate close question follow excerpt python documentation self shorthand python reference object member method method function declare explicit first argument represent object call first argument method call self convention name self special meaning python note follow convention code readable python programmer conceivable class browser program write rely convention information see python documentation tutorial class reason state allow easy access overridden method call class.some_method(inst example ’s useful use similar use keyword give reference current object python language build object orient programming java c++ call static method python write method regular argument object method require make variable animal case need self argument self method use refer variable field class case self refer animalname variable entire class remember variable method self work variable existent method run define field variable entire class define outside class method understand single word say google object orient programming understand need ask question first self conventional name put coherent stead refer object use declare property student object note student class go create code self object reference object python method call context object self python use deal custom object model follow python zen explicit well ’s reference class object java php example call user_type_name field model access self.user_type_name take look follow example explain purpose self self use need distinguish instance source self variable python explain pythontip ' m surprised bring lua lua use self variable omit use c++ see reason declare self function able use lua c++ language pride brief odd require declare self variable use argument call self understand necessary mention suppose big question user look question question move learn python recommend read couple blog use self explain note keyword first argument class method include init reference current instance class convention argument name self init method self refer create object class method refer instance method call example code code way eliminate argument java keyword thing add optional self argument allow declare static method class write self code example ps work python previous version add @staticmethod decorator self argument obligatory way python design alternative work python design allow method function define context implicit la java explicit la ruby work let example explicit approach python convention fubar function work assume self global variable frob alternative execute method replace global scope self object implicit approach mean myx interpret local variable fubar frob alternative execute method replace local scope retain call remove posibility method local variable current situation work call method frob receive object call self parameter fubar call object parameter work c.frob think init method self refer create object class method refer instance method call self name convention call want use example delete object use name del__(var var use init__(var take look cls big picture post helpful self act current object name instance class self keyword hold reference class upto want use notice create new method python python write self keyword r&d notice create say method class try call recognize method add self reference class code throw unresolvable reference error see example create object class testa call method m1 use class object method m1 include self keyword want call method m2 self reference call m2 use class name keep practice live self keyword benefit create global variable question self implicit explicit guido van rossum resolve question say self stay stick functional programming need self enter python oop find self typical use case class c method m1 program output self hold memory address class instance purpose self hold reference instance method explicit access reference note different type class method word self refer instance class explicit reference class instance object docs special thing method instance object pass first argument function example call equivalent myclass.f(x general call method list argument equivalent call correspond function argument list create insert method instance object first argument precede relate snippet = myclass say python least self parameter think placeholder take look self case lot other use method say store name value use p1 assign class use print use p1 keyword hope help python little cent class person define init method self interesting thing notice memory location self instance variable p main__.person object 0x106a78fd0 explain self instance variable object
want check variable exist ' m way exception check existence local variable check existence global variable check object attribute use variable define set bad thing language tend indicate logic program think result unpredictable behaviour need python follow trick similar ensure variable value use ' m convinced good idea opinion try refactor code situation occur way example follow code give comment allow line draw previous point current point case last bind value help python check last raise exception well idea ensure last value use decide valid ensure variable exist use valid need assume mean comment code add code force control initial set variable use exception method simple way initialize say myvar none use try good way test variable existence well way set test global variable example want initialize module level variable first time call function code object module example assume test go use function similar user97370 answer answer pollute global namespace way fix use class like complicate code open question confirm singleton programming pattern python allow function attribute give simple solution catch call python fine simple case attributeerror use check object attribute way work handle kind situation check variable exist go wrap first usage non exist variable try nameerror create custom function call function follow replace variable_name variable want check return true false new variable foo safe use get assertionerror exception point line fail know well obvious contrived self reference performant generalise solution function check local variable global variable use short variant scenario n’t determine length iterable mean exist depend iterable produce empty sequence want use last iterable n’t exist empty sequence thing first solution problematic n’t tell depend sequence value last element second solution accurate respect possibility object use dict
add model field django write do foreignkey decimalfield basic difference respect different charfield foreignkey manytomanyfield datetimefield field advantage disadvantage use option null true set null null column db blank value django field type datetimefield foreignkey store null db blank determine field require form include admin custom form blank = true field require false field blank combo frequent go allow field blank form need database allow null value field exception charfield textfields django save null blank value store db empty string example option make logical sense use use case null true blank = false want field require form optional deal object shell char text type save null django null true unnecessary set field none force set null scenario necessary include null true orm maps blank null field django database field create postgresql database field create mysql crucial understand option django model field definition serve purpose define database table define default format validation model form say default value overridden provide custom form option affect database option affect form affect come null blank answer make clear former affect database table definition latter affect model validation think distinction make clear looking use case possible configuration null false blank = false default configuration mean value require circumstance null true blank true mean field optional circumstance note recommend way make string base field optional null false blank true form require value database number use case common use optional string base field note documentation django idiom use empty string indicate missing value null allow end different way indicate missing value field unique use null true prevent multiple empty string fail uniqueness check common situation calculate field base value save method want user provide value form blank true want database enforce value provide null false use want indicate manytomanyfield optional field implement separate table database column null meaningless value blank affect form control validation succeed relation null true blank false mean form require value database use configuration use case reasonable require user include value require business logic form way add editing datum code generate datum need stringent validation require human editor use case see foreignkey wish allow cascade deletion normal use relation blank false thing point delete want object delete case use null true implement simple kind soft deletion answer day difficult judge put null true blank = true field think useless confusing provide many option developer handle null blank want follow table scoops django say django model field reference link follow argument available field type optional avoid use null string base field charfield textfield empty string value store empty string null string base field null true mean possible value datum null empty string case ’ redundant possible value datum django convention use empty string null string base non string base field need set blank true wish permit empty value form null parameter affect database storage see blank note use oracle database backend value null store denote empty string attribute true field allow blank default false note different null null database relate blank validation relate field blank true form validation allow entry empty value field blank false field require null true define database accept null value hand blank true define form validation field accept blank value not(if blank true accept form value field blank = false[default value form validation show field require error null true false related database blank true false related form validation example field true null true case blank true tell form ok leave description field blank null true tell database ok record null value db field give error set null true allow value database column set null set blank = true django set default new value column equal point null true necessary charfield textfield database unique flag set column case need use skip null true unique charfield textfield field set null other check field value null everytime default value ‍‍‍‍‍‍‍‍‍null blank false null database relate define give database column accept null value blank validation relate used form validation call form.is_valid say fine field null true blank false meaning database level field null application level require field developer get wrong defining null true string base field textfield avoid end possible value datum none empty string possible value datum redundant django convention use empty string null mean constraint database field fill object null value fill option mean constraint validation django form fill modelform model leave field option unfille main difference null true blank true default value null blank false value work field level want keep field null blank null true set field value null datum database column value blank true determine field require form include admin custom form title = models.charfield(blank true title keep blank database store null true blank true mean field optional circumstance save django admin step validation happen django level database level save text number field database datum type null django create column database specifie empty try save null get database error django admin level field require default save blank field django throw error want save blank field allow django database level blank allow empty field admin panel null allow save null database column null database blank field validation want show user interface textfield get last name person lastname blank true didnot ask user enter last name optional field lastname models.charfield null true mean field get value user store database empty string simple answer null database table blank django form null database relate blank validation relate field blank = true validation django admin site allow entry empty value field blank false field require note avoid use null true string base field charfield textfield filefield imagefield ref django null django blank answer simple null true tell database field model null blank true tell django field model null simple word blank different null null database relate blank validation related(require form null true django store empty value null database field blank true form validation allow entry empty value field blank false field require null default false true django store empty null database blank default false true field allow blank goto https://docs.djangoproject.com/en/3.0/topics/db/models/ table demonstrate main difference mean null true blank = true model depend field define form class suppose define follow class form class define name field mandatory due blank = true model address field mandatory due blank false model clientform class define field name address mandatory field define leave https://docs.djangoproject.com/en/3.0/topics/forms/modelforms/ default require attribute form field true require field name address fill model field set blank true blank = true set model field control field leave empty enter value form talk enter datum null true set blank = true field model field receive value database django field datum write database kind text content empty string store database value store database kind field date field number use special datum type null null use field value default django allow null value set null true let say set blank true non text field specify null true django know store throw error set null true set null database field fill set blank = true set value field say null false mean datum pass database save say blank false mean datum input frontend vice versa option django model serve purpose let get null blank example let see define company model field play blank null option let see happen different field receive empty string value form level framework language level saving database raise integrityerror database accept null value due null false random_date receive empty value form level framework validation error blank allow due blank true set constraint form level allow column null database layer option mean field allow save null database layer empty string value allow valid datum django form validation logic due blank true short receive empty value framework level store empty value db level resolve confusion consider database commit layer procedure blank framework level thing null database level contraint null true blank true field attribute django.db.model null database relate blank validation relate default null false null false django allow null value database column null true django store empty value null database column charfield textfield django use empty string null avoid use null attribute charfield textfield exception charfield unique true blank true null true require default blank false blank = false field require blank true field optional leave blank blank true null false require implement clean model set miss value accord documentation null database relate null true db store null inputs null empty string store empty string blank true form validate else field consider require form default false
text file look read file single line string newline case create string abcdef reading file list line remove trail newline character line see read file newline use file content guarantee line python use pathlib copy text file content variable close file line use str.replace remove newline read file line note close file cpython close file exit part garbage collection python implementation write portable code use close file short see https://stackoverflow.com/a/7396043/362951 join line string remove new line use join join list string rstrip argument trim whitespace include newline end string ' m surprised mention splitline variable datum list look print note newline \n point sound want print line console achieve loop do use read method default mode r read use fiddle prefer use use read combination rstrip rstrip("\n python add newline end string case useful hard tell start try follow code compress line code file read python output strip line concatenate final string work fine python3 google list comprehension square bracket syntax new line copy pasteable solution close file object list .join([line.rstrip('\n line open('file.txt generator line open('file.txt list fast generator heavy memory generator slow list light memory iterate line case think work function remove get list generator try remove line break use python use replace function string example remove type line break example file try use replay scenario https://repl.it/repls/annualjointhardware feel address part question read line variable multiple line replace \n end create list variable x print x print(x str(x see entire list bracket call element array sort x[0 omit bracket use str function see datum try use program regular expression work feel empty dead good way get line file \n strip splitline recognize win mac unix line type want strip line strip useful exemple process line end want concatenate text work change file create list name word equal rid \n answer part bracket get way return code help read first line use list split option convert first line word separate space store list access word store string thing use loop try follow caution remove \n view text
understand build function property work confuse property use decorator take argument use build function use decorator example documentation property argument getx setx delx doc string code property use decorator object function code place object function argument x.setter x.deleter decorator create case property function return special descriptor object object extra method act decorator return new property object copy old object function replace remember @decorator syntax syntactic sugar syntax mean thing foo function replace property(foo see special object use @foo.sett call property().setter method show return new copy property time setter function replace decorate method follow sequence create full property use decorator method create function property object getter next use method add setter last add deleter method last least property object act descriptor object .__delete method hook instance attribute set delete descriptor howto include pure python sample implementation property type documentation say shortcut create read property equivalent minimal example @property implement word remain method property first part simple next step extend property setter deleter happen appropriate method return new property inherit old x give setter x.deleter work way example @property help refactor code take summarize imagine create class money user create library depend class use let suppose decide change money class rid dollar cent attribute decide track total amount cent mention user try run library result error attributeerror money object attribute dollar mean rely original money class change line code dollar cent use painful avoid use @property call library work expect change single line code library fact know library change setter work fine use @property abstract class give minimal example follow let start python decorator python decorator function help add additional functionality define function python object function first class object mean reference variable add list pass argument function consider follow code snippet say decorator function modify say_bye function add extra line code python syntax decorator let go case scenario let talk oop principle getter setter use many object orient programming language ensure principle datum encapsulation(which see bundle datum method operate datum method course getter retrieve datum setter change datum accord principle attribute class make private hide protect code yup @property pythonic way use getter setter python great concept call property make life object orient programmer simple let assume decide make class store temperature degree celsius refactore code achieve property python property build function create return property object property object method getter setter delete break point note access value temperature writing go define name get_temperature set_temperature unnecessary pollute class namespace pythonic way deal problem use @property point note see code elegant let talk real life practical scenario let say design class follow let assume class get popular client start use program kind assignment object fateful day trust client come suggest value horrible scenario due property easy create property version great start simple implementation imaginable free migrate property version change interface property replacement getter setter check implementation read post realize need real life example @property consider flask app use authentication system declare model user models.py code hide attribute password use @property trigger attributeerror assertion try access use @property.setter set actual instance variable auth views.py instantiate user notice attribute password come registration form user fill form password confirmation happen front end equalto('password message='password match case wonder different topic relate flask form hope example useful point clear many people direct point search feel important start @property decorator eg:- call function get_config work notice use bracket call function basic thing search @property decorator use function variable good explanation find python @property explain use full example selva prabhakaran |||| post november help understand https://www.machinelearningplus.com/python/python-property/ property class @property decorator check rewrote example help(property show @property syntax identical property syntax difference use property see question explain property class bit line initialization rewrite mean fget fset fdel next image show triplet class property set delete overridden implementation descriptor pattern python general descriptor object attribute bind behavior attribute access overridden method descriptor protocol use property setter getter deleter method bind function property check next example method s2 class set property double decorator function take function argument return closure closure set inner function free variable inner function close free variable call closure free variable variable inner function pass inner docorator name say decorator decorating receive function simple decorator function receive undecorated_func pass inner free variable inner print inner return undecorated_func call decorator(undecorated_func return inner key decorator name inner function name function pass inner function call undecorated_func inner name undecorated_func pass undecorated_func decorator return undecorated_func print inner print statement decorate undecorated_func let define class property decorator decorate name @property happen first argument property getter happen second decoration mention decorator return inner function name inner function name function pass important thing aware name immutable first decoration get second get modifying name second decoration python see property object getter python create new name object add fget first obj set fset property declare way look example write property python follow give example clarify @property consider class name student variable name want class_number range explain wrong solution correct code wrong validate range validation solution wrong validation check time make class instance check possible change number range correct solution example c object example use initialize init remove define part class output comment self.x init output set default none default getter function getter default value pass property value see define bad define default use def self default note getter logic value manipulate ensure manipulated print statement note use lua able create helper call single function make similar python use property work degree function create use issue time call create strange code way prefer flexibility lua meta table fact use actual setter getter access variable thing build python instance gui program designing possible lot additional library code autohotkey access dll call do c find right thing project switch python note code output forum break add space part code work copy pasting ensure convert space tab use tabs python file line filesize kb mb space kb tab equate massive difference file size reduction processing time tab adjust user prefer space width mean thoughtful developer eye sight deficit note function define class indent bug forum software ensure indent copy paste
follow indexed dataframe name column row continuous number add new column e exist datum frame want change datum frame new column length dataframe add column e example edit indicate comment good method add value series new column dataframe use assign edit report get settingwithcopywarne code code run current pandas version settingwithcopywarne aim inform invalid assignment copy dataframe say wrong trigger false positive know adequate method purpose warn follow advise try use .loc[row_index col_indexer value fact efficient method describe pandas docs original answer use original df1 index create series simple way add new column df['e e add new column e exist datum frame change datum frame series get length dataframe assume index value e match df1 easy way initiate new column name e assign value series e assign pandas pandas use assign assign new column dataframe return new object copy original column addition new one example include source code assign function include column context example description new feature introduce find pandas dataframe implement order dict column mean getitem use get certain column setitem use assign new column example dataframe column add use accessor note work index dataframe pd.serie try assign dataframe index run trouble see example pd.serie default index enumerate n. pandas method try smart use method pandas perform outer join outer merge use index leave hand dataframe index right hand series df['column = series cause cognitive dissonance method try lot different thing depend input outcome predict know pandas work advice code basis explore datum notebook fine pd.serie assign top bottom code productive code sure index order worth safeguard kind issue downcast pd.serie np.ndarray list trick explicit coder come say look redundant optimize set index pd.serie index df explicit pd.serie available assign index dissonance problem feel index dataframe dictate thing drop index clean function thing df.assign make explicit problem watch df.assign column call self cause error make df.assign kind artifact function say use self know function change future support new argument column name argument new update pandas cause problem upgrading seem recent pandas version way go use df.assign df1 df1.assign(e np.random.randn(slength produce settingwithcopywarne numpy efficient note original old suggestion use map slow easy way avoid call chained indexing set new value pandas object click read want set whole new column initial base value none df1['e none assign object type cell free put complex datum type list individual cell dread settingwithcopywarning fix use iloc syntax dataframe create read_sql odbc source use suggestion lowtech follow work work fine insert column end know efficient like warn message think well solution find think depend aspect index note work give error message try overwrite exist column note assign good solution see documentation http://pandas.pydata.org/pandas-docs/stable/generated/pandas.dataframe.assign.html#pandas.dataframe.assign work datum flow type overwrite intermediate value create empty column column add series variable work replace exist column.just type new_columns_name column want overwrite exist column data new series data data frame series object index pandas.concat work case index foolproof example thing note leave join df1.index want outer join effect imperfect solution create dataframe index value cover universe datum use code example insert new column give location loc amount column datum frame use want add column e end data frame call df use value series integer case cell fill value array structure https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.dataframe.insert.html add hum3 solve settingwithcopywarne resort case false positive generate fake chain indexing dict['a']['e e new column dict['a dataframe come dictionary note know switch warning use pd.options.mode.chained_assignment none use solution give assign new column index datum need index least case add new column e exist data frame look general way add column dataframe get dumb settingwithcopywarning follow come sake completeness solution use method datum solution create new empty column short solution follow m new pandas python general promise want assign scaler value row new column df df new column value=10 row settingwithcopywarne easy fix copy dataframe add column special case add new column pandas dataframe add new feature column base exist column datum dataframe let dataframe column feature_1 feature_2 probability_score add new_column predicted_class base data column probability_score use map function python define function implement logic give particular class_label row dataframe add series object new column exist df need make sure index add df way insert new column pandas dataframe use simple assignment use assign use insert use concat insert new column loop sample code output use simple way add new column exist dataframe
python interpret language source directory contain file identify window compile python file give understand python interpret language popular meme incorrect construct misunderstand natural language level similar mistake say bible hardcover book let explain simile bible book sense class actual physical object identify book book identify copy bible suppose fundamental common content different language different acceptable translation level footnote annotation book allow differ myriad aspect consider fundamental kind bind color bind font(s use printing illustration wide writable margin number kind builtin bookmark possible typical printing bible hardcover bind book mean bookmarke several place thumb look give chapter verse pointer hardcover bind make give copy use mundane practical issue use determine give actual book object copy bible paperback printing possible python language sense define class language implementation similar fundamental respect syntax semantic part allow differ allow differ implementation detail include deal source file give compile source low level form form save compile form disk execute say form classical implementation cpython call python short several production quality implementation side side microsoft ironpython compile clr code .net jython compile jvm codes pypy write python compile huge variety end form include time generate machine language python (= = implementation python language many different book object bible copy bible interested cpython compile source file specific low level form know bytecode need bytecode file correspond source file bytecode file old source compile different python version save bytecode file disk avoid recompile future ironpython compile clr code save disk depend jython jvm code save disk use .class extension save low level form execute appropriate virtual machine know interpreter cpython vm .net runtime java vm jvm appropriate sense typical implementation python interpret language c typical implementation strategy produce bytecode execute vm interpreter focus heavy slow high ceremony compilation process cpython design compile possible lightweight possible little ceremony feasible compiler little error checking optimization run fast small amount memory turn let run need user need aware compilation go time accept work compilation perform automatic compilation order check error perform optimization continuum gray scale black white situation arbitrary put threshold give level say level call compilation"!- contain byte code python interpreter compile source code execute python virtual machine python documentation explain definition python interpret language oppose compile distinction blurry presence bytecode compiler mean source file run create executable run thing interpret language interpreter compiler use trait implementation language language implement interpreter compiler vast majority language implementation type example interpreter c c++ compiler javascript php perl python ruby majority modern language implementation combine interpreter compiler multiple compiler language set abstract mathematical rule interpreter several concrete implementation strategy language live different abstraction level english type language term interpret language type error statement python interpret language false false imply statement make sense wrong make sense language define interpret particular look exist python implementation implementation strategy use notice single implementation list other mention tinypy shedskin psyco compiler fact know python implementation interpret implementation plan implementation term interpret language make sense interpret meaning language interpret implementation true tell know talk particular file see cache bytecode file produce cpython stackless python unladen swallow create python interpreter file import contain compile bytecode import module program idea translation source code bytecode need do skip subsequent import new corresponding .py file speed startup little interpret speed loading module python cache compile content module cpython compile source code byte code performance reason cache byte code file system source file change make load python module fast compilation phase bypass source file foo.py cpython cache byte code foo.pyc file next source python3 python import machinery extend write search byte code cache file single directory python package directory directory call pycache flow chart describe module load information ref pep3147 ref:“compile python file beginner python compile script compile code call byte code run running script consider import create example script file abc.py import module xyz.py run abc.py xyz.pyc create xyz import abc.pyc file create abc.py n’t import create file module import use py_compile compileall module py_compile module compile module way use py_compile.compile function module write location abc.py override optional parameter cfile compile file directory directory use compileall module directory name current directory example omit module compile find sys.path python least common implementation follow pattern compile original source byte code interpret byte code virtual machine mean common implementation pure interpreter pure compiler side compilation process hide file treat cache speed thing aware invalidate load compile source code necessary base file time date stamps time see problem compile bytecode file get timestamp future mean look new source file look new source file recompile matter change make ignore python .py file text file write line code try execute file use say python filename.py command invoke python virtual machine python virtual machine component compiler interpreter interpreter read text file text convert byte code target pvm hardware pvm pvm execute byte code file generate part run perform import operation file shell file file generate next time run execute .py file system load file need save machine cycle processor file generate need .py file edit tldr convert code source code python vm interpret execution bottom understand final stage program run execute program instruction hardware machine stage precede execution executing run cpu convert bytecode machine code machine code final stage conversion instruction execute cpu give machine code machine code execute cpu convert bytecode machine code convert source code bytecode actual plot approach carry stage convert execute code compile convert execute code line line interpret example compile source code bytecode compile bytecode machine code interpret machine code execution implementation language skip stage efficiency compile source code machine code interpret machine code execution implementation skip middle step interpret source code execution modern language involve compile interpret java example compile source code bytecode java source store bytecode compile bytecode machine code use jvm interpret machine code execution jvm implement different oss java source code execute different os jvm instal python example compile source code bytecode find file accompany source code compile bytecode machine code do virtual machine pvm result executable file interpret machine code executable execution say language interpret compile java python interpret language confusion occur third stage convert bytecode machine code do use software call virtual machine confusion occur virtual machine act machine virtual machine introduce portability vm real machine allow execute source code approach use vms third stage compile people say compile language importance vms say language compile interpret python code go stage first step compile code file bytecode file(bytecode interpret use cpython interpreter refer link process code compilation execution explain easy term important distinguish language specification language implementation compiler consist independent part frontend backend frontend receive source code validate translate intermediate code backend translate machine code run physical virtual machine interpreter compiler case produce way execute intermediate code virtual machine execute code necessary transform code intermediate code code assemble bytecode store file.pyc need compile module program time run view assemble python code use build compil static binary python language build interpreter c language tool lex simplify automate proccess building compiler machine understand english language understand byte code compile c c++ java interpret e.g. ruby python cache version byte code quick read difference compile language interpret language tldr interpret language require compile code run time time strict typing
programming python mark lutz mention term mixin c c++/c background hear term mixin reading line example link long presuming case use multiple inheritance extend class oppose proper subclasse right want put new functionality subclass matter mixin multiple inheritance approach use composition separate mixin multiple inheritance matter semantic mixin special kind multiple inheritance main situation mixin use example number consider werkzeug request response system make plain old request object say want add accept header support make want make request object support accept header etag authentication user agent support difference subtle example mixin class make stand traditional multiple inheritance authenticationmixin example authenticator class design stand first note mixin exist multiple inheritance language mixin c mixin stand base type provide limited functionality polymorphic resonance child class think think interface implement implement inherit benefit functionality mixin narrow scope mean extend edit suppose address ask big benefit c big place mixin benefit disposal pattern implement idisposable want follow pattern end writing write basic code minor variation extendable disposal mixin save lot extra type edit answer question separate mixin multiple inheritance matter semantic difference mixin standard multiple inheritance matter semantic class multiple inheritance utilize mixin part multiple inheritance point mixin create type mixed type inheritance affect inheriting type offer beneficial functionality type think interface implement use mixin develop language support ' m difficult time come decent example supply ahah moment try go use example contrived language provide feature way explain mixin suppose create use go suppose type want able serialize xml want type provide toxml method return string contain xml fragment datum value type fromxml allow type reconstruct data value xml fragment string contrive example use file stream xml writer class language runtime library point want serialize object xml get new object xml important point example want generic way want implement toxml fromxml method type want serialize want generic mean ensure type work want code reuse language support create xmlserializable mixin work type implement toxml fromxml method use mechanism important example capable gathering necessary datum type mixed build xml fragment return toxml capable restore datum fromxml call use type need serialized xml inherit xmlserializable need serialize deserialize type call toxml fromxml fact xmlserializable fledge type polymorphic build document serializer know original type accept say array xmlserializable type imagine use scenario thing create mixin ensure class mix log method call mixin provide transactionality type mix list go think mixin small base type design add small amount functionality type affect type golden answer aim explain mixin example self contain short need know library understand example python language understandable example language ruby term much common language python thread consider controversial question multiple inheritance necessary characterize mixin definition see citation authoritative source say mixin python see possible definition mixin consider different similar concept abstract base class people agree correct consensus vary different language definition multiple inheritance mixin class method class use method define class class mean instantiate serve base class instance method call raise exception constraint source add class contain data method see necessary practice many useful mixin data base class datum simple use classic example implementation comparison operator particular example achieve functools.total_ordering decorator game reinvent wheel definition multiple inheritance mixin design pattern method base class use method define method mean implement base class derive definition term mixin class refer base class intend use design pattern todo use method implement easy decide give class mixin method implement derive class case definition consider author intention pattern interesting possible recombine functionality different choice base class authoritative python occurrence official documentatiton documentation use term mixin method states class class get iter mixin method free least point documentation mixin require multiple inheritance coherent definition documentation course contradictory different point important python library use definition documentation page use term set mixin suggest class set iterator call mixin class language ruby require multiple inheritance mixin mention major reference book programming ruby ruby programming language c++ virtual method set pure virtual method definition coincide definition abstract class class pure virtual method class instantiate definition possible virtual inheritance multiple inheritance derive class think disciplined way use multiple inheritance mixin python class follow convention class call mixin understand convention govern call mixin mixin way limit potential complexity multiple inheritance make easy track flow program limit look compare full multiple inheritance similar ruby module want add instance variable flexibility allow single inheritance go composition say see class call xyzmixin instance variable mixin limit form multiple inheritance language mechanism add mixin class different term syntax inheritance context python mixin parent class provide functionality subclass intend instantiate cause say multiple inheritance mixin class confused mixin instantiate use semantic real difference example documentation orderedcounter subclass counter ordereddict collection module counter ordereddict intended instantiate use subclasse counter order reuse code object powerful way reuse code problematic turn bug object fix care create bug subclass mixin promote way get code reuse potential coupling issue cooperative multiple inheritance orderedcounter use mixin use functionality couple datum example mixin intend use provide new different functionality example standard library couple mixin socketserver library forking thread version type server create use mix class instance threadingudpserver create follow mix class come override method define udpserver set various attribute change behavior underlying server mechanism case mixin method override method udpserver object definition allow concurrency overridden method appear process_requ provide method source code mixin demonstration purpose object evolve usefulness repr usage usage think previous response define well mixin order understand useful compare mixin abstract class interface code implementation perspective abstract class class need contain abstract method abstract class contain state instance variable non abstract method interface mixin convention define class common feature abstract class interface mixin exist instantiate mixin concept programming class provide functionality mean use instantiation main purpose mixin provide functionality standalone good mixin inheritance mixin avoid state language ruby direct language support python use multi class inheritance execute functionality provide python watch video http://www.youtube.com/watch?v=v_uki2nolem understand basic mixin useful beginner understand basic mixin work problem face implement wikipedia good http://en.wikipedia.org/wiki/mixin think good explanation want provide perspective scala mixin describe interesting mixin fuse create new kind class inherit essence inherit multiple class mixin generate new kind class property mixin inherit make sense scala base jvm multiple inheritance support java 8) mixin class type way special type call trait scala hinted way class define class newclass extend firstmixin secondmixin thirdmixin ' m sure cpython interpreter mixin class composition surprised come background call abc interface equivalent mixin similar concept divergent use implementation advise mix in new python code find way composition inheritance monkey patching method class much effort old style class use mix in way grab method class new style world mix inherit object mean use multiple inheritance introduce mro issue way make multiple inheritance mro work python super function mean whole class hierarchy use super difficult understand flow control couple example help build class want act dictionary define various method necessary bit pain alternative define inherit addition inheritance userdict.dictmixin move collections.dictmixin py3k effect define rest dictionary api second example gui toolkit wxpython allow make list control multiple column say file display windows explorer default list basic add additional functionality ability sort list particular column click column header inherit listctrl add appropriate mixin python example program language term mixin use refer construct use much way add pile stuff class way mi insert template think aware safe macros close scope allow single line code class struct function module expand number declaration op hear mixin c++ call recur template pattern c++ @ciro santilli mention mixin implement abstract base class c++ abstract base class use implement mixin overkill functionality virtual function run time achieve use template compile time overhead virtual table lookup run time crtp pattern describe detail convert python example @ciro santilli answer c++ use template class edit add protect constructor comparablemixin inherit instantiate updated example show protect constructor cause compilation error object comparablemixin create mixin give way add functionality class i.e interact method define module include module desire class ruby support multiple inheritance provide mixin alternative achieve example explain multiple inheritance achieve use mixin use python mixin implement unit test python milter milter talk mta make unit test difficult test mixin override method talk mta create simulated environment drive test case take unmodified milter application spfmilter mixin testbase use testmilter test case milter application http://pymilter.cvs.sourceforge.net/viewvc/pymilter/pymilter/milter/test.py?revision=1.6&view=markup example ruby help include mixin comparable define function mixin provide function invoke give right result instance return object equal less instance big big concept come steve ice cream ice cream store found steve herrell somerville massachusetts mix in candy cake mix basic ice cream flavor vanilla chocolate inspire steve ice cream designer lisp object system flavor include concept programming language first time mix in small helper class design enhance class flavor large standalone class main idea mix reusable extension reusable oppose exclusive extension oppose base concept orthogonal concept single multiple inheritance abstract concrete class mix class use single multiple inheritance abstract concrete class mix class incomplete interface abstract class incomplete implementation concrete class complete implementation mix class name suffix -mixin -able -ible emphasize nature python standard library threadingmixin forkingmixin class socketserver module hashable iterable callable awaitable asynciterable reversible class module example mix class use extend python build list dict class log capability read c background good starting point mixin implementation .net want check codeplex project http://remix.codeplex.com/ watch lang.net symposium link get overview come documentation codeplex page regard stefan
upgrade pandas application pop many new warning want know mean need change suspend warning insist use quote_df['tvol quote_df['tvol']/tvol_scale settingwithcopywarne create flag confuse chain assignment follow work expect first selection return copy see gh5390 gh5597 background discussion warning offer suggestion rewrite follow fit usage equivalent clear care write make original frame overwrite reference pattern differentiate chain assignment example false positive warning potential false positive address doc indexing read disable new warning follow assignment post mean reader setup know deal warn important understand mean raise first place filtering dataframe possible slice index frame return view copy depend internal layout various implementation detail view term suggest view original datum modifying view modify original object hand copy replication datum original modifying copy effect original mention answer settingwithcopywarne create flag chain assignment operation consider df setup suppose like select value column b value column pandas allow different way correct other example return result read value make difference issue problem chain assignment difficult predict view copy return become issue attempt assign value build early example consider code execute interpreter single setitem call df otoh consider code depend getitem return view copy setitem operation work general use loc label base assignment iloc integer positional base assignment spec guarantee operate original set single cell use iat find documentation note boolean indexing operation do loc do iloc difference iloc expect integer position index numpy array boolean value integer position index column example write write consider simple operation column df select divide raise warning operation work couple way silence warning recommend use loc slice subset change pd.options.mode.chained_assignment set none warn raise warn default none suppress warning raise throw settingwithcopyerror preventing operation go make deepcopy @peter cotton comment come nice way change mode modify gist use context manager set mode require reset original state finish usage follow raise exception lot time user attempt look way suppress exception understanding raise first place good example xy problem user attempt solve problem symptom deep root problem question raise base common problem encounter warning solution present question dataframe want assign value col > expect output wrong way way use loc question try set value cell 'd expect output try different way access cell good way question relate warning good understand particular operation avoid situation warning arise future use follow method question try subset value base condition dataframe assign value try seem fine get settingwithcopywarne fix code high pipeline create df2 large case boolean indexing return view df2 reference original assign df2 copy question ' try drop column c place use throw settingwithcopywarne happen df2 create view slice operation solution make copy df use loc general point settingwithcopywarne show user new user operate copy original think false positive iow know ok possibility turn default warn warn @garrett suggest option set is_copy flag turn check object copy warning happen code op show legitimate case warn false positive way warning selection operation reindex e.g. answer question deal make false slice see pandas.dataframe.copy wait slice return copy warning message attempting read long answer give warn df0 df1 dataframe object different enable pandas print warning let find use diff tool choice see couple address material difference method decide warn dataframe._check_setitem_copy check go make copy dataframe warn suggest use use frame get warn mislead annoying bet helpful chain assignment use detect chain assignment print warn go pandas.ix case return new stand alone dataframe value decide change dataframe change original dataframe pandas try warn object try thing read clean code strong smell give dataframe behavior behavior stand dataframe change change df behavior change original dataframe pandas developer recognize object create new object help accession assignment datum .iloc try create copy datum mean modify exist dataframe inplace memory efficient predictable behavior code example load big file lot column modify small pd.read_csv function help lot make loading file lot read column interested name need use evil object magical stuff topic confusing pandas simple solution problem clear datum filter operation loc return copy view dataframe use filter dataframe confuse simple solution need work large set datum update value make sure copy dataframe assignment get issue assign new dataframe pre exist dataframe use method instance return error fix seem resolve error case change efficient use large dataframe due make new copy use method generate new column value fix resolve error efficient add = true remove doubt solution make deep copy slice regular copy applicable depend context memory constraint size slice potential performance degradation copy occur loop clear warning receive doubt warn throw column drop copy slice try set value copy slice modification copy slice simplify step take confirm suspicion hope help understand warning know healthy reminder warn possible avoid change make df1 affect df2 note avoid import copy.deepcopy df.copy illustrate warn possible avoid change make affect df1 work work want suppress warning question explain discuss exist answer provide neat pandas approach context manager use pandas.option_context link documentation example need create custom class dunder method bell whistle first context manager code example worth notice approach modify surprising shallow df copy false prevent warning raise understand shallow copy modify pandas magic clarification beginner come r seem work bit hood follow harmless look functional code keep produce settingwithcopy warning figure read understand issue chain indexing code contain look plot function call df data frame object remember create indexing data frame view make line plot equivalent chain indexing fix apply numpy mean need import datum use example numpy essential calculation stop settingwithcopy warn message use line code avoid whole problem believe use assign documentation assign new column dataframe return new object copy original column addition new one see tom augspurger article method chain pandas modern pandas part method chain assign slice variable want set use variable following want use jeff solution condition compute df2 long reason use follow df2.index.tolist return index entry df2 use set column b original dataframe facing warning execute part code scaler minmaxscaler numericals[0 contain name numerical column warn remove changed code change case create new column base index warn use insert direct assignment work issue occur follow simplified example able solve correct solution old code warning print warning line old_row[field row update_row method type series replace line method accessing lookup series work fine result way disable warning keep chain indexing issue create copy dataframe(s use method warning appear remove warning happen make change original quote_df word want play reference object quote_df create quote_df
follow valid syntax like find related question right question php state b use indicate string binary oppose unicode need code compatible version php migrate php think apply python find documentation python site use u character syntax specify string unicode mention character document curiosity symbol b u thing python make clear distinction type familiar familiar c(++ forget learn char string character byte idea long obsolete use str want represent text use byte want represent low level binary datum struct encode str byte object decode byte str mix type notation confusing allow byte 0x01 0x7f specify ascii character hex number emphasize character byte version python lack kind distinction text binary datum order ease to-3.x transition b literal syntax backporte python order allow distinguish binary string byte text string str b prefix tell script convert unicode string b literal python purpose php curiosity symbol b u thing r prefix create raw string backslash tab triple quote allow multi line string literal quote python documentation prefix b b ignore python indicate literal become byte literal python code convert u b prefix follow r prefix python documentation state byte literal prefix b produce instance byte type str type contain ascii character byte numeric value great express escape b denote byte string byte actual datum string abstraction multi character string object take single character stre byte size depend encoding take byte byte string get single bit value represent complete character character due encode byte tbh use string specific low level reason use bytes server side send response send form byte type appear client b'response server order rid b use code server file client file print response server answer question order decode it(remove b need use example absence b throw typeerror exception python add b prefix fix problem turn bytes literal str valid r prefix cause backslashe uninterprete ignore difference matter addition other say note single character unicode consist multiple byte way unicode work take old ascii format bit code look 0xxx xxxx add multi bytes sequence byte start xxxx represent character ascii unicode compatible ascii use json convert dictionary key":"value flask example flask run terminal line flask routes.py key':'value string look byte sequence sequence number map character table look h e l o. value string convenient syntax define byte sequence use text character number save type byte sequence mean interpret character case example read jpg file produce sequence nonsense letter b jpgs non text structure convert string byte bytes(somestring.encode solution work python
connect mysql database use python program setting install mysql driver php sqlite driver instal default python use package mysqldb hard install use easy_install note mysqldb support python window user get exe mysqldb linux casual package python mysqldb use sudo apt get install python mysqldb debian base distros yum install mysql python rpm base dnf install python mysql modern fedora distro command line download mac install mysqldb use macport usage installing reboot mandatory prevent answer question post go wrong reboot use package course possibility option basic example look documentation good start point advanced usage know work want use orm avoid write sql manipulate table python object famous orm python community sqlalchemy advise use life go easy discover jewel python world peewee lite orm easy fast setup use make day small project stand alone app use big tool sqlalchemy django overkill example work box peewee pip install peewee require way use mysqldb support python reference need mysqldb accept library recommend mysql connector python mysql http://dev.mysql.com/downloads/connector/python/. package 110k pure python system independent dead simple install download click confirm license agreement go xcode macport compile restarting connect oracle mysql support pure python connector mean binary install python library call connector python http://dev.mysql.com/downloads/connector/python/ installation see usage example stop use mysqldb want avoid instal mysql header access mysql python use pymysql mysqldb implement python external dependency make installation process operating system consistent easy pymysql drop replacement mysqldb imho reason use mysqldb ptsd instal mysqldb mac osx nix systems installation pip install pymysql ready play example usage pymysql github repo replace mysqldb exist code exist code use mysqldb replace pymysql use simple process subsequent reference mysqldb use pymysql try use mysqldb mysqldb support python page http://www.kitebird.com/articles/pydbapi.html page run command terminal install mysql connector run python editor connect mysql sample execute mysql command python edior command https://www.w3schools.com/python/python_mysql_getstarted.asp use mysqlclient pymysql recommend work old version python try oursql note project maintain bug fix push db driver oursql reason list link say oursql well similar mysqldb tutorial documentation decent course orm sqlalchemy good choice mention answer sqlalchemy python sql toolkit object relational mapper give application developer full power flexibility sql sqlalchemy provide full suite know enterprise level persistence pattern design efficient high perform database access adapt simple pythonic domain language good way connect mysql python use mysql connector python official oracle driver mysql work python work python python follow step mention connect mysql install connector use pip pip install mysql connector python download installer https://dev.mysql.com/downloads/connector/python/ use connect method mysql connector python connect mysql.pass require argument connect method host username password database name create cursor object connection object return connect()method execute sql query close connection work complete example reference https://pynative.com/python-mysql-database-connection/ important api mysql connector python dml operation use run query use persist change fetch datum use cursor.execute run query cursor.fetchall cursor.fetchmany(size fetch datum answer case connect specific database upfront example want create database use demonstrate follow mark duplicate get upset copy answer like highlight aspect mr napik response miss cause nationwide website downtime share information prevented code important thing clause allow connection close happen cursor sqlstatement portion code lot active connection cause dbloadnocpu spike crash db server hope warning save server job mysqldb straightforward way get execute sql query connection period prefer way pythonic use mighty sqlalchemy query relate tutorial tutorial orm capability sqlalchemy python3.6 find driver pymysql mysqlclient test performance get result mysqlclient fast test process(need install python lib profilehooks analyze time elapse raw sql select foo execute mysql terminal row set sec pymysql 2.4s pymysql profile mysqlclient 0.4s mysqlclient profile seem mysqlclient fast pymysql modification answer run command install mysql python remember case sensitive mysqlclient good other provide support specific version python example code see https://github.com/pymysql/mysqlclient-python take look storm simple sql mapping tool allow edit create sql entry write query simple example find object use find primary key information see tutorial mysql db connection pymysql release sep support python3 simple code output connect python code mysql way first step get library open terminal execute pip install mysql python connector installation go second step second step import library open python file write follow code import mysql.connector third step connect server write follow code conn host name localhost username username root password password third step make cursor make cursor make easy run query make cursor use follow code cursor conn.cursor executing query execute query follow cursor.execute(query query change thing table add follow code execution query conn.commit get value query want get value query follow cursor.excecute('select cursor print(i cursor.fetchall print(i fetchall method return list many tuple contain value request row row closing connection close connection use follow code handling exception handel exception vai follow method try logic pass mysql.connector.errors.error logic pass use database example account create system store data database name blabla add database parameter connect method mysql.connector.connect(database database name remove information host username password python cymysql https://github.com/nakagami/cymysql pip instal window pip install cymysql need cython quick painless install driver basic code go install driver ubuntu sudo apt get install python pip sudo pip install pip sudo apt get install python dev libmysqlclient dev sudo apt get install mysql python mysql database connection code python come inbuilt library interact mysql order make connection mysql database python need install mysql driver module python environment mysql connecter python open source python library connect python code mysql data base line code compatible late version python install mysql connector python connect mysql database use follow code snippet connect django mysql django connect model project mysql data base need install mysqlclient library configure django set project connect mysql database use follow set write dedicated python tutorial blog cover connect mysql database create table use python know click first install python mysql connector https://dev.mysql.com/downloads/connector/python/ python console enter
get python terseness syntax easy way write statement fit line example simple way write mean objective c write similar python update know instance use count = count n. ask general syntax ternary operator expression python syntax well example thank mr burn fruit = = apple assignment contrast syntax use ordinary syntax conflate line colon ternary operator say solution readable general ternary syntax way e.g evaluate branch choose evaluate choose branch code snippet become
get line count large file memory- time efficient manner line get well solution read entire file figure many \n return result well way read entire file sure good solution bind good make sure use unnecessary memory look cover believe memory map file fast solution try function function post op opcount simple iteration line file simplecount readline memory map file mmap mapcount buffer read solution offer mykola kharechko bufcount run function time calculate average run time line text file window xp python gb ram ghz amd processor result edit number python buffer read strategy seem fast window python code post similar question reputation score jump bit thank bump solution ignore way run use unbuffered raw interface use bytearray buffer apply python python raw interface used default python default unicode use modified version timing tool believe follow code fast marginally pythonic solution offer use separate generator function run do generator expression line use itertool get weird look timing execute subprocess run wc filename perfplot analysis buffer read solution fast memory efficient solution time slow code reproduce plot python program use multiprocesse library distribute line counting machine core test count line file second second use core window server note use memory mapping make thing slow line bash solution similar answer use modern subprocess.check_output function use python file object method readline follow open file create list line file count length list save variable close file fast thing find use pure python use amount memory want set buffer appear sweet spot computer find answer reading line stdin slow c++ python tweak tiny bit good read understand count line wc fast use seem clean update use pure python cost memory usage subprocess fork new process memory footprint parent process execute command line solution snippet kyle answer good alternative comparision performance get small improvement version use constant buffer avoid memory gc play buffer size see little improvement variant fast reason buffer read line line string.count fast complete method try variant fileinput module pass 60mil line file state method little surprise fileinput bad scale bad method clear good way modify buffer case empty file last line \n count simple method lot answer tiny economy optimizable problem work several project line count core function software work possible huge number file paramount importance main bottleneck line count access read line order detect line return character second potential bottleneck memory management load fast process bottleneck negligible compare first major way reduce processing time line count function tiny optimization disable gc collection micro manage trick hardware solution major obvious way programmatic buy fast ssd flash hard drive get big speed boost data preparation solution generate modify file process generate acceptable pre process convert line return unix style \n save character compare windows macos style big save easy gain write line fix length need variable length pad small line calculate number line total filesize fast access good solution problem pre process fit end purpose parallelization hardware solution buy multiple hard disk possible ssd flash disk go speed disk leverage parallelization store file balanced way easy balance total size disk read parallel disk expect get multipli boost proportion number disk buy multiple disk option parallelization help disk multiple reading header professional grade disk disk internal cache memory pcb circuitry likely bottleneck prevent use head parallel devise specific code hard drive use need know exact cluster mapping store file cluster different head read different head know sequential reading random reading parallelization single disk performance similar random reading sequential reading test hard drive speed aspect use crystaldiskmark example none option rely micro manage trick improve percent speed line counting function expect significant expect time spend tweak disproportionate compare return speed improvement see result opening file iterator convert sequence length concise explicit loop avoid enumerate want get line count python linux recommend method file_path abstract file path relative path hope help count = max(enumerate(open(filename)))[0 liner take sec use method time line file alternative big file use xreadlines python see substitute xreadlines python meta comment answer line reading buffer \n counting technique return answer file text file newline end last line work check last byte last nonempty buffer add b'\n python opening file text mode binary mode yield different result text mode default recognize crlf line ending convert \n binary mode crlf count count b'\n apply read line fix size buffer classic mac os use cr line end know common file day buffer read approach use bound amount ram independent file size line reading approach read entire file ram bad case file use cr line ending bad case use ram file size overhead dynamic resize line buffer open text mode unicode decode storage improve memory usage speed buffer approach pre allocate bytearray use readinto read exist answer vote buggy double count byte top buffer reading answer use large buffer mib use small buffer os read 32k time os start read next cache ask trip kernel return read mib time read whole megabyte preread small amount spend significant amount time sit kernel wait disk return rest datum read last line estimate average line length divide total file size number need exact value work use module follow way filename absolute path file file fit memory create executable script file name count.py pipe file content python script cat huge.txt |||| ./count.py pipe work powershell end counting number line linux naive solution use numba jit time compile function machine code def numbacountparallel(fname run def question cache file memory benchmark run see much disk activity pc time slow reading file first time make time advantage use numba insignificant jit compilation take extra time first time function call useful counting line cython option http://numba.pydata.org/ count line io bind use def file_len(fname question want count line time second call function short way use find give answer possibility line file length contain ascii character follow suspect effort require determine number byte line unicode character use follow work case len function use input line mean determine length
want catch log exception exit want print exact output print exception raise try intercept exception want exit program traceback.format_exc sys.exc_info yield info want answer point traceback module notice print_exc corner case obtain expect python display traceback last exception need access original traceback solution cache exception infos return local variable display use print_exception produce pitfall doc assign traceback return value local variable function handle exception cause circular reference prevent reference local variable function traceback garbage collect need traceback make sure delete use do try statement begin python cycle reclaim garbage collection enable become unreachable remain efficient avoid create cycle hand allow access traceback associate exception python produce surprising result display debug want see current stack trace call traceback.print_stack need raise exception catch want halt program error handle error try extract full traceback use traceback module standard library create complicate stacktrace demonstrate get full stacktrace print full traceback use traceback.print_exc method print good practice logger set module know name module able change level attribute handler case want logger.exception function log want string case want traceback.format_exc function log option see get output error performance concern important io dominate prefer request compatible way log level output adjust make easy turn touch code need efficient way use print log stable prove think stdlib module logging use tempt mess unrelated tool native simple approach do log.exception call log.error log event level error print traceback well consideration exist different purpose example traceback.print_exc output little bit different traceback produce interpreter use confuse read log bang head pass = true log call inappropriate useful catch recoverable error want log use e.g info level traceback well log.exception produce log level error avoid mess sys.exc_info much public interface internal use know intend printing exception exception object get traceback string point code python full example output documentation https://docs.python.org/3.9/library/traceback.html#traceback.format_exception extract traceback info exception object test python addition aaron hall answer logging want use logging.exception logs error level use low level pass exc_info = true see mention answer pass exception object reason python get trace exception object use traceback.tracebackexception.from_exception example code result level stack oppose print screen exception raise stack_lvl_2 intercept uncomment raise line understand exception record current level stack raise stack_lvl_3 case pass stack level add traceback intercept stack_lvl_2 meaning get record level get full trace print stdout catch low level result notice stack print different first last line miss different format intercept exception point raise possible make simple code give information python3 work define function use want print detail output like error object want print whole thing make awkward call right print_exception take positional argument type exception actual exception object exception internal traceback property python type(err optional positional argument pass none place idea want print error traceback one belong error need put try innerloop error occur word need wrap statement fail try specific possible inner loop possible get precise stack trace string raise try step place block catch offend exception use assume flaky_func define log call favorite logging system good idea catch raise keyboardinterrupt kill program use ctrl c. log outside scope question good option log documentation sys traceback module remark answer comment print(traceback.format_exc well job traceback.print_exc latter mixed traceback text want write stdout time produce weird output least build text editor view output build result panel traceback recent call last file c:\users\user\desktop\test.py line hell do_stuff file c:\users\user\desktop\test.py line do_stuff zerodivisionerror integer division modulo finish use want traceback module let print stack dump particular print_last function print last exception stack trace solution write error log file console python solution stacktrace_helper.py
get ascii value character int python function ord get int value char case want convert playing number function chr trick python unichr function return unicode character ordinal unichr argument python use chr unichr ord python documentation ord python documentation note ord give ascii value give numeric value character encoding result ord('ä use raise typeerror use return unicode codepoint pass unicode look accepted answer correct clever efficient way convert whole bunch ascii characters ascii code convert python native type iterate code python trivial python involved py3 style byte object byte alias str iterate character bytearray encoding type iterate ordinal mean conversion go fast local test iterate str get ascii code use map(ord mystr start take long len str use bytearray(mystr py2 mystr.encode('ascii py3 str get multipli pay map(ord mystr rise ~6.5x-7x downside conversion first result take enormous str large temporary byte bytearray force page thrashing matter get ascii code character use ord function example code output
make python class serializable attempt serialize json simple solution simple feature json serializable class implement serializer method call serialize output idea expect output example case call json.dumps(f.__dict want customize output subclass jsonencoder implement custom serialization trivial example see pass class json.dump method cls kwarg want decode supply custom jsondecoder class example complex class consider tool jsonpickle jsonpickle python library serialization deserialization complex python object json standard python librarie encode python json stdlib json simplejson demjson handle python primitive direct json equivalent dict list string int jsonpickle build top library allow complex datum structure serialize json jsonpickle configurable extendable allow user choose json backend add additional backend link jsonpickle pypi answer involve change call json.dump possible desirable happen framework component example want able call json.dumps(obj simple solution inherit dict works class basic datum representation tricky thing set key mention many answer pass function json.dumps convert object type support default support type none mention simple case build function var convert object dict contain attribute note cover basic case need specific serialization certain type exlude certain attribute object attribute use custom function jsonencoder desribe answer add to_json method class add code answer top monkey patch json module import jsonencoder.default check special to_json method use encode object find onur say time update json.dump project onur answer expand include optional tojson method object serialize option wrap json dump class subclasse fileitem class jsonserializable class testing use use jsons pypi https://pypi.org/project/jsons/ convert object attribute dict wanted string class implement jsons.jsonserializable solve thing your_class pip install json fix extend package version fancy john answer thank @fancyjohn example usage make json.dumps work numpy array pandas dataframe 3rd party object see module ~2 line code need explanation note approach simplify fail know edgecase ex custom class inherit dict builtin miss control json behavior external class numpy array datetime dataframe tensor some_file_thats_imported_before_your_class_definitions.py your_class_definition.py cover docs search complex example encode complex number come problem day implement general version encoder python object handle nest object inherit field example result use standard json define default function json limit term object print jsonpickle need pip install jsonpickle limit term indent text inspect content object class change find straight way note print object method cent demonstrate explicit json serialization tree python object note want code use twisted filepath class class trick convert object standard json usage work python2.7 python3 jaraco give neat answer need fix minor thing work note need step load python property use use method aljohri check popularity approach serialization python json deserialization json > python work mind instal package use json trick need import dump(s json_trick json work which'll give work great general exception special thing happen new metaclass magic load work point assume module_name.test_class.mytestcls import change compatible way get instance dictionary identical copy dump want customize de)serialize add special method class serialize part attribute parameter example free bonus get de)serialization numpy array date time order map ability include comment json disclaimer create json_trick problem kyle delaney comment correct try use answer https://stackoverflow.com/a/15538391/1497139 improved version https://stackoverflow.com/a/10254820/1497139 create jsonable mixin make class json serializeable use jsonable super class call offer method extend jsonable class approach offer test example unit test family person sample results tojson asjson unit test family person sample define jsonable mixin find approach integrate https://github.com/wolfgangfahl/pylodstorage project available https://pypi.org/project/pylodstorage/ throw log year old fire want solution meet follow criterion solution wind lot property jsonserializable behave object library go json.dumps(obj guy make complicated simple example way serialize nested class json return python object string need use jsonencoder default parameter simple lambda work fine use @property simple function feel natural modern @dataclas example work normal class well jsonweb seem good solution see http://www.jsonweb.info/en/latest/ building quinten cabo answer difference like lose koder method run issue try serialize complex object member method serializable implementation work object small library serialize object child json parse https://github.com/tobiasholler/pyjsonserialization/ come solution use method pass document dict list objectid serialize run problem try store peewee model postgresql jsonfield struggle general solution key solution go python source code realize code documentation describe explain extend exist json.dump support datum type suppose current model contain field serializable json model contain json field look define custom jsonencoder use jsonfield key default(self obj method single json serializable complaint receive python add code handle unserializable json type enum datetime example support class inheriting enum implement convert peewee model json seriazable object code specific peewee think question post comment section thank able install package recommend try dill work fine project nice thing package interface pickle use pickle project substitute dill see script run change code cheap solution try full anti disclosure way affiliate contribute dill project install package edit code import dill pickle run script see work want clean code shadow pickle module name specific datatype dill serialize project page dill pickle follow standard type none type bool int long float complex str unicode tuple list dict file buffer old new style class instance old new style class set frozenset array function exception dill pickle exotic standard type function yield nest function lambda cell method unboundmethod module code methodwrapper dictproxy methoddescriptor getsetdescriptor memberdescriptor wrapperdescriptor xrange slice notimplemente ellipsis quit dill pickle standard type frame generator traceback see mention serial versione backcompat post solution use bit lot learn java javascript mature go https://gist.github.com/andy-d/b7878d0044a4242c0498ed6d67fd50fe add option use attrs package asdict method convert back class look addition onur answer want deal datetime type order handle datetime.datetime object attribute dict exception usage first need make object json compliant dump use standard json module way function use recursion iterate part dictionary call repr method class build type throw log year old fire offer dataclass wizard task assume use python work dataclasse python builtin module onwards dataclass wizard library convert object attribute dict make reverse serialization straightforward fromdict pypi link https://pypi.org/project/dataclass-wizard/. want string class extend dataclass_wizard.jsonwizard library support dataclasse union type mean serialize object class c1 c2 example whomever want use basic conversion external library override iter str functions custom class use follow way use object wrap dict datum remain preserve many approach problem objdict pip install objdict emphasis provide javascript object act dictionary handle datum load json feature useful provide alternative solution original problem choose use decorator solve datetime object serialization problem code import module module use json normal way specify default keyword serialize data contain date time object datetime serializer code call json.dump json.dump
super work multiple inheritance example give parent method third super().__init refer choose run know method resolution order mro detailed reasonable amount detail guido blog post method resolution order include early attempt example third call first.__init python look attribute class parent list leave right case look init define python start look attribute look second situation become complex inheritance start crossing path example inherit second read link detail nutshell python try maintain order class appear inheritance list start child class instance mro second third first way python find coherent method resolution order raise exception fall behavior surprise user example ambiguous mro third mro second second first obvious expectation python raise error example lack super call point example show mro construct intend print first\nsecond\third play example add super call see happen gain deep understanding python inheritance model goal keep simple show mro build build explain code answer buggy miss super call class require co operative subclasse work well output super call find next method mro step second execution stop end second.__init super call first second output miss second wanted elaborate answer lifeless bit start read use super multiple inheritance hierarchy python did't need understand super(myclass self).__init provide next init method accord use method resolution order mro algorithm context complete inheritance hierarchy last part crucial understand let consider example accord article method resolution order guido van rossum order resolve init calculate python use depth leave right traversal remove duplicate last let follow happen instantiate instance third class third detail instantiate third result mro algorithm improve python onwards work complex case guess use depth leave right traversal remove duplicate expect last work case please comment case read blog post guido know diamond problem page entry python short python call superclass method leave assume descend object python compute method resolution order mro base class inheritance tree mro satisfie property order exist python error inner working c3 linerization class ancestry read https://www.python.org/download/releases/2.3/mro/ method call first occurrence method mro call class implement method skip call method call next occurrence method mro matter order place class inheritance put call super method note see mro python use mro method follow example diamond inheritance class mro test call return child output child outputs inheritance order matter class chain inheritance call super example leave call super method right parent call child output call super parent skip child output want access method particular parent class reference class use super super follow chain inheritance get specific class method reference particular parent method case child output answer super question feel relevant enough share call inherit class note way call ' m sure init call solve issue multiple inheritance different variable initialization multiple mixin function call add variable pass kwargs add mixin interface endpoint super call extendable base class b c mixin class provide function f. b expect parameter v init c expect w. function f take parameter y. q inherit class mixinf mixin interface b c. @calfzhou comment use kwargs run example result remember mro confusing avoid use keyword parameter etcetera little annoying notice people forget time use args kwargs override method useful sane use magic variable cover point pass parameter initialization class destination super depend subclass good way pass parameter pack careful parameter name different meaning example give call super class init direct assignment parameter tempt fail call super class mro change class call multiple time depend implementation conclude cooperative inheritance specific parameter initialization work consider call super().foo call sub class method resolution order mro method order method call resolve super().foo search hierarchy consider close implementation find raise exception relationship true visit sub class super class hierarchy story multiple inheritance search super().foo implementation visit class hierarchy relation consider follow example low class hierarchy hierarchy diagram mro red number show mro mro e c h f g b object note class visit sub class inherit visit class arrow come class visit note visit class visit c relationship them(but super differ single inheritance consider complicated example red number show mro mro e c h f g b object case proceed e c. next step visit subclass a. visit visit h subclass d. leave h next class visit remember attempt go possible visit leftmost superclass d. visit go object visit f g b. class order round mro i. note class appear mro super look hierarchy inheritance credit resources richard l halterman fundamental python programming case class try inherit positional argument init call class init method use super try inherit multiple object python inheritance look predictable nice look code output see call foo time inherit chain order inherit get order call fourth third second base object output call third locate init define third call super routine invoke init define first mro=[first second call super init define continue search mro find init define second call super hit default object init hope example clarify concept call super first chain stop follow output consider child ab parents b keyword argument constructor init ab need call parent class constructor use super example demonstrate parent combine child consider magical_ab_method define class b. call instance b method fail access member variable a. call instance child ab method work inherit require member variable a. add @visionscaper say top case interpreter filter object class duplicate appear head position appear tail position hierarchy subset object appear tail position consider strong position c3 determine priority linearisation(mro class l(c linearise merge do select common class appear head list tail order matters(will become clear linearisation compute follow super implementation follow code become obvious method resolve learningpythonthehardway learn call build function mistaken call super function help inheritance pass parent sibling see clear beginner love share experience use super python2.7 read comment page hear method resolution order mro method function write mro use depth leave right scheme search run research add super function connect multiple instance family add execute method go make sure miss add make difference do exercise let fun begin take example copy paste try run run instance fifth go step go class class super function add parent find go continue third fourth class access parent class find execute continue unbox function inheritance finish code outcome program add super allow see clear python execute code make sure inheritance access method intend add small example django decorator provide answer implicit question want say django use generic view type object database find view class provide get post list object view class provide put delete individual object put delete want decorate django login_require notice touch class method class solution go multiple inheritance method inheritance list concrete class add logintopost listcreateapiview logintoputordelete retrieveupdatedestroyapiview concrete class get stay undecorated posting answer future referance python multiple inheritance use diamond model function signature change model sample code snippet class object
print error exception block python python python early use traceback module provide method format printing exception traceback print exception default handler output python great bit old version readable use basic print function flexible log module use log exception log module offer lot extra functionality example log message information check official documentation log exception do module level function logging.exception function logging.exception call exception handler log module use log handler avoid recursionerror thank @prakharpandey possible log exception log level show exception detail use keyword argument exc_info true want whole traceback specific information exception name description use log module case pass error string example error exception python go leave comment @jldupont answer enough reputation see answer @jldupont answer place think important note print error output sys.stdout default appropriate approach error handling general note import sys work way error print stdout allow proper output parse redirection understand question print error seem important point good practice leave detail lead non standard code learn use traceback module cat answer good way think throw control information traceback display log catch exception code produce follow traceback other mention catch whole traceback use traceback module produce follow output achieve use log output interested whole traceback important information exception name exception message use output expand exception e solution nice liner include additional info type error occur output try liner error raising do assert statement want help write fixable code check error recommend use try statement use print statement log exception log message level error logger find effective print output method call exception handler good documentation python page log debug
good cross platform way get file creation modification date time work linux window get sort modification date cross platform way easy call os.path.getmtime(path get unix timestamp file path modify getting file creation date hand fiddly platform dependent differ big os linux impossible least write c extension python file system use linux store creation date example ext4 store st_crtime linux kernel offer way access particular struct return stat call late kernel version contain creation date field see identifi st_crtime feature python source least be ext4 datum attach inodes file system convenient way access good thing linux access file mtime .st_mtime attribute os.stat result give last time file content modify adequate use case put cross platform code look couple choice use os.path.getctime function option use os.stat note ctime refer creation time nix system last time inode datum change thank kojiro make fact clear comment provide link interesting blog good function use use datetime module good manipulating timestamp get modification date datetime object usage example python use object orient pathlib module interface include wrapper much os module example get file stat information os.stat_result contain refer documentation modification time want fname.stat().st_mtime want creation time window recent metadata change unix use fname.stat().st_ctime article helpful info example pathlib module print note file ctime linux different window window user know creation time linux user know change time os.stat new code use os.path.getmtime thank christian oudard note return float point value fraction second os support method get mod time os.stat ctime reliable cross platform see getmtime(path return time last modification path return value number give number second epoch see time module raise os.error file exist inaccessible new version change version os.stat_float_time return true result float point number stat(path perform stat system call give path return value object attribute correspond member stat structure st_mode protection bit st_ino inode number st_dev device st_nlink number hard link st_uid user owner st_gid group owner st_size size file byte st_atime time recent access st_mtime time recent content modification st_ctime platform dependent time recent metadata change unix time creation window example use statinfo.st_mtime get mtime ctime os.stat return name tuple st_mtime st_ctime attribute modification time st_mtime platform window ctime mean creation time posix mean change time ' m aware way get creation time posix platform worth take look crtime library implement cross platform access file creation time follow symbolic link important use builtin os.stat include creation time definition st_anythe element os.stat contain time try os.stat('feedparser.py')[8 compare create date file ls
build web application django reason choose django get close thinking publishing work start concerned scale information find scaling capability django provide django team say disregard objective information question large site build django today single place collect information traffic django build site take stab use datum various location first list django site front page main django project page list django build site djangosites.org go list pick know decent traffic see instagram power instagram hundred instance dozen technology pinter rank user bitbucket code user disqus serve people python curse.com 600k daily visit 44k daily visit see ned batchelder post infrastructure modern web site rank 179k active rank 65k mike malone pownce eurodjangocon presentation scaling django web app say hundred hit second good presentation scale django make good point include current shortcoming django scalability hp site build django eprint center novemer/2015 entire website migrate link redirect website world wide service attend subscription instant ink relate service offer django deal user visit site couple hour see site stack overflow run django gut feeling other answer mike malone mention presentation database design critical strong proof find find reliable traffic stat be happen throw bunch django model course many site blogger interest stop blog post use django build high traffic site michaelmoore.com describe top website quantcast stat stat author edit include reference use work outsource developer project load testing think support concurrent request sustain rate hit second significant degradation server performance hit hour response time small transaction large degradation baseline performance load increase use apache front end django mysql os red hat enterprise linux rhel bit use mod_wsgi daemon mode django do cache database optimization accept default vm bit dell think gb ram performance concurrent user spend huge amount time tweaking need keep base performance ordinary ssl performance improvement ordinary database design implementation indexing ordinary firewall performance improvement measure load test laptop struggle insane workload process run concurrent thread request sure number daily visit example large django site link list high traffic django site quora large site build django today measure size user traffic tell handle unique month power ruby rail globo network network news sport entertainment site brazil rank top 80th notable django user include pbs national geographic discovery nasa number different division nasa library congress django deal user visit site couple hour write application right get enough hardware django magic bullet site stackoverflow run django see technology wise see soclone attempt traffic wise compete peg stackoverflow unique month name least dozen django site traffic scaling web app web framework language architecture handle browser cache database cache use non standard persistence provider couchdb tune database lot stuff play devil advocate little bit check djangocon keynote deliver cal henderson title hate django go django missing want high traffic website end day take open mind possible write django app scale think good presentation relevant question large django site know washington post indicate scale good design decision big performance impact twitter cite site embody performance issue dynamic interpret language base web framework ruby rail twitter engineer state framework much issue database design choice make early django work memcache provide class manage cache resolve majority performance issue deliver wire important backend reality use tool yslow critical high performance web application throw hardware backend change users bandwidth eurodjangocon conference week subject couple talk include founder large django base site pownce slide talk main message django worry thing proper cache load balance database optimisation django hook thing cache particular make easy ' m sure look solid answer obvious objective validation think google pushes django use app engine framework know deal scalability regular basis google read limit factor seem database end google use state high performance django book go cal henderson see detail mention uncommon hear people say django n’t scale depend look statement true false django n’t scale say ruby rail flask php language use database drive dynamic website good news django interact suite cache load balance tool allow scale much traffic throw contrary read replace core component label slow database orm template layer disqus serve page view month huge number team prove django scale experience lincoln loop back build big django site capable spending day reddit homepage break sweat django ’s scale success story numerous list point back disqus want proof instagram able sustain user django engineer back end development today use many web app site need useful show use python django washington post washington post ’s website popular online news source accompany daily paper huge amount view traffic handle django web framework washington post unique visitor march nasa national aeronautics space administration official website place find news picture video ongoing space exploration django website handle huge amount view traffic visitor monthly guardian guardian british news medium website own guardian medium group contain content newspaper guardian observer huge datum handle django guardian comment system 41,6 unique visitor october youtube know youtube place upload cat video fail popular website existence provide endless hour video entertainment python programming language power feature love dropbox dropbox start online document store revolution become part daily life store cloud dropbox allow us store sync share use power python survey monkey survey monkey large online survey company handle response day rewrite python website quora quora number place online ask question receive answer community individual python website relevant result answer edit organize community member majority code url shortening service analytic build python service handle hundred million event day reddit reddit know front page internet place find information entertainment base thousand different category post link user generate promote top vote many reddit ’s capability rely python functionality hipmunk hipmunk online consumer travel site compare top travel site find good deal python website tool allow find cheap hotel flight destination click popular python django website know site run django think add apple app year instagram list use django django python ruby rail scale different technique cache scaling several application server balanced nginx front addition hardware balancer(s scale database side go read slave mysql postgresql go rdbms way good example heavy traffic website django feel safe list high profile thing build django guardian investigate mp expense app politifact.com blog post talk positive experience site pulitzer ny times represent app everyblock peter harkin programmer wapo list stuff build django blog little old time give basic overview go django onion av club move think drupal django imagine number site get hit day django hit day ymmv get particular site depend build cache option django level example cache queryset view memcache work wonder upstream cache squid database server specification factor place splurge tune assume example django go set index assume default postgresql mysql configuration option multiple application server run django slow point software hardware load balancer front serve static content server django use apache nginx lighttpd afford use cdn static content thing think speculative 100k hit day variable spend much expertise manage component much time pull developer advocate youtube give talk scale pycon relevant scaling django youtube user youtube build python use django year impressed manage combine modularity scalability speed development technology come learn curve learn curve make lot steep excellent documentation django community django able handle throw look able scale future bidrodeo penny auction sized django power website dynamic website handle good number page view day experience django minimal remember django book chapter interview people run large django application link guess provide insight say large django application page view month note expect user day active hour time mean max concurrent user go need lot server ~15,000 register user active daily bulk traffic come unregistered user guess stay site couple minute follow google search result leave volume expect least server heavy concurrent user server think issue django scaling suggest look architecture help scale get wrong point django perform performance = scale system amazing performance scale vice versa application database bind scale issue lie planning interact database django happen database process request fast django accept happen data outgrow physical machine need account plan deal circumstance happen traffic outgrow app server handle session case tricky require shared architecture depend application short language determine scale language responsible performance(again depend application different language perform design architecture make scaling reality hope help glad help question large site build django today measure size user traffic pinter https://www.shuup.com/en/blog/25-of-the-most-popular-python-and-django-websites/ django deal user visit site couple hour use proper architecture database design use cache use load balance multiple server node site stack overflow run django need follow answer mention 2nd question example rasp.yandex.ru russian transport timetable service attendance satisfie requirement site static content put varnish server front increase performance single box spit mbit traffic note dynamic content use varnish become lot tricky develop high traffic site use django national broadcaster ireland work develop high performance site choosing framework framework part system strong weak link use late framework solve performance issue problem slow database query configure server network problem know django scale right way know network design pattern tool put django symfony rail project scale idea hope help bite tiny rock mountain want use open source many option python many library awesome community reason change mind python good interpret language make slow many accelerator cache service solve problem think rapid development ruby rail good main motto this(ror framework give comfortable experience developer compare ruby python syntax google app engine good service bind scope get chance experiment new thing use digital ocean cloud take month charge simple droplet heroku free service deploy product hear correct example use technology conclusion framework language well architecture designing strategy give scalable website instagram big example small team manage huge datum blog architecture read lot great answer feel point put emphasis depend application application light write read lot datum write scaling django trivial heck come decent output view cache straight box make use say redis cache provider put load balancer front spin instance able deal large amount traffic thousand complex write second different story django go bad choice depend architect solution requirement cent run high traffic site django check django relevant post check micro news aggregator call everyblock write django fact people develop django framework spread task short optimize aspect include dbs file image css balancing load several resource necessary site application start grow make space grow implementation late technology cdn cloud huge site develop tweak application give cent percent satisfation component play important role
look php print_r function debug script see state object question want var mix pprint mix different thing use dir var inspect module get interested use builtin example use object print dictionary fancy pretty printing available interactive debugg command many 3rd party function add thing exception handle national special character printing recurse nest object accord author preference boil dir mention give attribute name want value try dict output upvoted answer exclude kind attribute accept answer show get attribute include method part non public api good complete builtin function short corollary write calculate property calculate data descriptor part public api want observe application top vote answer class lot different kind data member print var return dict object copy modify dict return var modify dict object return bad quux property set namespace apply advice accept answer other see dir return name associate object inspect.getmember mention comment flaw return name value teach student create function provide public api object extend provide copy semantic namespace object need exclude slot assign take request current property need exclude calculate property become expensive interpret current calculate show property quux know property expensive want alter logic include want exclude custom datum descriptor need customize function make sense build function know want provide functionality need create build function appropriate situation use dir function useful feature help print current state object class define str repr method python documentation call repr build function string conversion reverse quote compute official string representation object possible look valid python expression use recreate object value give appropriate environment possible string form useful description return return value stre object class define repr str repr use informal string representation instance class require use debug important representation information rich unambiguous call str build function print statement compute informal string representation object differ repr valid python expression convenient concise representation use return value stre object worth check python equivalent perl data::dumper recommendation https://gist.github.com/1071857 note perl module call data::dumper translate object data perl source code nb translate code source want object method function output use persistence common purpose debug number thing standard python pprint fail achieve particular stop descend see instance object give internal hex pointer object errr pointer whole lot use way great object orient paradigm tool box design work object perl data::dumper allow control deep want go detect circular link structure important process easy achieve perl object particular magic blessing define process recommend use help(your_object help(dir help(var case use dict dir get info want happen need detail standard library include inspect module allow get impressive amount detail real nuggest info include look attribute value object dir dict sufficient look dig current state arbitrary object keep mind python object inspect worthy consideration use debug want recursive dump accept answer unsatisfying require class good str implementation case work well try ppretty output metaprogramme example dump object magic argument gnosis util outdated work print object content json yaml indent format simple want see value complex datum structure my_var variable interest use pprint(vars(my_var get answer help method look long way particular case code inspect dictionary dictionary worth point custom class end unhelpful someobject.exampleclas object 0x7f739267f400 kind output case implement str method try solution find instance get object type output var want well solution cover case try use var throw exception example typeerror var argument dict attribute find simple work scenario third party librarie work matter varible define class init pprint contain pretty printer produce pleasing representation data structure formatter produce representation data structure parse interpreter easy human read output keep single line possible indent split multiple line need print debug info log unable use pprint break get thing dump myobject try var dir fail look var work object dict exceptions.typeerror var argument dict attribute dir look list field name give value object structure think json.dump work object default = datetime field object standard json serializer overcome datetime.datetime json serializable python try beeprint help print object variable beautiful output struggle follow code print attribute obj value many good answer liner give attribute well value config object question list separate answer want print relevant value object excl main use loop print find convenient answer var seem show attribute object dir seem show attribute parent class(es see inherit attribute str doc dict try flask debug toolbar https://pypi.python.org/pypi/flask-debugtoolbar answer modify get attribute object helpful add function temporary remove many change exist source code project modifie pprint show object field value ignore object repr member function recurse nested object work see https://github.com/mosermichael/pprintex install pip pip install printex test performance believe fast method enumerate property attribute key object python list work regular python object dict object use slot slot work dictionary object example utilize dir(obj enumerate method property object take performance hit need property work python object build type key value attribute method variable value attribute
create dataframe list list convert column specific type case want convert column float way specify type convert dataframe create dataframe first loop column change type column like dynamic way hundred column want specify column type guarantee column contain value type main option convert type pandas to_numeric provide functionality convert non numeric type e.g. string suitable numeric type see to_datetime to_timedelta astype convert type type sensible allow convert categorial type useful infer_object utility method convert object column hold python object pandas type possible convert_dtype convert dataframe column possible dtype support pd.na pandas object indicate missing value read detailed explanation usage method good way convert column dataframe numeric value use pandas.to_numeric function try change non numeric object string integer float point number appropriate input to_numeric series single column dataframe see new series return remember assign output variable column name continue use convert multiple column dataframe apply method long value convert need value convert numeric type to_numeric take error keyword argument allow force non numeric value nan ignore column contain value example use series string object dtype default behaviour raise convert value case cope string pandas fail want pandas consider miss bad numeric value coerce invalid value nan follow use error keyword argument third option error ignore operation invalid value encounter last option useful convert entire dataframe know column convert numeric type case write function apply column dataframe column convert numeric type convert column contain non digit string date leave alone default conversion to_numeric give int64 float64 dtype integer width native platform want want save memory use compact dtype float32 int8 to_numeric give option downcast integer sign unsigned float example simple series integer type downcaste integer use small possible integer hold value downcaste float pick small normal float type astype method enable explicit dtype want dataframe series versatile try go type pick type use numpy dtype np.int16 python type e.g. bool pandas specific type categorical dtype call method object want convert astype try convert notice say try astype know convert value series dataframe raise error example nan inf value get error try convert integer pandas error suppress pass errors='ignore original object return untouched astype powerful convert value example small integer convert unsigned bit type save memory conversion work wrap round become try downcast use pd.to_numeric(s downcast='unsigne help prevent error version pandas introduce method infer_object convert column dataframe object datatype specific type soft conversion example dataframe column object type one hold actual integer hold string represent integer use infer_object change type column int64 column b leave alone value string integer want force column integer type use df.astype(int version include method convert_dtypes convert series dataframe column possible dtype support pd.na miss value possible mean type suited hold value example pandas integer type value integer miss value object column python integer object convert int64 column numpy int32 value become pandas dtype int32 object dataframe df follow result column hold integer value convert int64 type capable holding miss value int64 column b contain string object change pandas string dtype default method infer type object value column change pass infer_object false column remain object column pandas know describe integer column run infer_dtype infer dtype integer convert column b convert string dtype recognise hold string value use code change datatype column place datum type give datatype want str float int need specify specific column want explicit use pandas.dataframe.astype use original question provide column name chart summarise important conversion pandas conversion string trivial show figure note conversion context refer convert text datum actual datum type hard conversion infer appropriate datum type datum object column soft conversion illustrate difference take look function take argument dataframe list column coerce data column number example e.g change column type string df dataframe create dataframe different datum type column append result create populate float point variable 1st column string data type desire 2nd column give initial datatype temp float64 use code change datatype int64 df.info see show change datatype column temp happy coding start pandas pandas.dataframe.convert_dtype control type convert case various object column dataframe object column int column value letter represent unit output good way convert numeric column use regular expression replace unit astype(float change column data type float output dataset clean able numeric operation dataframe regex astype want collect unit paste header cholesterol_mg use code way specify type convert dataframe answer convert dtype create dataframe specify type creation use dataframe.from_record read_csv(dtype= depend input format latter necessary avoid memory error big datum create dataframe structure array desire column type output read data file use dtype parameter read_csv set column type load time example read row rate bit integer genre categorical case halve memory usage load way avoid memory error big datum possible change dtype load enough memory load default type datum first place think problem slight difference make problem solve other look question worth check format input list case number float string question processing list create dataframe lose type become stre create datum frame numpy array give datum frame question entry column consider string give datum frame column correct format issue find solution satisfy solution convert float str remove way case apply first column
set dict2 = dict1 edit dict2 original dict1 change python copy object set dict2 = dict1 making refer exact dict object mutate reference keep refer object current state want copy dict rare assign dict2 = dict1 making copy dict1 result dict2 name dict1 copy mutable type dictionary use copy deepcopy copy module dict.copy dict(dict1 generate copy shallow copy want deep copy copy.deepcopy(dict1 require example regard shallow deep copy python copy module doc difference shallow deep copy relevant compound object object contain object list class instance depth easy way remember dict2 = dict1 dict2 refer dict1 dict1 dict2 point location memory normal case work mutable object python work mutable object python careful hard debug use dict2 = dict1 use copy(shallow copy deepcopy method python copy module separate dict2 dict1 correct way see dict1 dict2 different mean point reference different location memory solution work dictionary immutable value correct solution mutable value see apply copy dict1 value mutable change false dict2 dict1 change dict2 change value mutable dict part dict1 apply copy dict shallow copy mean copy immutable value new dict copy mutable value reference ultimate solution deepycopy dict1 create new dict value copy include mutable value see different mean dict2 new dict value dict1 deepcopy need use change mutable value affect original dict use shallow copy deepcopy slow work copy nested value original dict take extra memory python easy way achieve shallow copy use unpackaging operator define pep unpackage dictionary new dictionary assign dict2 confirm dictionary distinct d. deep copy need copy.deepcopy go easy way create copy dict python create copy simple(single level dictionary use dict method generate reference point exist dict use build update method python dictionary create copy nest complex dictionary use build copy module provide generic shallow deep copy operation module present python make new dictionary dictionary comprehension avoid import copy course python compat top method well addition provide solution use integrate dictionary empty dictionary e.g. shallow_copy_of_other_dict other_dict shallow copy apply example pointer difference shallow deep copys assignment statement python copy object create binding target object dict2 = dict1 result bind dict2and object dict1 refer want copy dict use copy module copy module interface difference shallow deep copy relevant compound object object contain object list class instance shallow copy construct new compound object extent possible insert reference object find original deep copy construct new compound object insert copy object find original example python result copy edit construct copy go call dict constructor additional keyword argument confuse come background variable location memory define type assign variable copy datum variable memory location python variable act pointer object assign variable make copy make variable name point object dict1 symbol reference underlie dictionary object assign dict1 dict2 assign reference change key value dict2 symbol change underlie object affect dict1 confusing easy reason immutable value reference make copy possible variable python stuff dict1 str builtin pointer hide platonic object machine set dict1 dict2,you point object memory location analogy dict2 object reference dict1 object reference dict2 check dict1 dict2 true id(dict1 id(dict2 want copy(dict2 dict1 deepcopy(dict2 difference copy deepcopy deepcopy make sure element dict2 point list copy use deepcopy much poor practice write code need opinion dict2 = dict1 copy dictionary give programmer second way dict2 refer dictionary many way copy dict object use follow code dict follow json syntax time fast deepcopy nest dictionay use dict(srcdata srcdata.copy srcdata change second level modify source dictionary option deepcopy use json trick javascript json.parse(json.stringify(obj other explain build dict want python2 create valuedict class copy sure original change refer lvalue modification pattern discuss python clean syntax lvalue modification key observation str int behave value python immutable object hood observe observe special str int dict use much way think many case valuedict make sense run peculiar behavior try deep copy dictionary property class assign variable new copy.deepcopy(my_class.a work modify new modifie my_class.a old my_class.a new copy.deepcopy(old work modify new affect my_class.a happen hope help save hour copying use loop use object dict2 independent copy dict1 modify dict2 affect dict1 work object clean way use json see code create dictionary json.dump json.loads dictionary object separate dict object
exit script die command php detail sys module documentation sys.exit([arg exit python implement raise systemexit exception cleanup action specify clause try statement honor possible intercept exit attempt outer level optional argument arg integer give exit status default type object integer consider successful termination nonzero value consider abnormal termination shell system require range produce undefined result system convention assign specific meaning specific exit code underdeveloped unix program use command line syntax error kind error type object pass none equivalent pass object print result exit code particular sys.exit("some error message quick way exit program error occur exit raise exception exit process call main thread exception intercept note nice way exit point want hard exit use os._exit(*errorcode os specific extent take errorcode window example friendly let interpreter cleanup process die hand kill entire process include run thread sys.exit say docs exit call main thread thread run simple way terminate python script early use build quit function need import library efficient simple example way use exit keep mind sys.exit exit quit os._exit(0 kill python interpreter appear script call script execfile stop execution script see stop execution script call execfile avoid prefer sys.exit friendly code raise exception need exit process inside exception handler catch systemexit function os._exit terminate c level perform normal tear interpreter example hook register atexit module execute find write multithreadde app raise systemexit sys.exit kill run thread hand os._exit exit whole process discuss sys.exit exit call inside thread python example thread kenny cartman cartman suppose kenny call die second recursive call good way reason want cartman die kenny die kenny go os._exit kenny die cartman live pass exit code return os default ' m total novice control program terminate program terminate traceback recent call last file line main file line main sys.exit systemexit edit point program end stop python try incorporate similar code use module sys biopy build stop script print error message user example find succinct throw error practice case necessary kill entire multiprocessor application process follow function work application use main process follow function work case application many alive process last kill main process rest process alive kill external command find solution use pkill cent python window bit sys.exit work several nexte loop declare boolean variable call immediateexit begin program code write start inner nested loop exception write go immediate continuation outer loop execute code write depend complexity statement need repeat section custom message personal debug well number purpose see script exit particular case process csv file want software touch software detect corrupt important exit whole python script detect possible corruption follow gradual sys.exit ing loop manage full code change need proprietory code internal task put end code quit close python script python use raise systemexit("because say
find location site package directory type site package directorie global user global site package dist package directory list sys.path run concise list run getsitepackage site module python code caution virtual environment getsitepackage available old version virtualenv sys.path list virtualenv site package directory python use sysconfig module user site package directory pep python install local package point non exist directory check exit status python see python site --help explanation hint run pip list pip freeze give list instal user site package package>.__path let identify location(s specific package detail let identify location specific module difference run pip show package show debian style package information first item site.getsitepackages()[0 solution liner format readability use liner look follow source old version install django documentation useful django installation ubuntu correct point lib pythonx.x dist package folder contain package operating system instal program run ubuntu site package folder contain package instal setup_tools\easy_install\pip local lib pythonx.x dist package second folder useful use case related installation read source code use ubuntu safe copy paste first code box terminal work modern stdlib way use sysconfig module available version current accepted answer method work virtual environment active note sysconfig source confuse distutils.sysconfig submodule source mention several answer latter different module lacking get_path function discuss distutil deprecate unavailable python use path docs case user find question interested purelib path case interested platlib purelib path ordinary python package instal tool pip system level see venv get function sysconfig.get_path return dict relevant installation path example linux shell script available display detail invoke execute sysconfig module commenter point sysconfig result debian system ubuntu derivative accurate user pip install package go dist package site package debian policy python packaging root cause discrepancy debian patch distutil install layout reflect change site fail patch sysconfig module example ubuntu lt focal fossa look patched python installation debian ubuntu distributing bit hack need figure new plan distutil unavailable start patch sysconfig pip use install location let say instal package django import type dir(django show function attribute module type python interpreter thing instal mercurial snow leopard think work general other note distutils.sysconfig relevant setting default site.py bit paraphrase add sys.prefix}/lib site python add path constant different say context mess site package setuptool distutil work installation program run virtualenv pythonpath user local assume use system site package native system package instal python installation debian base system find lib dist osx /library python/2.7 site package use small code list package instal pip find local bin/ write follow command list path python package note location vary base osx pip show give detail package https://pip.pypa.io/en/stable/reference/pip_show/ pip show][1 get location linux go site package folder answer answer repeat inadequate want final line show installation dir work ubuntu one ask window dist exact dir easy_install use default correct easy_install work macs fun note original code many swearword side note propose solution distutils.sysconfig.get_python_lib work site package directory recommend article return main site package directory ala well solution python seem keep track site package directory package work get dist package site package folder folder python path good output ubuntu installation work distribution virtual environment low tech nature module reside parent directory site package change dir site package dir use follow alias nix system additional note get_python_lib function mention platform different directory use platform specific module module require compilation pass plat_specific = true function get site package platform specific package try command determine pip install location python python answer old question use ipython give follow output imaplib package use poetry find virtual environment path poetry debug use information list site package different project work find relative site package directory relative base install prefix site package folder lib python2.7 site package want python2.7 site package part fact encounter system site package lib64 accept answer work system similar cheater answer solution peek deep gut distutil find path pass setup.py pain figure want figure print site package site package mention believe useful version python instal folder call site package machine case specify python version use follow
want write function execute shell command return output string matter error success message want get result gotten command line code example thing example maintain version python simple approach use subprocess.check_output function check_output run single program take argument return result print stdout need write input stdin run popen section want execute complex shell command see note shell true end answer check_output function work maintain version python recent version flexible approach available use python need compatibility new run function recommend official documentation task provide general high level api subprocess module capture output program pass subprocess.pipe flag stdout keyword argument access stdout attribute return completedprocess object return value bytes object want proper string need decode assume call process return encode string compress liner desire pass input process stdin pass byte object input keyword argument capture error pass stderr = subprocess.pipe capture result.stderr stderr = subprocess.stdout capture result.stdout regular output want run throw exception process return nonzero exit code pass check true check returncode attribute result security concern run complex shell command pass shell = true describe end answer late version python streamline python liner spell use run way add bit complexity compare old way thing need run function use old version python need modest backwards compatibility use check_output function describe available python take take argument popen see return string contain program output answer detailed usage example python check_output equivalent execute run check true stdout pipe return stdout attribute pass stderr = subprocess.stdout ensure error message include return output security concern run complex shell command pass shell = true describe end answer need pipe stderr pass input process check_output task see popen example case need compatibility need sophisticated functionality check_output run provide work popen object encapsulate low level api subprocesse popen constructor accept single command argument list contain command first item follow number argument separate item list shlex.split help parse string format list popen object accept host different argument process io management low level configuration send input capture output communicate preferred method set stdin = pipe communicate allow pass data process stdin note aaron hall answer indicate system set stdout stdin pipe devnull get communicate work rare case need complex real time output capture vartec answer suggest method communicate prone deadlock use function security concern run complex shell command pass shell true run shell command shell true argument call run popen constructor execute single program mean fancy bash style pipe want run complex shell command pass shell true function support example raise security concern light scripting call process pass output input temptation connect pipe strong resist see deadlock hacky thing way easy work unix include cygwin python2.7 return tuple return_value output solution work python2 python3 use subprocess module problem figure simple way hope help note solution python3 specific subprocess.getoutput work python2 note redirect stdout want want error message function yield line line come wait subprocess finish get output whole case usage tricky super simple solution work many situation temporary file(here tmp create output command read desire output extra note comment remove tmp file case time job several time need delete tmp vartec answer read line make version usage accept answer use follow command run shell command use ubuntu note deprecate python use subprocess.popen example different flavor problem follow requirement combine tweak previous answer come follow code execute previous answer mileage vary attempt @senderle spin vartec solution window python get error solution work error windowserror error handle invalid find assign pipe handle get return output expect follow work call get first element tuple stdout learn believe need pipe argument ' m work custom system use different handle control std stop console popup window python + use pass true return byte want convert bytes string add text true read byte use default encoding specify different encoding use encoding="your encode text true splitting initial command subprocess tricky cumbersome use shlex.split help sample command git log year year code shlex.split code look follow solution work want print output process run add current work directory useful hope solution help reason work python need import os need run shell command multiple file trick edit see max persson solution j.f sebastian suggestion go incorporate accord @senderle use act run command bash improvement log well output use iterator get well method use getstatusoutput understand use subprocess python module able handle stdout return code command see example complete command caller implementation course extend try want function return stdout return code handle script like suggest simppl option consideration module available pypi pip install simppl run python3 simppl allow user run shell command read output screen developer suggest type use case note print stdout stderr python log module complete code show simppl work simple flexible solution work variety os version python use ipython shell mode couple advantage demonstrate want give extra option instal actual jupyter notebook oppose script accomplish output redirect text file read differentiate possible return os platform function
string variable set value s1 = = s2 return true s1 s2 return false open python interpreter comparison succeed identity testing = = equality testing happen code emulated interpreter wonder right word b equivalent id(a = answer correct use identity comparison = use equality comparison care equality string contain character case operator use = reason work stre literal intern default wikipedia intern string speed string comparison performance bottleneck application compiler dynamic programming language runtime rely hash table string key intern check different string equal involve examine character string slow several reason o(n length string require read several region memory take time read fill processor cache mean less cache available need intern string simple object identity test suffice original intern operation implement pointer equality test single machine instruction memory reference string literal word type program source code surround quotation mark program value python compiler intern string make store memory location note happen rule happen convoluted rely behavior production code interactive session string store memory location identity operator work expect construct string method string contain character string equal string different identity store different place memory keyword test object identity value comparison use result true object object = true time value object last thing note use sys.intern function ensure get reference string point use determine equality string helpful know kind weird requirement use note intern function use builtin python move sys module python identity testing = = equality testing mean way check thing thing equivalent get simple person object name jack year old equivalent year old jack person age instance person string equivalent object side note idiomatic python see thing safe guarantee instance null object none sure use little knowledge use know object none end wonder thing work happen ' m sure thing guarantee stay different python version implementation limit experience python use compare object see object oppose different object value use determine value identical good example s1 unicode string s2 normal string type value think fact comparison evaluate false distinct object use evaluate true mean use exact object create new one create fraction second large time gap optimize use object use equality operator compare value string object example make s2 different string object equal object interpreter use object assign make object = operator test value equivalence operator test object identity python test object live address memory example python create string object b refer reason python cache reuse string optimization stre banana memory share b. trigger normal behavior use long string create list get object case say list equivalent element identical object object identical equivalent equivalent identical refer object assign b = variable refer object believe know intern string python c compile optimize mode use identical string waste memory create string object intern string content point memory result python operator return true string content point string object happen java c. useful memory saving rely test string equality various interpreter compilers jit engine operator check identity = = operator check equality language reference type affect aspect object behavior importance object identity affect sense immutable type operation compute new value return reference exist object type value mutable object allow = b = b refer object value depend implementation c c guarantee refer different unique create empty list note assign object d. statement infer string immutable type check succeed check apply int tuple immutable type compare memory location use object level comparison compare variable program use checking value level check address level equivalence check value level equivalence identity testing = = equality testing see python documentation case = = b. exception example use identity test equality test basic concept clear approach question understand difference compare memory location id(a)==id(b b return true else return false say use compare memory location = use equality testing mean compare resultant value show code act example give theory case stre literals(string get assign variable memory address show picture remain self explanatory
get python terseness syntax easy way write statement fit line example simple way write mean objective c write similar python update know instance use count = count n. ask general syntax ternary operator expression python syntax well example thank mr burn fruit = = apple assignment contrast syntax use ordinary syntax conflate line colon ternary operator say solution readable general ternary syntax way e.g evaluate branch choose evaluate choose branch code snippet become
want catch log exception exit want print exact output print exception raise try intercept exception want exit program traceback.format_exc sys.exc_info yield info want answer point traceback module notice print_exc corner case obtain expect python display traceback last exception need access original traceback solution cache exception infos return local variable display use print_exception produce pitfall doc assign traceback return value local variable function handle exception cause circular reference prevent reference local variable function traceback garbage collect need traceback make sure delete use do try statement begin python cycle reclaim garbage collection enable become unreachable remain efficient avoid create cycle hand allow access traceback associate exception python produce surprising result display debug want see current stack trace call traceback.print_stack need raise exception catch want halt program error handle error try extract full traceback use traceback module standard library create complicate stacktrace demonstrate get full stacktrace print full traceback use traceback.print_exc method print good practice logger set module know name module able change level attribute handler case want logger.exception function log want string case want traceback.format_exc function log option see get output error performance concern important io dominate prefer request compatible way log level output adjust make easy turn touch code need efficient way use print log stable prove think stdlib module logging use tempt mess unrelated tool native simple approach do log.exception call log.error log event level error print traceback well consideration exist different purpose example traceback.print_exc output little bit different traceback produce interpreter use confuse read log bang head pass = true log call inappropriate useful catch recoverable error want log use e.g info level traceback well log.exception produce log level error avoid mess sys.exc_info much public interface internal use know intend printing exception exception object get traceback string point code python full example output documentation https://docs.python.org/3.9/library/traceback.html#traceback.format_exception extract traceback info exception object test python addition aaron hall answer logging want use logging.exception logs error level use low level pass exc_info = true see mention answer pass exception object reason python get trace exception object use traceback.tracebackexception.from_exception example code result level stack oppose print screen exception raise stack_lvl_2 intercept uncomment raise line understand exception record current level stack raise stack_lvl_3 case pass stack level add traceback intercept stack_lvl_2 meaning get record level get full trace print stdout catch low level result notice stack print different first last line miss different format intercept exception point raise possible make simple code give information python3 work define function use want print detail output like error object want print whole thing make awkward call right print_exception take positional argument type exception actual exception object exception internal traceback property python type(err optional positional argument pass none place idea want print error traceback one belong error need put try innerloop error occur word need wrap statement fail try specific possible inner loop possible get precise stack trace string raise try step place block catch offend exception use assume flaky_func define log call favorite logging system good idea catch raise keyboardinterrupt kill program use ctrl c. log outside scope question good option log documentation sys traceback module remark answer comment print(traceback.format_exc well job traceback.print_exc latter mixed traceback text want write stdout time produce weird output least build text editor view output build result panel traceback recent call last file c:\users\user\desktop\test.py line hell do_stuff file c:\users\user\desktop\test.py line do_stuff zerodivisionerror integer division modulo finish use want traceback module let print stack dump particular print_last function print last exception stack trace solution write error log file console python solution stacktrace_helper.py
make python class serializable attempt serialize json simple solution simple feature json serializable class implement serializer method call serialize output idea expect output example case call json.dumps(f.__dict want customize output subclass jsonencoder implement custom serialization trivial example see pass class json.dump method cls kwarg want decode supply custom jsondecoder class example complex class consider tool jsonpickle jsonpickle python library serialization deserialization complex python object json standard python librarie encode python json stdlib json simplejson demjson handle python primitive direct json equivalent dict list string int jsonpickle build top library allow complex datum structure serialize json jsonpickle configurable extendable allow user choose json backend add additional backend link jsonpickle pypi answer involve change call json.dump possible desirable happen framework component example want able call json.dumps(obj simple solution inherit dict works class basic datum representation tricky thing set key mention many answer pass function json.dumps convert object type support default support type none mention simple case build function var convert object dict contain attribute note cover basic case need specific serialization certain type exlude certain attribute object attribute use custom function jsonencoder desribe answer add to_json method class add code answer top monkey patch json module import jsonencoder.default check special to_json method use encode object find onur say time update json.dump project onur answer expand include optional tojson method object serialize option wrap json dump class subclasse fileitem class jsonserializable class testing use use jsons pypi https://pypi.org/project/jsons/ convert object attribute dict wanted string class implement jsons.jsonserializable solve thing your_class pip install json fix extend package version fancy john answer thank @fancyjohn example usage make json.dumps work numpy array pandas dataframe 3rd party object see module ~2 line code need explanation note approach simplify fail know edgecase ex custom class inherit dict builtin miss control json behavior external class numpy array datetime dataframe tensor some_file_thats_imported_before_your_class_definitions.py your_class_definition.py cover docs search complex example encode complex number come problem day implement general version encoder python object handle nest object inherit field example result use standard json define default function json limit term object print jsonpickle need pip install jsonpickle limit term indent text inspect content object class change find straight way note print object method cent demonstrate explicit json serialization tree python object note want code use twisted filepath class class trick convert object standard json usage work python2.7 python3 jaraco give neat answer need fix minor thing work note need step load python property use use method aljohri check popularity approach serialization python json deserialization json > python work mind instal package use json trick need import dump(s json_trick json work which'll give work great general exception special thing happen new metaclass magic load work point assume module_name.test_class.mytestcls import change compatible way get instance dictionary identical copy dump want customize de)serialize add special method class serialize part attribute parameter example free bonus get de)serialization numpy array date time order map ability include comment json disclaimer create json_trick problem kyle delaney comment correct try use answer https://stackoverflow.com/a/15538391/1497139 improved version https://stackoverflow.com/a/10254820/1497139 create jsonable mixin make class json serializeable use jsonable super class call offer method extend jsonable class approach offer test example unit test family person sample results tojson asjson unit test family person sample define jsonable mixin find approach integrate https://github.com/wolfgangfahl/pylodstorage project available https://pypi.org/project/pylodstorage/ throw log year old fire want solution meet follow criterion solution wind lot property jsonserializable behave object library go json.dumps(obj guy make complicated simple example way serialize nested class json return python object string need use jsonencoder default parameter simple lambda work fine use @property simple function feel natural modern @dataclas example work normal class well jsonweb seem good solution see http://www.jsonweb.info/en/latest/ building quinten cabo answer difference like lose koder method run issue try serialize complex object member method serializable implementation work object small library serialize object child json parse https://github.com/tobiasholler/pyjsonserialization/ come solution use method pass document dict list objectid serialize run problem try store peewee model postgresql jsonfield struggle general solution key solution go python source code realize code documentation describe explain extend exist json.dump support datum type suppose current model contain field serializable json model contain json field look define custom jsonencoder use jsonfield key default(self obj method single json serializable complaint receive python add code handle unserializable json type enum datetime example support class inheriting enum implement convert peewee model json seriazable object code specific peewee think question post comment section thank able install package recommend try dill work fine project nice thing package interface pickle use pickle project substitute dill see script run change code cheap solution try full anti disclosure way affiliate contribute dill project install package edit code import dill pickle run script see work want clean code shadow pickle module name specific datatype dill serialize project page dill pickle follow standard type none type bool int long float complex str unicode tuple list dict file buffer old new style class instance old new style class set frozenset array function exception dill pickle exotic standard type function yield nest function lambda cell method unboundmethod module code methodwrapper dictproxy methoddescriptor getsetdescriptor memberdescriptor wrapperdescriptor xrange slice notimplemente ellipsis quit dill pickle standard type frame generator traceback see mention serial versione backcompat post solution use bit lot learn java javascript mature go https://gist.github.com/andy-d/b7878d0044a4242c0498ed6d67fd50fe add option use attrs package asdict method convert back class look addition onur answer want deal datetime type order handle datetime.datetime object attribute dict exception usage first need make object json compliant dump use standard json module way function use recursion iterate part dictionary call repr method class build type throw log year old fire offer dataclass wizard task assume use python work dataclasse python builtin module onwards dataclass wizard library convert object attribute dict make reverse serialization straightforward fromdict pypi link https://pypi.org/project/dataclass-wizard/. want string class extend dataclass_wizard.jsonwizard library support dataclasse union type mean serialize object class c1 c2 example whomever want use basic conversion external library override iter str functions custom class use follow way use object wrap dict datum remain preserve many approach problem objdict pip install objdict emphasis provide javascript object act dictionary handle datum load json feature useful provide alternative solution original problem choose use decorator solve datetime object serialization problem code import module module use json normal way specify default keyword serialize data contain date time object datetime serializer code call json.dump json.dump
super work multiple inheritance example give parent method third super().__init refer choose run know method resolution order mro detailed reasonable amount detail guido blog post method resolution order include early attempt example third call first.__init python look attribute class parent list leave right case look init define python start look attribute look second situation become complex inheritance start crossing path example inherit second read link detail nutshell python try maintain order class appear inheritance list start child class instance mro second third first way python find coherent method resolution order raise exception fall behavior surprise user example ambiguous mro third mro second second first obvious expectation python raise error example lack super call point example show mro construct intend print first\nsecond\third play example add super call see happen gain deep understanding python inheritance model goal keep simple show mro build build explain code answer buggy miss super call class require co operative subclasse work well output super call find next method mro step second execution stop end second.__init super call first second output miss second wanted elaborate answer lifeless bit start read use super multiple inheritance hierarchy python did't need understand super(myclass self).__init provide next init method accord use method resolution order mro algorithm context complete inheritance hierarchy last part crucial understand let consider example accord article method resolution order guido van rossum order resolve init calculate python use depth leave right traversal remove duplicate last let follow happen instantiate instance third class third detail instantiate third result mro algorithm improve python onwards work complex case guess use depth leave right traversal remove duplicate expect last work case please comment case read blog post guido know diamond problem page entry python short python call superclass method leave assume descend object python compute method resolution order mro base class inheritance tree mro satisfie property order exist python error inner working c3 linerization class ancestry read https://www.python.org/download/releases/2.3/mro/ method call first occurrence method mro call class implement method skip call method call next occurrence method mro matter order place class inheritance put call super method note see mro python use mro method follow example diamond inheritance class mro test call return child output child outputs inheritance order matter class chain inheritance call super example leave call super method right parent call child output call super parent skip child output want access method particular parent class reference class use super super follow chain inheritance get specific class method reference particular parent method case child output answer super question feel relevant enough share call inherit class note way call ' m sure init call solve issue multiple inheritance different variable initialization multiple mixin function call add variable pass kwargs add mixin interface endpoint super call extendable base class b c mixin class provide function f. b expect parameter v init c expect w. function f take parameter y. q inherit class mixinf mixin interface b c. @calfzhou comment use kwargs run example result remember mro confusing avoid use keyword parameter etcetera little annoying notice people forget time use args kwargs override method useful sane use magic variable cover point pass parameter initialization class destination super depend subclass good way pass parameter pack careful parameter name different meaning example give call super class init direct assignment parameter tempt fail call super class mro change class call multiple time depend implementation conclude cooperative inheritance specific parameter initialization work consider call super().foo call sub class method resolution order mro method order method call resolve super().foo search hierarchy consider close implementation find raise exception relationship true visit sub class super class hierarchy story multiple inheritance search super().foo implementation visit class hierarchy relation consider follow example low class hierarchy hierarchy diagram mro red number show mro mro e c h f g b object note class visit sub class inherit visit class arrow come class visit note visit class visit c relationship them(but super differ single inheritance consider complicated example red number show mro mro e c h f g b object case proceed e c. next step visit subclass a. visit visit h subclass d. leave h next class visit remember attempt go possible visit leftmost superclass d. visit go object visit f g b. class order round mro i. note class appear mro super look hierarchy inheritance credit resources richard l halterman fundamental python programming case class try inherit positional argument init call class init method use super try inherit multiple object python inheritance look predictable nice look code output see call foo time inherit chain order inherit get order call fourth third second base object output call third locate init define third call super routine invoke init define first mro=[first second call super init define continue search mro find init define second call super hit default object init hope example clarify concept call super first chain stop follow output consider child ab parents b keyword argument constructor init ab need call parent class constructor use super example demonstrate parent combine child consider magical_ab_method define class b. call instance b method fail access member variable a. call instance child ab method work inherit require member variable a. add @visionscaper say top case interpreter filter object class duplicate appear head position appear tail position hierarchy subset object appear tail position consider strong position c3 determine priority linearisation(mro class l(c linearise merge do select common class appear head list tail order matters(will become clear linearisation compute follow super implementation follow code become obvious method resolve learningpythonthehardway learn call build function mistaken call super function help inheritance pass parent sibling see clear beginner love share experience use super python2.7 read comment page hear method resolution order mro method function write mro use depth leave right scheme search run research add super function connect multiple instance family add execute method go make sure miss add make difference do exercise let fun begin take example copy paste try run run instance fifth go step go class class super function add parent find go continue third fourth class access parent class find execute continue unbox function inheritance finish code outcome program add super allow see clear python execute code make sure inheritance access method intend add small example django decorator provide answer implicit question want say django use generic view type object database find view class provide get post list object view class provide put delete individual object put delete want decorate django login_require notice touch class method class solution go multiple inheritance method inheritance list concrete class add logintopost listcreateapiview logintoputordelete retrieveupdatedestroyapiview concrete class get stay undecorated posting answer future referance python multiple inheritance use diamond model function signature change model sample code snippet class object
good cross platform way get file creation modification date time work linux window get sort modification date cross platform way easy call os.path.getmtime(path get unix timestamp file path modify getting file creation date hand fiddly platform dependent differ big os linux impossible least write c extension python file system use linux store creation date example ext4 store st_crtime linux kernel offer way access particular struct return stat call late kernel version contain creation date field see identifi st_crtime feature python source least be ext4 datum attach inodes file system convenient way access good thing linux access file mtime .st_mtime attribute os.stat result give last time file content modify adequate use case put cross platform code look couple choice use os.path.getctime function option use os.stat note ctime refer creation time nix system last time inode datum change thank kojiro make fact clear comment provide link interesting blog good function use use datetime module good manipulating timestamp get modification date datetime object usage example python use object orient pathlib module interface include wrapper much os module example get file stat information os.stat_result contain refer documentation modification time want fname.stat().st_mtime want creation time window recent metadata change unix use fname.stat().st_ctime article helpful info example pathlib module print note file ctime linux different window window user know creation time linux user know change time os.stat new code use os.path.getmtime thank christian oudard note return float point value fraction second os support method get mod time os.stat ctime reliable cross platform see getmtime(path return time last modification path return value number give number second epoch see time module raise os.error file exist inaccessible new version change version os.stat_float_time return true result float point number stat(path perform stat system call give path return value object attribute correspond member stat structure st_mode protection bit st_ino inode number st_dev device st_nlink number hard link st_uid user owner st_gid group owner st_size size file byte st_atime time recent access st_mtime time recent content modification st_ctime platform dependent time recent metadata change unix time creation window example use statinfo.st_mtime get mtime ctime os.stat return name tuple st_mtime st_ctime attribute modification time st_mtime platform window ctime mean creation time posix mean change time ' m aware way get creation time posix platform worth take look crtime library implement cross platform access file creation time follow symbolic link important use builtin os.stat include creation time definition st_anythe element os.stat contain time try os.stat('feedparser.py')[8 compare create date file ls
basic dict follow try jsonify(sample get dictionary sample overcome error note relevant dictionary generate retrieval record mongodb print str(sample['somedate output quick dirty json dump eat date default function apply object serializable case str convert know string great serialization great deserializing quick dirty string ifie warn function numpy array building answer simple solution base specific serializer convert datetime.datetime datetime.date object string see code check find object class datetime.datetime datetime.date use produce serialized version accord iso format yyyy mm ddthh ss decode javascript complex serialize representation seek code use str see answer question example code end raise exception deal case call non serializable type json_serial function use follow detail default parameter json.dump work find section basic usage json module documentation original answer accommodate way mongodb date field represent date want generic python solution serialize datetime json check @jjmontes answer quick solution require dependency use mongoengine comment pymongo dependency pymongo build utility help json serialization example usage serialization example usage deserialization django provide native djangojsonencoder serializer deal see difference notice djangojsonencoder use custom default django strip bit datum need careful case encounter problem solution subclass json.jsonencoder call json.dumps(yourobj cls datetimeencoder .isoformat get answer convert date stre other need want use pymongo library achieve datetime json conversion small snippet use output solution use use python3.7 good solution use datetime.isoformat datetime.fromisoformat work naive aware datetime object output use care time value timezone use datetime.timestamp datetime.fromtimestamp use care timezone get datetime.tzinfo serialize field easy way add field tzinfo serialized object beware precision example apply method .datetime.now method make serializable method example output update python3.7 use .isoformat method application similar issue approach jsonize datetime value item list year month day hour minute second go microsecond item list need produce json.dump method accept optional parameter call default expect function time json try convert value know convert call function pass function receive object question expect return json representation object solution less verbosity think use jsondump json.dump print want add special case simple twist default method example q repeat time time simple way patch json module serialization support datetime use json serialization time datetime serialize isoformat resulting create see detail word caution stackoverflow json datetime python javascript supply custom encoder class cls parameter json.dump docs use complex number example create class encode date think json little fuzzy date simple solution come datetime json serializable problem > date simple way change part dict datetime format isoformat value stre isoformat json simple serialize date work string convert datetime object need need work datetime object convert string serialize see output case type different try example parse several way serialize datetime last way json_trick package handle date time datetime include timezone need import json_trick json advantage store single string int float come decode encounter string int float know datum know datetime dict store metadata decode json_tricks editable human disclaimer make problem use result view return proper response accord api jsonify follow create response json representation give argument application json mimetype mimic behavior json.dump add extra line code return dict replicate jsonify response entire file look full solution convert datetime json output json file enable import export string int float datetime object extend type solution test convert date string @jjmonte answer use follow approach flask flask restful user use orjson tremendous performance great rfc-3339 compliant support datetime use datetime.datetime object tzinfo utc add related option working django model pass encoder djangojsonencoder field constructor work charm get error message write serialize decorator class sqlalchemy borrow jgbarah idea use isoformat appended original value isoformat look quick fix want format side communication use repr eval function json import datetime eval complain pass datetime parameter eval case work encounter problem externalize django model object dump json solve usage utility face issue today find call pickle build library serialize python object load pickle file difference find pickle json pickle file binary file json usual text file cause issue datetime object approach adopt concept feel friendly enough expression language define dmn decision model notation @string string start end decode feel decode course sender receiver agree convention code let encode lot thing date time date times timedeltas encode year month duration range element tuple chr expr chr good representation range chrs open close bracket @"p4y2 duration year month @"p2dt5h timedelta day hour @"(2021 year range follow code use serialize serialize @string correct simple way serialize
let say follow pandas dataframe subset base specific value subset base list value get use isin method get opposite use use method query method isin method useful determine list contain function column a. example f(a function note approach slow isin method store value list lis list set tuple dictionary numpy array pandas series generator range isin query work need filter range use method query op value list_of_values appear order df want df return order appear list_of_value list_of_values use loc want retain old index use follow general isin query good method task need apply example function f(a column isin query work select row list_of_values negate isin()/in want filter use multiple column reduce column depend need call isin query tricky f string answer correct able filter row expect make sure dataframe column dtype take long enough non pandas solution compare term speed
python function trim whitespace space tab string give input \t example string\t become example string whitespace side use str.strip whitespace right side use str.rstrip whitespace leave side use str.lstrip provide argument strip arbitrary character function strip space \r character side stre example remove string leave hand right hand side string remove character middle string try re.sub print python trim method name strip lead trail whitespace regular expression work use simple basic function str.replace work whitespace tab simple easy post regex solution match search handle space input case use re.sub remove inner whitespace undesirable whitespace include space tab crlf elegant liner string function use translate apple'.translate(none \n\t\r want thorough re.sub my_str.replace('\n remove unwanted space newline character hope help result b \n change b output please_remove_all_whitespace add le droid comment answer separate space output remove extra whitespace look solution various degree understand wonder string comma separate try process csv contact information need solution problem trim extraneous whitespace junk preserve trail commas internal whitespace working field contain note contact want remove garbage leave good stuff trim punctuation chaff want lose whitespace compound token want rebuild late pattern look single instance whitespace character underscore unlimited number time lazily character possible \s_]+ come non word character occur unlimited amount time equivalent ^a z0 find swath whitespace null character \0 tab \t newline \n feed \f carriage return \r see advantage fold remove whitespace complete word token want keep python build string method strip()doesn't deal string leave end default arg null character see example several newline text strip remove regex pattern text.strip \n\t\r go op question think plenty case odd pathological instance text datum escape character end text list string want eliminate delimiter delimiter separate whitespace character non word character nb talk delimiter csv instance csv data list c.s string substring full disclosure manipulate text month regex last week ' m sure nuance miss say small collection string dataframe row odd column final step pass removal extraneous character work introduce additional whitespace want separate text join non word character want add whitespace none example output strip remove whitespace time op case strip fine thing get complex regex similar pattern value general setting see action use python print statement sep= separate space example print love potato love potato case try get ride \t sep="\t try translate want trim whitespace begin end stre work lot qt qstring::trimmed method remove lead trail whitespace leave internal whitespace like qt qstring::simplified method remove lead trail whitespace squish consecutive internal whitespace space character use combination .split .join last example sequence internal whitespace replace single space trim whitespace start end string use follow method note remove \n remove extra space remove whitespace newline begin end string
want eliminate whitespace string end word python code eliminates whitespace side string remove whitespace want remove lead end space use str.strip want remove space character use str.replace nb remove normal ascii space character u+0020 whitespace want remove duplicate space use str.split follow str.join remove space use str.replace remove whitespace character space tab newline use split join regular expression want remove whitespace begin end use strip use lstrip remove whitespace begin string rstrip remove whitespace end string alternative use regular expression match strange white space character example remove space stre word remove space begin string remove space end string remove space begin end string remove duplicate space example work python python whitespace include space tab crlf elegant liner string function use str.translate python want thorough python want thorough remove whitespace begin end use strip mak point translate method variation work python see q&a addition strip variation remove space begin end string remove space begin string remove space end stre string function strip lstrip rstrip take parameter string strip default white space helpful work particular example remove space newline remove extra comma read string list careful strip rstrip lstrip remove lead trail space tab return form feed remove middle string replace space tabs end hide crlfs appear match look eliminate whitespace string end word python docs use split ignore whitespace use join concatenate string prefer approach expression statement easy use use bind variable follow script import regular expression module use substitute space single space ensure inner extra space remove use strip function remove lead trail space find work remove whitespace tab try use think use split strip well
' m developer ' work project python represent equivalent enum python enum add python describe pep backporte pypi advanced enum technique try aenum library author enum34 code compatible py2 py3 need order python instal enum number install different incompatible version early version way accomplish enum use support automatic enumeration use support convert value name add way overwrite name useful render enum output throw keyerror reverse mapping exist first example use mypy way express enum typing.literal example pep python equivalent implement keep simple see complex example net python make enum base class get little bit extra functionality describe example enum member distinct integer compose name value want type value use follow shortcut enum implementation convert list iterable order member declaration order value example implementation usage need numeric value quick way python add starred placeholder end soak remain value range case mind waste memory count good solution depend require fake enum simple enum need enum list name identify different item solution mark harrison great use range allow set start value addition require item belong container sort embe class use enum item need use container name item name complex enum long list enum complicated use enum solution suffice look recipe ware simulate enumeration python publish python cookbook online version available info pep enumeration python interesting detail proposal enum python reject typesafe enum pattern use java pre jdk number advantage alexandru answer create class class level field enum value enum value instance class small integer advantage enum value compare equal small integer control print add arbitrary method useful make assertion use isinstance recent thread python dev point couple enum librarie wild include enum class liner use reverse lookup key value item agree let enforce type safety python protect silly mistake think keep value collision define enum handy advantage reverse lookup python build equivalent enum answer idea implement interested top version python cookbook situation enum call end use simple string way object attribute implement optimize work fast short string performance benefit use integer guard typos invalid value insert check select place disadvantage compare use class lose benefit autocomplete guido agree accept pep python standard library mean python builtin support enumeration backport available python pypi enum34 declaration representation iteration programmatic access information refer proposal official documentation prefer define enum python bug proof use integer worry ensure integer unique say dog cat screw bug proof use string worry typo catt fail animal.catt runtime exception addendum enhance solution dog cat inherit symbol class right metaclass use value index dictionary request representation make appear use want unique symbol care value replace line simple implementation enum python use namedtuple method subclass set allow flexibility different key value allow act expect use version fill sequential number value python official support enum find documentation example python documentation page enumeration create use class syntax make easy read write alternative creation method describe functional api define enumeration subclass enum follow keep simple use old python see python keep simple use python see https://docs.python.org/3/library/enum.html hmmm suppose close thing enum dictionary define use symbolic name constant option list tuple tuple tuple dictionary provide symbolic constant string way access value edit alexandru answer use use give integer constant tuple use choice django model standard python pep enum class available python + davidg recommend use dict go step use set test value match value set df use string constant place enum good see first class enum python http://code.activestate.com/recipes/413486/ give class class contain enum enum compare particular value use integer value resist use c enum integer value use integer use integer mistake overall think win enum unique value print enum iterate test enum value enum complete slick edit cfi link python compatible port python occasion need enum class purpose decode binary file format feature happen want concise enum definition ability create instance enum integer value stre useful representation end whimsical example use key feature old python name problem create object value allow use implementation site use name instance example try compare object different enum possible pitfall yike alec thomas solution http://stackoverflow.com/a/1695250 elegant clean looking function create class specify attribute little modification function get act little enumy note create follow example try reproduce behavior pygtk new style enum gtk.messagetype.warning create enum base specify type addition give attribute access previous function behave expect enum respect type inherit base class example integer enum interesting thing do method customize specific behavior override build method enum package pypi provide robust implementation enum early answer mention pep reject proposal implement http://pypi.python.org/pypi/enum usage easy elegant approach different characteristic find valuable prevent comparison enum different type base many doctest include illustrate different approach alexandru suggestion use class constant enum work add dictionary set constant lookup human readable string representation serve purpose provide simple way pretty print enum b dictionary logically group constant test membership original enum proposal pep reject year keep come kind enum intend add push forget pep intend inclusion python reference implementation pep flufl.enum april seem general consensus add standard library long people agree hard part see thread start half dozen thread early month time come slay new design implementation appear pypi activestate flufl design try pypi search nice python recipe find http://code.activestate.com/recipes/577024-yet-another-enum-for-python/ example usage detail find recipe page funny need day find implementation worth use write take leave need use use follow use django model choice look pythonic enum job variant alec thomas solution solution simple way get class enumeration define list annoy integer assignment example.py see list answer whip allow use keyword len method output need symbolic constant pyparse represent leave right associativity binary operator use class constant client code want use constant import entire enum use enumeration unique test take big footprint code minor concept import client code support fancy str behavior yagni category enumeration int think good looking construct produce change python language use string well test string sake configuration file remote input example variant support get enum value name alec thomas neat answer use list set enumeration example follow enum implementation propose aaron maenpaa follow idea make generic parseable java enum python sample use class variable define tuple constructor use name argument use metaclass implement enumeration think const code solution use simple function get instance create class use simple calling function string name want reference value integer take advantage desire c language easy read implementation choose idea helper method pythonic clean use reverse_mapping require python address comment enum useful prevent spelling mistake code e.g. state machine error classifier etc
difference tuple list advantage disadvantage tuple immutable semantic distinction guide usage tuple heterogeneous datum structure entrie different meaning list homogeneous sequence tuples structure list order use distinction make code explicit understandable example pairs page line number reference location book use key dictionary store note location list hand use store multiple location want add remove location list make sense list mutable hand make sense add remove item exist location tuple immutable situation want change item exist location tuple example iterate line page tuple immutability force create new location tuple new value seem inconvenient face use immutable datum cornerstone value type functional programming technique substantial advantage interesting article issue tuples constant list understand tuple list python official python documentation mention tuple immutable contain heterogeneous sequence type language haskell value tuple different type length tuple fix list value type length fix difference obvious namedtuple python make sense tuple suppose structure underline idea tuple light weight alternative class instance difference list tuple literal size due small size tuple operation become bit much mention huge number element permit operation mean delete element sort add new element list tuple difference tuple immutable add element create new tuple change usage list mutable use key dictionary tuple use go walk note coordinate instant x tuple want record journey append location second list way key difference tuple immutable mean change value tuple create go need change value use list benefit tuple list mutable tuple docs.python.org/2/tutorial/datastructures.html tuple immutable contain heterogeneous sequence element access unpack see late section indexing attribute case namedtuple list mutable element homogeneous access iterating list example python list example python tuple python list tuple similar order collection value shallow difference list create use bracket tuple use parenthesis core technical code python syntax difference element particular tuple immutable list mutable tuple hashable use dictionary hash key give rise difference use enforced priori syntax difference people choose use encourage good practice posteriori smart programer main difference posteriori differentiate tuple use list use lie mean people give order element tuple order signify specific structure hold information value find first field switch second field provide value different dimension scale provide answer different type question form give object subject attribute object subject stay constant attribute differ list order signify sequence directionality second element come first element positioned 2nd place base particular common scale dimension element take whole provide answer single question form give attribute object subject compare attribute stay constant object subject differ countless example people popular culture programmer conform difference countless people use salad fork main course end day fine get job do summarize finer detail similaritie index select slicing tuple list index use integer value find bracket want value give list tuple syntax compare sort tuple list compare first element tie second element attention pay subsequent element early element show difference difference priori definition syntax list use tuple use mutability element give list mutable element give tuple mutable hashtable dictionary hashtable dictionary require key hashable immutable tuple act dictionary keys list difference posteriori usage homo heterogeneity element list object homogenous tuple object heterogeneous list use object subject type presidential candidate song runner force tuple heterogenous object loop structure allow looping x my_list make sense list tuple appropriate structuring present information reside john","wayne",90210 actor","dead mention difference semantic people expect tuple list represent different information go guideline library base pass take numpy example copy post ask example point numpy part standard library major python library numpy list tuple different thing list loop tuple structure tuple list homogeneous tuple heterogeneous list variable length tuple fix length value list change time value tuple change advantage disadvantage depend use datum want change use tuple list good option tuple list similar sequence type python literal syntax use parenthesis construct tuples square bracket get new list use call appropriate type get require structure tuple list mutability tuple immutable list mutable point base follow one memory usage due mutability need memory list less memory tuple extend add new element tuple list difference tuple change new object hash tuple hashable list mean use tuple key dictionary list use key dictionary tuple use semantic point good practice use tuple heterogeneous datum structure list homogenous sequence list intend homogeneous sequence tuple heterogeneous datum structure people answer tuples immutable list mutable important aspect use tuple remember tuple contain list dictionary change tuple immutable example let assume tuple contain list dictionary change content list make new tuple look change dictionary tuple make overall tuple look happen list dictionary object object change content point tuple remain immutable exception pep type hint say type element tuple type say tuple[str int float list list type class take type parameter list[str hint difference former heterogeneous latter homogeneous standard library use tuple return value standard function return struct people mention difference write tuple tuples prefer allocation optimization small tuple reduce memory fragmentation speed allocation python reuse old tuple tuple need less item delete python move free list free list divide group group represent list tuple length group store tuple group contain element represent empty tuple example see b d. occupy destroy tuple free list allocation optimization list list modify python use optimization tuple python list free list use empty object empty list delete collect gc reuse later source https://rushter.com/blog/python-lists-and-tuples/ efficient list https://stackoverflow.com/a/22140115 important difference time want change datum list use tuple example use tuple example execute statement time output notice time difference direction quotation documentation tuple sequence tuple seem similar list use different situation different purpose tuple immutable contain heterogeneous sequence element access unpack see late section indexing attribute case namedtuple list mutable element homogeneous access iterating list word tuple use store group element content member group change list use store group element member group change instance want store ip network variable use tuple ip fix my_ip want store group ips place visit month use list keep update add new ip group first non scalar object know compound object python use list cause aliase distinct path point object quick extension list tuple response due dynamic nature list allocate bit bucket actual memory require do prevent costly reallocation operation case extra item append future hand static lightweight tuple object reserve extra memory require store list mutable tuple immutable consider example change index value list tuple prove follow code invalid tuple attempt update tuple allow list mutable tuple immutable accessing offset element index make sense tuple list element index change list mutable tuple immutable main difference mutable immutable memory usage try append item create variable fix memory assign variable list memory assign use current memory assignment byte want append 101th byte byte assign total byte case add new element use tuples tuple assign size memory need save memory use large block memory lot comment make benefit see use tuple flexibility able value different type list take example database table different value type designate column list replicate restriction singular type value contain tuple multiple different type value placement respected column place list create virtual representation database flexibility restriction value benefit say transmission transaction datum say similar format table seal data tuple prevent modifiable send protect design provide immutability difference compare collection fact different value type application great use list object dictionary general limit people mindset object model serve well option certain case want object model prefer keep separate define business entity tuple serve try achieve
name tuple easy create lightweight object type name tuple instance reference use object variable dereference standard tuple syntax use struct common record type immutable add python python recipe implementation python example common represent point tuple x lead code follow use name tuple become readable name tuple compatible normal tuple follow work use name tuple tuple think object notation make code pythonic readable start use represent simple value type pass parameter function make function readable see context tuple packing replace ordinary immutable class function field use name tuple type base class tuple attribute name tuple immutable want able change value need type handy recipe mutable recordtype allow set new value attribute aware form name list let add new field want use dictionary situation name tuple convert dictionary use pt1._asdict return operate usual dictionary function note check documentation information example construct name tuple tuple tuple tuple specific subclass tuple create specification name field fix length example create subclass tuple fix length case use tuple use break know liskov substitutability new python use class definition typing.namedtuple create namedtuple collections.namedtuple type annotation docstre available python instantiate inspect use attribute name tuple know tuple tuple immutable change place memory list use regular tuple expand tuple iterable unpack name tuple tuple allow element access name index make namedtuple use single string name separate space readable use api tuple see follow commenter ask large script programme one define name tuple type create namedtuple class create easy shorthand treat class define module level pickle user find work example global module level demonstrate failure lookup definition use improve code semantic tuple element express code use object use object unchanging datum attribute functionality subclass add functionality example regression switch use name tuple tuples upfront design decision center cost extra code involve worth improve readability tuple use extra memory use name tuple tuple look slotted object implement functionality sized list subclasse list work name tuple block list change size expand liskov substitutable example first use subclass define slot namedtuple factory function make tuple class class create tuple callable name namedtuple great feature perfect container datum store datum use tuple dictionary dictionary approach overwhelming dict mutable slow tuple hand tuple immutable lightweight lack readability great number entry datum field namedtuple perfect compromise approach great readability lightweightness immutability polymorphic name tuple allow backward compatibility code check version allow future code explicit use syntax easy way clean code make readable self document happen tuple namedtuple instance memory efficient regular tuple instance dictionary make fast dictionary name element tuple read understand go example namedtuple field name access name position index call p.saturation easy understand look clean create instance namedtuple create dictionary syntax access namedtuple position choose p[1 p.saturation unpack regular tuple regular tuple method support ex min max len concatenation index slice additional one namedtuple note start underscore replace make asdict replace return new instance name tuple replace specify field new value syntax example notice field name quote keyword remember tuple immutable namedtuple replace method replace produce new instance modify original replace old value course save new result variable p p._replace(hue=169 make make new instance exist sequence iterable syntax example happen last item parenthesis iterable list tuple parenthesis work sequence value enclose iterable return error asdict return new ordereddict map field name corresponding value syntax example reference https://www.reddit.com/r/python/comments/38ee9d/intro_to_namedtuple/ name list similar name tuple mutable https://pypi.python.org/pypi/namedlist subclass tuple add layer assign property name positional element locate collection standard library module namedtuple function generate new class inherit tuple provide name property access element tuple namedtuple class factory need thing generate class class name want use sequence field name want assign order element tuple field name valid variable name start underscore return value call namedtuple class need assign class variable name code use construct instance general use name name class generate coord create instance coord many way provide list field name namedtuple function list string tuple string single string field name separate whitespace commas create name tuple class instantiate ordinary class fact new method generate class use field name provide param name name tuple tuple handle tuple index slicing iterate access datum use field name class namedtuple generate class inherit tuple write coord tuple immutable field name start underscore namedtuple keyword argument rename default false rename invalid field name field name change change index field name class class approach tuple approach see tuple approach readable namedtuple function collection allow create tuple name attach field property handy reference datum tuple structure name rely position keep mind tuple immutable want mutability stick class namedtuple name suggest namedtuple tuple name standard tuple access element use index namedtuple allow user define name element handy process csv separate value file work complex large dataset code become messy use index pythonic use read interesting scenario csv processing python good use container call name tuple use create definition class feature original tuple use name tuple apply default class template generate simple class method allow lot code improve readability convenient defining class think worth add information namedtuple use type hint way new way use name tuple use namedtuple type package type hint namedtuple let use example top answer post see use use name tuple code use name tuple inherit namedtuple class define variable name new class test name class create instance class assign value use variable instance calculate try namedtuple create lightweight object type turn tuples convenient container simple task namedtuple n’t use integer index access member tuple example code code answer think add namedtuple deem shortcut define class see cumbersome conventional way define class namedtuple
need get location home directory current log user use follow linux work windows correct cross platform way want use ensure work platform python + use pathlib.path.home find pathlib module support know old thread need large scale project python work mainstream go solution write comment code output window output linux ubuntu test python work do use pathlib part standard library treat path object method string qualify question tag cross platform useful get home directory effective user linux specific let imagine write installer script solution require perform certain action certain local user accomplish installer script change effective user os.path.expanduser("~ return argument need desire user name note work change euid scenario describe apply example show use
purpose slot python respect want use special attribute slot allow state instance attribute expect object instance expect result space saving small caveat declare particular slot time inheritance tree example python object get wrong problem manifest object take space python base slot descriptor slot separate wrong come big caveat multiple inheritance multiple parent class nonempty slot combine accommodate restriction follow good practice factor parent abstraction concrete class new concrete class inherit giving abstraction(s empty slot abstract base class standard library see section multiple inheritance example attribute name slot store slot dict class inherit object automatic python explicit python prevent creation dict inherit object class inheritance declare slot none dict entry lot detail wish keep read creator python guido van rossum state create slot attribute access trivial demonstrate significant fast access slot access fast python ubuntu python window measure purpose slot reduce space memory object instance take contribution documentation state reason space save use dict significant sqlalchemy attribute lot memory saving slot verify use anaconda distribution python ubuntu linux guppy.hpy heapy sys.getsizeof size class instance slot declare byte include dict thank python lazy evaluation dict call existence reference class datum useless call existence dict attribute minimum byte contrast class instance slot declare datum byte total byte item slot bit python illustrate memory consumption byte python slot dict slot define point dict grow attribute spite small dict python see slot scale instance save memory major reason want use slot completeness note note time cost slot class namespace byte python byte python slot use data descriptor property call member deny creation dict subclass object subclass object python python explicit subclass class define slot allow dict creation subclasse slot object add dict slot note slot order repeat slot parent class need declare slot subclass use slot parent restrict creation dict slot cause problem multiple inheritance create child class parent non empty slot fail run problem remove slot parent control parent give empty slot refactor abstraction dict slot lose size benefit upside dynamic assignment slot name expect inherit object slot get sort semantic use slot name slot point slot value value put instance dict avoiding slot want able add attribute fly good reason add dict slot require add weakref slot need feature namedtuple builtin make immutable instance size tuple get benefit need subclass usage try assign unexpected attribute raise attributeerror prevent creation dict allow dict creation leave slot use non empty slot subtype tuple non empty slot multiple parent use use empty slot parent seem provide flexibility allow child choose prevent allow add dict get dynamic assignment see section creation dict slot add remove cause problem go limb compose mixin use abstract base class intend instantiate empty slot parent seem good way go term flexibility subclasser demonstrate let create class code use multiple inheritance inherit declare expect slot care trivial single inheritance need class inherit noisy attribute basis nonempty slot fact want give abstractbase nonempty slot leave declaration leave wrong functionality multiple inheritance deny dict weakref instantiation able tease caveat rest slot documentation dev docs current make significant recent contribution current top answer cite outdated information hand wavy miss mark important way quote want use slot go instantiate lot hundred thousand object class abstract base class example collection module instantiate slot declare user wish deny dict weakref creation thing available parent class slot contribute reusability create interface mixin true many python user write reusability option deny unnecessary space usage valuable pickling slotted object find complain mislead typeerror incorrect message come old protocol default select late protocol -1 argument python introduce python python keep mind solved problem first paragraph half short explanation half predictive part answer question proper use slot save space object dynamic dict allow add attribute object static structure allow addition creation save dict object use slot second wishful thinking mark useful optimization unnecessary python interpreter dynamic require dict addition object python similar create dict access create lot object datum ridiculous second paragraph oversimplifie miss actual reason avoid slot real reason avoid slot actual reason see rest answer change behavior object slot way abuse control freak static type weenie go discuss way accomplish perverse goal python discuss slot third paragraph wishful thinking mark content answerer author contribute ammunition critic site create normal object slot object instantiate inspect guppy.hpy().heap access regular object dict inspect consistent history python unify type class python subclass build type extra space add instance accomodate dict weakref dict initialized use worry space occupy empty dictionary instance need extra space add phrase slot class quote jacob hallen proper use slot save space object dynamic dict allow add attribute object static structure allow addition creation use slot eliminate dict object useful optimization unnecessary python interpreter dynamic require dict addition object side effect slot change behavior object slot way abuse control freak static type weenie bad control freak abuse metaclasse static type weenie abuse decorator python obvious way make cpython smart handle save space slot major undertaking list change p3k want use slot go instantiate lot hundred thousand object class slot exist memory optimization tool discouraged use slot constrain attribute creation pickling object slot work default old pickle protocol necessary specify version introspection feature python affect python object dict atttribute dictionary contain attribute type python self.__dict__['attr imagine use dictionary store attribute take extra space time access use slot object create class dict attribute attribute access do pointer want c style structure full fledge class use slot compact size object reduce attribute access time good example point class contain attribute x y. go lot point try use slot order conserve memory addition answer example use slot implement slot take extra line make class new style class way reduce memory footprint class fold expense write custom pickle code become necessary slot useful library call name method dispatch make function call mention swig documentation high performance library want reduce function call function use slot relate op question relate building extension use slot syntax object help complete picture usage slot reason simple example slot attribute slot attribute class add new attribute object look example see obj1 obj2 x attribute python create dict attribute object obj2 suppose class test thousand object create additional attribute dict object cause lot overhead memory computing power code follow example class test contain slot attribute add new attribute object attribute python create dict attribute eliminate overhead object become significant many object attribute class instance property instance name attribute value attribute regular attribute access instance act dictionary name attribute act key dictionary looking value instance(attribute > value slot access name attribute act dictionary instance act key dictionary looking value attribute(instance value flyweight pattern name attribute act dictionary value act key dictionary look instance attribute(value > instance addition answer slot add little typographical security limit attribute predefined list long problem javascript allow add new attribute exist object mean normal unslotted object allow add attribute python case sensitive attribute spell different case different suspect type error bad luck use slot limit time second attribute name disallow ’s slot collection suggest use slot possible keep control object begin python dict use add description attribute slot none use attribute description private variable appear description give obscure use slot add attribute object proxy proxytype package part peak project objectwrapper allow proxy object intercept interaction proxie object use python support use implement thread safe blocking wrapper async implementation base tornado bounce access proxie object ioloop use thread safe concurrent.future object synchronise return result default attribute access proxy object give result proxied object add attribute proxy object slot use slot time think need slot want use lightweight flyweight design pattern case want use python object want python object wrapper array struct numpy array class wrapper attribute provide method act underlie data method reduce class method reduce function operate underlie array data original question general use case memory mention get well performance instantiate large amount object interesting parse large document object database comparison create object tree entry use slot slot reference performance use plain dict tree py2.7.10 osx test class ident appart slot testcode verbose mode addition myriad advantage describe answer herein compact instance memory conscious less error prone mutable dict__-beare instance et cetera find use slot offer legible class declaration instance variable class open contend inheritance issue slot declaration use metaclass declare metaclass base class inheritance tower ensure derive base class inherit slot attribute intermediate class fail declare
work series dataframe terminal lot default repr series return reduce sample head tail value rest miss builtin way print entire series dataframe support proper alignment border column color code different column use option return option previous value work jupyter notebook use display(df print(df use jupyter rich display logic need hack setting simple way come lot make function configure load time start ipython https://ipython.org/ipython-doc/1/config/overview.html color get elaborate color sound counterproductive agree bootstrap .table stripe nice create issue suggest feature import pandas alternative use context manager set option display entire dataframe full list useful option see use tabulate package consider follow example usage answer variation answer lucidyan make code readable avoiding use set_option import pandas alternative use context manager set option display large dataframe use display(df df use notebook print(df pandas dataframe.to_string series.to_stre method accept format option need markdown output pandas dataframe.to_markdown series.to_markdown method need html output pandas dataframe.to_html method series.to_html note series convert dataframe use ipython notebook jupyter use html try propose simple plain text solution produce result follow use jupyter notebook great solution note pd.serie convert pd.dataframe produce result follow datascroller create part solve problem load dataframe terminal view scroll mouse arrow key excel workbook terminal support query highlighting disclosure author datascroller set false display.expand_frame_repr boolean print full dataframe repr wide dataframe multiple line max_column respected output wrap multiple page width exceed display.width default true detail read pretty print pandas dataframe series link help ypu friend run output achieve use method pass total column present dataframe arg display.max_column eg try use display function use horizontal vertical scroll bar display different dataset use print display support proper alignment want make dataset beautiful check pd.option_context lot option show dataframe note use jupyter notebook
print integer commas thousand separator need locale specific decide period comma format specification mini language option signal use comma thousand separator locale aware separator use integer presentation type ' m surprised mention f string python easy part colon format specifi separator character want f"{num use underscore comma possible use method equivalent use format(num old version python look magic see first time part language need enough shortcut available read look group subcomponent get work need internationalization support clear concise use build library p.s usual -style formatter formatter need term field width precision setting get locale work suggest modified version mark answer recursion useful negative case recursion comma seem bit excessive inefficiency unreadability hard beat locale group code remove irrelevant part clean little follow work integer good answer want add future reference python go format specifi thousand separator accord python docs work thing line regex replacement work inegral output float less digit change format specifi .3f work decimal digit attempt group decimal part let break float ' m sure version work use return update issue format tell exact reason able fix drop use n}'.format value locale representation think simpli way locale solution information search thousand python doc currency use locale.currency set flag group code output expand answer ian schneider want use custom thousand separator simple solution want german representation get bit complicated way format compatible float int ' m sure standard library function fun try write use recursion come say find standard way use accept answer prefer format(number easy interpret remember https://docs.python.org/3/library/functions.html#format comment activestate recipe rework use regular expression feature lookahead \d make sure group digit digit get comma say string reverse point reverse string integer decimal d}".format(1234567 float decimal number f specifies number decimal place bonus quick dirty starter function indian lakhs crore number system https://stackoverflow.com/a/44832241/4928578 python version python version information manual solution turn float int negative number work thing notice hardcore version python beginner experience programmer python use comma interesting programming exercise consider case unsigned integer readable python program add thousand separator appear possible use list comprehension short liner mental gymnastic understand work case get first version sensible choice want program understand find issue dot separator previous top vote answer design universal solution use want separator modify locale know elegant solution get job do feel free improve use separator decimal float number example decimal place result format work float usage example use python access build format look django code intcomma intcomma_recurs code realize inefficient recursive compile regex run good thing necessary issue django focus kind low level performance expect factor difference performance time slow curiosity implement version intcomma see performance advantage use regex test data conclude slight advantage task pleased see suspect use reverse xrange approach unnecessary regex case make code look well cost ~10 performance assume pass string look number result undetermined test result liner python python positive int baked python pep https://www.python.org/dev/peps/pep-0378/ use format(1000 show integer thousand separator format describe pep babel module python feature apply comma depend locale provide install babel run command usage simple answer result money commas python python version code know question ask python year lol people use python python code python code edit python code work think syntax different variant use generator function work integer test italy subclass float practical way use number math op exist code print terminal float int
small utility use download mp3 file website schedule build update podcast xml file add itune text processing create update xml file write python use wget window file download actual mp3 file prefer entire utility write python struggle find way download file python resort use wget download file use python use urlretrieve python use import urllib.urlretrieve use urllib.request.urlopen basic way use library error handling complex stuff change header python method urllib2 use python request library run pip install request get request many advantage alternative api simple true authentication unintuitive painful case people express admiration progress bar cool sure several shelf solution include tqdm implementation @kvance describe month wb open('test.mp3','wb open file erase exist file binary mode save datum text urllib.request.urlopen note accord documentation legacy interface deprecate future thank gerrit urllib2.urlopen thank corey thank pablog use wget module improve version pablog code python simple python python compatible way come library follow use call download file python urllib.urlretrieve url_to_file file_name requests.get(url wget.download('url file_name note urlopen find perform bad download large file size > mb requests.get store file memory download complete write wget library pure python purpose pump feature version python3 use urllib3 shutil libraire download use pip pip3 depend python3 default run code note download urllib3 use urllib code agree corey urllib2 complete urllib likely module use want complex thing make answer complete simple module want basic work want deal response object call read wget instal use parallel_sync pip install parallel_sync doc https://pythonhosted.org/parallel_sync/pages/examples.html powerful download file parallel retry failure download file remote machine get progress feedback speed matter make small performance test module wget regard wget try status bar take different mb file test different files- eliminate chance cache hood test debian machine python2 first result similar different run perform test use profile decorator full code seem fast sake completeness possible call program retrieve file use subprocess package program dedicate retrieve file powerful python function example wget download directory -r deal ftp redirect http proxy avoid download exist file multi connection speed download jupyter notebook call program syntax late answer python>=3.6 use install dload source code write follow works vanilla python python note use pycurl python little see pablog code help add make look awesome check run environment window use cls mac os x linux clear urlretrieve requests.get simple reality fetch datum couple site include text image solve task universal solution suggest use urlopen include python standard library code run machine run python pre instal site package answer provide solution http forbid download file http use python try request urllib module module provide well use solve problem new api urllib3 base implementation info https://pypi.org/project/urllib3/ use python request line local copy remote file want download file webpage try wget failing decide python route find thread reading make little command line application soupget expand excellent answer pablog stan add useful option use beatifulsoup collect url page download one desire download multiple file parallel example usage actual example see action possibility build http.client httpconnection object consider low level perform desire request assume developer subclass script way handle nuance http library request tend handle special case follow redirect use keras.utils.get_file way call external process curl default display progress bar average download speed time leave format table put directory script note specify output path curl
get size file python use output byte need st_size property object return os.stat use pathlib python use os.stat output byte answer work real file need work file object try work real file stringio limit testing python file object api rigorous interface course api documentation suggest file object support seek tell edit difference os.stat stat file permission read seek tell approach work read permission edit jonathon suggestion paranoid version version leave file pointer end file try read file get byte result use pathlib add python backport available pypi interface use pathlib provide easy way access file relate operation bitshift trick use want convert bytes unit right shift shift order multiple example gb byte stick question python code pseudo code option include import module os.stat function return object contain many header include file create time last modify time st_size give exact size file file path absolute relative provide exact file path file path relative absolute use stat method os module provide path form string byte pathlike object work file descriptor
find file directory extension python use glob want traverse directory use use glob job use pathlib glob loop want recursive use pathlib module include standard library python install port module old python version use conda pip pathlib pathlib2 work generator version produce different result try find file fast method use recursive function search file specify extension folder sub folder find file include function convert output pandas dataframe path.py alternative https://github.com/jaraco/path.py get file name datapath folder list pythonic way python tool test python w7x64 see solution folder subdirectory get list complete file path file specific extension make short task fast good break fast pathlib os.scandir fast glob keep mind result change need recursive result copy paste method add .lower .ext find search .ext result get array file name folder call data directory use simple line code code make life simple use fnmatch https://docs.python.org/2/library/fnmatch.html copy pastable solution similar ghostdog use yield create generator avoid assemble complete list suggest use fnmatch upper method way find follow extend functional solution sub directory case folder contain lot file memory constraint consider use generator option iterate option b get use python os module find file specific extension simple example many user reply answer include file directorie subdirectory file need generator go use match want make list generator expression
concatenate list string single string example give sentence get sentence handling string separate variable see append string python opposite process create list string see split string list character split string list word appropriate use str.join generic way convert python list string 's useful beginner join string method strange begin useful result join stre object join many type generator list tuple fast allocate memory well classical concatenation see extended explanation learn comfortable trick add parenthesis edit future use answer function remove python python dead use python write python ready code make inevitable upgrade easy @burhan khalid answer good think understandable second argument join optional default use python reduce function specify join string use want generate string string separate commas final result use mixed content list want way consider list convert string require convert back list .join method use method range base loop example python reach last word list should'nt add concenated_stre last word string append string concenated_stre variable
write try block catch exception bare clause other say use catch exception consider outermost level code example want handle uncaught exception terminate advantage exception bare exception catch keyboardinterrupt systemexit catch swallow make hard exit script catch exception keyboardinterrupt want raise exception see follow example docs catch possible exception catch baseexception top exception hierarchy python https://docs.python.org/3.10/library/exceptions.html#exception-hierarchy python people mention need specific case handle general exception simple example similar one find http://docs.python.org/tutorial/errors.html#defining-clean-up-action attempt catch exception put code try statement place print perform action throw exception example see output order perform action throw exception call execute try statement exception throw exception throw look great depend exception throw hope help multiple way particular python approach simple approach recommend know line code throw exception approach approach recommend provide detail exception include drawback tracback need import find little trick testing exception name python handle specific exception code need test see name list handle exception add bonus method catch exception full traceback help understand error python worth mention proper python code catch many error want catch first exception want break code error happen code function exception want capture try differentiating want capture exception capture take time go log process let say get different third party exception example cloud service provider gcp log find exception get rest error happen leave room code crash get unexpected exception way understand go improve code capturing edge case want crash reason example code embed remote hardware access add generic exception catcher end take look python exception hierarchy difference exception baseexception exception catch systemexit keyboardinterrupt generatorexit
try pip install repo specific branch google tell branch name pip install https://github.com/tangentlabs/django-oscar-paypal.git@/issue/34/oscar-0.6 return install branch prepend url prefix git+ see vcs support specify branch name lead use pip git+ clone repository slow test example take minute fast thing find work github bitbucket become django master django stable/1.7.x bitbucket predictable pattern master branch name default make instal fast answer mention variation require place package instal requirements.txt note archive syntax lead trail egg blah blah require paste url look instruction install private repo use ssh credential install package subdirectory say stackoverflow https://pip.pypa.io/en/stable/topics/vcs-support/ add extra want install pip file add save egg work charm develop branch fabric8-analytics-worker.git deepak1725 user use egg file install procedure procedure support instal git git+http git+https git+ssh git+git git+file mention good use branch tag hash install @steve_k note slow install git+ propose instal zip file suggest install use file exist new format new egg file require wheel setuptools>=0.8 package find suggestion question work translate work remove extra redundant output 0.6.0 dev branch version number master work windows pycharm setup use pycharm want use pip3 install git+https://github.com/
get function name string use name prefer method apply func_name work build function double underscore indicate reader special attribute bonus class module name attribute remember special name get current function method name consider sys._getframe work inspect.currentframe latter avoid access private function call function name consider f_back inspect.currentframe().f_back.f_code.co_name use mypy complain error item none optional[frametype attribute f_code suppress error consider fun property function type dir(func_name list func_name.func_code.co_code compile function store string display code human readable format interested class method python qualname addition name function return caller function name albert vonpupp answer friendly wrapper stack()[0 caller string name method use function decorator add class time function time assume glog standard python logger function decorate voila want get name function simple code say function define output function1 say function list get name function output function1 function2 function3 extension @demyn answer create utility function print current function name current function argument guarantee available implementation python see ref use traceback module thing eg call return current process detail see answer utilize decorator feel bit verbose use log function name respective input output value adapt print info create log file adapt apply op specific example output try reference https://www.oreilly.com/library/view/python-cookbook/0596001673/ch14s08.html get function name string use special name variable
understand cache encrypt file similar file pycache folder give people source code input datum folder create run program python interpreter compile bytecode first oversimplification store pycache folder find bunch file share name .py file project folder extension bytecode compile optimize bytecode compile version program file programmer ignore make program start little fast script change recompile delete file whole folder run program reappear suppress behavior send code people common practice delete folder matter use version control git folder list ignore file .gitignore include use cpython common reference implementation want folder suppress start interpreter flag example option note tcaswell set environment variable pythondontwritebytecode value accord python man page non empty string pycache folder contain python bytecode compile ready execute recommend delete file suppress creation development waste time recursive command ready see clean need bytecode become stale edge case see comment python programmer ignore bytecode pycache common line see file bytecode mean distribution disassemble use dis module use os x hide folder project run follow command root folder project replace pycache python set flag directory file tell finder textmate exclude listing bytecode hide rerun command create new module wish hide new bytecode delete hide bytecode file window equivalent command test batch script welcome go project hide folder use right click hide run unit test scenario comment delete file pycache folder useful use follow line run cl clean need pycache folder create use line try get information file create make little run program second time open file update answer doc speed loading module python cache compile version module pycache directory name module.version.pyc version encode format compile file contain python version number example cpython release compile version spam.py cache pycache__/spam.cpython-33.pyc name convention allow compiled module different release different version python coexist source directory generate python exist make program run commit source control coexist peace local source code pycache directory contain bytecode cache file generate python compile python file wonder python interpret language compile file question address worth read answer python docs go depth work exist import module python store compile bytecode pycache directory future import use parse compile source run script file import previous version use store cache bytecode file litter directory .py file start python move subdirectory make thing tidy pythondontwritebytecode set non empty string python n’t try write file import source module equivalent specify option official python tutorial module speed loading module python cache compile version module pycache directory name module.version.pyc version encodes format compile file contain python version number example cpython release compile version spam.py cache pycache__/spam.cpython-36.pyc python doc programming faqs module import first time source file change current compile file create file contain compile code create pycache subdirectory directory contain file file filename start name file end middle component depend particular python binary create python version interpreter compile code python version pycache interpreter compile code python interpreter compile .py script file save result compilation pycache directory project execute interpreter identify script modify skips compile step run generate file store pycache folder project complex make preparation time project run short program small ignore use python abc.py b option execution python script cause byte code generate memory keep program shutdown case module import fast reusability python create cache pyc python compile file byte code module import cache idea speed load python module avoid compilation compile run multiple time policy import name file module name part initial dot indicate python implementation create cache cpython follow version number python save compile byte code file sub directory name pycache locate directory source file reside filename identify python version create byte code pycache invoke next time application start run application first time necessary module comply store pycache next time use call python main.py call python pycache_/main.pyc
use argparse parse boolean command line argument write true --foo false example follow test code like parsed_args.my_bool evaluate true case change surprising bool evalutate false get argparse parse false f low case variant false think canonical way argparse support version python python course want version pass type user define function solution use previous suggestion correct parse error argparse useful make switch default value instance allow use use default value specific user setting relate downside approach nargs catch positional argument see related question argparse bug report allow user make shell alia override feature recommend mgilson answer use exclusive group use helper set many variation extra row set default value boolean value assign use logical statement check oneliner seem confusion type bool type='bool mean mean run function bool return boolean stand type='bool mean give bool callable error use type='foobar argparse registry let define keyword use action action='store_true see registered keyword display dictionary lot action define type default argparse.identity code define bool keyword parser.register document hide part programmer know type action take function class value lot stackoverflow example define custom value case obvious previous discussion bool mean parse string python documentation bool(x convert value boolean use standard truth testing procedure contrast int(x convert number string integer correct way note true value true false value false raise valueerror val similar way use set argument command argument true set type argument default false look issue imho pretty solution use parse string boolean suggest work expect code addition @mgilson say note argumentparser.add_mutually_exclusive_group(require false method make trivial enforce --no flag use time simplest flexible prefer simplicity edit trust input use eval outdate python + argparse support boolean args search booleanoptionalaction implementation look thing mention block entry true false argument argparse.argumenttypeerror create custom error class want try change reason simple way use follow @akash desarda excellence answer https://stackoverflow.com/a/59579733/315112 use strtobool lambda decide use strtobool right strtobool return int bool strtobool return value python convert bool value seamlessy receive wrong input value argparse.action strtobool compare lambda produce clear comprehensible error message compare code produce clear error message simple way use choice pass --my flag evaluate false required true option add want user specify choice improvement @akash desarda answer support python think canonical way expand gerardw answer reason parser.add_argument("--my_bool type bool work bool("mystre true non empty string true want my_program.py quick easy argument output false call terminal similar @akash approach use use str lambda python lambda give alien feeling follow make true use python filename convert value find good way store default value parameter false present commandline argument value true cmd command want argument true python want argument false python create boolaction use set action = boolaction parser.add_argument
think none version clear google style guide use none minor performance difference assume case fit make clear winner convention refer singleton none compare singleton none performance difference compile bytecode try avoid human reader misunderstand x y. write x ambiguity google python style guide good practice use cause unwanted result see interested see literal evaluate true false python edit comment testing none negate compare none fact seem operator high precedence use way none honest opinion avoid edit testing confirm bukzor comment correct least able prove mean none exact result none stand correct thank bukzor answer stand use conventional x none code write understandable programmer first compiler interpreter second construct resemble english tldr bytecode compiler parse none readability sake use none use python value thing human readability useability correctness various paradigms programming performance python optimize readability context bind weakly logical difference see documentation operator test object identity true x object yield inverse truth value provide python grammar readability improvement language unitary element grammar course parse byte compiler translate sake readability use language intend use use wise answer simple people make technical advantage way use make clear winner matter look english use mean user python chinese user language python look understand glance common syntax take couple extra brain cycle parse different sake different least field use understand ambiguity programmer expert python syntax operator prefer negating result stylistic reason none read english none require understand operator precedence read english performance difference money motivation decision prefer technique implementation dependent overridable easy optimise distinction x none similar programming language none sound clear correct english say seem preference thing prefer readable form think write code handling precedence operator order produce much readable code
try use ipython notebook macos x python ipython get matplotlib graphic show inline try pylab inline ipython command line argument = inline make difference inline graphic get matplotlib.get_backend show module://ipython.kernel.zmq.pylab.backend_inline backend use matplotlib inline first cell notebook work think start ipython kernels inline mode default setting follow config option config file matplotlib version possible use ipython old version activate nbagg backend enable interactivity ctrl enter magic line see plot matplotlib use pylab inline magic command make matplotlib inline default ipython edit file ~/.ipython add line c.interactiveshellapp.matplotlib inline note add line ipython_notebook_config.py work work ipython agree foobarbecue enough rec able insert comment post recommend python notebook start wit argument --pylab accord fernando perez creator ipythonnb matplotlib inline initial notebook command see http://nbviewer.ipython.org/github/ipython/ipython/blob/1.x/examples/notebooks/part%203%20-%20plotting%20with%20matplotlib.ipynb find workaround satisfactory instal anaconda python works box anaconda install matplotlib plot start plot problem run plot command separate cell jupyter problem solve merging plotting command single cell simulate problem syntax mistake matplotlib inline resolve issue first example right way create plot work expect import magic enord9 supply leave end plot type receive ambiguous non error erronious code example error line message stack trace obvious reason think make syntax error plot print use jupyter notebooks visual studio code vscode inline backend seem work specify widget ipympl need install support pip install ipympl
convert hex string integer 0x prefix need specify base way tell prefix python distinguish hex decimal specify base order invoke prefix guess behavior omit second parameter int assume base-10 int(hexstre trick work 0x prefix ffff convert string int pass string int base convert string suffice conversion way pass base int infer base prefix string hexadecimal prefix 0x int enough information guess type source code interpreter python make conversion work ffff python think try write legitimate python name python number start numeric character python name start numeric character give string add dan answer supply int function hex string specify base think give valid value specify base unnecessary hex number contain string use eval bad practice example wild ast.literal_eval safe eval demo use python interpreter type hex value interpreter convert formatter option seem work assignment statement assume python late example handle hex octal binary int float use standard prefix 0x 0b function convert suitable string number answer https://stackoverflow.com/a/58997070/2464381 need function
download python source code github know install dependency requirements.txt file create hand question give python source code directory possible create requirements.txt import section use follow code generate requirements.txt file info relate pipreq find come pip freeze save package environment include use current project use pipenv tool recommend improve development flow use virtual environment pigar good choice python3 python machine python2 default python2 check python version case use run follow command conda terminal environment solve create requirements.txt file take github link pratos condaenv.txt error see use anaconda try use .yml option person use environment create new enviroment machine option find kinda mind blow simple task complicate python think good way need tool 1.pipreq pip3 install pipreq pipreq go project install package project use package python environment pip freeze problem approach install sub package example project use pandas==1.3.2 pandas use package pipreq write sub package numpy requirments.txt combine pipreq second tool pip3 install pip tools pip tool take package requirements.in generate sub package example pandas==1.3.2 requirements.in pip tool generate numpy==1.21.2 pandas requirements.txt add package prone mistake forget use first tool tool write fix use pipreq write default command pipreq requirements.in pip compile need worry maintain package sub package build deterministic tl;dr use follow build deterministic pipreq requirements.in pip compile answer use pipreq work answer generate requirements.txt file prefer use pipreq pip freeze pip freeze save package environment include use current project save one use project install requirement use project file py file direct python file file ipynb format convert py type use line code need install pipreq library cmd terminal mac create txt file use code path file write need give path file create file project follow accepted answer use pip3 freeze generate huge file list dependency entire solution want need figure try generate need requirements.txt file dependency use pip3 want generate minimal requirements.txt list dependency need use pipreq package helpful numerous requirements.txt file component level project single file solution wide level make sure run pip3 python3.7 execute command make sure create virtual environment python3 python2 put source code directory run python file launch use non native module install module run pip3 install module pip install module affect entire module list environment execute command top requirement file contain module instal virtual environment run command top advise use environment make thing easy come stuff instal many dependency system need requirements.txt specific project install first pipreq execute command project folder command generate requirements.txt file particular project get list requirement standard requirements.txt file use follow command create standard requirement file package instal correspond version want get print terminal use follow approach list instal package pretty print format project folder say github repo want get custom project use follow package https://pypi.org/project/pipreqs/ pipreq content requirements.txt face issue virtual environment want specific project select folder(include child pipreq support use p.s additional library check fuzzylogic good way python work develop python application several choice many answer st option option self explanatory describe approach library call to-requirements.txt install type read whole command see instal setup run override pip scripts pip install pip uninstall update requirements.txt file project require version package override make uninstalle package pip behave ordinary customize way work example disable activate require directory activate git repository allow disallow create file exist link command create add relevant module want list package use virtualenv use complete solution help compile shortlist linux use virtualenv run command generate requirements.txt create bash command @francis right https://stackoverflow.com/a/65728461/1021819 add additional support jupyter notebook file use https://pypi.org/project/pipreqsnb syntax pipreq author use pip freeze bad way create requirement file serve temporary solution problem manage requirement python project simple search import x import give list dependency instal extra problem pip freeze dump instal package strict version dependency dependency include dump example lib==1.0 instal need lib==0.5 use pip freeze get wish update version lib get conflict lib v2.0 use sub lib v1.0 v0.5 require get complex fast multiple dependency get problem couple project create automate script clean pip freeze dump safe comment unneeded dependency work great help solve problem run requirements.txt local package local package mean package project folder pip freeze local pip freeze note double underscore local instal pipreq help pip install pipreq perfect solution pipfile pipfile update install new local package pipfile.lock similar package.json javascript install package pipenv pip pipenv pipenv user generate requirement.txt file project pipfile
way widen display output interactive script execution mode use describe function pandas dataframe dataframe column label get descriptive statistic want dataframe column statistic suppress return value give column refer try drag idle window large increase configure idle width option avail update pandas necessary pandas autodetect size terminal window set old version see bottom pandas.set_printoption deprecate use pandas.set_option(optname val pd.options.<opt.hierarchical.name val help set_option old version information deprecate mention pandas auto detect default size display area summary view use object repr fit display mention resize idle window effect print df.describe().to_stre fit idle window terminal size determine pandas.util.terminal.get_terminal_size deprecate removed return tuple contain width height display output match size idle window issue run terminal emac note possible bypass autodetect max_columns=10 switch summary view number row column give limit option help see untruncated form column try documentation display.expand_frame_repr boolean print full dataframe repr wide dataframe multiple line max_column respected output wrap multiple page width exceed display.width default true true see pandas.set_option want set option display large dataframe use option value restore exit block use line work anaconda python pandas visual studio code set column maximum width use particular statement set maximum width pixel column use print df.describe().to_string force show whole table use to_stre dataframe result describe dataframe number row dataframe hold description describe compute statistics min max mean adjust pandas print option set_printoption work case pandas detect console width use to_stre output fit console see docstre set_printoption case call to_string answer brenbarn update version way wide dataframe print change api set pandas option change used setting scale datum high refer documentation set output display match current terminal width line enough display column dataframe accord documentation v0.18.0 run terminal ipython notebook qtconsole idle liner pandas autodetect screen width adapt fly many column show follow step change option pandas max_column feature follow allow column display change need change number row need display follow need change maximum row allow print row time refer documentation change different option setting pandas seem previous answer solve problem point use auto complete able see pandas documentation option setting option full dotted style case insensitive name display.max_row get set option attribute top level option attribute max parameter max_row max_column use repr method decide to_stre info use render object string case python ipython run terminal set pandas auto detect width terminal swap small format case column fit ipython notebook ipython qtconsole idle run terminal possible correct auto detection none value mean unlimited emphasis original width parameter width display character case python ipython run terminal set none pandas auto detect width note ipython notebook ipython qtconsole idle run terminal possible detect width output use custom function display thing pandas dataframe display_all(df.head pass function dataframe voilà use pd.set_option whole notebook use single cell want mess display option see particular list column expand dataframe view try try loop specify number column requirement max_column increase width numpy array print give good result jupyter notebook none answer work couple print column look sloppy information format use terminal neovim suspect reason mini function need change df_data place dataframe name col_range set pandas show big small answer speak let remember df.describe().transpose df.tail(n).transpose find easy read header column structure header1_xxx header2_xxx think terminal application handle vertical scrolling necessary transposing header large value column index minimize impact total table width df description merge possible idea
want try handle exception python follow right way difference second catch keyboardinterrupt systemexit stuff derive baseexception exception see documentation detail bad practice catch error see pass bad programming practice consider good practice catch error interested case shutil.rmtree oserror ignore error say pass function integer stre give error typeerror coercing unicode need string buffer int find want ignore difficult debug want ignore error catch exception bare statement specify exception catch exception include systemexit exception example sys.exit use compare follow exit want write behave code oserror exception represent various error example want ignore errno specific want try catch handle exception python mean handle mean catch take action code post work mean take action exception stop exception go stack want first answer jack o'connor thread reference thread close write new way come commit add http://hg.python.org/cpython/rev/406b47c64480 author raymond hettinger talk sort python hotness https://youtu.be/osgv2vnc0go?t=43m23s addition python equivalent use python completeness note capture exception raise exception multiple exception type handle parenthesize tuple separate clause see python tutorial several way choice simple solution cover general case argument specific shutil.rmtree see help follow see allow functionality error cover narrow case example demonstrate handle keyword argument exist cover narrow case example demonstrate handle keyword argument exist import suppress context manager suppress specific exception ignore filenotfounderror doc mechanism suppress exception context manager use cover specific error continue program execution know right thing note suppress filenotfounderror available python want code work python see next section want try handle exception python follow right way python compatible code pass correct way statement op bare baseexception include generatorexit keyboardinterrupt systemexit general want catch thing fact specific naming exception part python exception hierarchy see catch general exception hide problem expect want catch oserror exception care directory get specific error number errno library reraise note bare raise raise original exception want case write pass code exception handle fyi clause go exception run code cause exception want try catch handle exception python help print exception try catch handle exception print exception need ignore error multiple command fuckit trick python handle exception similar language difference syntax difference example try way handle exception object orient programming thing actual code work final note prefer try useful need abstraction usual
imagine want develop non trivial end user desktop web application python good way structure project folder hierarchy desirable feature ease maintenance friendliness suitability source control branching merge easy generation install package particular matter make happy work lot silly rule python project simple top level directory contain readme config hard choice use tree python distinction top level directory see meaningless top level directory top level architecture application recommend put name product directory write application name quux directory contain stuff name project pythonpath include quux foo reuse module case use komodo edit cuft single .kpf file put top level directory omit add svn accord jean paul calderone filesystem structure python project blog post jean paul calderone give answer python check open source python project right way let excerpt project layout part excellent article set project layout directory structure important get sensible layout mean potential contributor spend hunt piece code file location intuitive deal exist project mean need move stuff let start top project number top level file setup.py directory project see top level file docs directory generate empty directory sphinx put generate documentation sandman directory test directory sandman python packaging authority sampleproject https://github.com/pypa/sampleproject sample project exist aid python packaging user guide tutorial packaging distributing project try start project use python_boilerplate template follow good practice suit case find willing split project egg point believe simple project common situation use modify version library put source put application startup script put project cruft put unit acceptance test put non python data config file documentation go depend regard egg separate large project additional configuration file buildout.cfg project_root setup.cfg experience matter iteration put data code think go chance wrong get well idea thing go shape well position make kind guess extension source code directory trunk contain directory python directory various language ' m inclined try put extension code repository next time say go initial point make big deal put seem work find work change non python datum bundle python module use support setuptool thing recommend use namespace package create shared namespace multiple project use much java convention put package com.yourcompany.yourproject able share namespace branching merging use good enough source control system handle merge rename bazaar good contrary answer ' m +1 src directory top level doc test directory specific convention documentation directory tree vary depend use sphinx instance convention quickstart tool support leverage setuptool pkg_resource make much easy project rely specific version code multiple version instal different non code file use
write list file writeline insert newline character use loop python python one use keen single function call least remove square bracket string print make time genexp listcomp reason take memory require materialize whole list string go file file exist human program clear interoperability requirement try serialize list disk use python app pickle list read simple ensure item item list string use generator expression remember itemlist take memory take care memory consumption use python python syntax platform independent terminate final line newline character unix good practice start python \n".format(item replace f string f"{item}\n way serialize json use simplejson include json python examine output.txt useful syntax pythonic human readable read program language think interesting explore benefit use genexp take example question use square bracket create temporary list equivalent construct temporary list line write consume significant amount memory depend size list verbose output str(item drop square bracket equivalent remove wrapping list call pass temporary generator file.writeline generator create newline terminate representation item object demand write nice couple reason avoid memory issue trigger error limit python max virtual memory ulimit put memory usage side method original python linux ' m lazy serialize list text file sepparate value python use print argument unpack follow syntax writeline method http://www.tutorialspoint.com/python/file_writelines.htm use numpy.savetxt option use print function python3 follow find path useful help get open('file f writing file hope become useful logic convert item list string(str list contain tuple logic write file tuple new line use eval loading tuple reading file go follow example output your_file.txt item save script save use pickle output abc def save dump list list load able read simplejson possible output way iterate add newline python3 use loop redirect stdout file useful purpose suggest solution think look answer let avg list use e depend requirement work open ﬁle use build open function specify name ﬁle mode want open ﬁle mode read mode r write mode w append mode specify read write appending text mode binary mode b many mode available help(open give detail default open consider ﬁle t’ext ﬁle open r’ead mode example ﬁrst open ﬁle write text mode use write method ﬁle object write ﬁle close ﬁle example book byte python swaroop h. swaroopch.com
build method convert date datetime python example get datetime midnight give date conversion easy datetime method call datetime(d.year d.month d.day use datetime.combine(date time time create datetime.time object initialize midnight several way believe mention dislike readable extract info date object plough suitable ctor classfunction datetime accept answer correct prefer avoid use datetime.min.time obvious obvious power feel way timetuple method reliance order opinion readable explicit way rely reader familiar datetime module api take explicit well implicit use date.timetuple method unpack operator today think clean solution provide pandas timestamp timestamp pandas equivalent datetime interchangable case check case want vanilla datetime timestamp lot powerful datetime other deal timezone timestamps powerful pity document way convert date datetime mention use datetime.datetime(2021 use easy_date make easy call datetime(d.year d.month d.day call implement util project make timezone aware datetime django timezone util alternative toisoformat fromisoformat use date.toordinal datetime.fromordinal suspect efficient converting string test process use class need quick give date datetime object newbie python code work convert specify input provide datetime code correct ' m wrong
give follow good way check pythonic fact has_key remove python win hand elegance deprecated;- performance follow observation true notice python fast solution elegant pythonic -mtimeit helpful save nanosecond accord python docs has_key deprecate favor key d. use dict.has_key code require runnable python version key dict introduce example kill performance use container implement getitem has_key contain turn o(1 search o(n search fall linear search getitem fix trivial solution dict.has_key deprecate use sublime text editor take example dictionary name age expand alex martelli performance test adam parkin comment has_key dictionary method work collection contain miss use method iterate collection find change run python
python datetime.datetime object good way subtract day use timedelta object subtract python datetime object timezone aware careful avoid error transition change utc offset reason general day_ago yesterday differ offset local timezone change last day example daylight save time summer time end sun nov-2014 a.m. america los_angele timezone day_ago yesterday differ pendulum module handle elaborate alternate method use case helpful use parameter second week nice function use want compute last day last month relative timedelta relativedelta function dateutil function powerful extension datetime lib genial arrow module exist output
convert str representation dict follow string dict prefer use eval use main reason coworker class write convert input string ' m mood go modify class deal issue use build ast.literal_eval safe use eval doc say example https://docs.python.org/3.8/library/json.html json solve problem decoder want double quote key value mind replace hack note single quote part key value fail due improper character replacement solution recommend strong aversion eval solution json single jquery.parsejson throw invalid json error escape single json use json.load op example use yaml deal kind non standard json string summarize result conclusion prefer json.load string trust use eval use literal_eval suggest safe matter string need parser json parser simplejson work store content fit json scheme use json ast library consume lot memory slow process need read text file mb ast minute delay conversion dictionary json minute use less memory optimize code siva kameswara rao munipalle libs use python2 note hardcode split work string data single quote note2 python3 need wrap filter list get list
string represent unix timestamp python convert readable date use time.strftime get typeerror use datetime module take http://seehuhn.de/pages/pdate vote answer suggest use fromtimestamp error prone use local timezone avoid issue well approach use utc posix_time posix epoch time convert part portable way get local time work local time zone different offset python access database use pytz timezone display use time format support system need local time get readable utc time care timezone issue affect date return python access database system python get timezone aware datetime use stdlib offset wrong python access database system window function time module thin wrapper correspond c api portable corresponding datetime method use python save date string print use output use time datetime package pandas use solve use pandas convert timestamp readable date timestamps format digits(millisecond convert millisecond date use digits(second convert second date use human readable timestamp unix timestamp use script output december convert current time convert date stre different format get readable date timestamp time change format date note utcfromtimestamp lead unexpected result return naive datetime object python treat naive datetime local time unix time refer utc ambiguity avoid set argument fromtimestamp format string compliant format use follow code hope solve problem way do use gmtime format function output use datetime.strftime(format datetime.fromtimestamp(timestamp return local date corresponding posix timestamp return time.time datetime.utcfromtimestamp(timestamp return datetime correspond posix timestamp tzinfo none result object naive work dataframe want series convert class int error use code use use easy_date make easy quick dirty liner
convert list dictionary dataframe give want turn dataframe note order column matter ds list dict note work nest data answer correct much explain term advantage limitation method aim post show example method different situation discuss use use suggest alternative depend structure format datum situation method work work well other work consider contrive example list consist record key present simple case encounter continue important make distinction different type dictionary orientation support pandas primary type column index orient='column dictionary column orientation key correspond column equivalent dataframe example data column orient note use pd.dataframe.from_record orientation assume column specify dictionary load orient='index orient key assume correspond index value kind datum suit pd.dataframe.from_dict case consider op useful know need custom index resultant dataframe set use argument support pd.dataframe.from_dict method work box handling dictionary miss key column value example want read single column specify use parameter example example dictionary data2 read column f pass list support default orient column support method iterate datum perform reverse delete place iterate example extract 0th 2nd row data2 use strong robust alternative method outline json_normalize function work list dictionary record addition handle nested dictionary keep mind datum pass json_normalize need list dictionary records format mention json_normalize handle nested dictionary example take documentation information meta record_path argument check documentation table method discuss support feature functionality use orient='column transpose get effect orient='index pandas pd.dataframe.from_records(d get work use pd.dataframe.from_dict(d pyhton3 solution list work instance row_number dataframe require row record write follow method useful case easy way find follow list dict datetime key int value problem convert dataframe method create dataframe column date solution
create guid uuid python platform independent hear method use activepython windows window use com method use plain python uuid module provide immutable uuid object uuid class function uuid3 uuid4 uuid5 generate version uuid specify rfc want unique call uuid1 uuid4 note compromise privacy create uuid contain computer network address uuid4 create random uuid uuid version new unique identifier uuid format use modern application database draft rfc available https://pypi.org/project/uuid6/ doc example python use python late uuid module include python standard distribution ex copy https://docs.python.org/3/library/uuid.html link post active keep update use guid random key database type operation hexadecimal form dash extra character seem string represent hexadecimal number safe contain character cause problem situation hexadecimal use url safe base64 string follow conform uuid guid spec require amount randomness pass uuid primary key model unique field code return uuid object pass uuid parameter code want hex value uuid make website app need time unique d. string number uuid great package python create unique d. output example answer window want permanent uuid identifie machine window use trick copy answer use windows api get computer permanent uuid process string ensure valid uuid return python object give convenient way use datum bit integ hex string good luck ps subprocess call replace ctype call windows kernel dll purpose function need strong validation produce correct result run command run import uuid3 uuid4 uuid5 function uuid package uuid6 uuid7 function uuid6 package example output call function follow uuid3 uuid5 require parameter function configurable generate unique uid base format specify eg:- format mention generate follow uuid lxoynyxe-7hbq cajt dsdu
emulate loop python program follow straightforward code work print follow output order catch stop iteration exception break loop example thing need show pseudocode state machine try implement loop try use loop print stuff list use update list line want keep iterate seem want code example simple way emulate loop key feature loop loop body execute least condition evaluate bottom loop body control structure show accomplishe need exception break statement introduce extra boolean variable code useful implementation highlight main difference understand case go loop least function ugly condition function parameter suppose fill stuff reason use classic loop exception break loop handle outside loop guess problem code behaviour break define break go level break try go exist try loop relate pep related question break nest loop crazy solution different pattern use coroutine code similar important difference exit condition coroutine chain coroutine stop stop feed data code collect tokens tuples tokens assume difference .append original code way do follow seem simplistic solution surprised see invert believe simulation python syntax format close structure format present c java python answer call assignment expression documentation loop contain try statement need clause quick hack use loop loop use true boolean value condition variant scenario loop resource unavaliable similar throw exception use wonder order catch stop iteration exception break loop show make use assignment expression feature walrus operator introduce python possibility work python provide default argument build next function avoid stopiteration exception see help set flag exception handler check work s. typical loop include loop loop situation warrant loop set condition build iter function test py2 want give condition terminate value set equality require equality true
use pip possible figure version package instal know pip install xyz --upgrade wonder pip info xyz good way tell version use pip pip show command old version pip freeze grep job send pull request pip enhancement hugo tavare say specloud example pip list command --outdate extra argument get current late version package use combine adamkg answer check pip tool https://github.com/nvie/pip-tool install yolk run yolk give nice output get little virtualenv python function return package version machine readable format python bash equivalent invoke python complex robust see caution sample usage note case pkg_name parameter contain package name format return pip freeze use import scikit learn sklearn flask cache flask_caching note invoke pip freeze bash version seem inefficient method prove robust package naming peculiarity inconsistency underscore dash small large cap abbreviation sklearn scikit learn caution complex environment variant return surprise version number inconsistent get import problem arise version package hide user site package subfolder illustration peril use version situation encounter problem conda instal package environment share dependency pip instal package version dependency differ get downgrade pip instal dependency illustrate late version numpy available pypi time anaconda conda forge channel version numpy late instal basemap package conda pip instal numpy downgrade conda version become unavailable import function case version right pip freeze conda list wrong use grep command find example show version metadata version version tool call pip check give quick overview instal package update status use stumble question quick succession mention easy way pip show work python window issue command output use python code use credit comment sinoroc mirekphd pip list tell format output json safe approach parse version window open cmd type python press enter type import press enter type ._version press enter see screen shot use method check version serial module question mention os user use windows linux mac couple answer work mac linux command use case user try find version python package window powershell use command pip list |||| findstr packagename pip list |||| findstr request output request indentation perfect reason use block library name throw error parse library name process version package variable contain library install environment
need set environment variable python script want script call python see environment variable set complain say string want know read environment variable python latter part script set environment variable string use set variable debussy stre access variable use child process inherit environment parent process special action part require consider aspect code robustness store integer value variable environment variable try retrieval consider avoid error substitute -1 set put behave python dictionary common dictionary operation perform addition get set operation mention answer check key exist key value store string python python dictionary use keyword has_key python important thing note use child process inherit environment parent process run issue figure script update environment python script run call reflect late value excerpt docs mapping capture first time os module import python startup part process site.py change environment make time reflect change make modifying os.environ store environment variable dict object contain environment value use method go comment section try add environment variable goal store user information system variable use variable future solution alternative config file method describe code help simple code block work variable exist respective process find environment variable tab window system setting code serve purpose problem discuss variable save problem unsuccessful attempt manage save variable window environment register mimic windows shell command wrap system class os package follow code describe successful attempt hope helpful os.environ["debussy complain say string want know read environment variable python(in late part script set use os.environ["debussy set variable item assignment method use key get check exist instance try object way method get return value method method method environment variable string assign string value environment variable os.environ["debussy want read print environment variable use print os.environ["debussy change effective current process assign change value child process inherit environment parent process note try set environment variable bash evaluation store expect example evaluate shell get java javavirtualmachines jdk1.8.0_144.jdk contents home path get literal expression libexec java_home make sure evaluate set environment variable use dictionary access environment variable problem try use os.system run batch file set environment variable use set command file set python environment child process create os.system function get variable set python environment use script play environment variable add modify remove variable good practice restore previous state function completion need context manager describe question restore environment variable classic usage use setdefault function set new variable variable exist environment make sure set environment variable string int throw typeerror write little context manager set variable duration indent block example usage window linux follow class int good box python solution call pycrosskit create environment variable persistent linux window usage struggle flask unittest remember set variable outside method variable read import app seem trivial save headache example flask unitt variable second step see third step variable read perform first step neat way manage user define environment variable put text file load runtime achieve use python dotenv package allow us import variable package instal default module look file name current directory define variable file line follow import environment follow specify path file contain define variable optional argument load_dotenv environment variable access os module late answer help test code change run app environment variable attach pass env var way script environment frozen code child process accomplish good solution matter platform wrap call python batch file example linux batch file look
work use python use conditional get error conditional wrong reason get syntaxerror operator python |||||| valid python operator operator know language different name python logical operator call logical negation operator call write summarize operator equivalent table see python documentation boolean operation logical operator python bitwise binary operator bitwise negation python bitwise inverse operator equivalent see unary arithmetic bitwise binary operation binary arithmetic operation logical operator many language advantage short circuit mean first operand define result second operator evaluate show use function take value print return handy see evaluate print statement see print statement execute python look operand case binary operator evaluate operand operand course second operator evaluate summarize table true false represent bool(left hand side return true false need return true false bool call pseudo code function work note pseudo code python code python create function call keyword use evaluate bool implicit bool call use customize class behave show customize use class print track happen let see happen class combination operator bool method python check object len method return value great useful know case create sequence container see truth value testing bit scope original question case deal numpy array subclass pandas series dataframe implicit bool call raise dreaded valueerror case use logical function numpy perform element wise deal boolean array use binary operator numpy perform element wise binary comparison bool call operand return true correct first operand need return boolean bool method return operand first operand evaluate false evaluate true return second operand use statement call bool result finer point relevant comment go mathematical solution use perform logical operation c say want build logic gate python try call hope help good code task working use conditional use import jupyter notebook single double enough top answer suggest use find pandas replace work
want detect module change use inotify simple need know directory want get notification retrieve module path python give path file load least mac os x. guess try get module directory inspect module python inspect module provide several useful function help get information live object module class method function traceback frame object code object example help examine content class retrieve source code method extract format argument list function get information display detailed traceback example answer say good way file demonstrate important caveat file exist run module main example say file pythonpath run foo.py give output try run bar.py get hope help caveat cost lot time confusion testing solution present try tackle variation question question ask closed duplicate redirect module import return absolute path module give folowe script foo.py call python foo.py return foo.py add shebang call use ./foo.py return ./foo.py call different directory put foo.py directory bar call add shebang executing file return bar foo.py relative path go get directory os.path.dirname(__file tricky least system return empty string call directory file ex output word return empty string seem reliable use current file oppose file import module get wrap call abspath output note abspath resolve symlink want use realpath example make symlink file_import_testing_link point file_import_testing.py follow content execute print absolute path file_import_testing_link file_import_testing.py @summerbreeze mention use inspect module seem work concise import module return absolute path find path execute script thank @jbochi give absolute path execute script thank @sadman_sakib get talk simplest solution use imp.find_module("modulename documentation give tuple path second position advantage method inspect need import module make work use string input useful checking module call script example edit python3 importlib module doc importlib.util.find_spec return spec specify module first sys.module check see module import sys.modules[name].spec return happen set none valueerror raise module sys.module search suitable spec value path give finder none return spec find name submodule contain dot parent module import name package argument work importlib.import_module word relative module name lead dot work trivial module file variable show relative path get directory module notify simple package support special attribute path initialized list contain name directory hold package init__.py code file execute variable modify affect future search module subpackage contain package feature need use extend set module find package source tweak command line utility create local bin python make executable import module hit name get full path want retrieve module path load example output spend fair amount time try py2exe problem get base folder script run python script py2exe executable work run current folder folder hard system path use approach use sys.frozen indicator run py2exe want retrieve package root path module follow work test python main init__.py path reference use file hope help import module yo access plenty information check dir(a_module path dunder a_module.__path print module know absolute path script use path object cwd method return new path object represent current directory return os.getcwd resolve method make path absolute resolving symlink new path object return instal use pip pip show work great location pip show detectron2 pip show mymodule author wisbucky caveat use file current relative directory blank run script directory script trivial solution result trick dirname call set dir mean current directory valid directory path relate function use abspath need use trick need abspath accept blank path interpret current directory contribute common scenario python explore approach build function open accept relative absolute path first argument relative path treat relative current work directory recommend pass absolute path file say run script file follow code guarantee example.txt file create directory script file locate fix code need get path script make absolute ensure path absolute use function get path script several common function return various path result function return path result base current work directory want first element sys.argv list path root script script run call list root script module come handy situation file variable contain path module call follow code create file example.txt directory script locate wish program try code point know exact name module hardcode select list run use file know work python try rid global issue find case work think emulate python program put method module reuse module python package refer file reside directory package ex call maincli.py my_lib_a.py module knowing top_package maincli.py directory get path maincli.py base post plasmabinturong modify code quick bash script case useful want able set environment variable code shell example import site package pandas recommend get directory work import module pathlib general importlib.resource consider task access path resource site package use pip call pip show call use specific version python use example give different result run pip show numpy guarantee pip different python version call
use decrement operator c++ count run change value variable operator operator operator identity operator clarification unary operator work number presume expect hypothetical + operator work string parse translate use long = operator want suspect operator leave consistency simplicity know exact argument guido van rossum give decision imagine argument python pre post increment operator python integer immutable change integer object use several name try object incremente increment b. want reassign many c programmer use python want increment operator operator look incremente object reassign = operator add short b = b clear flexible b++ people increment reassign b b+1 increment operator increment b reassign short python behave low level wrapper machine code high level dynamic language increment make sense necessary use time loop example other answer correct show leave number incomplete explain happen exact evaluate x.__pos x.__pos__().__pos imagine weird class structure child home python unary increment decrement operator --/++ increment value use careful come different python python variable sense python use name object python int immutable let say mean create object type int value bind name object instance int value name refer name object refer distinct let say int immutable happen follow give try python lot think want write somthe sophisticated syntaxe goal optimization return exist error set python operator need write function functionality usage function add local second argument want change local variable try change global function opinion follow approach clear decrement operator use function module translate javascript python python distinction expression statement enforce contrast language common lisp scheme ruby wikipedia introduce operator break expression statement split reason write language distinction preserve miss functionality line code engraine think old head fight class cobble implement tis use re-)assignment integer maintain c type counter edit bit unexpected unwanted behavior tuple getitem use reference object format function sigh want happen counter indicate actual form verbosity use c.v post decrement operator python language c. see multiple sign multiply math -1 +1 parse translate multiplication sign sign straight workaround typing write c++ finish code search replace c++ replace c make sure regular expression search extend henry answer implement syntax sugar library realize usage simple instal pypi place sitecustomize.py project directory make main.py run python output hdytto replace decode script file work
remove first item list find short collection useful list function list.pop(index del list[index modify original list other suggest use slicing perform many pop(0 look collections.deque slicing return subset original modify list slicing see python tutorial list detail l = l[1 pro con use pop retrieve value say = l.pop(0 x delete use list.remove(a[0 pop first element list use list.reverse reverse list remove last element example work numpy use delete method datum structure call deque end queue fast efficient list use list convert deque require transformation convert deque list deque provide useful function insert element side list specific index rotate reverse deque give try use unpack assignment mention pep try unpack follow mention pep pep propose change iterable unpack syntax allow specify catch name assign list item assign regular name example say word work use pop course result return value pop use method first value
way get functionality similar mkdir shell python look solution system call sure code line wonder write python ≥ use pathlib.path.mkdir exist_ok parameter add python python ≥ os.makedirs optional third argument exist_ok true enable mkdir functionality mode provide exist directory different permission intend one case oserror raise old version python use ignore error python early version use @tzot answer easy trapping exception disclaimer approach require system call susceptible race condition certain environment condition write sophisticated simple throwaway script run control environment go accept answer require system call update ' tempt delete answer think value comment thread convert wiki find distutils.dir_util.mkpath mkdir give error file exist refinement previous suggestion raise exception return false checking errno.eexist update see similar question agree accept answer caveat recommend os.path.exist update suggestion comment full function look pathlib python3 standard library parent true miss parent path create need create default permission take mode account mimicking posix mkdir command exist_ok false default fileexistserror raise target directory exist exist_ok true fileexistserror exception ignore behavior posix mkdir command last path component exist non directory file change version exist_ok parameter add mention solution want able hit file system mimic behaviour mkdir think possible get close possible code first explanation comment @tzot answer indicate problem check create directory create tell change file system fit python style ask forgiveness permission first thing try make directory go wrong work jacob gabrielson point case look case file exist put directory mkdir analogous behaviour python raise exception work case get error message makedirs directory exist good file exist prevent creation directory bad way work happen inspect file system see directory return raise exception problem file system different state makedir call eg file exist cause makedir fail directory place matter much function exit raise exception time last file system call directory exist think asa answer correct extend little act mkdir handle case path exist let error bubble function declaration usage ' ve success follow function call ensure directory exist base @dave c answer bug fix part tree exist
give path mydir myfile.txt file absolute path python window end work absolute path use new python library pathlib get python use pip install pathlib author write aim library provide simple hierarchy class handle filesystem path common operation user get absolute path window unix docs https://docs.python.org/3/library/pathlib.html note expanduser necessary unix case give expression file directory name location contain lead tilde refer user home directory expandvar take care environment variable home install third party path module find pypi wrap function relate function method object use string use update python + pathlib answer question need temporary string keep mind use path object relevant function include course abspath today use unipath package base path.py http://sluggo.scrapping.cc/python/unipath/ recommend use package offer clean interface common os.path utility get right filename current script call script useful use subprocess get script full path make easy navigate folder append many time want go directory hierarchy get cwd parent path combine filename access file system use get absolute path specific file mac give full path show follow path give path mydir myfile.txt find file absolute path relative current work directory python like return ecarroll mydir case use python linux look full path file
help veterinary clinic measure pressure dog paw use python data analysis ' stuck try divide paw anatomical subregion make array paw consist maximal value sensor load paw time example paw use excel draw area want detect box sensor local maxima large sum try experiment decide look maximum column row look direction due shape paw seem detect location separate toe mark neighboring sensor good way tell python maximum one want note square overlap separate toe take convenience advanced solution welcome ' m human movement scientist ' m real programmer mathematician keep simple version load np.loadtxt try @jextee solution see result see work front paw work hind leg recognize small peak fourth toe inherent fact loop look top low value take account know tweak @jextee algorithm able find 4th toe process trial supply sample datum give average paw file array maximal datum paw order make contact plate image show spread plate set blog interested setup onedrive raw measurement request datum power help get question regard paw detection paw sort able check toe detection paw turn work paw size example course hindsight fault choose nice example go wrong nail recognize toe heel wide recognize paw large take size overlap cause toe detect twice way small dog find 5th toe suspect cause area large try current solution measurement come staggering conclusion small dog find 5th toe impact large dog find need change guess change size neighborhood small small dog large large dog let change size array hope well suggestion locate toe toe area scale paw size detect peak use local maximum filter result dataset paw run second dataset paw work need use scipy.ndimage.measurements.label mask label distinct object able play note method work background detect bunch unwanted peak background important factor size neighborhood need adjust peak size change remain proportional data file paw.txt source code output overlap square seem area select example tricky part calculate sum square assume need overlap use slice cut last column row original 2d array overlap calculate sum understand image array take slice imagine stack sum element position sum sum square top leave corner position sum square use max find maximum sort sort find peak remember position peak couple value sum ordinal position flatten array see zip calculate row column position print result allow square overlap edit version filter non overlap square appear result problem choose likely finger peak idea work time implement right pseudo code notice front finger stay perfect circle rear finger circle front finger space try use heuristic property detect finger pseudo code brute force approach small think doable n=12 c_12 combination time way select rear finger case evaluate paw image registration problem general strategy rough ready approach dumb thing work counteract orientation problem initial setting basic direction north north east run throw result toe end pixel think kind thing research image processing right answer complex idea weight k means cluster bad iterate convergence method give well result get mass cluster help identify toe specify number cluster front cluster specify density way choose number cluster appropriate case choose cluster radius see many end example latter mean shift sorry lack implementation detail specific get deadline work next week let know shoot use persistent homology analyze datum set follow result click enlarge version peak detection method describe answer figure show dimensional persistent homology class sort persistence upscale original dataset factor use scipy.misc.imresize note consider paw dataset splitting make problem easy methodology idea simple consider function graph function assign pixel level look consider water level height descent low level local maxima islands pop birth saddle point island merge consider low island merge high island death call persistence diagram dimensional homology class island depict death- birth value island persistence island difference birth- death level vertical distance dot grey main diagonal figure label island decrease persistence first picture show location birth island method give local maxima quantify significance mention persistence filter island low persistence example island local maximum peak look python code find problem study depth physicist good implementation root look tspectrum class tspectrum2 case documentation reference access subscription nim ' m sure go help suggest use k mean cluster method k mean unsupervised cluster algorithm take data number dimension happen 3d arrange k cluster distinct boundary nice know many toe canine implement nice http://docs.scipy.org/doc/scipy/reference/cluster.vq.html example resolve cluster want bit different include pressure value think give shoot idea calculate discrete laplacian image expect negative large maxima way dramatic original image maxima find idea know typical size high pressure spot first smooth image convolute gaussian size give simple image process couple idea top head want take look opencv get decent python api function find useful thank raw datum ' train get stop come massage txt file regexps plop html page javascript visualization share find hackable python think good approach scale rotation invariant next step investigate mixtures gaussians paw pad center gaussian physicist solution define paw marker identify position init random position define energy function combine award location marker paw position punishment overlap marker let say s(x_i mean force square alfa parameter peak time metropolis hasting magic select random marker move pixel random direction calculate difference energy move cause get uniform random number call r. de<0 accept move go undo move go repeat marker converge paw beta control scan optimize tradeoff optimize increase time simulation simulate anneal wanna tell guy nice option find local maxima image python skimage http://scikit-image.org/docs/0.8.0/api/skimage.feature.peak.html worth try neural network able create training datum need many sample annotate hand here approach use similar large telescope search high pixel search fit maximize sum gaussian fit inside sub region say center high pixel set pixel find peak center go repeat high peak fall noise threshold toe need rough outline want use connected component algorithm isolate paw region wiki decent description code http://en.wikipedia.org/wiki/connected_component_labeling make decision use connectedness problem prefer connectedness separate paw print connect region enough iterate region find maxima find maxima enlarge region predetermine threshold order identify give toe subtle problem start use computer vision technique identify leave front rear paw start look individual toe start take rotation skews translation account accomplish analysis call moment different moment consider vision application central moment translation invariant normalize moment scale translation invariant hu moments translation scale rotation invariant information moment find search image moment wiki use gaussian mixture model python package gmms google search interesting problem solution try follow apply low pass filter convolution gaussian mask give bunch float point value perform non maximal suppression use know approximate radius paw pad toe give maximal position multiple candidate close clarify radius mask step similar radius use step radius selectable vet measure vary age breed solution suggest mean shift neural net work degree complicated ideal seem cheat bit use jetxee algorithm find toe fine able guess base well simple efficient code size datum set make array position upper leave sum square sort sum take square high sum contention put good array remove square use part remove square seem work last paw small sum right first picture turn eligible square large sum equal sum select square square leave luck see choose want require idea use want time sure answer question seem high peak neighbor gist note ruby idea clear naive approach sufficient build list square plane order sum descend order select value square paw list pick good square intersect find square proceed step step locate global maximum process need surround point give value set find region repeat next
remove duplicate list preserve order use set remove duplicate destroy original order build pythonic idiom alternative http://www.peterbe.com/plog/uniqifiers-benchmark assign seen.add seen_add call seen.add dynamic language resolve seen.add iteration costly resolve local variable seen.add change iterations runtime smart enough rule play safe check object time plan use function lot dataset ordered set http://code.activestate.com/recipes/528878/ insertion deletion member check operation small additional note seen.add return none way attempt set update integral part logical test good solution vary python version environment constraint introduce pypy adopt cpython implementation detail make language guarantee python plain dict insertion order efficient implement cpython fast solution simple list(set(item push work c layer cpython dict insertion order dict.fromkey lose ordering slow list(set(item take fast order preserve solution take half time hack involve use set listcomp important note solution more_itertool see unique advantage term laziness support hashable input item need feature solution work raymond point cpython ordereddict implement c ugly list comprehension hack slow ordereddict.fromkey need list end input short performance readability good solution cpython ordereddict equivalent + use plain dict cpython slow solution profiling show need well solution keep read @abarnert note more_itertool library pip install more_itertool contain function build solve problem unreadable seen.add mutation list comprehension fast solution simple library import hack module adapt itertool recipe look itertool recipe support non hashable item performance cost element iterable non hashable algorithm become o(n² o(n hashable important note solution use peak memory usage underlie set grow size listify result iterate able process unique item find wait entire input deduplicate processing first unique item option copy paste recipe code use more_itertool example use ugly hack allow single listcomp check update set track see expense rely ugly hack rely fact set.add place method return none none evaluate true note solution save call iterable non hashable item other fail typeerror solution performant hot code path use depend version language spec interpreter third party module rely performance critical assume readability person maintain code end murderous mood clever micro optimization worth cpython python implementation start python dictionary order way remove duplicate iterable keep original order python include python use ordereddict timing show fast short various approach python gain c implementation clear solution kick dead horse question old lot good answer solution use pandas many circumstance dead simple use python dictionary guarantee remember key insertion order answer question summarize current state affair ordereddict solution become obsolete import statement issue unique list sort sufficient condition equal value group edit assume preserve order imply list order case solution mizardx community edit elegant way compress duplicate consecutive element single element think wanna maintain order add performant implementation functionality external module1 iteration_utilities.unique_everseen timing python show fast alternative test include ordereddict.fromkey f7 more_itertools.unique_everseen make sure test duplicate check make difference contain value case iteration_utilities.unique_everseen function fast computer iteration_utilities.unique_everseen function handle unhashable value input o(n*n performance o(n performance value hashable disclaimer ' m author package late answer old question itertool recipe function see set technique fast f7 depend datum test see want list end f7 use listcomp way append yield feed generator list function fast list_append listcomp rate squeeze microsecond go important understandable reusable write function require dsu want decorate recipe available iterool want key case simplify hashable type list list base mizardx reduce variant sophisticated explanation simple way give output pandas user check pandas.unique function return numpy array need convert list tolist method reference list comprehension build symbol example follow function unique ifie list element change order referencing list comprehension demo output borrow recursive idea use definine haskell nub function list recursive approach try grow datum size see sub linear time complexity definitive suggest fine normal datum think interesting generalize uniqueness operation example pass function use notion round integer equality uniqueness purpose unique(some_list test_round provide unique element list uniqueness mean traditional equality imply set base dict key base approach problem mean take first element round k possible integer k element round eliminate duplicate value sequence preserve order remain item use general purpose generator function solution fine remove duplicate preserve order excellent solution(s propose page variation(s popular simple minimalistic deploy correct hash optimal efficency main complaint seem use invariant none return method seen.add(x constant excess unnecessary value logical expression side effect hacky confuse waste hash lookup iteration give amount discussion debate topic significant improvement code seem overlook show test set iteration require hash lookup test membership see add value seen.add(x first operation guarantee second successful wasteful duplication effort overall technique efficient excess hash lookup end expensive proportion little work remain let set job notice example call set.add foreknowledge result increase set membership set get chance reject duplicate code snippet usurped role use explicit step test set code robbing set core ability exclude duplicate single hash lookup code follow version cut number hash lookup iteration need liner help work correct ' m wrong mizardx answer give good collection multiple approach think effective approach sort numpy array output sort ugly list comprehension hack generator expression use set determine include element new list simple recursive solution preserve order run o(n time idea create hole find sink bottom make use read write pointer duplicate find read pointer advance write pointer stay duplicate entry liner list comprehension use pandas aesthetic prefer performance consider build function pandas.series.drop_duplicate time solution use import module set give output method quadratic linear lookup list element list add cost rearranging list del say possible operate place start end list proceed origin remove term present sub list leave idea code simple test implementation
iterate step say step argument use decimal step safe express term many point float point round error give wrong result use linspace function numpy library part standard library obtain linspace take number point return let specify include right endpoint want use float point step value use numpy.arange float point round error cause problem simple case round error cause arange produce array produce number range integer float point use list comprehension obtain list step generator comprehension minimize memory allocation build xrange([start stop step define generator accept produce type choose stick type support increase magnitude loop reduce need edit remember think work desire output numpy bit overkill think speak step by-1 produce less round noise test build function arange generalize python range constructor satisfy requirement float handle scipy import arange similar r seq function return sequence order give correct step value last value equal stop value range build function return sequence integer value ' m afraid use decimal step use loop curious python convert tell argument zero solution use itertool usage example python result use give desire good solution round error set range set datum point continuous function use implement function replace pow(step f x pow(step define f. example want save generate list r more_itertool third party library implement numeric_range tool output tool work decimal fraction version use original range function create multiplicative index shift allow syntax original range function make version one use float one use decimal find case want avoid roundoff drift introduce float point arithmetic consistent empty set result range xrange pass single numeric value function return standard range output integer ceiling value input parameter give return edit code available package pypi frange lot solution float point error python need function take integer float require import return float point error suprise mention recommend solution python doc define recipe easy use require numpy external library function numpy.linspace note step argument third num argument specifie number desire value example modified version full python recipe andrew barnert solution get range float step use function necessary import numpy install ' m sure improve optimize feel free post output completeness boutique functional solution use function do use numpy library arange function allow step float return numpy array convert list use tolist convenience start stop inclusive stop exclude import use generator python v3.6.2:5fd33b5 jul msc v.1900 bit amd64 counter float precision issue use decimal module demand extra effort convert decimal int float writing code pass str modify function convenience necessary sample output know ' m late party trivial generator solution work call original range error handling know error catch update update stackoverflow add auto correction possibility incorrect sign step solution solution work fine float_range(-1 work float point representation error work fine beginner problem simulate calculation attempt work seem work decimal step lazy find hard write range function change xrange(0.0 xrange(0 use division inside loop concerned round mistake decide test hear example calculation float compare return false wrong let know decide test solution work range run short test print true get wrong let know trick avoid round problem use separate number move range start half step numpy.arange use answer similar other use map need numpy use lambda get list float value step fractional step resort library liner clutter code sign step parameter important frange(start stop precision
parse yaml file easy pure method rely c header pyyaml documentation instal pip install pyyaml plain yaml.load function exist yaml.safe_load prefer avoid introduce possibility arbitrary code execution need arbitrary object serialization deserialization use safe_load note pyyaml project support version yaml specification yaml specification support need see ruamel.yaml note answer use drop replacement pyyaml keep yaml file order way call oyaml view synk oyaml .yaml application follow see comparison data serialization format case look way make configuration file want read short article configuration file python yaml conform yaml specification release use ruamel.yaml disclaimer author package superset pyyaml support yaml want able preserve comment round tripping use ruamel.yaml upgrading example easy use full control input need case know use pathlib path manipulating file use new api ruamel.yaml provide first install pyyaml use pip3 import yaml module load file dictionary call my_dict need entire yaml file my_dict dictionary access element list yaml file use follow python script example defaults.yaml environment.py use ruamel.yaml detail debate usage ruamel.yaml compatible simple solvable problem old usage pyyaml state link provide use fix problem edit pyyaml dead turn maintain different place make script feel free use long keep attribution script parse yaml file function load parse yaml string function load convert dictionary yaml function dumps respect variable type read_yaml_file function return datum dictionary ' m sure suggest recommend use jq wrapper yaml use jq syntax work yaml file json read value pipe stdin update yaml file inplace update use environment variable merge multiple file multiple update yaml file read parse field yaml base jq filter https://github.com/mikefarah/yq/#install https://github.com/kislyuk/yq
instal python module construct statlib use setuptool check version command line use pip easy_install pip list instal package version linux systems pipe grep findstr window find particular package interested lxml==2.3 lxml==2.3 individual module try version attribute module traceback recent call last file string line module attributeerror module object attribute version command question prefix sudo appear instal global python environment advise take look virtual environment manager example virtualenvwrapper try approach recommend pep pep accept deferred fact appear increase support python core developer recommend include version attribute remove python python use module build library check package version example construct run python use pkg_resource module distribute setuptool library note string pass get_distribution method correspond pypi entry side note note string pass get_distribution method package name register pypi module name try import pip install memcache import memcache want apply solution command line use pip show find version use pip show your_package_name give detail package work windows grep version use linux filter version show well way detail specific package detail version author location detail pip help pip update windows recommend command python bracket print module.__version good first thing work want shell use pip use pip.get_installed_distribution get version python solution work pip pip function move pip.get_installed_distribution pip._internal.utils.misc.get_installed_distribution indicate external use good idea rely use pip previous answer solve problem code use dir find module version attribute try output package version output python version new metadata module importlib package example documentation method previous answer work worth try follow python see get tornado version note .version work other tornado module version attribute easy way check terminal pip list add executable python pip environment variable execute command command prompt give python command import package print version name work assume use jupyter notebook use terminal drop exclamation mark package xgboost instal pip package e.g. caffe instal conda suggest open python shell terminal python version interested import library get version attribute note regard python version instal different version python open terminal python version interested example open terminal python give different version library opening python python note avoid use print function behavior depend python python need terminal show value expression answer window user suggest answer use statement module print version use method summary provide librarie version detail give complete library detail scour internet try figure ensure version module run python_is_horrible.__version n’t thing python operating system python version none answer work scenario think minute realize basic minute fail assume module instal import go terminal pycharm terminal write py python hit enter python terminal try way work try way know information include version library example way help show librarie version project try use command show librarie version hope help greeting work jupyter notebook window long launch bash compliant command line git bash mingw w64 solution give many answer use jupyter notebook window system tiny tweak run window pro python instal anaconda follow code work launch jupyter git bash launch anaconda prompt tweak add exclamation mark front pip make pip python program list package copy file output look get version instal module python find unreliable use various tool available include good pkg_resource mention jakub kukul answer cover case example need reliable way get version package module submodule end write getversion simple use see documentation detail get list non standard pip module import current module result note code put solution page list import module work restrict server environment none solution work global solution fit figure swift workaround read terminal output pip freeze script store module label version dictionary retrieve module version pass module label key case production system harden comprehension pip conda bash replacement pip freeze make sure update dist package folder current python version ignore inconsistent name e.g. underscore dash sample printout small bash program get version package python environment copy bin provide executable permission run terminal assume name script py check version situation field version define mention build jakub kukul answer find reliable way solve problem main problem approach require package instal include use pip install system path python initialisation get use pkg_resources.find_distributions(path_to_search search distribution importable path_to_search system path iterate generator return dictionary module key version value approach extend lot version number thank jakub kukul point right direction install package check version give package version use subprocess.getoutput(python3 information way depend version attribute assign output os.system variable prevent display screen use subprocess.check_output raise error subprocess return exit code subprocess subprocess management
python difference urllib3 request module seem thing know say recommend request python package use language python think urllib2 easy use much code capable use think request package useful short use first support restful api easy get post encode parameter take dictionary argument good go build json decoder know json.load lot write sure convenient response datum text use tip iceberg list feature request site urllib2 provide extra functionality urlopen function allow specify header use httplib past far verbose urllib2 provide request class allow declarative approach request note urlencode urllib urllib2 handler implement advanced url support urllib2 short answer work legacy code want use url opener urllib2 need import urllib utility function bonus answer google app engine use httplib urllib urllib2 wrapper google url fetch api subject limitation port protocol length response allow use core library expect retrieve http url python standard library http library exist side side similar name unrelated different design different implementation original python http client add standard library python early documentation find python urllib2 capable http client add python intend replacement new improved incompatible version experimental early documentation urllib2 find python python standard library new urllib merge refactore rewritten version old module urllib3 third party package cpython standard library name unrelated standard library package intention include standard library future request use aim easy use api urllib urllib2 python module url request relate stuff offer different functionality urllib2 accept request object set header url request accept url provide urlencode method use generation get query string urllib2 function reason use urllib2 request request simple easy use http library write python python request encode parameter pass simple argument case need use method urllib.encode encode parameter pass decode response unicode request convenient error authentication fail urllib2 raise urllib2.urlerror request return normal response object see request successful boolean response.ok add exist answer see mention python request native library add dependency request try avoid add dependency native python library available considerable difference port python2 python3 urllib2 exist python3 method port want migrate python3 future consider use tool work think answer few detail urllib3.urllib3 powerful http client python installing follow command work use pip get late code github install use ready go import use create connection need poolmanager instance make request handle connection pooling thread safety proxymanager object routing request http https proxy refer documentation example usage mention urrlib3 documentation urllib3 bring many critical feature miss python standard library follow user guide detail request use urllib3 hood make simple make request retrieve datum thing keep alive automatic compare urllib3 event hook call callback function event trigger receive response request request type function create connection pool get url install request use pip run pip install request install source code import request refer official documentation advanced usage session object ssl verification event hook refer urllib.urlencode function appear exist urllib2 get content url hard write python2 python3 request dependency code response urlopen function requests.get function return different type use urllib2 make thing easy time accept request object raise urlexception protocol error google app engine use use url fetch api google provide sandboxe python environment key point find miss answer return object type class http.client.httpresponse request return class requests.models.response due read method use request p.s request rich many method need read
common directory structure simple python module seem separate unit test test directory question usual way run test suspect obvious run python test_antigravity.py test directory import antigravity fail module path know modify pythonpath search path relate trick believe simple way fine developer realistic expect user use want check test pass alternative copy test file directory seem bit dumb miss point separate directory start download source new project run unit test prefer answer let say user run unit test x. good solution opinion use unitt command line interface add directory sys.path do class example directory structure run directory structure test module test package import antigravity package module usual run single test module run single test module case test_antigravity.py reference test module way import run single test case test method run single testcase single test method run test use test discovery discover run test module package name test*.py change flag run test*.py module test package simple solution user provide executable script bootstrap necessary test environment include need add root project directory sys.path require user set environment variable work fine bootstrap script instruction user simple python runtests.py course path need os.path.dirname(__file need add sys.path python put directory run script begin sys.path depend directory structure locate right place need unitt module python backporte unittest2 python early test discovery build nose necessary want automate test discovery user instruction simple python discover ' ve problem long time choose follow directory structure init__.py script test folder write follow important sharing project makefile enforce run script command put makefile important command run run cd test unitt discover work init script unit_test call point incorrect absolute path append sys.path miss source folder script run discover find test run makefile avoid remember issue approach touch src folder unit test environment variable run create run test script project directory common source directory test load test suite boilerplate code reuse project project run_tests.py test all_tests.py run python unit test directory setup include antigravity test module downside need support code execute particular test run time article link create test_modulename.py file put unitt test test module separate directory code need add module parent directory pythonpath order run popular unit testing framework python important nose nose help simplify extend builtin unitt framework example find test code setup pythonpath include standard python distribution look nose suggest problem separate unit test folder mention suggestion add absolute source path sys.path benefit follow solution run file test test_yourmodule.py change first test directory solution example python unitt module give follow project structure run project root directory python project_name call projectname project_name/__main__.py run test python test run projectname test/__main__.py need follow turn test model directory package add init__.py file make test case sub directory accessible parent test directory modify system path test/__main__.py include project_name directory import thing project_name test run python setup.py develop package path want infect system python installation tool virtualenv buildout exist notice run unitt command line interface src directory import work modification want put batch file project directory use code test locate level project run debug code work box change launch.json file key line envfile root project add file file add path root project add pythonpath c:\your\python\project\root_directory path project able use debug unit test code use setup.py make work directory part instal python environment run test possible use wrapper run select test instance run test use globbe tests/**/*.py enable shopt -s globstar wrapper use argparse parse argument load test add test suite use inspect run check example detail run python unit test directory add @pierre use unitt directory structure run test module test_antigravity.py single testcase mandatory forget init__.py empty work import parent directory voodoo way work python first file test follow content follow import file test test_antigravity.py note reason try clause trickery work run test file test directory run individual test file ok pretty content context.py test_antigravity.py little suggestion welcome follow project structure find well import setup method usual way run test use python install pyt sudo pip install set path variable import fail test project structure comment stuff name main test_antigravity.py use pip tool use pip install install package development mode good practice recommend see good practice documentation find project layout follow multiple directory test directory add directory init__.py file run test run source python unitt bash script execute python unitt test directory file system matter work directory useful staying work directory need quick unit test need test/__init__.py file burden package memory overhead production way let run test script want mess system variable command line add main project folder python path location find relative script relative current work directory add top test script add main project folder system path module import work work matter run test change file match main project folder location simple solution nix base system macos linux git bash windows print statement work pyt test perfect way script unittesting course want proper automate testing consider pyt appropriate setting cwd root project dir new_project case run follow command init__.py directory need import test_antigravity.py like antigravity clause like alan l answer look command line solution base follow directory structure generalize dedicated source directory window see question want use batch loop linux new_project approach possible add directory pythonpath necessary unitt project setup.py file try work config path try
instal python package python setup.py install uninstall note avoid use python setup.py install use pip install need remove file undo stuff installation know list file reinstall --record option take look list produce record list instal file use want uninstall use xargs removal run window use powershell delete contain directory framework versions/3.7 lib site package my_module-0.1.egg/ macos file python import empty module delete python show follow work pip instal check instal package name pip point view list name package instal detect pip name long use name package show case ignore version part follow = uninstall package ask confirmation remove package lucky guy remove pip detect package instal pip detect package instal easy_install setup.py rare case fail real sample local test package name ttr.rdstmc ms window write apply small modification available recent python version come package ensurepip allow install pip offline python ensurepip --upgrade system debian jessie available prevent break system python installation example assume grep instal time ms windows machine instal set linux utility incl grep use native ms window find ignore filtering find name bit list detect python package answer problem unix window unsolvable problem uninstalling setup.py install bother typical case complete answer see wiki page https://ofswiki.org/wiki/uninstalling_setup.py_install first record file instal repeat command run setup.py install want uninstall works rm command take whitespace seperate list file delete installation record list python give choice install pip installation window python window consider choose install pip installation python choose default pip instal type pip command prompt see help find necessary usage instruction pip list show list instal package use uninstall package want read pip documentation answer question help day install package put package home/.local uninstall lazy way uninstall window installation menu use windows rpm command provide first install create distribution package example foo example course go python package directory remove .egg file python lib site python local lib python2.6 dist alternative get python version command give current python version get installation directory python command get installation directory lib python2.4 site package remove package python egg file work able uninstall package troubling think open setup.py locate package name ask pip assume name available metadata variable virtualenv}/lib python2.7 site use virtualenv dist extend martin say record install output little bash scripting trick presto uninstalle file suppose delete instal package make sure folder build delete assume pkg package want delete obove work python3 delete package .egg info file install local python setup.py install uninstall local pip uninstall mypackage remove related file use bash read command follow run python setup.py install point global environment much difficulty uninstalling solution help pip uninstall work uninstall splunk appinspect file find uninstall sudo pip uninstall work uninstall requirement splunk appinspect instal try uninstalling pip delete pip cache search hard drive package pip show lead solution location point directory rename directory cause package remove pip list rename directory reappear pip list reinstall package virtualenv run python setup.py install pycharm install package conda base environment want remove package pip uninstall work delete /anaconda3 lib site package see reason use setup.py write file requirement file use install package virtual environment mess system python package develop egg link set python setup.py develop conda environment pip uninstall packagename egg link remove least scenario pip uninstall way
piece code python run note timing do time function bash linux loop place function run long time function bytecode top level bytecode difference store_fast fast store_name function local toplevel global examine bytecode use dis module able disassemble function disassemble toplevel code use compile builtin ask fast store local variable global cpython implementation detail remember cpython compile bytecode interpreter run function compile local variable store fix size array dict variable name assign index possible add local variable function retrieve local variable pointer lookup list refcount increase pyobject trivial contrast global lookup load_global true dict search involve hash need specify global want global assign variable scope compiler issue store_fast access tell way global lookup optimise attribute lookup foo.bar slow one small illustration local variable efficiency local global variable store time opcode prediction make function fast answer explain function use store_fast opcode loop bytecode function loop program run python execute opcode keep track stack preform check stack frame opcode execute opcode prediction mean certain case python able jump next opcode avoid overhead case time python see top loop predict store_fast next opcode execute python peek opcode prediction correct jump store_fast effect squeeze opcode single opcode hand store_name opcode use loop global level python make similar prediction see opcode go top evaluation loop obvious implication speed loop execute give technical detail optimization ceval.c file engine python virtual machine opcode come pair make possible predict second code run example follow follow store_fast verify prediction cost single high speed test register variable constant pair good processor internal branch predication high likelihood success result overhead transition next opcode successful prediction save trip eval loop include unpredictable branch has_arg test switch case combine processor internal branch prediction successful predict effect make opcode run single new opcode body combine see source code opcode prediction make predict function expand next_instr = = op goto pred_##op jump start predict opcode case jump local variable set next opcode execution python continue iterable reach end make successful prediction time python wiki page information cpython virtual machine work
import file python want import pick first import strategy work rewrite codebase find meet need start explain easy example move professional robust example example import python module python interpreter put el foo fox.py get python interpreter import fox python interpreter invoke python function what_does_the_fox_say fox.py example use execfile exec python script execute python file place put /home el foo2 mylib.py put /home el foo2 main.py run file function moobar import mylib.py make available main.py example use import functionality put el foo3 chekov.py put /home el foo3 main.py run define function chekov.py available import example import riaa.py different file location import put el foo4 stuff put el foo4 main.py run import foreign file different directory example use os.system("python yourfile.py example import file piggyback python startuphook update example use work python2 work python2 python3 rid user startuphook feature set abuse low skill python library writer use inject code global namespace user define program want work python3 get creative tell python developer disable feature set see put code home directory ~/.pythonrc.py put code run get get error modulenotfounderror module name user mean use python3 startuphook disabled default credit jist go https://github.com/docwhat/homedir-examples/blob/master/python-commandline/.pythonrc.py send boat example robust import file python bare import command make empty file name init__.py herp make new directory /home el foo5 herp derp derp make init__.py file /home el foo5 herp derp make new file call yolo.py put moment truth make new file /home el foo5 main.py put run empty init__.py file communicate python interpreter developer intend directory importable package see post include file directory see https://stackoverflow.com/a/20753073/445131 importlib add python import module extension remove modulename function define package argument relative import python type help(__import detail first case want import file a.py file b.py file folder file b.py able use function file a.py file b.py second case want import file folder a.py file b.py file folder file b.py able use function file a.py file b.py summary info package module consult link import specific python file runtime know name many complex method import python file folder create init__.py file declare folder python package go host file want import type root.parent.folder.file import variable class import doc link reference init__.py file require make python treat directory contain package do prevent directory common name string hide valid module occur module search path empty file execute initialization code package set variable simple way understand make sure file want import library present current directory function define file x.py file import function write useful wish import function file good way import .py file simple thing create empty file name init__.py directory your.py file locate post mike grouchy great explanation init__.py use make import set python package add note module package loading file module package name prefixed mymodule imagine mymodule layout load somefile.py/otherstuff.py init__.py content look use python use importlib.util import file arbitrary location module need modify sys.path file_name parameter stre path object module_name parameter require loaded python module dot module name sys importlib choose available name want new module use function import python process use function module importable use module name give give file run follow command see file.py become importable answer base official python documentation importlib import source file import .py file use code first append path import note /input tokenization directory contain file import import file use shorthand name forget import file name extension couple way include python script name abc.py import abc folder import abc folder.internal_folder import abc import os import sys scriptpath /test sys.path.append(os.path.abspath(scriptpath import mymodule case python script update want upload use statement auto refresh bonus case module want import sub directory try run app.py deep common parent directory directory structure app.py append path client sys.path optional load config inspect seem robust use case run solution work cli pycharm call function python file flexible call function import python file python file let say python file display function app.py use display function output work sundar gsv note specify extension unknown feature python ability import zip file file package contain follow write script import package zip archive necessary add zip file sys.path filename import example client import client note need .pyui extension sound crazy create symbolic link file want import create wrapper script help structure python project visual studio code problem cause declare init__.py directory directory become implicit namespace package nice summary python import project structure want use visual studio code run button top bar script main package try run console actual directory example want execute open test_game_item.py test package visual studio code open omission main package directory directory structure try set window ctrl shift p preference open setting json add line user setting comprehensive answer system question many way list find want import content file want write line line import module come way get content file dot syntax file.property oppose merge import file first file import data.py note use extension start open get content content string try access data.teststring cause error datum instance str class property teststring expect next create class instance pun intend put appropriate indentation assign datum access module type print(data.teststre print console string literal import test want equivalent mod import drop class instance assignment de dent exec hope help go file place command test put print function file import successful x file print
see different style write docstring popular style python docstring write follow several format post show default sphinx docstre format mention base restructuredtext rest get information main format blog post note rest recommend follow main use format docstring javadoc style take base epydoc call epytext format generate documentation example prevalent format restructuredtext rest format use sphinx generate documentation note use default jetbrain pycharm type triple quote define method hit enter use default output format pyment example google format use interpret sphinx use napoleon plugin example example note numpy recommend follow base google format usable sphinx possible use tool pyment generate docstring python project document convert exist docstring mix several format format note example take pyment documentation google style guide contain excellent python style guide include convention readable docstre syntax offer well guidance pep-257 example extend include type information argument describe sphinx documentation tutorial example docstre convention pep-257 much detail docstring seem personal area code different project standard include docstring tend demonstrate use function prefer keep thing consistent length string code look indentation space consistent mean use tend leave comment first line docstring mean find docstring start messy mention use docstre standard use scientific community napolean sphinx extension parse google style docstring recommend answer @nathan support numpy style docstring make short comparison last basic example give idea look python go consider publish documentation docstring invisible reader source code people browse search documentation web achieve use documentation tool sphinx standard documenting python project product beautiful take look https://python-guide.readthedocs.org/en/latest/ website read docs host doc free suggest use vladimir keleshev pep257 python program check docstring pep-257 docstre standard describe parameter return pep257 report divergence make standard call pylint pep8
list python object want specific attribute object sort list .count descend order sort key way list lot record use operator.attrgetter("count run pre operator version python nice fallback mechanism want follow reader notice key= method many time add rich comparison operator object surprised read page python nutshell confirm run test little program minimal test show first sort time slow book say time slow general reason say due optimize sort algorithm use python timsort odd old .sort hope fix object orient approach good practice make object sort logic applicable property class incorporate instance order require ensure consistency remove need boilerplate code minimum specify lt operation work use sorted(list_of_object look much list django orm model instance query add rich comparison operator object class use sort method list see rich comparison python update method work think solution triptych suit case way simple attribute want property avoid import operator.attrgetter use property fget method example class circle property radius list circle follow know feature save line import
represent minimum maximum value integer python java integer.min_value integer.max_value python question apply plain int type unbound look information current interpreter word size machine word size case information available python sys.maxsize maximum value representable sign word size large possible list memory sequence maximum value representable unsigned word sys.maxsize number bit word see answer information python maximum value plain int value available sys.maxint calculate minimum value -sys.maxint show python switch plain long integer exceed value time know need number big other use similar fashion number small other work python sys.maxint constant remove python use sys.maxsize integer refer https://docs.python.org/3/whatsnew/3.0.html#integer python python integer switch fix size int representation variable width long representation pass value sys.maxint depend platform notice l append python manual number create numeric literal result build function operator unadorned integer literal include binary hex octal number yield plain integer value denote large represented plain integer case yield long integer integer literal l suffix yield long integer l preferred 1l look python try pretend integer mathematical integer unbounde instance calculate googol ease use inf refer math mathematical function want max array list index equivalent size_t use numpy sys.maxsize advantage need import sys want max native int machine look available type doc float use sys.float_info.max sys.maxsize maximum integer value support double maxsize multiply stay valid correct value try sys.maxsize sys.maxsize hang machine significant amount time many point byte bit size seem relevant exist guess python expand integer need memory space general limit talk pack store integer safe way retrieve integrity course relevant ' m sure packing know python pickle module handle thing string representation practical limit bottom line application limit require numeric datum use limit python nonexistent integer limit rely command max int return reference sys access https://docs.python.org/3/library/sys.html#sys.maxsize
difference old style new style class python use new style classic class python old style class flavour available user concept old style class unrelated concept type x instance old style class x.__class designate class type(x type instance > reflect fact old style instance class implement single build type call instance new style class introduce python unify concept class type new style class user define type less instance new style class type(x guarantee new style class instance permit override value return x.__class major motivation introduce new style class provide unified object model full meta model number immediate benefit ability subclass build type introduction descriptor enable compute property compatibility reason class old style default new style class create specify new style class type parent class top level type object parent need behaviour new style class differ old style class number important detail addition type return change fundamental new object model way special method invoke other fix implement compatibility concern method resolution order case multiple inheritance python new style class matter subclass object class new style python declaration wise new style class inherit object new style class old style class python note python support old style class form note result new style class important behavior change old new style class mention answer go concrete example difference classic mro c3 mro use new style class question order attribute include method member variable search multiple inheritance classic class depth first search leave right stop first match mro attribute new style class mro complicated synthesize single english sentence explain detail property base class search derive class mro attribute show search order python many class raise python remove python old style class attribute lookup important useful performance sensitive python code guido write story new style class great article new style old style class python python new style class write old style class derive object new style class advanced feature lack old style class super new c3 mro magical method practical true false difference difference version follow code second version person inherit object version identical different result old style class new style class new style class inherit object write python class classname(object class classname core change unify type class nice side effect allow inherit build type read descrintro detail new style class use super(foo self foo class self instance super(type object type return proxy object delegate method call parent sible class type useful access inherit method overridden class search order use getattr type skip python use super inside class parameter
convert list string use python use list contain integer convert element stre join
check variable integer need python case want use type right answer python block flexibility polymorphism instance subclass int new class register int type adhere python strong polymorphism allow object behave int mandate classical python mentality easy ask forgiveness permission word check x integer assume catch exception result mentality overtake use abstract base class register property object add multiply doubling make inherit construct class good solution permit object necessary sufficient attribute read doc use propose answer seem miss fact double float python integer decimal point use build is_integer method double check example xth time loop edit convert float call method possibility check int say summary different method mention apply variety numerical type integer value see consistent fraction rational supply method complex type convert int real part integral imaginary part |np.int8||16||32||64(5| mean behave need check well use abstract base class concrete class integer mean restrict check int int allow user define type behave integer work see note help look int attribute case want check long see check kind array index type python source think visible c. token reply checking type pass type try outsmart potential code reuser good reason pass int function try complicate thing simple simple method use software check variable make number use try look find related question python developer prefer check type type specific operation catch typeerror exception know type following astounding see heated discussion come basic valid believe mundane question ask people point type checking int loose case big decimal number encounter right people point see fail thing work float hand easy construct class numeric define operator way odd many post declare check type gvr say effect pure theory practice isinstance serve useful purpose link read gvr say related issue post funny many people seem assume intent check type give numerical integer type understand mean use op word x represent integer number important ask many item want pick want check get non negative integer number use case abound opinion important see type check measure program correctness bound value make sense bound value make nonsense intermittent value make sense consider number real non complex integer number possible give case funny non seem mention check = math.floor give error big decimal class time think oop paradigm pep consider use int integer value use list index sure solution want check string consist digit convert int use regex case convert numeric type throw valueerror datum lose process use regex catch attributeerror allow confirm numeric character string instance lead 0 want throw attributeerror want look specific problem vary regex check match show problem occur use exception testing type character give much flexibility check type convert type lose important string datum lead 0 check value want check equal cast integer show simple check python suppose want check variable integer presence numpy check slow order match type variant np.uint16 drop long py3 recognize integer object tricky guess game check truth non exception good bet check sign integer type variable enter string use work try check code wonder difference use resource speed simple way check remainder division simple example determine integer reading file array dictionary value multiple datatype follow useful check variable type cast int(or datatype want enforce use int function help need value operator.index index special method way go opinion work type cast integer float fail integer fancy integer class implement integral abstract class work duck typing operator.index use list indexing opinion use promote fact argue correct way get integer value want certain float point due truncating problem reject work integral type support abstract class index introduce want check regard python version use pypi integer_type attribute light weight single file module write program check number square encounter issue code use tell number integer convert float number get square root user input round integer store value number equal first number integer allow program respond short way work call function int test value integer kind source http://python3porting.com/differences.html general approach attempt check integer integer give string return work change name int(1 return work string try thing happen option type check example consider case n**(1.0 n=10**5 m=5 python integer float point arithmetic operation check test code output true b. work check number integer work testing object string work python python simple way variable use function test ve problem type use statement let say want return true enter line bottom line need look thing check float true false use assign name x know check type
try fix virtualenvs reset instal library one match production quick easy way find snippet alternative solution graceful removal library remake virtualenv case package instal vcs need exclude line remove package elevate comment work mac windows linux systems get list pip package requirements.txt file note requirements.txt exist create new one want replace old give different file name follow command place remove want remove work exist project requirements.txt file environment diverge replace example go step use update clean environment single command create file @joeb suggest want elevate answer comment section elegant solution thread full credit answer go @joeb work great use case clear user package folder context virtualenv many answer handle edit know make command work add bash profile convenience run use pipenv run use poetry run note need change version number match python version work late think short declarative way delete recreate virtualenv immutability rule hard remember pipe greppe solution use answer use pip list pip freeze include uninstall package find common namespace snippet use ref pip freeze manage follow method pip requirement fall make mistake repeatable cross platform windows linux macos windows path configure use similar case unix system warn solid run issue file find work case edit clarity unin arbitrary file datum write command execute pip freeze unin file write turn use uninstall aforementione package imply consent prior approval pip uninstall -y -r unin file delete completion use option uninstall package instal user site quick way remake virtualenv assume file match production window user use windows add package remove use virtualenvwrapper function see wipeenv documentation old question know stumble future reference --requirement file uninstall package list give requirement file option use multiple time pip documentation version add answer enough reputation comment @blueberryfields answer @blueberryfields answer work fail package uninstall problem uninstall part script solved xargs -r use gnu version xargs man xargs -r run empty standard input contain nonblank run command run input option gnu extension case run command several time get empty pip3 freeze easy way uninstall python package robust way cross platform work pipenv pipenv update piplock pipfile aware good way remove package virtual environment work window check linux env windows linux cross platform support use pip windows path configure use work window system part pip freeze packages.txt create text file list package instal use pip version number second part pip uninstall -y delete package instal ask confirmation prompt third part del deletes create command work run virtualenv example virtualenv you/.virtualenvs projectx run know virtual env locate run python activate virtual env get path command shell window command pip freeze xargs pip uninstall -y work use window figure alternative way use pew use wipeenv command pew wipeenv env want remove package instal project package instal thing neovim mypy pudb use local dev include app requirement cat |requirements.txt||| se |||| xargs pip uninstall -y work select librarie delete folder c:\users\user\appdata\local\programs\python\python310\lib\site package .venv start pip way know package instal package instal system package manager need rpm base distros replace python version instal pip deb base distribution clean empty directory leave find top answer misleading remove python package distribution leave broken system case instal number package use homebrew instal pip macos easiest way revert default package simple use pip3
get access deny error attempt delete folder empty use follow command attempt os.remove("/folder_name effective way remove delete folder directory empty standard library reference shutil.rmtree design rmtree fail folder tree contain read file want folder delete contain read file use python docs python use pth pathlib.path instance nice fast docs.python.org example show remove directory tree window file read bit set use onerror callback clear bit reattempt remove subsequent failure propagate base kkubasik answer check folder exist remove robust ignore_error set error ignore onerror set call handle error argument func path func os.rmdir path argument function cause fail tuple return sys.exc_info ignore_error false onerror none exception raised.enter code add pure pathlib approach rely fact path orderable long path sort short path str directory come file reverse sort file come respective container unlink rmdir pass benefit want delete entire dir tree interested content dir crawl entire dir tree stupidness call native command efficient less memory consume nix python code look python option complete answer loved find delete folder empty delete folder contain file delete folder contain file(s delete folder size kb year use python linux different way use python subprocess module run bash script rm /path dir use terminal accomplish task python do reason include example experience useful deal many path change extra step import pathlib.path module convert end result string low cost development time convenient path.rmdir come arg option handle non empty dir recursion base pure pathlib solution support windows symbolic link want use shutil module use os module delete folder exist avoid race condition charles chow answer error thing go wrong permission problem disk read error file directory python python code help delete directory file folder propose solution consist liner python call first script chmod sub directory second script chmod file third script remove impediment test shell script jenkin job want store new python script scm search line solution work linux window windows directory empty read file get error try /q .format(directory equivalent rm -rf linux mac use os.system command simplicity obvious invoke system terminal accomplish task find easy way delete folder(even empty file window os case way delete use possibility code suppose run cmd.exe case create function code fine try code delete file folder empty empty
today come dict method give key dictionary return associate value purpose function useful wanted find value associate key dictionary dict[key return thing allow provide default value key miss return default_value choose raise keyerror omit default_value none return none dict.get method mention get method contain additional parameter indicate miss value documentation return value key key dictionary else default default give default none method raise keyerror example speed improvement mention seem approach exhibit similar performance independent property list word get slow speed comparable additional advantage return default value clear query test large list note test include look valid key time function use timeit see lookup get function lookup see dis useful useful want provide default value look dictionary reduce single line val dic.get(key def_val useful want return keyerror state particular key available return default value carry risk particular default value key possible get feature dict['key need implement miss dict subclass sample program small demonstration take second optional value specify key exist dictionary value return give second parameter none return indexing dictionary['year nonexistent key raise keyerror gotcha aware use dictionary contain key use call .get value none .get method return none default value supply example follow return none alt_value expect .get second value return key supply dictionary return value call none give practical example scrape web datum use python lot time get key value case get error use dictionary['key dictionary.get('key return_otherwise problem use oppose list[0 try capture single value list hope help edit practical example say call api return josn file need parse first json look follow second josn note second json miss submitdate_ts key normal datum structure try access value key loop call follow give traceback error second json line key exist appropriate way code follow none avoid second level get error course build fault tolerance code scrape first specify condition purpose give default value key find useful purpose function useful particular usage count dictionary let assume want count number occurrence element give list common way make dictionary key element value number occurrence use .get method make code compact clear answer explain difference dict bracket keying .get mention innocuous pitfall none default value valid key give information tempt conclude safe well bracket indexing use bracket lookup argue stop use square bracket notation get dictionary value python common case expect lookup succeed raise keyerror author blog post argue safeguard code notice try reference term exist cause keyerror cause major headache deal unpredictable business datum wrap statement try statement much care dictionary term pile true uncommon case null none)-coalescing fill miss value handle unpredictable dynamic datum deploy useful pythonic shorthand tool key dct try block exist set default value key miss part behavioral specification program replace bracket dict lookup include assert succeed .get different matter practice downgrade class runtime error reveal bug silent illegal state scenario tend identify common mistake programmer think exception cause headache attempt suppress use technique wrap code try pass block realize real headache see breach application logic point failure deploy broken application well programming practice embrace assertion program invariant key dictionary hierarchy error safety program language designer talk program safety major goal surface suppress genuine error promote runtime error compile time error promote silent logical error runtime exception compile time error python design interpret language rely runtime exception compiler error miss method property illegal type operation + bound miss index key raise default language js java rust go use fallback behavior map default many case provide throw raise alternative python throw default language c perl php issue uninitialized value warn indiscriminate application dict access expect fail fallback deal none default use run code toss python runtime exception safety net class error silence add indirection potential bug support reason prefer bracket lookup occasional place .get default expect language c++ ruby offer alternate method fetch opt throw error bad access c offer opt fallback value trygetvalue similar python get js java ruby go rust bake fallback approach hash lookup default bad think true large issue face language designer plenty use case throw access version unsurprising consensus language argue python c do well language make assert option default loss safety expressivity opt use report contract violation point failure use board dict.get(key dict[key compare dict[key dict.get provide fallback value look key get(key default build type python documentation return value key key dictionary else default default give default none method raise keyerror default value write cumbersome code handle exception convenient solution dict.get introduce optional default value avoid unwiedly code dict.get additional default value option deal exception key absent dictionary difference advantage look key exist get none use bracket notation case get error throw last thing cool get method receive additional optional argument default value try get score value student student score key get similar use case mention key argument function sorted max min get method allow key return base value thank answer different question provide use case square bracket use conditional lookup fail keyerror key miss get method use unconditional lookup fail default value supply square bracket call getitem method fundamental mapping dict get method helper layer top functionality short cut common code pattern allow provide default value get error value find persuedocode python dictionary get method use walrus operator assignment expression reduce code use get require wrap code try block catch keyerror show walrus operator need line code
need json client server use python simplejson client use request server cherrypy get code json server code show try post json server get bad request client code server code idea start request version use parameter take dictionary data= take string call turn miss header information follow work request https://pypi.python.org/pypi/request json parameter support specify content type short version parameter data json file need use depend request header name content type check developer tool browser content type application www form urlencode use content type application json use use set content type content type multipart form datum use upload file use well way work python client server current request pass data structure dump valid json json parameter dictionary claim answer zeyang lin useful need order element response solve way recommend need ability read json file parse object request body go parse raw datum request follow method help resolve
try understand advantage multiprocesse threading know multiprocessing get global interpreter lock advantage thread thing pro con thread module use thread multiprocesse module use process difference thread run memory space process separate memory make bit hard share object process multiprocesse thread use memory precaution take thread write memory time global interpreter lock spawning process bit slow spawning thread thread job enable application responsive suppose database connection need respond user input thread database connection busy application able respond user split database connection separate thread make application responsive thread process access data structure good performance flexible software design note due gil app thing do put resource lock database separate thread cpu time switch user interaction cpu time get ration thread multiprocesse time want thing give time suppose application need connect database perform complex matrix transformation dataset put job separate thread help little connection idle one get cpu time processing do parallel gil mean use resource cpu put job multiprocessing process run cpu run full efficiency python documentation quote canonical version answer dupliquee question difference thread multiprocesse module ' highlight key python documentation quote process thread gil global interpreter lock gil cpython process thread experiment bit benchmarke order show difference benchmark time cpu bind work various number thread hyperthread cpu work supply thread thread mean total work supply result plot datum conclusion cpu bind work multiprocesse due gil io bind work speed thread scale 4x expect 8x m hyperthread machine contrast c posix cpu bind work reach expect 8x speedup real user sys mean output todo know reason python inefficiency come play test code github plot code directory test ubuntu python lenovo p51 laptop cpu intel core i7 7820hq cpu core thread ram samsung m471a2k43bb1 crc 2x 16gib ssd samsung mzvlb512hajq-000l7 mb visualize thread run give time post https://rohanvarma.me/gil/ teach run callback thread schedule argument threading.thread multiprocessing.process allow view thread run time do see make particular graph show key advantage isolation crash process bring process crash thread wreak havoc thread mention question multiprocesse python real way achieve true parallelism multithreading achieve gil prevent thread run parallel consequence threading useful python fact result bad performance depend try achieve example perform cpu bind task decompress gzip file render cpu intensive threading hinder performance help case want use multiprocesse method run parallel help distribute weight task hand overhead multiprocesse involve copy memory script subprocess cause issue large sized application multithreading become useful task io bind example task involve wait api call use multithreade start request thread wait cpu sit thing mention depend use speed concern window process costly thread window unix process fast window variant use process unix safe quick spawn answer focus multithreade multiprocesse aspect python global interpreter lock gil take account number say k thread create increase performance k time run single threaded application gil global lock lock allow single thread execution utilize single core performance increase place c extension numpy network use lot background work do gil release threading use single operate system level thread python create pseudo thread manage threading run single process preemption take place pseudo thread cpu run maximum capacity want switch multiprocesse case self contain instance execution opt pool case overlap datum want process communicate use multiprocessing.process multiprocesse multithreade example multi threading multiprocesse use python python facility launch parallel task make work easy thread pooling process pooling follow give insight threadpoolexecutor example processpoolexecutor thread share memory space guarantee thread share memory location special precaution take cpython interpreter handle use mechanism call gil global interpreter lock want clarify gil repeat cpython global interpreter lock gil mutex protect access python object prevent multiple thread execute python bytecode lock necessary cpython memory management thread safe main question compare use use case use case thread case gui program thread use make application responsive example text edit program thread take care recording user input responsible display text third spell check program wait user interaction big bottleneck use case thread program io bind network bind web scraper use case multiprocesse multiprocesse outshine thread case program cpu intensive n’t user interaction detail visit link link need depth knowledge threading visit multiprocesse visit process multiple thread thread share memory unit execution process process run cpu thread reside process process individual entity run want share datum state process use memory storage tool cache(redis memcache file database learnd university answer practise different platform use python spawn multiple thread end spawn process difference multiple core share load core process spawn example thread core pc end get cpu power u spawn process u end cpu processing u limitation expert new technology answer real experience background
traverse list reverse order python start collection[len(collection)-1 end collection[0 want able access loop index use build reversed function access original index use enumerate list reverse enumerate return generator generator reverse need convert list want loop slice reverse list loop modify list do guess close little awkward say start less len(collection keep go get step fyi help function useful let view doc python console help(range need loop index want traverse entire list use extra memory write generator reverse builtin function handy documentation reverse explain limitation case walk sequence reverse index place modification change sequence length function define codeutil module avoid create copy sequence reverse limitation apply approach import time complexity o(n space complexity o(1 approach create new list memory careful large list time complexity o(n space complexity o(n use range count function follow use count itertool follow recreate new list index python list create copy reversed(list(enumerate(collection inefficient generating list optimize collection list sure hide complexity iterator cleanest liner generator approach use list.reverse iterate http://docs.python.org/tutorial/datastructures.html worth simple need index list small readable way reversed(list(enumerate(your_list accepted answer say create copy list list take large portion memory subtract index return enumerate(reversed len()-1 need need multiple time use generator assume task find last element satisfie condition list look get follow number python ugliest option fast python different machine enumerate(reversed(xs fast mind index negative think elegant way transform enumerate reverse use follow generator generate reverse enumerate iterator example result reverse function come handy use negative index start step iteration use loop use negative index ordinary loop access index iterate reverse copy collection use access original un reverse index use len(collection answer good want list comprehension style think simple way read end keep decremente length list execute end index add ' m confused obvious choice pop reverse working generator case enumerate use sort beginner python find way understand reverse list say numlst range(len(numlst)-1,-1,-1 print numlst p simple way use generator hope help
run python folder tree folder omit readability import nib module life module hope possible tinker sys.path note main module run ptdraft folder use relative import python new python pep absolute relative import edit add dot go package post similar answer question regard import sible package see assume folder structure question call root folder case locate c:\tmp\test_import setup.py work minimal work example familiar virtual environment activate skip next step usage virtual environment require help run project ongoing basic step run root folder learn google python virtualenv tutorial similar need command create activate deactivate make activate virtual environment console give name virtual environment parenthesis install top level package myproject use pip trick use flag install instal editable state edit make file include instal package root directory run pip install note dot stand current directory see instal use pip freeze example mainfolder ptdraft advantage run name collision module name standard library 3rd party module relative import import mymodule work package import mymodule parent directory current module edit file attribute give use suggest use inspect module retrieve filename path current file seem problem relate module parent directory need add directory contain ptdraft pythonpath say import nib work mean add ptdraft parent pythonpath use os depend path module search path list sys.path add parent directory follow want add parent parent directory work python know much python python parent folder add follow able import module add module folder pythonpath work modify sys.path list program python interpreter search module import python documentation say module name spam import interpreter first search build module name find search file name spam.py list directory give variable sys.path sys.path initialize location initialization python program modify sys.path directory contain script run place begin search path standard library path mean script directory load module name library directory error replacement intend know follow program answer simple see work small cross platform use build module sys inspect work operate system os python design less line replace second line import path sys inspect add inspect start getsourcefile line remove first line import module need time memory resource use example stack overflow answer get path current execute file python find source filename run code build tool want find source file use code add file path sys.path python path list allow python import module folder import module code good idea run sys.path.pop(0 new line add folder module name module import later program need remove list item add import path program import module safe delete file path program end restart python shell edit make sys.path disappear answer use file variable get file path filename run code user describe unreliable use import module parent folder program use people example work stack overflow question find platform full file path generic solution include parent directory sys.path work pathlib library include python make concise intuitive append path parent directory pythonpath jupyter notebook open jupyter lab jupyter notebook work jupyter notebook short solution useful work init__.py file test anaconda3 linux window find follow way work import package script parent directory example like import function env.py app.db package mention solution fine solution problem want import top level directory want import module parent directory want import module parent directory way import particular method want line simple solution parent work directory want call child module child script import child module parent directory script execute import sys short favorite oneliner access parent directory os.getcwd return name current work directory os.path.dirname(directory_name return directory name pass opinion python project architecture do way module child directory use module parent directory happen worth rethink project tree way add parent directory pythonpath system environment variable original author look solution completeness simple solution run life.py module way import nib.py ptdraft directory path think try specific example python sort style answer few line file return location work solution git repository use sys.path.append similar solution cause problem import file import file sys.path.append decide append root directory git repository line look detail original question base root directory repository import linux system create soft link life folder nib.py file import folder structure way understand package centric view package root ptdraft top level contain init__.py file package use absolute path relative package root import example life.py run life.py package dev testing purpose life.py need use note need fiddle path point confusion complete ptdraft package want use driver script ptdraft package folder main.py need fiddle path use python main.py run script problem helpful link work library make library call nib install use let reside site package problem solve stuff make single package break piece problem import flask application import need import file separate folder use remi answer suppose repository look import app object app.py file change directory level import app import pipeline.py read miscellaneous file csv file import flask app use os.chdir('./test work directory change seem need import parent module let imagine nib.py func1 need use life.py access func1 data life.py course careful populate life.py try use make library https://github.com/fx-kirin/add_parent_path simple solution work remove sys path hack think valuable add note frame challenge necessary code assume tree test.py contain execute use path include package directory use module argument include project directory import absolute project directory skullduggery require rule want mention possibility first copy file parent directory child directory next import remove copy file example life.py course arise several problem nibs try import read file relative import path work import thing high folder
try figure python lambda lambda interesting language item real life forget ' m sure edge case need give obscurity potential redefine future release assumption base various definition reduce code clarity avoid remind overflow buffer overflow c type point top variable overloading set field value feel sort techie showmanship maintenance coder nightmare talk lambda expression thing useful python support style programming call functional programming pass function function stuff example set mult3 element original list multiple short argue clear course particular case thing list comprehension range(3,10,3 many sophisticated use case use list comprehension lambda function shortest way write return function function use create function wrapper python decorator combine element iterable sequence reduce sort alternate key use lambda function regular basis take use come understand valuable part language lambda fancy way say function name obscure intimidate cryptic read follow line replace lambda function mind define function x. language r say see natural thing program line summary lambda part important abstraction mechanism deal high order function get proper understanding value watch high quality lesson abelson sussman read book sicp relevant issue modern software business become popular doubt lambda go see guido post give try remove see outline conflict check post history deal python functional feature http://python-history.blogspot.com/2009/04/origins-of-pythons-functional-features.html map filter reduce function motivate introduction functional feature large extent supersede list comprehension generator expression fact reduce function remove list builtin function python necessary send complaint removal lambda map filter stay cent lambda worth far clarity go clear solution include lambda lambda useful gui programming example let say create group button want use single paramaterized callback unique callback button lambda let accomplish ease note question ask lambda use functools.partial get type result alternative create separate callback button lead duplicate code python lambda way define function inline exact regular function python function object lambda define function think lambda keyword redundant python need use see use regular function list comprehension many builtin function use random example article python lambda broken see lambda broken try generating list function fs=[f0 f9 fi(n)=i+n first attempt argue work unpythonic functionality write countless way example see cause generate group lambda function list require make sense language haskell lisp note use lambda achieve desire result way edit case lambda useful example convenient connect signal pyqt application w.textchanged.connect(dothing call dothe method extra event argument cause error use lambda mean drop argument define wrapping function find lambda useful list function different circumstance mozilla plural rule define function go mad end nice function name need eval depend variable function d. lambda name function list generator expression part situation scratch code write interactive interpreter use python year run case need lambda tutorial state syntactic sugar lambda function non bureaucratic way create function example let supose main function need square value let see traditional way way traditional way way see difference lambda function go list list comprehension map fact list comprehension pythonic way express use lambda ex let see element syntax mean give list x**2 use new bear function x element convenient create function let rewrite use lambda let use map thing language neutral map take argument function ii iterable give list element function apply element iterable use map master lambda map great power manipulate datum concise way lambda function obscure take code clarity confuse hard new start use find clear speak python particular implementation lambda general lambda function handy core technique technique functional programming useuful object orient program certain type problem good solution forget suggest read closure map function link python docs exist language support functional construct see useful nice thing lambda opinion understate way defer evaluation simple form value need let explain many library routine implement allow certain parameter callable lambda idea actual value compute time use call contrived example help illustrate point suppose routine go log give timestamp want routine use current time minute call suppose actual function call certain event occur want timestamp compute time assume log_timestamp handle callable evaluate need get timestamp time course alternate way use operator module example hope convey point update concrete real world example update think example call thunk state lambda operator python define anonymous function python function closure important confuse concept closure operator lambda syntactic methadone start python year use lambdas lot think cool list comprehension write maintain big website write python order several function point ve learn experience lambda ok prototype thing offer inline function name closure save key stoke boil several point enough reason round convert name closure hold grudge anonymous closure grudge unnecessary keyword clutter language second grudge deep paradigm level promote functional programming style style flexible message pass object orient procedural style lambda calculus ture complete python break restriction lambda reason feel lambda promote style implicit return seem function alternative state hiding mechanism explicit readable reusable general mechanism method try write lambda free python remove lambdas sight think python well language lambdas opinion lambda powerful constructs stem idea functional programming revise redefine remove future python help write code powerful allow pass function parameter idea function first class citizen lambda tend get confuse solid understanding obtain write clean elegant code line code return list square number list ofcourse like obvious former code short true intend use map function similar function take function parameter place make code intuitive elegant @david zaslavsky mention answer list comprehension go list get value obscure mathematical way practical standpoint big advantage lambda gui event drive programming take look callback tkinter take argument event trigger argument pass simple pass argument store coordinate mouse click argue do use global variable want bang head worry memory management leakage global variable use particular place poor programming style short lambda underestimate python lambda lisp lambda powerful lot magical stuff lambda link functional programming style general idea solve problem apply function data merging result google use implement algorithms program write functional programming style parallelize become important modern multi core machine forget first congrat manage figure lambda opinion powerful construct act trend day functional programming language indicator avoid redefine future think little bit different ' m sure love careful deal python lambda real closure break python broken begin python run head first lambda- take figure note condemnation different set thing come lambda interesting language item real life forget ' m sure edge case need give obscurity obscure past team work use feature time potential redefine future release assumption base various definition see serious proposal redefine python fix closure semantic year reduce code clarity avoid clear use right contrary language construct available increase clarity remind overflow buffer overflow c type point top variable overloading set field value techie showmanship maintenance coder nightmare buffer overflow imagine use lambda think maintenance nightmare useful case use lambdas improve readability long list comprehension example loop_dic short clarity imagine loop_dic use plain value include lambda version value get nameerror use lambda avoid code duplication make function comprehensible replace temp lambda start read david mertz book today text processing python terse description lambda example first chapter combine explanation appendix make jump page understand value say explanation work discovery stage attempt add response follow new python new oop lambdas struggle read mertz think see useful think allow clean approach programming reproduce zen python line simple well complex non oop programmer read code lambda last week list comprehension think simple realize today feature make code readable understandable alternative loop sort realize financial statement python design novice user design user want educate believe powerful language dawn purpose value lambda want rip program start put lambdas appropriate give example need lambda serious make graphical program use right click file assign option turn tkinter gui interface program write press button assign command take argument choose option want result choice big deal need choice particular detail example choose choice call function take argument dependent choice b c tkinter support lamda option get use null object bind parameter function example say follow api wan't dump recieved data file use lambda create callback include parameter clean writing lambda line write method perform functionality example oppose m python beginner getter clear idea lambda compare loop term efficiency code python lambda procedure constructor synthesize program run time python lambda powerful note people understand programming
way check type variable python string integer value correct way check string byte class consider string type python python correct check basestre abstract superclass str unicode use test object instance unicode know old topic show google give find answer satisfactory leave future reference python compatibility library cover issue inspect code find python hope know single answer contain simple type(my_variable str syntax use type seem logical simple test python3 python type build function documentation https://docs.python.org/3/library/functions.html#type state part follow notice note isinstance class type(object class type(name basis dict kwds argument return type object return value type object object return object.__class isinstance build function recommend testing type object take subclass account check type class object simple variable need take subclass account use isinstance see documentation https://docs.python.org/3/library/functions.html#isinstance output type module exist check int string http://docs.python.org/library/types.html edit base well answer go answer find coolness basestre old answer watch unicode string get several place include com call window basestre define python3 little trick help make code compatible run follow test python2 python3 python include unicode http://python-future.org/overview.html lot good suggestion provide other see good cross platform summary follow good drop python program function use isinstance(object classinfo see input str python basestring python plenty option check variable string order purpose want notice want check type variable specific kind compare type variable type know object string use alternative way python use basestring work python unicode define python answer support python python requirement return true return true want depend external libs work python python http://ideone.com/ub4kdc use isinstance function make sure input datum format string unicode example help understand summarize seem portable way want python2 python3 want include unicode wound use idiom time want test object see string ' m shocked python3 drop basestre types.stringtype see reason drop keep make problem solveable see
tweet read use easy_install stab face use pip use pip easy_install fault lie pypi package author author upload crap source tarball miss file pypi pip easy_install fail cosmetic difference python people tweet seem favor pip let assume talk easy_install distribute package maintain community ian bicke introduction pip pip write improve easy_install follow way many answer date accept daniel roseman current state thing good reason know use easy_install special case use apple pre instal python version os x apple include easy_install include pip use get-pip.py problem easy sudo easy_install pip general easy_install pip bad idea os x want include readline way easy_install know kludge pip want sudo easy_install readline want upgrade unmentioned reason favor pip new hotness continue use future infographic current state packaging section hitchhiker guide packaging v1.0 show setuptool easy_install go future infographic distribute documentation show setuptool replace new hotness distribute pip pip new hotness distribute merged setuptool release setuptool v0.7 reason pip provide uninstall command installation fail middle pip leave clean state requirement file use conjunction virtualenv day quick dependency management tutorial folk requirement file allow create package instal pip encapsulate package virtualenvironment codebase work specific set package share codebase other heroku documentation https://devcenter.heroku.com/articles/python create virtual environment set shell use bash/*nix instruction python script run shell use environment package configuration install package environment need install machine dump info package instal check file version control get code setup virtual environment install dependency time automate tedium awesome pip install binary package test windows window come compiler default pip use easy_install install binary package window update setuptool absorb distribute oppose way think setuptool date late distutil change wheel format easy_install pip equal footing source addition fuzzyman reply pip install binary package test windows window come compiler default pip use easy_install install binary package window trick window use easy_install package install binary package avoid build binary use pip uninstall package use easy_install work work window use pip binary involve see current pip doku http://www.pip-installer.org/en/latest/other-tools.html#pip-compared-to-easy-install ask mailing list plan late update new support way install binary go wheel standard current version alpha 1.0.0a1 https://pypi.python.org/pypi/wheel http://wheel.readthedocs.org/en/latest/ test wheel create os x installer pyside use wheel egg get report cheer chris transition wheel package support wheel promise build wheel pyside last summer work great hint developer fail support wheel format forget replace distutil setuptool easy convert package replace single word setup.py meet special case use easy_install pip pull source code package gitpython version pip old easy_install late use python 2.7.8 ' m sure underlay mechanism easy_install pip least version package different easy_install new version
laugh ' look vb6 day think modern language allow incremente double sign surprise find python doc subject number = number people use notation python support + put operator exist python operator statement namespace modification python statement simplicity consistency design decision integer immutable way change variable reassigning wonderful tool use case language enumerate itertools.count + operator available python guido like operator main reason come handy c language keep track index python deal data abstract way increment index close spirit thing next method iterator take look behaviour increment decrement operator python explanation work python + feel loss prefer function clear name operator non clear semantic classic interview question x++ difficulty overload ' ve huge fan post incrementation readability define wrapper class accumulator clear increment semantic x.increment x.incrementandreturnprev explanation http://bytes.com/topic/python/answers/444733-why-there-no-post-pre-increment-operator-python absence operator python philosophy increase consistency avoid implicitness addition kind increment use python code python strong implementation iterator pattern function enumerate
learn python programming language come understand method self mean mandatory init method necessary think oop construct know much code self variable represent instance object object orient language pass hide parameter method define object python declare create instance class call method pass init method represent constructor python call python create object pass first parameter init method additional parameter pass argument case cause exception raise constructor expect oop construct init constructor class self parameter refer instance object c++ init method call memory object allocate important use self parameter object method want persist value object instance implement init method x parameter store variable stack discard init method go scope set variable self._x self._y set variable member point object accessible lifetime object n.b clarification use word constructor answer responsibility constructor split method python method new responsible allocate memory init discuss responsible initialise create instance hope help little simple example use understand difference variable declare class variable declare init function output short attribute reference use standard syntax use attribute reference python obj.name valid attribute name names class namespace class object create class definition look myclass.i myclass.f valid attribute reference return integer function object class attribute assign change value myclass.i assignment doc valid attribute return docstre belong class simple example class class instantiation use function notation pretend class object parameterless function return new instance class example instantiation operation call class object create empty object many class create object instance customize specific initial state class define special method name init class define init method class instantiation invoke init create class instance example new initialized instance obtain course init method argument great flexibility case argument give class instantiation operator pass init example take official documentation help end create instance class bill get init act constructor pass self class function first argument want behave non static method self instance variable class try code hope help many c programmer learn py output jay sum doc class doc init constructor doc show destructor delete object jay trouble undestanding read answer understand init method understand self self parameter argument accept init method pass argument extra argument come access attribute object name reference instance reference new object access printarg method instance object use instance.printarg order access object attribute init method need reference object method call reference main object pass first argument convention call first argument method self mean init method set attribute object verify follow value know object attribute init method set arg1 arg2 attribute instance source http://www.voidspace.org.uk/python/articles/oop.shtml#the-init-method note self valid python identifi example write chris b example work recommend use self pythoner recognize self mean mandatory first argument class method include init reference current instance class convention argument name self init method self refer create object class method refer instance method call python force use self give name want remember first argument method definition reference object python add self argument list need include call method provide self init method get error init method necessary init short initialization constructor call make instance class necessary practice write init method set default state object will set state object need write method need use self keyword use variable multiple function class init use setup default value incase function class call self reference class instance create instance foo call method self parameter add python case pass method call context instance class code thing variable name self convention definition work say strong convention follow say flexible nature language demo question code init act constructor class object instantiate function call self represent instantiate object result statement follow guy write simple https://www.jeffknupp.com/blog/2014/06/18/improve-your-python-python-classes-and-object-oriented-programming/ read link reference self self parameter customer method instance course put way method withdraw define instruction withdraw money abstract customer account call jeff.withdraw(100.0 put instruction use jeff instance say def withdraw(self amount say withdraw money customer object call self dollar figure call amount self instance customer withdraw call make analogy jeff.withdraw(100.0 shorthand customer.withdraw(jeff valid see code init self make sense method init call init process create object self python allow extend self pattern object construct fit imagine jeff customer('jeff knupp call jeff customer(jeff jeff knupp jeff pass make result call init initialize object say thing self.name name remember self instance equivalent say jeff.name = name jeff.name = jeff knupp self.balance = balance jeff.balance line consider customer object initialize ready use careful init init finish caller assume object ready use jeff = customer('jeff knupp start make deposit withdraw call jeff jeff initialize object self mean mandatory init method necessary example give correct create correct example base create instance object init call customize object create call someobject blah pass init function argument blah self argument instance someobject assign an_object want call method object dot lookup an_object.method bind instance instance function method call bind method mean pass instance method call method call instance bind dotted lookup call execute code program perform pass self argument call self convention use legal python name tar feather python programmer change init special method document python datamodel documentation call instance create new new require subclasse immutable datatype
get size occupy memory object python use sys.getsizeof function define sys module sys.getsizeof(object default return size object byte object type object build object return correct result hold true third party extension implementation specific memory consumption attribute object account memory consumption object refer default argument allow define value return object type provide mean retrieve size cause typeerror getsizeof call object sizeof method add additional garbage collector overhead object manage garbage collector see recursive sizeof recipe example use getsizeof find size container content usage example python python sys.getsizeof use extensive module use answer use sys.getsizeof complete answer answer work builtin object account object contain type custom object tuple list dict set contain contain instance number string object use bit python anaconda distribution sys.getsizeof determined minimum size follow object note set dict preallocate space empty one grow set amount vary implementation language python interpret say set item item byte big whole data structure set size time byte add size item byte total caveat function class definition note class definition proxy dict byte structure class attrs slot descriptor property class definition slot instance start byte first element increase additional empty slotted object byte instance data make little sense function definition code object docstring possible attribute dict note use sys.getsizeof care marginal space usage include garbage collection overhead object getsizeof call object sizeof method add additional garbage collector overhead object manage garbage collector note resizing list append cause preallocate space set dict listobj.c source code python analysis confirm sys.getsizeof note dictionary set get compact representation python think byte additional item reference make lot sense bit machine byte point place memory contain item byte fix width unicode python recall python str become unicode width equal max width character slot see answer want function search element list tuple set dict obj.__dict obj.__slot well thing think want rely gc.get_referent search work c level make fast downside get_referent return redundant member need ensure double count class module function singleton exist time memory interested size much part program avoid count happen reference go use blacklist type include entire program size count contrast follow whiteliste function object know traverse purpose garbage collection look want know expensive memory certain object functionality use gc.get_referent measure go much expansive scope intend careful example function know lot module create point contrast string key dictionary intern duplicate check id(key allow avoid count duplicate section blacklist solution skip count key string cover type rely gc module write recursive function try estimate size python object include builtin type collection module custom type slot function give much fine grain control type go count memory usage danger leave important type test unitt implementation break class definition function definition go attribute exist memory process size matter much pympler package asizeof module use follow sys.getsizeof work self create object work numpy mention byte)code size object class function method module include set option code true need view live data pympler module muppy use line monitor python application module class tracker provide line analysis lifetime select python object numpy array getsizeof work return reason ipython serialize object derive measure relate size object want measure object pickle lambda expression dill cloudpickle solution use sys.getsizeof want include size link nested object want count sub object nest list dict set tuple look use recursive deep sizeof function show find function nifty toolbox many useful liner https://github.com/mwojnars/nifty/blob/master/util.py python q1 change result sys.getsizeof announce raymond hettinger python container byte small bit build come issue inada naoki methane work compact pr idea reduce size word take word gc_prev gc_next avoid track untracking trial deletion gc_prev gc_refcnt share memory space see commit remove py_ssize_t member pygc_head gc track object tuple list dict size reduce byte complicated look depend want count thing instance list int want size list contain reference int list contain want include actual datum point case need deal duplicate reference prevent double count object contain reference object want take look python memory profiler pysizer see meet need run problem many time write small function inspire @aaron hall answer test expect https://github.com/bosswissam/pysize interested backstory edit attach code easy reference see date code check github link quick script write base previous answer list size variable use follow function get actual size python object reference need exact size object know big quick dirty way let program run sleep extend period time check memory usage ex mac activity monitor particular python process effective try find size single large object python process example want check memory usage new data structure compare python set datum structure write element word large public domain book set check size process thing data structure find python process set take much memory new data structure able say memory use process equal size object size object get large become close memory consume rest process become negligible compare size object try monitor use trick accurate small object think accurate complex object pygame surface sys.getsizeof window python output performance issue easy solution pickle measure make use getsizeof mention determine size object interested object storage retrieval dump object pickle check pickle size sufficient
give dictionary invert map python python assume value dict unique python python value my_map unique python python preserve type mapping assume dict dict subclass try note python docs dictionary view guarantee .key .value element order allow approach work use python dict comprehension functional way reverse dictionary duplicate key use defaultdict see technique simple equivalent technique use dict.setdefault expand answer robert apply value unique implementation limited use reverse get original symmetric test python use case use print resultant dict use set list exist unordered application make sense setdefault(v use setdefault(v set()).add(k combination list dictionary comprehension handle duplicate key case dictionary value set inverse like output lot answer find clean case talk dictionary non unique value solution initial dict my_map c run code give instance follow dictionary wanna get inverted form first solution invert key value pair dictionary use loop approach second solution use dictionary comprehension approach inversion third solution use revert inversion approach rely second solution find version accept version dictionary key value unique hardcore large dict note solution efficient answer python reverse invert mapping loop item multiple time addition function suggest lambdas think good way define class implementation symmetric dictionary deletion iteration method easy enough implement need implementation way efficient inverting entire dictionary seem popular solution page mention add remove value symdict want inverse dictionary stay valid true reverse entire dictionary handle unique value retain much look unique case python replace itervalue value aware question many good answer want share neat solution take care duplicate value rely fact set.add return none python way fast functional solution non bijective map value unique theory add set appending list imperative solution value sortable sort require groupby try python function symmetric value type list tuple coverte list perform reverse_dict(reverse_dict(dictionary dictionary require unique key dictionary value append reverse value list include new specific key provide output 'd c lambda solution current python version result solution check duplicate remark take vote answer start value my_map unique problem value unique addition list item list consist list element string value number number example mymap['key1 give want switch string value key keep number element place need nested loop example give work non unique value original dictionary way different bit rewrite recipe cookbook futhermore optimize retain setdefault method time get instance design run cpython replace mapping.item mapping.iteritem machine run bit fast example write help cycle method change name map dictionary map1 map function value unique hash dimension recursion dig dimension
convert datetime.datetime object return value datetime.datetime.now object python date method documentation datetime.datetime.date return date object year month day use datetime.datetime.date method expression imho write convert datetime object date date method date time object follow answer update python turn date time object datetime.datetime object store models.datetimefield django model field date object datetime.date object clear print element output enter code form today date name day hour datetime.datetime.now().strftime('%y-%m-%d mon enter code today date datetime.date.today().strftime('%y-%m-%d object datetime.datetime.now().date use data.strftime('%y-%m-%d lambda transfer column date use code date contain date time use code get date
know possible value timezone argument python library pytz list available timezone create list pytz build set apply timezone datetime object aware naive timezone name reliable way specify timezone find list timezone name http://en.wikipedia.org/wiki/list_of_tz_database_time_zones note list contain lot alias name eastern timezone call america new_york want create list zoneinfo database compile zone.tab file zoneinfo database think pytz api get think useful python list country code name continent capital pytz timezone full list see github gist edit appreciate downvote answer answer wrong retain historical note arguable pytz interface error prone thing regard daylight saving future record experience article time zone python unix platform suggest avoid pytz look share dateutil.tz utilize information follow piece code show problem pytz give shock find enough pytz instal yum centos exhibit problem timezone create pytz true local time standard local time people observe shanghai conform +0806 suggest pytz edit thank mark ransom comment know use pytz wrong way summary suppose pass result datetime pass datetime localize method argument bad read pytz documentation go keep answer answer question way enumerate support timezone pytz believe pytz provide correct solution belief wrong answer provide information imho useful people interested question pytz correct way thing counter intuitive heck tzinfo create pytz use datetime different type pytz interface design link provide mark show many people mislead pytz interface available zoneinfo new module python3.9 work database iana order grab available timezone appear populated database time zone find pytz use loop output line line mention eary answer work print array find pytz support timezone https://gist.github.com/heyalexej/8bf688fd67d7199be4a1682b3eec7568 understand provide comprehensive list pytz timezone help country_timezone country_name library addition way get common list timezone name provide common_timezones_set reference country information pytz docs helpers pytz docs
possible terminate run thread set checking flag semaphore bad pattern kill thread python language think follow case nice way handle afford manage thread flag thread check regular interval see time exit example code call stop thread want exit wait thread exit use join thread check stop flag regular interval case kill thread example wrap external library busy long call want follow code allow restriction raise exception python thread base killable thread tomer filiba return value pythreadstate_setasyncexc appear old version python note documentation magic bullet thread busy python interpreter catch interruption good usage pattern code thread catch specific exception perform cleanup way interrupt task proper cleanup multiprocessing.process p.terminate case want kill thread want use flag lock signal semaphore event promote thread full blow process code make use thread bad come terminate helper thread execute block conversion trivial relate code replace threading.thread multiprocessing.queue add require call p.terminate parent process want kill child p see python documentation multiprocesse example official api need use platform api kill thread terminatethread access api e.g. pythonwin ctype notice unsafe likely lead uncollectable garbage local variable stack frame become garbage lead deadlock thread kill gil point kill try terminate whole program set thread daemon see thread.daemon other mention norm set stop flag lightweight subclasse thread global variable lambda callback option note parenthese stop replace print function flush sys.stdout.flush improve precision shell output test windows eclipse python3.3 python kill thread need thread use thread package use multiprocesse package kill process call method python kill process unix sigterm signal window terminateprocess call pay attention use use queue pipe corrupt data queue pipe note multiprocessing.event multiprocessing.semaphore work way threading.event threading.semaphore fact first one clone latter need use thread way kill use daemon thread fact python thread flag daemon main program exit alive non daemon thread leave word main thread course non daemon thread finish operation program exit daemon thread work note necessary set thread daemon start method call course use daemon multiprocesse main process exit attempt terminate daemonic child process note sys.exit os.kill choice base thread2 killable thread activestate recipe call pythreadstate_setasyncexc available ctype module test python likely work recent release pythreadstate_setasyncexc exist python backwards compatibility kill thread cooperate kill thread remove guarantee try block set leave lock lock file open time argue kill thread good idea kill program single thread call time.sleep part thread say poll external service improvement phillipe method use timeout event wait method sleep example run advantage use wait check event program long interval sleep thread stop sleep()e opinion code handling exit simple kill thread instal trace thread exit thread see attached link possible implementation kill thread python kill thread way introduce try block thread cycle throw exception want stop thread example break stop use app work possible implement thread.stop method show follow example code thread3 class appear run code fast thread2 class ' m way late game wrestle similar question follow appear resolve issue let basic thread state checking cleanup daemonize sub thread exit yield thread object read python source module threadmodule.c python thread_pthread.h see pthread_t type pthread python use libpthread follow workaround use kill thread use terminate thread code write module main thread declare global variable module use terminate thread spawn module use terminate thread program exit perfect way terminate thread help way clean simple code work python adapt https://www.geeksforgeeks.org/python-different-ways-to-kill-a-thread/ thing want add read official documentation thread lib python recommend avoid use demonic thread want thread end flag paolo rovelli mention official documentation daemon thread stop shutdown resource open file database transaction release want thread stop make non daemonic use suitable signaling mechanism event think create daemonic thread depend application general opinion well avoid kill make daemonic multiprocessing use is_alive check process status terminate finish avoid gil problem find problem execute code window remember live thread python interpreter run wait daemonic help matter end library build purpose stopit list herein apply least library present regular repeatable technique achieving state goal old handy solution little module extend threading module functionality allow thread raise exception context thread raise systemexit kill python thread allow thread raise exception context thread way terminate thread handle termination check abort flag accord original source issue code asume want multiple thread function imho easy implementation stop nice thing multiple different function stop functionname.stop want thread function remember d. stop doit.stop build @scb idea need create killablethread subclass customize function thread wait run new loop stop example see kill thread message print kill thread wait second thread complete sleep second second argument killablethread constructor custom function print_msg args argument argument use call function world python version use daemon thread execute want want daemon thread terminate need make parent thread exit system terminate daemon thread parent thread create support coroutine coroutine function exitthread source code mention @kozyarchuk answer instal trace work answer contain code work ready use example stop print print alternative use signal.pthread_kill send stop signal result seem work pywin32 window pieter hintjen founder ømq project say use avoid synchronization primitive lock mutexe event securest way write multi thread programs include tell child thread cancel work do equip thread ømq socket polling socket message say cancel link provide example multi threaded python code need ability kill sub task use alternate implementation multiprocesse gevent support kill thread python threading support cancellation try code likely deadlock corrupt leak memory unintende interesting hard debug effect happen execute command process kill use process d. need sync thread n’t return simple way bad answer see comment give second thread stop check thread._thread__delete method recommend thread.quit method convenience example socket thread recommend create quit method socket handle class terminate socket run quit start sub thread setdaemon(true use kill thread
iterate list tuples python attempt remove meet certain criterion use place code_to_remove_tup figure remove item fashion use list comprehension create new list contain element want remove assign slice somelist mutate exist list contain item want approach useful reference somelist need reflect change comprehension use itertool python python answer suggest list comprehension correct build new list give name old list modify old list place different selective removal @lennart suggestion fast list access multiple reference fact reseat reference altering list object lead subtle disastrous bug easy get speed list comprehension require semantic place alteration code note subtle difference answer assign barename assign list slice happen entire list replace list content python list object reseat reference previous list object new list object answer take copy list iterate first iteration fail unexpected result example depend type list example go bit saw tree branch sit python user replace range xrange avoid create hardcoded list overview workaround use link list implementation roll link list proper datum structure support efficient item removal force make space time tradeoff cpython list implement dynamic array mention good datum type support removal seem link list standard library start new list scratch .append back end mention time efficient less space efficient keep extra copy array iteration use del index mention https://stackoverflow.com/a/1207485/895245 space efficient dispense array copy less time efficient removal dynamic array require shift follow item quick dirty want add custom linkedlist class want go option default memory big concern official python tutorial statement https://docs.python.org/2/tutorial/controlflow.html#for-statement part docs make clear modify sequence iterate loop example duplicate select item recommend make copy iterate sequence make copy slice notation make convenient python documentation statement part docs say make copy give actual removal example note subtlety sequence modify loop occur mutable sequence list internal counter use keep track item use incremente iteration counter reach length sequence loop terminate mean suite delete current previous item sequence next item skip get index current item treat suite inserts item sequence current item current item treat next time loop lead nasty bug avoid make temporary copy use slice whole sequence disagree implementation iterate entire list find value python seem particular python api improve compare instance make crystal clear modify list iterate iterator give efficient way copy list underlie rationale python list assume dynamic array back type removal time inefficient java nicer interface hierarchy arraylist linkedlist implementation listiterator seem explicit link list type python stdlib python link list good approach example list comprehension case complex calling determine function prefer construct new list append go example copying list use remove make code look little describe answer large list involve first copy entire list perform o(n remove operation element remove make o(n^2 algorithm functional programming need huge list duplicating list seem expensive case number deletion compare item remain take low level approach know efficient couple delete compare copy large list comment insight answer want create copy list use case list long item keep reduce list need replace foreach loop loop value change block want get value new item index old item delete smart create new list current list item meet desire criterion avoid code entire project new list name note python documentation copy.copy(x return shallow copy x. copy.deepcopy(x return deep copy x. answer write response question mark duplicate remove coordinate list python problem code use remove attempt remove integer remove tuple loop skip item list let run happen execute code first problem pass b remove remove accept single argument get remove work list need figure element list case tuple see let access element list indexing start aha element l1 tuple need pass remove tuple make enclose value parenthese b tuple b tuple modify code run code run error let look list output list turn modifying list use loop iterate bad idea special care reason -2 remain list location item list change iteration loop let look happen feed code list infer result time conditional statement evaluate true list item remove next iteration loop skip evaluation next item list value locate different index intuitive solution copy list iterate original list modify copy try output identical create l2 python create new object reference l2 object l1 verify different equal (= make true copy use work expect clean solution make new copy l1 reverse function describe reverse works return listreverseiterator object list pass practical purpose think create reverse copy argument solution recommend want delete element list iterate use loop alter current index end index deletion example want iteration get index guarantee able reference example list dict actual list item content enumerate give access item index reverse index go delete change possible solution useful want remove thing element single loop answer correct bad idea delete list iterate reverse iterating avoid pitfall difficult follow code use list comprehension filter case safe remove element sequence iterating remove item ensure use return break example easy understand list comprehension operation side effect first item list meet condition remove item list loop iterate index consider list use list variable call lis use remove variable 5th iteration number prime remove list next value move previous index 4th iteration do pointer move 5th loop cover move previous index reference list variable reference original copy copy list use list give problem remove value list iteration list index collapse try comprehension support iterable list tuple dict string want use filter available build detail check try loop reverse some_list way index align suffer list update pop cur element effective method list comprehension many people show case course good way get iterator filter filter receive function sequence filter apply pass function element turn decide retain discard element depend function return value true false example get odd tuple caution handle iterator iterator well sequence need similar case problem memory need merge multiple dataset object list stuff new object need rid entry merging avoid duplicate blow memory case object dictionary list work tldr write library allow good use method possible require modifying iterable iterating algorithm straight want code pattern describe original question possible work mutable sequence list full answer edit last code example answer give use case want modify list place use list comprehension first part answer serve tutorial array modify place solution follow answer related question senderle explain array index update iterating list modify solution design track array index list modify download https://github.com/alanbacon/fluiditerator single file need install git installer need make sure file python path self code write python untested python produce follow output use pop method fluid list object common iterable method implement del fluidl[i .extend list modify use slice reverse method implement condition modify list place point fluidl reassign different list object code work original fluidl object use loop become scope modify want access current index value list use enumerate count many time loop run use iterator object output follow fluiditerable class provide wrapper original list object original object access property fluid object example test find name main section bottom worth look explain happen various situation replace large section list use slice use modifying iterable nest loop state start complicated solution hurt readability code make difficult debug solution list comprehension mention david raznick answer consider say find times class useful easy use keep track index element need delete edit mention comment answer present problem approach provide solution try address list comprehension provide way generate new list approach tend look element isolation current state list whole result testfunc depend element add newlist element oldlist add use list comprehension begin lose elegance feel easy modify list place code example algorithm suffer problem algorithm reduce list element multiple element output final reduce list show situation filter list item time want iteration change iterate example copying list incorrect reverse iteration impossible list comprehension option think approach solve problem example create random list tuple somelist = condition choose sum element tuple = final list tuple sum equal choose choose example feel free change list tuple condition choose method use framework suggest fill code loop use small code del delete tuple meet say condition method miss tuple satisfie say condition place tuple meet give condition method construct new list contain element tuple give condition meet thing remove element list give condition meet follow code method find index give condition meet use remove element tuple correspond index follow code method method fast method method2 method3 efficient method1 prefer method2 aforementione example time(method1 time(method2 use new list set elem none judge loop way dont't need copy list easy understand potential big use follow fast
error get resolve seem mysql_config miss system installer find sure instal example debian ubuntu install package mysql_config path case compile mysql suite update recent version debian ubuntu mac os run terminal fix quick fix find add path think add add path plan install mysql python environment test osx mountain lion seem trick various answer issue aggregated solution ubuntu centos mac install export path venv note python3 mac python2 use mysql connector python installation pypip information find mysql connector python beta announcement blog launchpad good example add- edit- remove datum library centos user yum install mysql devel python devel python setuptool pip install mysql python solution work print gcc compile error mysql.c:29:20 error python.h file directory specify path python.h pip install option build_ext option="-i usr include mysql python try install mysql python amazon ec2 linux instance install get error instal trick use mariadb mysql solution install libmariadbclient dev package create symbolic link config file correct name example work work try sudo apt get build dep python mysqldb due change osx mavericks xcode development tool get error installation use mariadb install libmariadbclient dev libmysqlclient dev install mysql install mysqlclient problem terraform light container base alpine install mariadb dev dependency miss error depend actual cause case mysql python instal python mysqldb debian package developer know run pip uninstall mysql python fail recover pip install mysql python give error pip uninstall mysql python destroy debian package content course pip install mysql python fail debian package need dev file correct solution case apt get install python mysqldb restore mysql python original state sequence follow try install mysql python work mac locate mysql add path similar issue try install os x server use mysql python source mysql-5.6.19 binary installer python binary installer note instal virtualenv unzip source open distribute_setup.py edit default_version use late version distribute tool save open site.cfg file uncomment path mysql_config look reference path mysql_config clean build make fail mysql_config find error hope help try make use old xserves sudo path know local path go superuser mode add path install run osx update global python install mysql python virtual env check pip version version old update write aug macos version bigsur(14.4 mysql version mysql8 seem high version mysql delete my_config.h file change mysql.h guy run follow shell run pip install mysql python ok macos mojave find local bin/ local mysql bin point add path case database run container flask app run container try update code app break error key stack trace flask app run mysql client configure instal mysql server install start mysql install flask mysql package time work different case post world face issue
want remove empty string list string python idea look pythonic way use filter python return iterator filter wrap call list use list comprehension pythonic way list modify place reference see update datum use slice assignment filter special option filter element evaluate false need use actual callable bool len fast compare time notice filter(none lstr remove empty string space prune remove use filter white space string remove take lot time space string retain pros pro pro reply awesome remove empty string strip need use strip method return empty string white space valid answer achieve answer first second want use filter method item item.strip string give result use = order eliminate empty string preserve none data type list case list integer preserve example use test_list list want remove empty element depend size list efficient use create new list advantage create new list disadvantage search begin time use l propose require search occurrence keep good method complicate report aziz alto filter(none lstr remove empty string space sure lstr contain string use filter(str.strip lstr compare time pc fast solution remove empty string space remain report comment situation different string contain space see filter(str.strip lstr preserve strings space .join(lstr).split split string keep mind want keep white space string remove use approach list world want world','hello first trim list convert type white space empty string remove empty string list use filter drawback use filter point slow alternative lambda costly go simple iterative intuitive method decent time match use regular expression filter
django model queryset see gt comparative value ne equal want filter use equal example want correct syntax try ne end use use q object negate operator combine normal python expression return entry query appear double negative want exclude row word want include row x believe trick answer specific question equal field lookup django filter exclude method available switch logic desire result field value syntax query shorthand field__exact value say django put query operator query field identifier django support follow operator ' m sure combine q object dave vogt suggest use filter exclude jason baker suggest need possible query option chain exclude filter use q object operator register custom lookup function use usual easy create custom lookup ne lookup example django official documentation create lookup first need register use ne lookup query filter model gt gte lt lte use ne = achieve well filtering use object avoid chain queryset.filt queryset.exclude use django issue tracker remarkable entry title queryset equal filter operator remarkable april open year django stone age close year change month read discussion interesting people argue ne add other say exclude clear ne add agree former latter argument equivalent say python use exclude filter use filter exclude look object false x=5 django |||| serve operator queryset django model value disclosure author provide implementation notequal lookup answer provide syntactic support give desire result equal use equal query q use reach equal query result true).exclude(x generete sql select tablex = sql depend true false field represent database engine django code need last bit code exclude object x!=5 true try remember sign line assign false parameter number parameter x. check equality use symbol query call work watch lot incorrect answer question gerard logic correct return list queryset matter need queryset use q need exclude negate base sub queryset use conditional filter conditional expression return boolean value possible use filter non_unique_account_type return boolean value use filter sql term evaluate
get logical xor variable python example variable expect string want test contain true value none empty string operator seem bitwise define object normalize input booleans xor use definition xor compute logical operation little verbose clear first glance way xor operator booleans logical xor int bitwise make sense bool subclass int implement value logical xor equivalent bitwise xor domain restrict function implement credit nick coghlan python-3000 mailing list bitwise exclusive build python operator module identical operator zach explain use favor different dialect dialect inspire logical diagram language learn school denote box contain great equal denote box contain advantage implement exclusive multiple operand keep way think logical xor definintion return b false ' test several approach = b appear fast test edit example miss parenthe result incorrect new result truth function shadowranger suggest python bitwise exclusive operator use convert input booleans apply xor edit thank arel simple understand exclusive choice select choice n expand multiple argument get logical xor variable python example convert inputs booleans bitwise xor become logical xor note accept answer wrong = xor python subtlety operator chain instance xor value use p.s try edit accept answer include warning change see simple variant xor use variable argument operation truth value true throw use note other say straightforward usage straightforward generalize n ary logical xor truth value true number true operand odd true case n ary xor true search n ary predicate true operand want use give b bool rewarding thread anoder idea try pythonic expression order get behavior logical xor truth table example string indicate depend actual behavior pull couple string string bolean dive python find peculiar nature http://www.diveintopython.net/power_of_introspection/and_or.html write english bear language regard know late thought worth documentation work np.abs(x idea use xor operator ^. know upvoted solution suggest bool(a = bool(b say conformity c operator obvious solution readable understandable come c c derive language code golfing winner converter boolean letter less bool first expression case leave paranthese depend case not(a not(b bool need amount letter exclusive define follow implementation suggest repeat evaluation operand case lead unintended side effect avoid say xor implementation return true false simple return operand possible tricky consensus exist operand choose operand instance xor(none true return none false bet answer appear people intuitive false result many possible choice return operand match end result value boolean return first match exist boolean return last operand return last match return boolean be flavor xor find work boolean true false value case xor define follow truth table many folk include need xor function behave input xor circuit variable see https://en.wikipedia.org/wiki/xor_gate follow simple function implement sample follow give b false give false give false python ternary expression xor python return intend use string cast bool make operation unambiguous mean set(str1 set(str2 code truth table xor particular look value answer column stre true case logical truth table produce case know xor get logical exclusive xor variable first problem setup traverse whole list minimum check element increase code comprehension lend speed differ depend use case second problem setup check exclusivity number variable regard feature first problem become lot significant number variable increase xor implement operator.xor see mention trick ' m sure better"/more readable pythonic accept solution bool(a = bool(b generalization test output way python handle logic operation confuse implementation give user option default simple true false answer actual python result obtain set optional third arg none find xor variable use example xor(true false true
try get python program manipulation text file fill information try read file follow error file question use cp1252 encoding use encode figure common one 0x90 mean utf-8 0x90 continuation byte specify encode open file file open(filename encoding="utf-8 work try file open(filename remove unneeded character doc need decode file uploading file website use r read b = binary extension @lennartregebro answer tell encode file use solution work utf8 find guess online tool use identify encode perfect work fine figure encode able use solution edit copy comment popular text editor sublime text command display encode set tldr try file open(filename use python assume file use codepage current environment cp1252 case open post try decode default file contain character value define codepage 0x90 get unicodedecodeerror know encode file file encoding unhandle python cp790 file contain mixed encoding character unneede decide replace question mark workaround use character leave intact error mask good solution specify encode encode cp1252 character define cp437 codepage original do encode code define error read file error mask character preserve leave intact distinguishable stop waste time add follow errors='ignore code read write encoding work work anaconda window problem help solve open file notepad++ bottom right tell current file encode top menu next view locate encoding encoding go character set enconde need case encoding find western european apply suggest solution check unicode character appear file error log case https://unicodelookup.com/#0x90/1 unicode consortium site http://www.unicode.org/charts/ search consider remove file new version python start add interpreter option -xutf8 fix problem use pycharm run edit configuration tab configuration change value field interpreter option -xutf8 set environmental variable pythonutf8 change mysql character encoding code help sort solution photo open('pic3.png',encoding
make function look age dictionary show match name know compare find age know show name person get keyerror line know correct figure make search python separate dictionary value list find position value get key position key python get list value dict none dict intended use way want name age use .item give key key value tuple unpack tuple separate variable right loop match age consider reverse dictionary go look age people age look name age call mydict list list name build type use name get list people give age line person age give none age python consider use .iteritem .item cat answer need make copy list think interesting point method quick scenario test run macbook pro result profile.run method time method method method show small dict method quick likely return first match oppose match method see note perform test dict entry get different result time run time method method method method go show size dict affect method choose note line version old dictionary p reversed dictionary explanation i.key i.value return list key value dictionary zip function ability tie list produce dictionary warning work value hashable unique found answer effective easy read make clear invert key value dictionary make key value value key see python thank @kkgarg answer try liner reverse dictionary find key value use dictionary comprehension create lookup dictionary use find key value get key dict get key use dict.keys dict.value list.index method see code sample take problem start learn python call understandable beginner solution consider use pandas state william mckinney python datum analysis way think series fix length order dict mapping index value data value use many context use dict query series follow yield need output transform answer list useful output follow recover_key take dictionary value find dictionary loop keys dictionary make comparison value return particular key take get multiple datum glimpse answer none mention use list comprehension pythonic line solution return key number give value test python answer do fancy map reduce use try read many solution prevent give duplicate answer work dictionary value contain list want get key particular element let find name value work multiple value answer lambda filter line solution use list comprehension return multiple key value present multiple time answer several people mention reverse dictionary line assume mapping various perf datum python think create reasonable reverse mapping couple line slow slow simple search slow think straight entry dictionary fast search looking value early key 10x reverse entire dictionary slow search end 5x fast lookup pay second version list item take long simple version interesting result ifilter ifilter fast use itervalue create go entire value list practice result odd small offset previous version u*s minimum m* previous case large offset end list slow small saving low end worth cost high end imho cat plus mention dictionary intend use definition dictionary analogous mapping mathematic case dict mapping k set key value vice versa dereference dict expect get value return legal different key map value look key correspond value invert dictionary mapping invertible example ask key correspond v1 yield k1 k3 return find undefined dictionary know datum api assume arbitrary dictionary invertible lack operation take good display multiple result case need add list easy way find key list looking value know value iterate key look value dictionary element d[element dictionary object equal key try look execute code need use dictionary reverse dictionary mean need datum structure python use enum module use python use enum34 port python example int need access dictionary want course name look print age print name access name become understandable write strange question first comment provide perfect answer base sample data example provide return want enter get george swap key value presto opposite position dictionary try feed george get try several kind loop iterator work easy line solution use quick result swap solution find miss know delete answer solution work python python part search_age construct reverse dictionary value key create helper method cache reverse factory create age name lookup method list note rename list ages_by_name former predefined type multiple occurrence use realize long time original asker need answer none good answer control code use wrong datum structure perfect illustration use case way dict add miniscule overhead insertion keep constant time lookup direction construct reverse mapping scratch time store go access need many answer correct many people age return first match key here reversible dictionary base adam acosta solution enforce val key call unique return key value want enforce uniqueness dictionary value ensure set enforce_unique true get key value rev_dict(value call value key usual dict['key example usage simple way return list key value match search_age replace list==search_age condition statement need case easy way instantiate disctionary code call key class dictionary instantiate dictionary call dictionary key end function way avoid full loop intuition say fast solution present look question end variant = a[0 dict.item a[1 = value'][0 situation key unique value case
create list list change innermost value first element sublist change write x]*3 get list x x x list reference x. modify single visible reference fix make sure create new list position way reevaluate time evaluate make reference list wonder make independent object way list comprehension multiplication operator operate object see expression use multiply see element list evaluate expression text idea make copy element idea reevaluate idea want copy general way copy element option make new reference exist sublist try make new sublist require major redesign fundamental language design decision contrast list comprehension reevaluate element expression iteration n range(3 reevaluate time reason x**2 x range(3 reevaluate x**2 time evaluation generate new list list comprehension want copy element matter integer immutable turn live visualization use python tutor expect let decompose happen write equivalent mean lst list element point lst1 mean follow line equivalent lst1 obtain desire behavior use list comprehension case expression evaluate lead different list create list reference internal 1,1,1,1 time copy inner list time modify list position see change time example little surprising my_list create list object memory copy reference time equivalent obj = my_list = obj]*3 modification obj reflect place obj referenced list right statement important thing note operator use create list literal immutable obj = 1]*4 create list repeat time form reference immutable object make object overwrite new mean = obj become assume verify accept answer explain problem create list duplicate element use follow code use create iterator object repeat element p.s use numpy want create array one zero use np.one number use python container contain reference object see example b list contain item reference list a. list mutable multiplication list integer equivalent adding list multiple time see common sequence operation continue example see list contain reference list equivalent c = b python faq contain explanation behavior create multidimensional list let rewrite code follow way run follow code make clear code print ids obtain object return[ identity object help identify analyse happen follow output let go step step single element list contain x. first step get new list z x x x create new list element reference initial object next step similar z x x x 3 return x x x x x x x x x x x x reason first step add answer explain way create create shallow list want update element list use explanation create list use first case index array point integer object assign value particular index new int object create example arr[4 create let see happen create list list case element top list point list update value index new int object create top level list index pointing list row look feel update element updating element column credit thank pranav devarakonda explanation explain happen suggest way solve get simple word happen python work reference create list list way end problem solve issue use numpy array documentation numpy.empty append list get list use dictionary want @spelchekr python list multiplication make list mirror modified question outer create reference inner one 1 explanation try code try explain operation operation notice modify first element first list modify second element list list number reference modify want create clone copy try operation interesting way create clone copy operation use inbuilt list function arrive look see nest arbitrary number list lot explanation specific example generalize dimensional list list list follow recursive function make first call function tuple dimension structure similar numpy shape argument element want structure initialize work none note init argument provide recursive call carry nested child list output set specific element result output non type nature list demonstrate note item sequence copy reference multiple time haunt new python programmer consider happen element list contain empty list element reference single empty list modifying element list modify single list example explain use multi dimensional array try make multidimensional array look correct print assign value show multiple place reason replicate list n’t create copy create reference exist object create list contain reference list length change row show row want original question construct sublist multiplication operator add example use list sublist add answer completeness question use canonical issue list dictionary value object try change dictionary value see correct way construct dictionary use copy list value
' m trouble instal python package window machine like install christoph gohlke window binary experience alleviate much fuss many package installation file available http://www.lfd.uci.edu/~gohlke/pythonlibs/#jpype install .whl file use follow simple first open console cd download file some-package.whl use note recognize find script directory python instal pip instal page help install pip windows note clarification copy .whl file local drive ex c:\some dir\some file.whl use follow command line parameter make sure update pip enable wheel support install wheel give directory wheel download example install package_name.whl several file version great christoph gohlke site find important installing wheel site run python console know version install computer pick wrong version fail instal package use right cpython tag example cp27 boat op use windows command prompt directory seem work change directory whl locate tell pip recognize go c:\python34\script use full command provide downloaded location say requirement scikit_image- -win32.whl look filename filename drop copy .whl python34 scripts run exact command go folder time work slight difference access .whl file python2 python3 python3 need install wheel first access file python3 use wheel python2 run pip.exe command prompt computer type c:/python27 script pip2.exe install numpy window upgrade use pip install pip pip.exe use upgrade pip check pip version show series wheel support install wheel package able install wheel file simple doubleclick follow run command command line administrator privilege copy wheel.bat file execute run administrator checkbox property ps pip.exe assume path update combine line syntax file different output make verbose see blog post detail edit part pip avoid download file try information see case unable install specific package use pip download specific .whl wheel package https://www.lfd.uci.edu/~gohlke/pythonlibs/ cd change directory download package install pip install packagename.whl ex pip install ad3‑2.1‑cp27‑cp27m‑win32.whl install file use pip install filename use form directory command line specify complete filename address pip install c:\some\path\filename make sure file platform use python -v find version python run win32 install correct version accord download numpy https://pypi.python.org/pypi/numpy ps instal window new python user window forget add python \scripts directory path variable installation recommend use python launcher execute pip script switch install wheel specific python version instal script directory path open command line navigate cd command folder file locate enter replace python version enter -3 desire python version appear first path active virtual environment py pip install course install package pypi way update pip use command pip install pip instal wheel use command pip install wheel work fine hope work guess suggest exact way install file face many issue solve trick install file follow step order get module import cd c:\python 3.now enter command write click enter make sure enter version use correct file name press enter wait minute file instal able import particular module order check module instal import module idle check thank macos pip instal macport macport use @dune solution python replace macport python case option run library module script accord manpage run sudo port install py27 pip py27 wheel install pip wheel python installation first download package put file script folder python directory use command prompt install package wheel build distribution spec dependency build system zip format archive unpacked target location order use pip install add extra feature unzip use standard archive tool eg 7zip .whl file site package directory use package https://packaging.python.org/specifications/binary-distribution-format/
write unittest fail function throw expected exception use testcase.assertraise testcase.failunlessraise unitt module example python use context manager get actual exception object throw http://docs.python.org/dev/library/unittest.html#unittest.testcase.assertraise python wrap context.exception str get typeerror code previous answer simplify function take argument pass assertraise test python function throw exception write test fail function throw expect exception use self.assertraise method context manager good practice approach easy demonstrate python shell unitt library python python install backport unitt library call unittest2 alias unitt paste shell follow test python type safety test use assertraise context manager ensure error catch clean record write context manager see test first argument error type expect raise second argument function test remain args keyword args pass function think simple readable maintainable use context manager run test python need follow terminal output follow see expect attempt add result typeerror verbose output try code follow pattern unitt module style test python construct useful checking specific value expect exception unittest function assertraise check exception raise http://www.lengrand.fr/2011/12/pythonunittest-assertraises-raises-error/ correspond dum function file dum_function.py test perform test insert ready test function happen try run test typeerror actullay raise generate test failure problem behavior want s. avoid error run function use lambda test call final output perfect perfect thansk lot mr julien lengrand lambert test assert return false positive happen lambda inside assertraise unit raise type error test function see detailed explanation check get specific exception list accept use context manager exception detail add check python want check function raise instance typeerror write want check function raise typeerror indexerror write want detail exception raise catch context use pyt use pytest.raises(exception example result build contextmanager check exception raise use raise use python order assert exception message use assertraise context manager pass message msg keyword argument use fact document test function time look code put example module run command line test case evaluate check python documentation doctest test interactive python example lot answer code show create exception use exception method verify unit test correct exception raise discover mock library provide assertraiseswithmessage method unittest.testcase subclass check expect exception raise raise expected message use assertraise unitt module django use context manager run faulty function assert raise exception certain message use assertraisesmessage option find full example end want check exception message see assertraisesregex context manager option check part pay attention function call use function callable round bracket second parameter regex expression mandatory handy want check part exception message second parameter regex expression mandatory handy want check part exception message pay attention function call use function callable round bracket developer style follow prefer method use context manager await async aiounittest different pattern https://aiounittest.readthedocs.io/en/latest/asynctestcase.html#aiounittest.asynctestcase raise typeerror set stock_id integer class throw error test pass happen fail unit testing unittest prefer like quick fix catch exception assign variable see variable instance exception class let assume bad function throw valueerror answer fine looking way test function raise exception rely unit testing framework write test class end writing follow fail right line
many row xml try get instance particular node attribute access value attribute foobar example want suggest elementtree compatible implementation api lxml celementtree python standard library context add speed ease programming part depend api elementtree define build element instance root xml e.g. xml function parse file many way show elementtree output minidom quick xml python output use beautifulsoup many option celementtree look excellent speed memory usage issue little compare read file use readline relevant metric find table copy celementtree website point celementtree bundle python suggest xmltodict simplicity parse xml ordereddict lxml.objectify simple take sample text output python interface expat xml parser non validate parser bad xml catch know file correct good get exact info want discard rest fly add possibility use untangle simple xml python object library example installation usage xml file little bit change access attribute untangle output information untangle find untangle curious find list tool work xml python python xml see common one mention previous answer suggest declxml full disclosure write library look way convert xml python data structure need write dozen line imperative parse serialization code elementtree declxml use processor define structure xml document map xml python data structure processor use serialization parse basic level validation parse python data structure produce output use processor serialize datum xml produce follow output want work object dictionary define processor transform datum object produce follow output simple effective code use celementtree python xml parse xml python code output need use specific api use python benedict initialize new instance xml manage dict subclass installation easy pip install python benedict support normalize operation many format base64 csv json toml xml yaml query string test open source github disclosure author pro use library benefit know choose print value foobar attribute new lib fall love use recommend example easy use want use external library 3rd party tool try code code sample input output beautify source xml file say sample try follow code output
convert string boolean python attempt return true compare string expect accept represent true check whole bunch value cautious use follow empty string evaluate false evaluate true used kind parse purpose use true value true false value false raise valueerror val aware distutils.util.strtobool return integer representation need wrap bool get boolean value call handle true false make function check true list word false list word list throw exception json parser useful general convert string reasonable python type python use ast.literal_eval seem work sure string go true false recommend build right thing depend requirement color yellow animation blink animation infinite @keyframes blink animation background color black color cyan background color black color red background color black color lime use follow code know read attach disclaimer make sure trust input use untrusted input destroy datum cost job.</h1 > know string true false use eval(s use sure content string throw exception string contain valid python execute code contain string note use eval take input user subject abuse eval('os.system(‘rm cheers study find eval evil ok trust code use convert boolean string false true boolean type share simple solution use eval convert string true false proper boolean type string title format true false first letter capital function raise error course dynamic variable simple use format boolean string throw error version keep semantic constructor int(value provide easy way define acceptable string value version check positive negative value list raise exception unknown value receive string type sample run bit paren evaluate false way actual function call cool simple trick base @alan marchiori post use yaml wide refined testing type result yaml return type str cast type think let true make guess speed work yaml datum gui nice symmetry elegant solution pydantic agree solution permissive want parse string solution use result clear look answer offend point want test value assume think want map non parse value produce error prone code know want code dict defaultdict give easy way trick easy tailor method exact conversion behavior want fill allow truthy falsy value raise exception return none value find default true default false want use simple logic convert string say true false boolean true set true false false use solution other look method convert value boolean value use standard false value include none addition false control entity return true false option return true false boolean_response bool(int(response extra cast int handle response network stre update stre naive observation depend serialization protocol use library default serialization high level librarie one use web devs convert string serialize byte side deserialize bytes string lose type information option usual rule cast bool special literal false false true recommend follow know input true use evaluate string literal version write combine several solution get string expect specific value raise exception get string let bool constructor figure test case need boolean variable string use distil mention @jzwiener import use module suggest end use way python3.7 distutil part python std lib install great agree solution gabrielson thing ast.literal_eval work string value true false true false use work solution python version match statement equivalent switch c++ realize old post solution require quite bit code end use use package str2bool pip install str2bool require change input bool function main input true false string code check shorten true false need catch true case insensitive note return false input true false hairy build way get many answer note python consider false string true tcl different idea thing good thing forgiving value use lazy turn string value hygenic accept rejects(notice statement give tcl prompt erase user hard disk bad thing require tkinter available true require tk instance create heavy consider true false depend behavior tcl_getboolean consider false false true true case insensitive string include empty string cause exception idea check want string evaluate false bool return true non empty string throw evaluate truthiness string less result use eval safe use ternary operator bit succinct feel line late party find useful top rate answer fine limited case situation make strong assumption datum process custom object override eq equality check python significant pitfall consider simplify toy example imagine inherit string type mystring implement kind native string method repr mystring instance behave string special extra value step equality check simple use true fail silent failure user perspective good practice coerce type exact nature equality checking want perform put encapsulate helper function pedantic rely kind registered way validate thing example mystring write use pattern reverse perspective define behavior validation helper function force coercion type amenable single validation behavior look add lot boilerplate verbosity express critique say write write true miss point validate make sure precondition hold validation logic apply assume datum plain str type need precondition type check great rare situation mislead characterize general situation question amenable super short concise equality check use python build eval function .capitalize method convert true false string initial capitalization true python boolean example
follow code python editor pycharm say reference position resolve add method specify expect return type type position edit think pycharm issue use information warning code completion correct ' m wrong need use syntax today python turn feature use future statement future import annotation behaviour enable future import annotation become default future version python make default python change revert last minute happen python use string guess get exception position define use annotation use python change enable python introduce pep postpone evaluation annotation module use future statement future import annotation store annotation string schedule become default python change postpone python type language type checking do runtime typing annotation performance impact wrong python typing module use slow python module core code involve import typing module see time increase performance upgrade accord pep stre class use django framework familiar django model use string reference foreign key definition foreign model self declare work pycharm tool relevant part pep spare trip type hint contain name define definition express string literal resolve later situation occur definition container class class define occur signature method example follow code start simple binary tree implementation work address write string literal contain valid python expression eval valid code object evaluate error module load local global namespace evaluate namespace default argument function evaluate pep python function variable annotation evaluate definition time string form preserve respective annotation dictionary static type checker see difference behavior tool use annotation runtime perform postpone evaluation functionality describe enable start python use follow special import class definition place dummy definition get rid nameerror look ok want try python metaprogramme magic write decorator monkey patch class definition order add annotation decorator responsible equivalent least seem much trouble start python release late able self return type self include type extension package available pypi part standard library sort preview version type module https://pypi.org/project/typing-extensions/ typing_extension module serve related purpose type extension support python specify type string fine grate bit circumvent parser well misspell literal string slight variation use bind typevar least write string declare typevar name position avalilable time class body parse know use type declaration python pep mode use use type hint put name string point check pep section reference tool conform know unwrap class name make use important mind python language annotation mean static code analysis library framework type checking runtime set update python check pep python possible write future import annotation defer evaluation annotation reference class work straightforward update python pep retought pep use allow class name use quote pep proposal resolve lazy way update python release late available design purpose check pep pep resolve forward reference mention contend none go care fix nameerror name position define specify class name string use python high add follow line top code import want work subclass return specific subclass need annotate method generic method use typevar uncommon typevar bind type self type hinting tell type checker return type add copy type self string base type hint acceptable qualname item use hold name class available body class definition rename class imply modifying type hint expect smart code editor handle form edit @juanpa.arrivillaga bring attention well way see https://stackoverflow.com/a/63237226 recommend answer old answer keep posterity paulo answer point make type hint inheritance relation self type hint use literal copy paste class name string type hint inherit correct consistent way solution provide return type hint put type hint return function example reason want type hint roundabout way show dynamic_child screenshot show type hinting work reference self ❌ static_child screenshot show type hinting point parent class type hint change inheritance static point parent point child
list want filter attribute item follow preferred readability performance reason strange much beauty vary different people find list comprehension clear filter+lambda use find easy thing slow use filter first function call use python function create def lambda likely filter slow list comprehension enough matter think much performance time code find bottleneck difference apply lambda force access scope variable value access local variable python list comprehension access local variable use python list comprehension run separate function access value closure difference apply option consider use generator list comprehension main code readability matter replace list comprehension filter meaningful function name religious issue python guido consider remove map filter reduce python enough backlash end reduce move build in functools.reduce find list comprehension read explicit happen expression list i.attribute = value behaviour surface filter function worry much performance difference approach marginal optimise prove bottleneck application bdfl want filter go language make list comprehension pythonic speed difference bind miniscule use filter list comprehension come taste general ' m incline use comprehension seem agree answer case prefer filter frequent use case pull value iterable subject predicate p(x want apply function value specific example consider think look use filter consider case want filter post compute value issue compute cube imagine expensive calculation issue write expression violate dry aesthetic case apt use filter fast way pythonic way care thing performance critical case use python thought add python filter iterator object pass filter method call list order build filter list python list b c value complete time filter equivalent x z code leave list c contain filter object filter list produce value problem list take iterable argument create new list argument result use filter way python take long x z method iterate output filter original list important difference list comprehension return list filter return filter manipulate list call len work return filter self learning bring similar issue say way result list filter bit .net lst.where(i i.something()).tolist curious know edit case python see discussion comment find second way readable tell intention filter list ps use list variable name filter use builtin function expect list comprehension fast case filter filter element list see definition mention official doc link mention list comprehension produce new list act previous filter list comprehension create new list perform operation place old list new list list say new data type convert integer stre example well use filter list comprehension definition want say other_attribute list element example retrieve new list use list comprehension remember filter list comprehension remove thing list keep element intact use filter use logic element create water list suitable purpose use list comprehension short piece use need filter list comprehension combination filter lambda list know loyalty cat cleanliness dog case read file strip blank line comment line comment line take time familiarize high order function filter map use like filter explicit filter keep truthy feel cool know functional programming term read passage fluent python book map filter function builtin python introduction list comprehension generator ex‐ pression important listcomp genexp job map filter combine readable think bother concept filter map achieve spread idiom list comprehension map filter kind function case prefer use anonymous function lambda sake test time method map listcomp see relevant speed difference justify make argument addition accept answer corner case use filter list comprehension list unhashable process list comprehension real world example pyodbc read result database fetchall result cursor unhashable list situation manipulate return result filter use use list comprehension get error typeerror unhashable type list term performance depend filter return list iterator need list filter list conversion slow list comprehension large list element difference 600k start difference convert list filter instantaneous info https://blog.finxter.com/python-lists-filter-vs-list-comprehension-which-is-faster/ python see filter perform fast list comprehension think list comprehension performant name name brand_names_db name none bytecode generate bit slow look answer see lot list comprehension filter important pythonic care issue end answer times stumble question optimize code exact question combine expression relevant filter lambda expression take third computation time multiple minute case list comprehension twice speed suspect varie base filter expression python interpreter use simple code snippet easy adapt profile ide able decide specific case well option ide let profile try extract codebase bit complicated code snippet create profile visualize use snakeviz question simple interesting show flexible python programming language use logic write program accord talent understanding get answer case simple filtering method do prefer first my_list = x x my_list x.attribute = value seem simple need special syntax understand command make change need second method simple complexity beginner level programmer come conclusion use list comprehension filter keep mind filter return iterator list loop good msec loop loop good msec loop
run python server like able upgrade service restart server good way reload module import use importlib.reload python reload builtin python move imp module imp deprecate favor importlib target reference appropriate module call reload import think want web server django development server use see effect code change restart server process docs note question reconstruct foo object foo class reside foo module python use bdfl answer question imp deprecate favour importlib thank @stefan think use importlib.reload(module m sure difficult delete module pure python information delete import module use sys.getrefcount find actual number reference number great indicate hard rid module homegrown contain module garbage collect third reference artifact getrefcount function reload(module stand alone reference module object belong module get subtle curious error cause old code hang expect thing isinstance work different version code way dependency reload module depend reloaded module get rid reference old code reload module depend reloaded module circular dependency common example deal reload package unload module group go reload import module dependency refresh allow old reference creep new module way case hack sys.module unsupported go delete sys.module entry want reload next import delete entry value none deal implementation issue cache fail relative import nice self contain set dependency leave reference codebase workable good restart server python use build function reload python python use reload module imp python imp deprecate favor importlib use python ≥ importlib.reload(module python imp.reload(module python reload(module server develop reload module nice tip make sure use excellent ipython shell jupyter notebook project instal start ipython jupyter console well jupyter qtconsole give nice colorized console code completion os shell type time run script module reload option autoreload magic work jupyter notebook follow code allow python compatibility use reload version make thing simple accepted answer handle x import case code handle standard import case reload case reassign top level name value store reload module update modern way reload module want support version python old use define reload method call module reload example reload(math reload math module want unload module run python interpreter emacs information reload python module solution good get reset information change reference reload require set reference go garbage collector rewrite reference work charm note work gc turn reload datum monitor want mess gc original answer enough new code write @bobince answer reference module module import keyword import numpy np instance overwritten prove problematic apply test require clean slate state configuration module write function name use importlib reload function overwrite declare module attribute test python version note use care use non peripheral module module define use class example lead internal problem python pickle un pickling issue enthought trait module work https://traits.readthedocs.org/en/4.3.0/_modules/traits/util/refresh.html reload module change update module instance object use work time very_private method choke class inheritance save crazy amount time restart host application write pyqt guis stuff run programs maya nuke work time helpful enthought package reload file moment change call implement need option see python default importlib.reload reimport library pass argument reload librarie import change lot file complex package import deep reload ipython instal use function deep reload install command shell use python reload importlib problem seem module reload need time recompile pyc sec).i write hint know experienced kind problem importlib implementation import python documentation case abaqus way work imagine file class_verticesedges.py encounter follow error answer help get solution case import need use sys.module get module want reload main issue importlib.reload accept module string remove module sys.module require none type delete method method use bookkeepe entry remove dependency optional certain entry choose python calculate submodule address reload event sys.module workaround perfect work way import module function way function completes module get garbage collect get lot trouble try reload sublime text write utility reload module sublime text base code sublime_plugin.py use reload module accept reload module path space name reload import run first time load module method function run_test reload test file sublime text python happen lot interpreter close restart sublime text python3.3 interpreter
ide editor other use python code spreadsheet version plain text available screenshot acronym use mention basic syntax highlighting expect default dry list reflect feedback comment advocate tool keep update list keep post answer ps help add feature editor list auto complete debug comprehensive wiki page question https://wiki.python.org/moin/integrateddevelopmentenvironment submit edits spreadsheet
dataframe pandas write csv file use get follow error delimit tab use sep argument to_csv use specific encoding utf-8 use encode argument store dataframe object csv file use to_csv method need store precede index row dataframe object avoid pass false boolean value index parameter dataframe object csv file store case default value true pass write pandas dataframe csv file need dataframe.to_csv function offer many argument reasonable default need override suit specific use case example want use different separator change datetime format drop index write to_csv argument pass address requirement table list common scenario write csv file correspond argument use footnote example export file full path window case file header example want store file directory script encode tab separator try issue encode want go cell cell try follow python df dataframe object try check encode column warning errors='ignore omit character python face problem specify encoding recommend specify encode reading file encoding writing file solve problem solution work csv get mess remove sep='\t line answer case error message try error message different sparsedataframe object attribute tocsv problem solve turn dataframe dense dataframe avoid use \t separate create issue read dataset
know pip package manager python package see installation ipython website use conda install ipython use pip install ipython use conda python package manager pip difference pip conda quote conda blog involve python world aware pip easy_install virtualenv tool meet specific requirement main problem focus python neglect non python library dependency hdf5 mkl llvm source code install file python ’s site package directory conda packaging tool installer aim pip handle library dependency python package python package conda create virtual environment virtualenv conda compare tool let handle python non python installation task conda introduce new packaging format use pip conda pip install conda package format use tool side side instal pip conda install pip interoperate write answer publish new page understanding conda pip echo highlight key difference conda pip pip install python package conda install package contain software write language example use pip python interpreter instal system package manager download run installer conda hand install python package interpreter package need available conda package available pypi instal pip case make sense try use conda pip disclaimer answer describe state thing decade time pip support binary package conda create well support building distribute binary package particular data science librarie c extension reference pip gain widespread support portable binary package wheel pip manylinux1 specification pip march see recent answer history short rundown conda develop support anaconda conda forge infrastructure independent anaconda inc anaconda inc large team maintainer conda package open source community conda environment manager write python language agnostic conda environment management function cover functionality provide venv virtualenv pipenv pyenv python specific package manager use conda exist python installation pip instal recommend good reason use exist installation conda pip aware package management activity virtual environment interoperable python package management case bullet point conda make advantageous pip many package pip install source painful install thing unable compile source code true window true linux package difficult c fortran library dependencies conda install binary mean continuum do hard work compile package installation difference interested building package instance pip build top setuptool conda use format advantage static python agnostic answer give fair description detail want highlight high level point pip package manager facilitate installation upgrade uninstallation python package work virtual python environment conda package manager software installation upgrade uninstallation work virtual system environment goal design conda facilitate package management entire software stack require user python version small part include low level librarie linear algebra compiler mingw windows editor version control tool hg git require distribution management version management pip allow switch manage multiple python environment conda allow switch manage multiple general purpose environment multiple thing vary version number c library compiler test suite database engine conda windows centric window superior solution available complex scientific package require compilation require instal manage want weep think much time lose try compile many package pip windows debug fail pip install session compilation require final point continuum analytic host free call anaconda.org allow regular package developer create custom build software stack package user able conda install update use pip official package manager python basic pip default package manager python pip build python usage python3 venv myenv source myenv bin activate python3 pip install request package download official public repository install precompile binary wheel available source tar zip archive compile binary important many package mix python c third party dependency complex build chain distribute binary ready use advanced pip install archive wheel git svn locate disk http url personal pypi server pip install example useful testing patch branch pip install https://download.pytorch.org/whl/cpu/torch-1.9.0%2bcpu-cp39-cp39-linux_x86_64.whl wheel python linux instal source pip build package possible try build tensorflow google build system binary wheel python version specific os specific see manylinux specification maximize portability permit use anaconda package anaconda repositorie commercial use acquire license conda third party package manager conda popularized anaconda python distribution include common datum science librarie ready use use conda use anaconda package download anaconda repo install precompile package conda format package use wheel conda install install package conda build build package conda build python interpreter c package depend interpreter build bundled anaconda conda allow install upgrade python interpreter pip advance sell point conda support building instal binary package pip support binary package wheel manylinux2010 spec emphasis building package conda extensive build setting store extensive metadata work dependency build chain project use conda initiate complex build system generate wheel publish pip tool open source write python company conda update term service prohibit commercial usage watch funfact require dependency build python interpreter zlib zip library compression necessary load package egg wheel package zip file good question let delve history python computer pure python package work fine packager trouble python package code world depend c. true python interpreter write c. true numerous python package python wrapper c library project mix python c code involve ssl compression gui x11 windows subsystem math librarie gpu cuda couple c code create trouble package distribute python library python code run library compile compilation require compiler system librarie third party library compile generate binary code work specific system python version compile python distribute pure python librarie fine little support distribute binary library get lot error try use numpy cassandra download source fail compile miss dependency download prebuilt package egg time crash segfault use build system nightmare resolve pip wheel wait many year people adopt tool tool propagate stable linux distribution many developer rely bin python issue binary package extend late reference first command run python3 venv myvenv source myvenv bin activate pip install pip setuptool antiquated system os come old python+pip year buggy recognize current package format conda work solution parallel anaconda mean make data science librarie easy use box datum science = c c++ come package manager mean address building distribute binary package conda install package pip install xxx work recommend way install package build current version python confuse use pip conda environment validate general python specific manager comment add pip default package environment present time follow snippet conda data science article continuum website conda pip python programmer familiar pip download package pypi manage requirement conda pip package manager different pip package manager conda package manager environment manager detail dependency check pip conda differ dependency relationship environment fulfil instal package pip install dependency recursive serial loop effort make ensure dependency package lead environment break subtle way package instal early order incompatible dependency version relative package instal order contrast conda use satisfiability verify requirement package instal environment meet check take extra time prevent creation break environment long package metadata dependency correct conda produce working environment reference quote conda myth misconceptions comprehensive description reality conda pip serve different purpose compete small subset task instal python package isolate environment pip stand pip install package python sanction package manager use install package publish python package index pypi pip pypi governed support python packaging authority pypa short pip general purpose manager python package conda language agnostic cross platform environment manager user salient distinction pip install python package environment conda install package conda environment instal python package isolated environment conda pip+virtualenv interchangeable modulo difference dependency handling package availability isolate environment mean conda env virtualenv install package modify system python installation set myth focus installation python package conda pip serve different audience different purpose want say manage python package exist system python installation conda help design install package conda environment want say work many python package rely external dependency matplotlib common example track dependency meaningful way pip help design manage python package python package conda pip competitor tool focus different group user pattern use window user standard packaging tool situation improve pypi wheel package sept 11th sept wheel format support box late python standard"+"tweaks packaging tool situation improve find scientific package wheel format http://www.lfd.uci.edu/~gohlke/pythonlibs mingwpy project bring day compilation package window user allow install source need conda packaging remain well market serve highlight area standard improve dependency specification multiple effort standard wheel system conda system pythonic nice packaging core technique converge pep answer original question instal package pip conda different way accomplish thing standard application install package main difference source package file important cautionary side note use source pip conda install package environment cause issue good practice select application pip conda install package use application install package need many exception reason use pip conda environment vice versa example use pip install ipython first approach page third approach second conda download ipython github pypi install version unpack run follow top level source directory use terminal recommend way install use conda python package manager pip say need specific package project need share project conda seem appropriate conda surpass pip ymmv difference pip conda answer update answer derive @user5994461 use pip package management pip official build package manager python pip virtual environment manager basics pip default package manager python pip build python usage python3 venv myenv source myenv bin activate python3 pip install request package download official public repository install precompile binary wheel available source tar zip archive compile binary important many package mix python c third party dependency complex build chain distribute binary ready use advanced pip install archive wheel git svn locate disk http url personal pypi server pip install example useful testing patch branch pip install https://download.pytorch.org/whl/cpu/torch-1.9.0%2bcpu-cp39-cp39-linux_x86_64.whl wheel python linux instal source pip build package possible try build tensorflow google build system binary wheel python version specific os specific see manylinux specification maximize portability conda open source environment manager package manager maintain open source community separate anaconda inc require commercial license use conda bundle anaconda navigator popular commercial python distribution anaconda inc anaconda include common datum science python developer librarie ready use use conda use anaconda navigator gui package download conda forge anaconda repo4 public private conda package channel repos install precompile package conda package format use wheel conda install install package conda build build package conda build python interpreter c package depend interpreter build bundled anaconda navigator conda allow install upgrade python interpreter pip advance selling point conda support building instal binary package pip support binary package wheel manylinux2010 spec emphasis building package conda extensive build setting store extensive metadata work dependency build chain project use conda initiate complex build system generate wheel publish pypi.org pip conda emphasize build manage virtual environment conda design programming language agnostic virtual environment manager conda install manage package manager npm pip language package manager use anaconda navigator package commercial use new language state use individual hobbyist student universitie non profit organization business less employee allow usage consider commercial require business relationship anaconda oct large developer organization great employee permit use anaconda package anaconda repository commercial use acquire license pull use open source package conda forge repository require commercial license anaconda inc developer free build conda package use packaging tool provide conda forge infrastructure funfact require dependency build python interpreter zlib zip library compression necessary load package egg wheel package zip file good question let delve history python computer pure python package work fine packager trouble python package code world depend c. true python interpreter write c. true numerous python package python wrapper c library project mix python c code involve ssl compression gui x11 windows subsystem math librarie gpu cuda couple c code create trouble package distribute python library python code run library compile compilation require compiler system librarie third party library compile generate binary code work specific system python version compile python distribute pure python librarie fine little support distribute binary library get lot error try use numpy cassandra download source fail compile miss dependency download prebuilt package egg time crash segfault use build system nightmare resolve pip wheel wait many year people adopt tool tool propagate stable linux distribution many developer rely bin python issue binary package extend late reference first command run python3 venv myvenv source myvenv bin activate pip install pip setuptool antiquated system os come old python+pip year buggy recognize current package format continuum analytic rename anaconda inc work solution release anaconda navigator parallel anaconda navigator mean make data science librarie easy use box datum science = c c++ come package manager mean address building distribute binary package build environment manager conda install package pip install xxx work pip recommend way install package build current version python pip python conda anaconda scientific package r dependency need anaconda come python anaconda machine learn deep learning casual python dev run anaconda laptop find difference minor nature python environment order install use sudo install pip undesire side effect sudo install pip different report run python sudo order import sudo instal package give find use sudo conda install package environment import need sudo permission python use sudo conda fix break pip use sudo pip uninstall pip sudo pip --upgrade install pip
come c background name convention variable method name camelcase pascalcase python see underscore use preferable definitive code style python see python pep function variable name function name lowercase word separate underscore necessary improve readability variable name follow convention function name mixedcase allow contexts prevail style retain compatibility google python style guide follow convention module_name classname method_name exceptionname function_name local_var_name similar naming scheme apply class_constant_name david goodger code pythonista describe pep recommendation follow joined_lower function method attribute variable joined_lower all_cap constant studlycap class camelcase conform exist convention style guide python code admit name convention python library bit mess get consistent note refer python standard library get consistent much hope adhere convention python code discussion deduce horrible sin keep use java c clear establish naming convention variable function cross python keep mind course abide prevail style codebase project team happen python style guide point internal consistency matter feel free dismiss heretic op ' m pythonista mention pep say use lower_case_with_underscore variable method function prefer use lower_case_with_underscore variable mixedcase method function make code explicit readable follow zen python explicit well implicit readability count answer show pep styleguide standard library take gospel frequent deviation piece code variable naming method single predominate style consider volume code use mixedcase make strict census end version pep mixedcase little deviation pep common @johnteslade answer google python style guide neat recommendation name avoid name convention guideline derive guido recommendation python people prefer underscore use python year look ugly java head camelcase fit well way class name feel logical someclass.dosomething someclass.do_something look global module index python find due fact collection librarie various source grow overtime develop company sun strict code rule say bottom line use well question personal taste try use camelcase class mixedcase method function variable underscore separate remember way tell glance call look paper http://www.cs.kent.edu/~jmaletic/papers/icpc2010-camelcaseunderscoreclouds.pdf tl;dr say snake_case readable camelcase modern language use use snake code style part organization internal policy convention standard think general all_lower_case_underscore_separator style call snake_case common python use java naming convention develop programming language consistent easy follow way struggle convention hard part project class class variable function lowercase show word separate underscore show variable constant uppercase show lenin tell m java c world sql scrutinize attempt find first sight understandable example complex construction list dictionary list object camelcase variant become standard language underscore preserve complex sentence follow convention use language standard library
build python application want force client install python module way compile python script standalone executable use pyinstaller package python program standalone executable work windows linux mac install pyinstaller pypi go program ’s directory run generate bundle subdirectory call dist add parameter pack single exe run importerror consider side package run import erorr try downgrade pyinstaller see get error use pynput pyinstaller detailed walkthrough see manual use py2exe answer use cython convert key .py file c compile file window linux hard revert common .pyo file gain performance wish investigate nuitka take python source code convert c++ api call compile executable binary elf linux year support wide range python version get performance improvement use recommend possible compile python script standalone executable pyinstaller use convert python program stand executable windows linux mac os x freebsd solaris aix recommend converter py2exe convert python script executable windows platform cython static compiler python programming language extend cython programming language third option cross platform compile useful information create standalone file window use python use py2exe work problem show problem create single file window bit use bundle_file = py2exe work necessary create setup.py file work http://www.py2exe.org/index.cgi/tutorial#step2 problem dependency solve import package setup file able make work pyqt last reason make try pyinstaller http://www.pyinstaller.org/. opinion suggest create file follow line example pyinstaller.exe window path create single file option https://pyinstaller.readthedocs.io/en/stable/usage.html#option problem use pyinstaller multiprocesse package solve use recipe https://github.com/pyinstaller/pyinstaller/wiki/recipe-multiprocessing think python well simple option pyinstaller create standalone exe file window important note exe file generate folder name dist important note forget flag install pyinstaller use pip install pyinstaller note rare case hide dependency run exe file miss library error win32timezone example use pyinstaller windowe variant create single file distination folder like py2exe find information linux use py2exe use set file recommend pyinstaller well backward compatibility python py2exe python python script choice build source work python suggest pyinstaller package python program single executable cx_freeze output library seem miss current list answer think worth mention standard library include zipapp module use purpose basic usage compress bunch python file zip file extension execute python myapp.pyz make self contain package file interpreter bin env python see specify interpreter generate .pyzw file executable unix get mark windows python installation register extension make window executable work long user path want require end user install python distribute application embeddable python package py2exe make exe file want need version msvcr90.dll machine go use new exe file see tutorial information find list distribution utility list distribution utility use bbfreeze work python support packaging python code grumpy google transpiles code support python api work project use cython convert c compile link gcc make core function c one make hard reverse compile use boost.python import compile code get fast code execution use tool mention distribute use pyinstaller find well method use shortcut make data file run site base app program depend html javascript css file point move file move work path make shortcut exe file move top set target start path specify relative path go dist\folder rename shortcut rename gtfs manager click shortcut python run file find approach remember delete build folder build save size tell pyrun option support linux freebsd mac os x.
want search subfolder src work limit clunky pathlib.path.rglob use pathlib.path.rglob pathlib module introduce python want use pathlib use use glob.glob('**/*.c forget pass recursive keyword parameter use inordinate amount time large directory case match file begin dot file current directory hide file unix base system use solution old python version use walk directory fnmatch.filter match simple expression python use recursive true recursive true pattern match file directory subdirectory pattern follow os.sep directory subdirectory match python demo similar solution use fnmatch.fnmatch glob list filename use generator alow process file find find file processing ' modify glob module support recursive globbe e.g https://github.com/miracle2k/python-glob2/ useful want provide user ability use syntax good start python use glob method path class new pathlib module support wildcard example update start python syntax support glob.glob fnmatch give pattern glob excellent replacement glob.glob close semantic iterative version e.g. generator iow replacement trivial adaptation yield intermediate result go extend single result list return end want use collect filename match criterion example solution nest list comprehension simple suffix matching glob compress liner generalize function need full glob style pattern follow alex bruno example use fnmatch consider pathlib.rglob call path.glob add front give relative pattern see @taleinat relate post similar post case interest profile top propose method file globbe folder total file match desire pattern basic code result get os_walk rglob iglob platform ubuntu x86_64 core i7 recover picture extension .jpg run photorec recover directory file tremendous variety extensions.with script able select file havin extension minute base answer current work implementation retrieve nest xml file root directory ' m fun python python need johan bruno provide excellent solution minimal requirement state release formic implement ant fileset glob handle complicated scenario implementation requirement way use glob module seed rglob method start base directory pattern match return list matching file name list comprehension file remote file system archive use implementation fsspec abstractfilesystem class example list file zipfile list file available s3 bucket use local filesystem interesting implementation filesystem agnostic implementation include google cloud github sftp ssh dropbox azure detail see fsspec api documentation make print file directory hierarchical way use fnmatch walk use fnmatch regular expression addition suggest answer lazy generation list comprehension magic fit line avoid unnecessary list memory nice side effect use way similar operator use os.path.join(root path/*.c order get file sub directory src structure work code python part devop work require write script move config file mark live-appname.propertie appname.propertie extension file live-appname.xml work code find file give directory nest level rename move require filename function call main script hope help struggle similar issue simplify version johan dahlin answer fnmatch solution use list comprehension search multiple file extension directory subdirectory modify top answer posting create script loop file give directory searchdir sub directory print filename rootdir modify creation date size hope help walk directory get fileinfo solution match pattern full path base filename use convert glob style pattern regular expression match full path file find walk directory re.ignorecase optional desirable window file system case sensitive bother compile regex doc cache need solution python work fast large directory endet note need exception handling case ls find matching file
variable x want know function hope reason pick python python + callable use deprecate undeprecated use read discussion http://bugs.python.org/issue10518 python check object call attribute oft suggest types.functiontype inspect.isfunction approach exact thing come number caveat return false non python function builtin function example implement c python return false types.functiontype give surprising result proper way check property duck type object ask see fit duck sized container builtin type constructor build namespace e.g. functions generator method type module use types.functiontype isinstance call note use specific notion function need example reject zip class open build function different type random.shuffle method hide instance specific types.functiontype instance decompile bytecode inspect closure variable use types.functiontype need object callable function use callable python import isfunction inspect module accept answer time offer thought correct turn substitute callable python callable check field object test plain python equivalent suggest test correct time throw monkey wrench remove call class keep thing extra exciting add fake call instance notice callable callable return correct result hasattr wrong can_o_spam attribute use call instance subtle isinstance get wrong use check delete method abc.abcmeta cache result abc.abcmeta say possible way produce accurate result result use callable typeobject->tp_call slot method accessible way use callable follow return boolean pick common method python tool http://docs.python.org/dev/library/2to3.html suggest seem choose hasattr(x call method http://bugs.python.org/issue7006 callable(x return true object call python function exist python speak distinguish get class true type function true output isinstance work determine function try isinstance(b types.functiontype interested know call use hasattr(b call try course tell callable throw typeerror execute callable first place matter want detect look function function method build fun meth lambda exclude callable object object call method define try compare code check inspect module expression complete goal filtering function detect regular property object try use callable(x learn c++ familiar function object functor mean object call function c++ ordinary function function object function pointer object class define operator c++11 great lambda expression functor similarity python functor callable ordinary function callable lambda expression callable functional.partial callable instance class call method callable go question variable x want know point function want judge weather object act function callable method suggest @john feminella want judge object ordinary function callable class instance lambda expression xtypes.xxx suggest @ryan well choice define class ordinary function define functor functor list type list judge wether functor callable see callable judge functor type types.xxx type functor choose functor type suitable accept answer john feminella state proper way check property duck type object ask see fit duck sized container compare approach give wrong answer many function builtin libs distinguish function draw exhaustive comparable table type dynamic type creation name build type python documentation inspect inspect live object python documentation duck type preferred solution general purpose builtin function go step check builtin function user define funtion determine builtin function summary employ callable duck type checking function use types.builtinfunctiontype specify demand couple way come callable good solution want treat opposite way john feminella treat say proper way check property duck type object ask see fit duck sized container compare approach give wrong answer many function builtin treat proper way check duck see see duck several filter check seem duck surface type module plenty class detect function useful types.functiontype plenty other method type build type lambda type consider functools.partial object function simple way check function use isinstance condition type want make base class inherit unable python allow inherit class table class classify function function table kinght code work describe false is_function(partial class function function class preview try code preferred method check object function go duck typing absolute custom is_function(obj edit preferred method check object function count callable class instance function function define build lambda def partial think wrap good day function class call method example good way depend need know callable note put try execpt block arguable try python'y hasattr(x call x say hasattr accurate catch wrong typeerror example check call exclusive function check user define function attribute func_name func_doc work method way check use isfunction method inspect module check object method use inspect.ismethod class call method recommend solution note python class callable get function function mean standard function lambda use function class take name class instance compare solution use hasattr(obj call callable mention answer main drawback return true class instance class call method proper way check object user define function use isfunction need check type look inspect inspect live object python3 come type f = type lambda x yield true f function false think prefer isinstance f types.functiontype feel less want type f function work try bizarre combine @sumukh barve @katsu @tinnick answer motive grab list builtin function available disposal console option work follow previous reply come code callable time see value attribute consistent take attribute callable evaluate callable return true class rigorous isinstance type build function python check function need import output code go perform call value callable perform call catch typeerror follow repr way check work lambda works diy short function check input string cast input string return match name define think code compatible cross python version change add extra convert low case check content length format string cast function see function
find definitive answer know multiple init function python class solve problem suppose class call cheese number_of_holes property way create cheese object think way seem clunky say way none well magic value want complete freedom add parameter explain concept args kwargs change name http://docs.python.org/reference/expressions.html#call use num_hole none default fine go init want multiple independent constructor provide class method call factory method case default num_hole create object prefer solution post mention solution think worth mention completeness @classmethod approach modify provide alternative constructor invoke default constructor init instance create use new use type initialization select base type constructor argument constructor share code example answer excellent want use optional parameter pythonic possibility use classmethod generate factory style pseudo constructor think solution prefer constructor default value multiple overloaded constructor situation python support method overload complex case lot different constructor use different factory function cheese example want use gouda subclass cheese good idea implementation present cheese make interface user care many hole cheese internal go make cheese user code want gouda parmesean right use method implement function good encapsulation technique think pythonic way thing fit line duck typing ask gouda object care class specific cheese example agree many answer use default value signal random initialization static factory method relate scenario mind value alternative concise way call constructor hurt quality parameter name type information python functools.singledispatchmethod help accomplish many case flexible multimethod apply scenario relate post describe accomplish python library see example documentation show overload init ask appear principle overload member method apply show single dispatch available standard library require positional parameter type first argument sufficient distinguish possible overloaded option specific cheese example hold want random hole parameter give multidispatch support syntax use long method version distinguish base number type argument example use method detail order mypy goal put output note use num_hole none default check num_hole none randomize see different construction method warrant classmethod return instance cls answer default argument fun write fit bill multiple constructor use risk new method typical implementation create new instance class invoke superclass new method use super(currentclass cls).new(cls appropriate argument modify create instance necessary return new method modify class definition attach appropriate constructor method use inheritance go difference number hole gouda need different set member parmesan solve yearquarter class create create init tolerant wide variety input use init rest class look initial answer criticise basis special purpose constructor call unique default constructor post modified version honour wish constructor call default see straightforward answer example idea simple new try usage
reason prefer use map list comprehension vice efficient consider pythonic map fast case make lambda purpose use function map listcomp list comprehension case pythonista consider direct clear example tiny speed advantage map use function example performance comparison get reverse map need lambda case pythonism dislike word pythonic find pythonic elegant eye map filter similar function useful itertool module consider unpythonic term style laziness term efficiency functional programming construct map lazy fact lazy python mean python3 computer run memory lose unsaved datum try list comprehension note list comprehension lazy python choose implement non lazy python support lazy list comprehension form generator expression think syntax pass generator expression list constructor list(x range(5 brief contrive example list comprehension non lazy require memory use generator comprehension square bracket make thing obvious mess parenthese hand end verbose type x long keep iterator variable short list comprehension clearer indent code indent code break thing efficiency comparison python3 map lazy use datum know ahead time much datum need map python3 generator expression python2 python3 avoid calculate value last moment necessary outweigh overhead use map downside limit python oppose functional language get benefit access datum leave right order python generator expression evaluate order x[0 x[1 x[2 let say make function f map ignore laziness map force evaluation list get interesting result result form aaa bbb ccc perform circa-2010 intel workstation python b perform circa-2013 amd workstation python different hardware result seem map list comprehension comparable performance affect random factor thing tell seem expect list comprehension perform well generator expression map efficient generator expression assume value evaluate use important realize test assume simple function identity function fine function complicate performance negligible compare factor program interesting test simple thing f lambda x x+x skilled reading python assembly use dis module see go scene seem well use syntax list map class bit opaque disassembly make due speed test objective reason prefer pythonic require function lambda argument introduce new scope bite say fine say silly use variable name scope code xs scope move inner block different section code problem read problem maintenance development expect make mistake list comprehension elegant personal experience see other make mistake see happen enough time think worth pain go bug creep code use map filter prevent subtle hard diagnose scope relate bug forget consider use imap ifilter itertool appropriate situation map list comprehension behave python language take look follow python program expect print line print follow first time look square seem behave sequence element second time empty python language map return plain old list list comprehension language crux return value map python imap python list iterator element consume iterate iterator iterate list square look empty last print(list(square line summarize possible case guess zip unfortunate unnecessary overhead need indulge insist use list comprehension map great clarifie plan write asynchronous parallel distribute code prefer map list comprehension asynchronous parallel distribute package provide map function overload python map pass appropriate map function rest code modify original serial code run parallel find list comprehension expressive try map do former save mental load try understand complex lambda expression interview find offhand guido list lambda functional function thing regret accept python make argument un pythonic virtue python map iterator need keep mind need iterator list object @alexmartelli mention map fast list comprehension use lambda function present time comparison python cpythoni've use jupiter notebook timeit build magic command measurement ms = µs ns setup build function lambda function thing generator expression see pep-0289 think useful add comparison use list comprehension custom function use list(map builtin function use map run quick test compare method invoke method object time difference case negligible matter function question see @alex martelli response look follow method look list store variable val integer python int float point number float increase list size follow dummy class dummynum consider add method slot attribute simple optimization python define total memory need class attribute reduce memory size result plot state technique use make minimal difference code way readable particular circumstance case list comprehension map_comprehension technique fast type addition object short list visit pastebin source use generate plot datum time result perfplot project mine other note map return iterator constant time operation realize iterator list par list comprehension depend expression slight edge significant note arithmetic operation fast numpy input datum numpy array hex code reproduce plot try code @alex martelli find discrepancy map take amount time large range use list comprehension take lot time evident code consider unpythonic face performance issue relate usage map image source experfy see well list comprehension map function list comprehension take less time process record compare map function hope help good luck consider pythonic way use list comprehension map filter reason list comprehension clear map filter see comprehension require extra lambda expression map need comprehension allow filter map require filter allow filtering use case find start use map thought map slower comp due pass return argument find post believe use map readable flexible need construct value list read use map flexibility bonus thank answer performance bonus
follow dataframe need remove row line_race equal efficient way understand simple future bypasser mention df = try filter none miss value work work add solution useful use new pandas assessor solution replace original pandas lose assessor want delete row base multiple value column use drop row value line_race previous answer similar go use index method require use indexing method do similar precise manner use follow filter give value col example dataframe want remove row value b c column str good way boolean masking update pandas way give answer correct nontheless say use df.query('line_race = depend problem recommend way efficient way code look bit complex code mention answer alternate way thing efficient pandaic way use eq method compile run code accurate code try special character space column name write give code single string column name space special character access add way add way expand column example case need delete row value different column case use percentage want delete row value column mean optimal df many column various way leave various option use depend specificity use case consider dataframe store variable df option op case consider column value line_race follow work case recommend check follow option specify column name option tshauck approach end well option able specify column additional variation depend want refer column example use position dataframe indicate column follow follow login use custom lambda function option use pandas.series.map custom lambda function option use pandas.dataframe.drop follow option use pandas.dataframe.query follow option use pandas.dataframe.drop pandas.dataframe.query follow option strong opinion output use vectorize approach numpy.select convert dataframe regard efficient solution depend want measure efficiency assume want measure time execution way go measure time execution option one follow change depend dataframe one use requirement hardware note various suggestion use inplace true suggest read https://stackoverflow.com/a/59242208/7109869 people strong opinion suggest read want use pandas apply code miss value want consider pandas.dataframe.dropna use option additional way measure time execution recommend thread get time python program execution many option mention fact simple way mention previous answer mae pay much attention sorry case use notation pandas give inverse condition make much difference simple example complicated logic prefer use drop delete row straightforward use inverse logic example delete row a=1 b=2 c=3 scalable syntax understand handle complicated logic try use
comment answer question say sure functools.wrap ask question record stackoverflow future reference functools.wrap use decorator replace function word decorator say say function f replace function with_logge mean say print with_logge name new function fact docstre f blank docstre docstre write look pydoc result function list take argument list take args kwargs with_logge take use decorator mean lose information function serious problem functools.wrap take function use decorator add functionality copying function name docstre argument list wrap decorator follow code correct thing python alia g functools.update_wrapper(g f thing consequence g appear name docstre module name signature f. problem concern signature true follow wrapper chain default check use inspect.signature(g follow_wrappe false explain annoying consequence bit confusion functools.wrap decorator frequent use case develop decorator wrap function independent concept interested understanding difference implement helper library decopatch write decorator makefun provide signature preserve replacement @wrap note makefun relie prove trick famous decorator library reference use class function decorator trouble object attribute expect function example object attribute name specific issue hard trace django report error object attribute name class style decorator believe @wrap job create base decorator class class proxy attribute call function decorate create simple decorator check argument specify prerequisite know use decorator wrap comment explain bit clear link explain use @wrap follow wrapper function detail give link say functools.wraps convenience function invoke function decorator define wrapper function equivalent partial(update_wrapper wrap wrap assign assign update update decorator give call keyword functools.partial definition say partial use partial function application freeze portion function ’s argument keyword result new object simplify signature example partial use create callable behave int function base argument default bring conclusion give call partial pass wrapper function parameter partial end return simplify version i.e object wrapper function wrapper function source code wrap short functools.wrap regular function let consider official example help source code see detail implementation run step follow wrapper o1.__call__(wrapper checking implementation call see step leave hand side wrapper become object result self.func(*self.arg args newkeyword check creation o1 new know self.func function use parameter args right hand side wrapper 1st parameter check last step see right hand side wrapper return attribute modify need
shuffle list object try random.shuffle output random.shuffle work example object list note shuffle work place return none python mutable object pass function function mutate object standard return none say mutate object learn place shuffle problem problem seem forget copy list use sample(a len(a solution use len(a sample size see https://docs.python.org/3.6/library/random.html#random.sample python documentation simple version use return shuffle result new list documentation random.shuffle state shuffle sequence x place numpy popular library scientific financial application use work fine make sure set random method multiple list want define permutation way shuffle list rearrange item list apply list list numpy array simple create small utility package mpu consistent_shuffle function note take arbitrary number argument shuffle list liner userandom.sample(list_to_be_shuffled length_of_the_list example output alternative useful application want swap order function case use numpy array use random.shuffle create duplicate data array alternative use work numpy prefer method generic random.shuffle example use random.shuffle use numpy.random.shuffle print func(foo print return value func call foo shuffle none return type list modify place print workaround functional programming style want make follow wrapper function define function call shuffle sense sorted shuffle place print result none list use shuffle sample come random module make sure naming source file file work directory call random.pyc cause program try import local random.py file python random module go want go list split long list build function take list parameter return shuffle version list case need place shuffle ability manipulate seed snippet help remember shuffle sort randomised key shuffle process replacement occurrence item change least item list list number plan write shuffle rely library heavy lift example go list begin start element find new random position say put ’s value ’s value move element repeat process rest list use random.choice shuffle list code return randomized list length previous list hope help work fine try function list object print foo1 foo2 foo2 foo1 foo last random order
dataframe python use pandas column name year quarter create variable call period make year q2 help column string concatenate column string type convert first need join multiple string column use agg separator slow compact update timing graph pandas let test row df update new timing use pandas timing cpu gpu optimization sort slow timing use cpu gpu optimization answer contribution @anton vbr yield dataframe method generalize arbitrary number string column replace df[['year quarter column slice dataframe df.iloc[:,0:2].apply(lambda axis=1 check information apply method method cat accessor work cat allow add separator example suppose integer year period join multiple column matter pass list series dataframe contain first column parameter str.cat invoke first column series note pandas dataframe series null value need include parameter na_rep replace nan value stre combine column default nan use lamba function time allow work non string reformat value need generalise multiple column use lambda use create new column let suppose dataframe df column year quarter suppose want see dataframe concatenate year quarter follow print df see result dataframe want space year quarter remove answer good change df.map(str df.astype(str fast implementation find versatile efficient time test final sum(concat_df_str2 use result concat trans integer use zip quick graph solution use intermediate step compress column dataframe single column contain list value work string kind column dtype result summary solution concatenate combine column int str value new column use separator value column solution work purpose take many mention convert column string use operator combine string column get large performance improvement use numpy use assign method dataframe similar @geher answer separator example use .combine_first
directory store file want use class dir.py main.py import python class import class user user.py sub directory make empty file call init__.py directory file signify python ok import directory hold true file subdirectory put init__.py subdirectory use regular import statement dot notation level directory add import path directory name class previous prefix module name use subdirectory learn thank martineau comment order import class file directory write python python3.3 init__.py necessary current directory console directory python script locate work work call different directory contain case use work want import whole file class main.py class name class want import want call method class call use note empty init__.py file directory user.py dir.py include class work import import module access name want mix function class import function class code use wildchar import module code make simple understand step let go directory include step let make class1.py file class name class1 code step let make class2.py file class name class2 code step let make main.py execute use class2 different file step run program output python directory import file log.py import class sampleapp directory basic import file log.py import class sampleapp python suppose structure init__.py file put import foo import foo bar file purpose init__.py file include optional initialization code run different level package encounter put init__.py initialized package load ' m sure work use pycharm build file_in_same_dir import class_name ide complain seem work use python python3 import sible import user import nephew import user filename.py folder import use python3.7 python3 use brief create file init__.py class directory import script follow import case import select class import directory import sub directory directory contain file file directory import
try install python package dulwich get cryptic error message happen try instal package update comment point instruction dangerous consider use visual c++ express edition purpose build microsoft visual c++ compiler python detail use original answer original error message mean require version visual c++ instal window installation run setup.py package installation python search instal visual studio trick python use new visual studio set correct path vs90comntool environment variable call setup.py execute follow command base version visual studio instal warning note answer unlikely work try compile python module see building lxml python window detail find solution exact problem error instal amara mingw32 instal distutil need configure edit create exist distutils.cfg file locate c:\python26\lib\distutils\distutils.cfg run amara make sure environment set open new cmd.exe install compile version http://www.lfd.uci.edu/~gohlke/pythonlibs/ run display version vc++ compile example show important use correspond version visual c++ compiler python compile distilutils get_build_version prevent mix version piotr warning use table below[1 match internal vc++ version corresponding visual studio release download install correspond version visual studio c++ previous step additional note specific version vc++ list bit compiler download visual studio c++ express edition bit compilers[2][3 download windows sdk window .net framework sp1 accord microsoft instal visual studio sp1 removed compiler librarie vc++ case download visual c++ sp1 compiler update need visual studio download visual studio c++ build tool need visual studio ide download build tool visual studio suggestion bit python installation want use virtualenv create separate python environment use time mess path choose python version use accord @srodriguex able skip load batch file step copy batch file python search follow answer work follow step work open cmd.exe try instal require c extension run follow batch file load vc++ compiler environment session environment variable path compiler execute bit compiler note bit window install c:\program files\ expect c:\program file x86)\microsoft visual studio bit compiler c:\program file x86)\microsoft visual studio note native bit compiler program file ask wonder difference vcvars64.bat vcvarsx86_amd64.bat difference amd64 x86_amd64 former native bit compiler tool latter bit cross compiler run bit window installation update reason get error unexpected time series character need check path variable extraneous character extra quotation stray character batch file go able update session path make sense first place go get follow message depend version vc++ command run bit compiler tool set environment use microsoft visual studio 20xx x86 tool bit compiler tool set environment use microsoft visual studio 20xx x64 tool run setup python setup.py install pip install pkg name hope cross finger planet align vc++ cooperate go python module part write c speed try install package pip setup.py compile c c++ source box pip assume compiler microsoft visual c++ instal see cryptic error message error unable find vcvarsall.bat prescribe solution install c compiler microsoft visual c++ mingw open source project instal configure difficult edit microsoft publish special c++ compiler python easy solution use christoph gohlke window installer popular python package build installer python bit bit download http://www.lfd.uci.edu/~gohlke/pythonlibs/ think error unable find vcvarsall.bat cryptic unhelpful message comment bug replace helpful user friendly message comparison ruby ship package manager gem offer quasi official c c++ compiler devkit try install package see helpful friendly useful message update path include build tool download devkit follow instruction read rant python packaging https://stackoverflow.com/a/13445719/284795 need install microsoft compiler compatible compiler use build python mean need visual c++ new tweak microsoft supply bundle compiler header able compile python extension memorable url http://aka.ms/vcpython27 small package mb download installable admin privilege require name little misleading compiler work python version compile visual c++ python start python interactive prompt print sys.version look msc version stre msc v.1500 use tool original announcement distutil list microsoft release compiler package python make easy people build distribute c extension module window microsoft visual c++ compiler python a.k.a vc9 available http://aka.ms/vcpython27 package contain tool header require build c extension module python bit bit note extension module require 3rd party dependency openssl libxml2 include version python build visual c++ support python advertising work fine note need setuptool new instal list system requirement download page project installing use setuptools.setup distutil auto detection work microsoft state want keep url stable automate script reference problem tell story hoping help else issue save couple hour spend mingw g++ gcc python windows box try install pycrypto start error run setup.py install solve google error specify mingw compiler choice problem get different error turn anti virus block execution compile disable anti virus resident shield go next error solve install old version mingw edit python directory remove instance cygwin start work look look compiler try mention compiler type mingw32 msy python window solution work create distutils.cfg locate c:\python27\lib\distutils\distutils.cfg contain deal mingw recognizing cygwin flag remove flag c:\python27\lib\distutils\cygwincompiler.py line look look file package try install old package import distutils.core.setup setuptools.setup run combination factor microsoft visual c++ compiler python http://aka.ms/vcpython27 old package use distutils.core.setup try python setup.py build use pip use recent version pip force monkeypatch package use setuptool call distutil use pip python setup.py build build process use distutils.core.setup know compiler install location step open appropriate visual c++ command prompt open start menu start screen search visual c++ bit command prompt python bit visual c++ bit command prompt python bit run command prompt say visual c++ title bar step set environment variable set environment variable command prompt open reference http://bugs.python.org/issue23246 step build install cd package want build run python setup.py build python setup.py install want install virtualenv activate build interested follow work py2exe package window bit portable python visual studio express window sdk window .net framework spend day figure fix problem python bit version python v3.4.3:9b73f1c3e601 feb msc v.1600 bit amd64 win32 solution hard reading read first solution help try pip install numpy receive follow error change mfinfo none c:\python34\lib\distutils\msvc9compiler.py https://stackoverflow.com/a/23099820/4383472 take long several minute numpy compile think error solution easy know approach mention vote answer let repeat go work understand good way use precompile binary http://www.lfd.uci.edu/~gohlke/pythonlibs/ future small chance need package version package site contain installation process quick way example install numpy encounter issue try install numpy library python solution install vs2015 vs2008 none compatible python new version python dependency new version make sure c++ common tool instal visual studio want run pysph window python get find distutil solution follow install microsoft visual c++ python @michael suggest window instal username andreas set environment variable vs90comntool installation path visual c++ python see path work modifiy module file msvc9compiler.py find function follow modification replace line vcvarsall.bat reside case check vcvarsall.bat installation use link download install visual c++ build tool download install visual c++ instal visual studio installation complete retry pip install get error test follow platform version try answer find work use windows instal visual studio case vcvarsall.bat file locate c:\program file x86)\microsoft visual studio 11.0\vc select file copy go directory c:\program file x86)\microsoft visual studio paste file download free visual c++ express edition http://go.microsoft.com/?linkid=7729279 set vs90comntool environment variable installation build compatible compiler mention comment answer question go detail visual c++ right thing build change window build python move new version visual studio building lxml python window problem use python window x64 package need suitable exe wheel use system require workaround detail tldr bottom use info jaxrtech answer determine need visual studio c++ sys.version return msc v.1600 instal visual c++ express link answer http://go.microsoft.com/?linkid=9709949 instal update read mistake original version express instal time update vcvarsall.bat present new error installing package raise u'path stackoverflow question error error build instal c module python determine answer express install bit compiler get bit compiler install window sdk see http://msdn.microsoft.com/en-us/windowsserver/bb980924.aspx install installer return error installation fail return code find solution follow link http://support.microsoft.com/kb/2717426 short new version x86 x64 microsoft visual c++ redistributable instal conflict one sdk installer need uninstalle first sdk instal noticed vcvars64.bat exist c:\program file x86)\microsoft visual studio subfolder vcvarsall.bat run vcvars64 batch file python package install forgot error show time find instruction follow instruction instal express sdk instal sdk sp1 miss header file fix create vcvars64.bat content call setenv /x64 paste instruction lose step download visual studio express http://www.microsoft.com/visualstudio/en-us/products/2010-editions/express good place start download installer run vc_web.exe need sql additional download need windows sdk bit compiler want bit build support http://www.microsoft.com/en-us/download/details.aspx?id=8279 good start point download want run winsdk_web.exe download default install download install windows sdk sp1 update http://www.microsoft.com/en-us/download/details.aspx?id=4422 fix miss header file vs2010 sp1 http://www.microsoft.com/downloads/en/confirmation.aspx?familyid=75568aa6-8107-475d-948a-ef22627e57a5 bloody hell fix miss batch file vs2010 express get absurd c:\program file x86)\microsoft visual studio create vcvars64.bat follow need run administrator call setenv /x64 python package install recall error find instruction copy use special sdk command prompt see https://mail.python.org/pipermail/distutils-sig/2012-february/018300.html mind question notice item menu programs->microsoft window sdk v7.1 ->windows sdk command prompt run batch job appear set work environment compiler prompt type setup.py build setup.py install open windows sdk command prompt instruct use run easy_install python package last success call import setuptool monkey patch distutil force compatibility visual studio call vcvars32.bat setup virtual environment prevent common error compiler throw file locate c:\program file x86)\microsoft visual studio\2017\community\vc\auxiliary\build\vcvars32.bat setup script use compile file note use 3rd party module send2trash step fix issue try create setup cython extension reason distutil expect file vc dir vc++ python tool root fix remove line productdir vc productdir step fix issue try many solution work install microsoft visual studio express c++ get issue python module write c yenc issue ms note python build ms vs version fact free hard find ms promote msdn official direct link work check https://stackoverflow.com/a/15319069/2227298 download links mingw instal work force pip build use mingw compiler microsoft see https://github.com/pypa/pip/issues/18 detail last post microsoft visual c++ compiler python http://www.microsoft.com/en-us/download/details.aspx?id=44266 solution easy way solve install vcpython27 package open powershell know find microsoft visual c++ compiler python read typical error message receive need compiler package unable find vcvarsall.bat hope help exhaustive list ms vс++ version installation variation support distutil setuptool use find https://wiki.python.org/moin/windowscompiler specify vc++ version require official win32 python release note mingw support see detail brief get problem solve moment google tell install microsoft visual c++ compiler python install tool visual c++ reditributable help try install visual c++ express edition problem go try install visual c++ express edition look install pyodbc windows box visual studio instal option install pyodbc use binary distribution useful administrator privilege machine work try set virtualenv step answer give @monkey correct one incomplete case use mingw select c++ development tool suggest mingw installation process get path set env complete answer step edit create exist file locate c:\python26\lib\distutils\distutils.cfg make sure environment variable set open new cmd.exe python dependency visual studio instal visual c++ express fix problem tricking use install happen work use easy_install pip work error find silly helpful error message go continued problem c compiler available surprising end work upgrade pip setuptools recent version hope help fast solution python solution install vc++ use compile https://www.visualstudio.com/en-us/downloads#d-2010-express python version msc v.1600 bit intel win32 work fine windows8 go http://docs.continuum.io/anaconda/install.html#windows-install instruction install anaconda provide gui silent install majority package seem cause issue http://www.scipy.org/. aware solution https://www.microsoft.com/en-us/download/details.aspx?id=44266 see option python download instal able import majority package need scipy hope help people take minute scour post site edit want note python34 link gui page os symbol install visual studio community edition python set vs100comntools=%vs140comntools% pip install xx try answer work use windows instal visual studio case add vcvars64.bat c:\program file x86)\microsoft visual studio vcvars64.bat install microsoft sdk install rerun pip install dulwich follow instruction instal visual studio express http://www.microsoft.com/visualstudio/en-us/products/2010-editions/visual-cpp-express follow advice http://blog.python.org/2012/05/recent-windows-changes-in-python-33.html help error try install pandas window search several solution end use wheel upgrade pip new version second install wheel third download whl file package install believe wheel good way install python package window http://www.stickpeople.com/projects/python/win-psycopg/ instal appropriate file link fix issue mention jason erickson jerickso@stickpeople.com manage page window user find easy way download binary package website http://www.lfd.uci.edu/~gohlke pythonlibs example autopy3‑0.51.1‑cp36‑cp36m‑win32.whl(cp36 mean python download install pip install location file see answer use vswhere think correct way visual studio run vsvars64.bat guess similar vsvarsall run_process bunch thing boil good exhaustive answer issue give https://blogs.msdn.microsoft.com/pythonengineering/2016/04/11/unable-to-find-vcvarsall-bat/ case enough find suitable package require python dependency install pip last case install microsoft compiler install package source code
way return list subdirectorie current directory python know file get list directory mean immediate subdirectory directory tree way use yield tuple subdirectory th first entry tuple directory name give subdirectory note second entry tuple list child directory entry first position use save use give immediate child directory see solution post use include get immediate subdirectory python use glob.glob forget trail need several os.path.join get full path wish python give complete path subdirectory want name subdirectory use f.name https://docs.python.org/3/library/os.html#os.scandir ot case need subfolder file look function glob return list subfolder file sub-)subfolder https://stackoverflow.com/a/59803793/2441026 case want subfolder return list subfolder full path fast lot fast glob analysis function want get immediate subdirectory folder use want get subdirectory nest one use fast fast_scandir function use top level subdirectorie hundred time slow os.scandir result test w7x64 python 3.8.1 python introduce pathlib module standard library provide object orient approach handle filesystem path list subdirectory path globbe use pattern note single glob pattern include file directory non get directory trail append work use glob library use glob pathlib path('./').glob match path glob.glob('**/ recursive = true pathlib available python pathlib2 module pypi need recursive solution find subdirectory subdirectory use walk propose need current directory child directory combine prefer use filter https://docs.python.org/2/library/functions.html#filter matter taste implement use python os walk http://www.pythonforbeginners.com/code-snippets-source-code/python-os-walk/ get list subdirectory files python use os.listdir(path stumble problem use python window unc path variant environment pathlib new python make work path different os easy https://docs.python.org/3.4/library/pathlib.html question answer long time recommend use pathlib module robust way work window unix os get path specific directory include subdirectory copy paste friendly ipython output print(folder thank tip guy run issue softlink infinite recursion return dir softlink want stinkin soft link render dir softlink couple simple function base @blair conrad example build eli bendersky solution use follow example path directory want traverse full path accounting path \\subfolder easy way answer seem exist ' ve similar question find good answer python user havlock add use seem solution use add first non recursive solution list subdirectory root directory recursive version look keep mind entry.path wield absolute path subdirectory case need folder name use refer os.direntry additional detail entry object use os walk list subdirectorie right file tree pathlib new version function return list subdirectory give file path search entire file tree use filter function p os.listdir('path/ function give parent directory iterate directory print filename found useful get list folder use pathobject object get array get list subdirectory iterate arr print middle array print subdirectory get file join multiple solution end use lot nice answer look simple way get list file folder take advantage offer find linux mac fast work create directory tree list directory folder use pathlib library path.relative_to(directory).part get element relative current work dir class able get list file folder sub folder give directory sample directory look result obtain need name immediate folder directory work window
explain method slice different see doc see answer find unable understand different seem interchangeable large part low level slice example say want get row dataframe work present case distinction use clear time want know function differ remove pandas care main distinction method loc get row column particular label iloc get row column integer location consider series character non monotonic integer index difference similaritie s.loc pass various object loc label query capability extend integer index worth highlight couple additional example series index contain string object loc label base fetch first value series use s2.loc['a slice non integer object datetime index pass exact date time fetch label example fetch march april loc iloc work way dataframe series useful note method address column row give tuple first element use index row exist second element use index column consider dataframe define example want mix label positional indexing method row column combine capability loc iloc example consider follow dataframe good slice row include c take column achieve result use iloc help method get_loc index method mean get position label index note slice iloc exclusive endpoint add value want row iloc work base integer positioning matter row label get first row last row use column retrieve 3rd column combine get intersection row column hand use name index let set data frame string row column label get row second row date column worth point default row column index dataframe integer case iloc loc work way example equivalent non numeric index string datetime raise error column retrieval use data frame getitem suppose want mix position name indexing indexing use name row position column clarify mean select datum frame create data frame string row index integer column index think worth mention pass boolean vector loc method example return 1st 3rd row df equivalent df[b selection use assign boolean vector opinion accept answer confusing use dataframe missing value term position base prefer integer location descriptive stand key word integer .iloc need integer see detailed blog series subset selection deprecate focus difference talk difference important understand dataframe label identify column index let take look sample dataframe word bold label label age color food height score state use column label jane nick aaron penelope dean christina cornelia use index primary way select particular row dataframe indexer indexer use select column easy focus row indexer use set bracket follow name make selection talk indexer select data index column label sample dataframe provide meaningful name value index many dataframe meaningful name default integer length dataframe different input use select single row stre select single row datum place index label bracket follow return row data series select multiple row list strings return dataframe row order specify list select multiple row slice notation slice notation define start stop step value slice label pandas stop value return follow slice aaron dean inclusive step size define default complex slice take manner python list let turn row column data dataframe integer location define addition label display output integer location number row column leave begin different input use select single row integer return 5th row integer location series select multiple row list integer return dataframe third second last row select multiple row slice notation excellent ability ability select row column example column return selection choose column type input row need separate row column selection comma example select row jane dean column height score state use list label row slice notation column similar operation use integer use make selection label integer location useful confusing ambiguous time deprecate event make selection mix label integer location make selection label integer location instance want select row nick cornelia column use convert integer label follow convert index label integer get_loc index method indexer boolean selection instance interested finding row wher age return food score column follow replicate .iloc pass boolean series convert boolean series numpy array possible use column selection select row use colon people familiar primary purpose dataframe indexing operator select column string select single column series list string select multiple column dataframe use list select multiple column people familiar slice notation use selection happen row label integer location confuse use work explicitness select row preferred indexing operator unable select row column use indexing pull portion data essence difference allow label base indexing .iloc allow position base indexing confuse keep mind .iloc base index start position base label start l suppose base index label position analogous python dictionary base indexing accept boolean array slice list label none work python dictionary .iloc lookup base index position pandas behave python list pandas raise indexerror index location follow example present illustrate difference let consider follow series .iloc example example string index value fail indexing integer example select first row table df1 dataframe select first b row table df1 dataframe example illustrate difference index base access get row sort dataframe row index index position base access get row index df sort
datum list list list tuple want sort 2nd element subset mean sort common way store tuple list list default sort mode ascending sort descend order use option reverse true sort multiple criterion instance second third element tuple define lambda return tuple describe priority instance want add stephen answer want array way comment add line result follow stephen answer use completeness dsu decorate sort undecorate pattern list comprehension note python sort howto unnecessary python key function become available order sort list tuple word count descend order word alphabetical order use method give result lambda itemgetter tup increase modest percent ipython session @stephen answer point example well visualization shout ready player fan key function call transform collection item comparison compareto method java parameter pass key callable use lambda create anonymous function callable syntax lambda word lambda follow iterable name single block code example sort list tuple hold info abt time certain event actor name sort list time event occurrence 0th element tuple note s.sort([cmp key reverse sort item place use code depend element want put sort tuple simple
need parse rfc string python datetime type find strptime python standard library convenient good way python dateutil package dateutil.parser.isoparse parse rfc datetime string question iso date time string comply rfc one utc offset one represent date python dateutil package dateutil.parser.parse compare isoparse strict forgiving attempt interpret string pass want eliminate possibility misread use strict function dateutil.parser.isoparse full iso-8601 format parser fromisoformat see latter function docs cautionary caveat see answer datetime standard library python function inverting datetime.isoformat classmethod datetime.fromisoformat(date_stre return datetime corresponding date_stre format emit datetime.isoformat function support string format(s yyyy mm dd[*hh[:mm[:ss[.mmm[mmm]]]][+hh mm[:ss[.ffffff match single character caution support parse arbitrary iso string intend inverse operation datetime.isoformat example read caution docs note python py3k f character catch microsecond see issue python caveat get use datetime.datetime.strptime parse rfc datetime awkward need try different format string order support datetime fractional number second 01t12:12:12z valid rfc long single fiddly bit logic work caveat note approach try module several option mention page wiki start python strptime support colon delimiter utc offset source use edit point martijn create datetime object use isoformat use edit point mark amery add try block account miss fractional second exact error get follow split input string add microsecond datetime try simple option comment replace z +00:00 use python + fromisoformat strptime parse z character utc fromisoformat x40 see strptime python x64 window day arrow use third party solution use python dateutil module documentation find ciso8601 fast way parse typical iso timestamp support subset iso particular support week date ordinal date uncommon part iso standard full support rfc dedicated function parse rfc date particular example usage github readme show speedup library list answer personal project involve lot iso parse nice able switch call go fast edit become maintainer ciso8601 want use dateutil try function test result work django provide dateparse module accept bunch format similar iso format include time zone use django want use library mention adapt django source code dateparse project code parser iso standard put github https://github.com/boxed/iso8601 implementation support specification duration interval periodic interval date support date range python datetime module test include work stdlib python assume timestamp utc example ' m author iso8601util find github pypi parse example straightforward way convert iso date stre unix timestamp datetime.datetime object support python version instal third party module use date parser sqlite output django parse_datetime function support date offset use parse iso date field entire project way use specialized parser iso-8601 use isoparse function dateutil parser output function mention documentation standard python function full feature iso parser dateutil.parser.isoparse available third party package dateutil pandas use recommend timestamp pandas rant unbelievable need worry thing date string parse iso allow many variation optional colon dash present ccyy ddthh |ss[z||(+||-)hh| mm want use strptime need strip variation first goal generate utc datetime object want basic case work utc z suffix want handle timezone offset use follow convert variation variable delimiter make consistent easy parse system support z strptime directive see valueerror z bad directive format y%m%dt%h%m%s.%f%z offset time z note z work system python version depend c library support vary system python build type jython cython maya datetime human ™ author popular request http human ™ package python dateutil throw exception parse invalid date string want catch exception work standard library try miss gm version time.mktime thank great mark amery answer devise function account possible iso format datetime datetime.fromisoformat use parse iso format bar support fractional hour minute method support format emit datetime.isoformat try work negative timezone work fine python test note differ precision microsecond get digit precision machine ymmv note look string end z parse use z.
want find follow give date datetime object corresponding day week instance sunday first day monday second day input today date output friday use weekday documentation return day week integer monday sunday like date english like date english read https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior use date.weekday monday sunday monday sunday solved codechef question solution import date 1700/1/1 date string use pandas timestamp output simple code snippet solve problem output solution date datetime object say timestamp string variable yyyy hh ss step convert datetime function blow code step extract require feature create new column fild- hour month day week year date datetime library give error strptime switch dateutil library example use output get mon want output monday use work problem use datetime library want store weekday name weekday number format use datetime library cause problem problem great cand go simple syntax hope help assume give day month year reason avoid use datetime module function work note change julian gregorian calendar assume occur true calendar interest change line year need day week comment recommend code~ reliant datetime module calendar alternative example provide day code give day style python liner give real day number sunday monday get sunday saturday simple solution question output convert list little endian string date datetime take help pandas mention problem execute line jupyter notebook output use weekday weekday_name want weekday integer number format use output want name day sunday monday friday use output friday date column pandas dataframe suppose pandas dataframe date column pdexampledataframe['dates'].head(5 want know name weekday monday tuesday use .weekday_name follow output want integer number weekday date column use output look want generate column range date date generate column go assign week day week day follow use date range output follow week day vary correspond monday sunday simple straightforward mention option u chinese user u use package https://github.com/lki/chinese-calendar fresh way sunday use canlendar module python3 implementation code enter date format dd mm yyyy change input format change order change delimiter use code
way use python standard library determine function call last day give month standard library support dateutil package support calendar.monthrange provide information calendar.monthrange(year month return weekday first day month number day month specify year month seem simple way want import calendar module simple step function output edit see @blair conrad answer clean solution easy dateutil.relativedelta day=31 return last day month install dateutil edit see answer well implementation leave case interested see roll calculator @john millikin give good answer add complication calculate first day next month follow elegant figure last day month give date life try use get last date month idea get first day month use relativedelta go month day get last day month want python undocumented calendar.monthlen(year month function equivalent document calendar.monthrange(year month)[1 call solution use function get last date month explain break part get number day current month use monthrange blair conrad mention solution second get last date help replace e.g combine mention top get dynamic solution willing use external library check http://crsmithdev.com/arrow/ get last day month return date object manipulation use pandas easy way use pandas line solution way take first day month add month discount day answer extra package require get first day next month subtract day way function line example easy reliable way find use relativedelta https://dateutil.readthedocs.io/en/stable/relativedelta.html month_end = datetime value month > relativedelta(day=31 give last day simple solution use standard datetime library simple way calculate end date simple logic subtract day next month write custom method call return end date month pass date function return end date month easy way import calendar get first day next month subtract day output ps code run compare import calendarapproach see output code assume want date last day month dd part entire yyyymmdd date simple way use datetime date math subtract day first day next month use get number day month take leap years account update date quick benchmark show first version use dateutil.relativedelta months=1 day=1 shift dt first date next month days=-1 shift new date previous date last date current month address main question nice trick get last weekday month use calendar.monthcalendar return matrix date organize monday first column sunday last whole thing shave weekend column throw date fall month indicate max ignore use numpy.ravel necessary hate rely mere convention numpy.ndarray.max flatten array tell axis calculate understand version take care leap year want make small function good starting point know rule leap year output print last day current month example 15th output different output many day current month great want check last day month run daily cron job import calendar time import gmtime strftime lastday calendar.monthrange(int(strftime("%y gmtime gmtime())))[1 today gmtime lastday today output false last day month output last day month prefer way approach pass date range use solution base python lambda next_month lambda find tuple representation first day next month roll next year month_end lambda transform date dte tuple apply next_month create new date month end next month first day timedelta(days=1 code get_last_day_of_month(dt give date string format yyyy dd consider unequal number day different month standard solution work month code add month select date navigate first day month subtract day date work take reference https://stackoverflow.com/a/66403016/16607636 need get first day month time want import special library write work fine february december january problem date matter today last day month date matter prefer use condition logic simple tomorrow first day next month today last day actual month example condition timezone awareness important think readable answer manage find interesting solution possible get last day month provide relativedelta args day=31 option use recursive function next day different month current day last day month next day month try use next day use datetime month package mind use pandas use simple
break long condition ifs several line obvious way appeal action blend condition natural way use correct python indentation space moment use recommend alternative way need use space second conditional line use forget whitespace flexible think ugly lose bracket style guide discourage give differentiation think prefer style guide recommend use bracket resort follow degenerate case shave character make clear subtlety condition prefer style large condition champion use vertical whitespace make condition visible allow clean expression complex condition trade bit vertical real estate clarity worth improve much personal take long condition view code smell suggest refactore boolean return function method example find way make multi line condition look good find content refactore hand perturb aesthetic sense act incentive refactoring conclusion multiple line condition look ugly incentive avoid suggest move keyword second line indent line contain condition space solve problem code keyword first word line make condition lot readable reduce number space distinguish condition action seem worth quote pep python official style guide comment issue modest length conditional part require write multiple line worth note combination character keyword single space opening parenthesis create natural space indent subsequent line multiline conditional produce visual conflict indent suite code nest -statement indent space pep take explicit position distinguish conditional line nest suite -statement acceptable option situation include limited note limit quote approach suggest style guide one suggest answer question acceptable remember accept put long condition list let work add mean long statement search code find appropriate example first example come mind let say happen run quirky logic display certain page depend many variable english log user administrator teacher regular teacher student look fine reading statement lot work assign logic label make sense label variable name seem silly condition want display item display teacher panel user access specific panel default try write condition use variable store label logic end messy read logical statement repeat reasonable exception remember repeat dry add @krawyoti say long condition smell difficult read difficult understand use function variable make code clear python prefer use vertical space enclose parenthesis place logical operator begin line expression look float condition need evaluate loop use local function plain simple pass pep8 check recent time prefer function mix comparison work additional advantage fail early generator comprehension remember pass single iterable pass n argument correct note many comparison many comparison combine generator comprehension example generator comprehension modify identifier fix width name representative real code least real code encounter belie example readability work important first second line long condition former seem common case rewritten temporary variable difficult obvious readable preserve short circuiting and"/"or rewrite find question blog post c++ include style identical ' m surprised see preferred solution keyword get highlighted editor look different do_somethe nice many condition type case evaluate condition show example insert additional blank line condition body rest canonical way p.s use tab space fine tune way closing brace colon mark end condition know thread old python code pycharm complain case pep8 warn indent line indent next logical line actual code indent time wish python bit bullet go curly brace wonder many bug introduce year due accidental mis indentation respondent provide multi conditional statement ugly problem present solve problem thing pep answer repulsive readable approach want eat word convince multi conditional print eat amusement think @zkanda solution good minor twist condition value respective list use list comprehension comparison make thing general add condition value pair want hard code statement write legibility throw solution iand operator random idea completeness sake work use try dictionary option complicated find useful dunno work option consider way last test concept go want go record time thing use method present comparison lot place method enhance readability make feel bad fact kind hacky struggle find decent way come idea silver bullet matter taste find merit solution compare other see get extra space indentation bool allow condition line body statement indent clear(ish way keep benefit short circuit evaluation boolean operator course add overhead function call argue function return argument use bool say idea taste funny enough writing thinking problem come idea remove overhead function call indicate enter complex condition use extra pair parenthesis say give nice space indent sub condition relative body statement example look bell ring head say complex thing go know parenthesis help readability condition appear enough show go stop read complex proposal see hope help split line add condition time way least separate clutter pack condition list smth find long condition short code body case double indent body clear reason indent multiple case see aligned opening delimiter http://google-styleguide.googlecode.com/svn/trunk/pyguide.html?showone=indentation#indentation approach make easy add condition change statement append condition list use condition execute multiple statement write else example statement thank work pardon noobness happen ' m knowledgeable python find similar scripting object bim modeling adapt algorithm python problem find double sided bypass problem script go pro method script readable script maintain hope help
xrange fast idea fast proof anecdotal different python range create list create list memory element xrange sequence object evaluate python range create list create list memory element xrange generator sequence object evaluate true python range implement python xrange generate list remember use timeit module test small snippet code use range deal huge list see time wise list entry extra second corey point python xrange go range give nice iterator behavior xrange store range param generate number demand c implementation python restrict args c long note python range behave xrange limitation minimum maximum end point xrange return iterator keep number memory time range keep entire list number memory spend time library reference familiar find answer question important first chapter builtin object type advantage xrange type xrange object take amount memory matter size range represent consistent performance advantage way find quick information python construct docstre help function doc read function similar range return xrange object list opaque sequence type yield value correspond list store advantage xrange range minimal xrange create value ask large range use memory starve machine range ’s element use loop terminate break find advantage xrange range simple example example reflect well case xrange look follow case range slow compare xrange range create list 100000000(time consume xrange generator generate number base need iteration continue implementation range functionality xrange do xrange happy code range create list create list memory element xrange generator evaluate bring advantage optimization reason range create list value start end example become expensive operation large range xrange hand optimise compute next value need xrange sequence object create list value range range return list number hold whole list memory xrange range return list return object generate number range demand loop fast range memory efficient xrange object iterator generate number demand.(lazy evaluation range(x return list number x use loop range slow fact range big index range range(x.y print list number x xrange(x returns xrange(x use loop xrange xrange small index range xrange print xrange(x keep number use loop work much difference use loop difference printing answer mention python eliminate 2.x range rename 2.x xrange range use different type doc say range object little behavior support index iteration len function + range full sequence support extended slice method collections.abc.sequence semantic list least pypy implementation exist constant time implementation index count method operator long pass integer mean write r reasonable horrible idea fact issubclass(xrange collections.sequence return true bug fix backporte python range(x return list create memory x elements xrange(x return xrange object generator obj generate number demand compute loop(lazy evaluation loop fast range memory efficient testing range xrange loop know use timeit hack memory use simple list comprehension example find follow give use xrange loop snippet testing comment slow instance xrange well example xrange range python work user difference come talk memory allocate use function use range allocate memory variable generate recommend use large variable generate xrange hand generate particular value time use loop print value require range generate entire list return xrange generate number list demand xrange use iterator generate value fly range return list range return static list runtime xrange return object act generator value generate require use ps python 3.x range function = python xrange function explain want see use python3 open resource monitor window execute follow command check change use memory insignificant run follow code take big chunk memory use convince try use python replace range xrange first code list(range range help doc python python difference apparent python range return list xrange return xrange object iterable python range become xrange python xrange remove range python function old range function available python return instance list object contain element specify range implementation inefficient come initialise list range number example range(1000000 expensive command execute term memory time usage require storage list memory range python xrange python python introduce new implementation range new implementation available python xrange function range exploit strategy know lazy evaluation create huge list element range new implementation introduce class range lightweight object represent require element give range store memory sound generator concept lazy evaluation different example consider follow requirement scanning print n item range xrange works follow range create new list memory take whole n n+1 print xrange create iterator instance scan item keep current encounter item memory utilise amount memory time case require element beginning list save good amount time memory range return list xrange return xrange object take memory irrespective range size case element generate available iteration case use range element generate available memory difference decrease small argument range xrange case xrange(100 efficient range -range populate mean number range occupy memory xrange -xrange generator come picture want range number want store want use memory efficient list(xrange equivalent range list xrange finish sequence list xrange object see post find difference range xrange range return think list consecutive integer define length beginning xrange return xrange object act great deal iterator
seem simple way efficiency perspective beat high version python use follow code perform raw string operation c lookup table beat write c code speed worry option fast s.replace char perform non pure python approach regexe string.translate see timing type problem low level possible pay time code give follow result regular expression simple enough know convenience usage sum note stripe punctuation string python python refer answer detailed description python python simple different way familiar family string.punctuation ascii correct slow way use unicodedata module generalize strip type character strip character ~*+§$ punctuation depend point view use python str python unicode value str.translate take dictionary codepoint integer look map map none remove remove punctuation use dict.fromkey class method make trivial create mapping setting value none base sequence key remove punctuation ascii punctuation table need big see j.f sebastian answer python version string.punctuation miss loads punctuation mark use real world solution work non ascii punctuation believe good way remove punctuation string python use unicode character property read wikipedia see answer use regex remove character word character \w number character \d follow whitespace character \s liner python good solution function write efficient simple add remove punctuation desire liner helpful strict case update rewrote @brian example python make change move regex compile step function think time single step need make function work use distribute computing regex object share worker need step worker curious time different implementation maketran python add method use set take advantage intersection function reduce number iteration complete code result solution regex none use slow look simple solution get easy way use regex try question lot specific approach take come solution simple interpretation problem remove punctuation note solution present account contract word hyphenate word anal retentive debate treat punctuation account non english character set specific mention question argue space punctuation correct make sense context question hand supply edit select answer update work python translate approach efficient option trivial transformation credit original heavy lifting @brian thank @ddejohn excellent suggestion improvement original test consider unicode code check python3 deal unicode string suggest use pypi regex module support unicode property class \p{x \p{x posix character class name install package type pip install regex pip3 install regex terminal hit enter case remove punctuation symbol letter digit whitespace use see python demo add whitespace \s pattern character class serious natural language processing nlp let library spacy handle punctuation tokenization tweak need example handle hyphens word exceptional case abbreviation begin end quote urls nlp useful separate contraction let let process remove stop word text file use python use function
python give ability create private method variable class prepende double underscore name myprivatemethod explain deal explain little get create class public method private method instantiate next call public method try call private method look good unable call fact private run dir object reveal new magical method python create private method new method name underscore follow class name follow method name much encapsulation case hear python support encapsulation try give name scrambling use ensure subclass override private method attribute superclass design prevent deliberate access example course break different class name come java python hate scared death today thing love python love platform people trust feel build impenetrable wall code encapsulate language api bug figure go wrong unable work need method private python attitude think understand situation read say good luck remember encapsulation weakly relate security keep kid lawn pattern use make code base understand dive python private function speak private method accessible outside class accessible python private internally name private method attribute mangle unmangled fly make seem inaccessible give name access parse method class name mp3fileinfo__parse acknowledge interesting promise real code private method private reason many thing python privateness matter convention force phrase use consent adult prepende single underscore expose double underscore hide tell user class intend member private way trust behave respect compelling reason debugger code completion private implement extension c cpython case learn pythonic way thing get privateness member language pointer arithmetic c++ reflection .net java point get error try call private method accident want shoot foot go try secure stuff oo encapsulation identifi form name lead underscore trailing underscore replace classname__name classname current class name lead underscore(s stripped name accessible accessed mean protect private datum accessible change name variable private variable section official documentation https://docs.python.org/3/tutorial/classes.html#tut-private similar behavior exist module attribute name begin single underscore foo module attribute name copied import module use method convention language constraint private attribute reference manipulated importer argue python implement true encapsulation language design choice level justified make need go way try call method need good reason debug hook testing come mind possible application use course important concern private method attribute tell developer call outside class encapsulation misunderstand security encapsulation use syntax mention want encapsulation migrate weird come idea way python code designer think oop different python behaviour private variable note mangle rule design avoid accident possible access modify variable consider private useful special circumstance debugger python private method private understand private privacy enforce obvious answer private member access self work self special python use name first parameter function
problem change string uppercase python research string.ascii_uppercase work follow code give error message question convert string uppercase python use see string method get upper case version string use hand string.ascii_uppercase string contain ascii letter upper case make string upper case type simple easy make low make uppercase lowercase upper use string string want convert uppercase question concern make lowercase uppercase string use string string want convert lowercase question concern make whole string variable use question simple string manipulation dir build function come handy give other list method argument return list contain upper convert first letter word capital sentence
start use docker realize use docker compose ctrl c docker compose stop get rid experiment large number unneeded docker image flag run delete local docker image container docker rmi flag look similar idea unix delete container include volume use delete image remember remove container remove image container create windows powershell window command line use delete remove unused container volume network image https://docs.docker.com/engine/reference/commandline/system_prune/#extended-description docker provide single command clean resource image container volume network dangle associate container remove stop container unused image dangle image add flag command detail visit link remove unused image dangle one add option force local docker version ce git commit afdb6d4 os arch darwin amd64 easy handy command delete image delete container exit state delete container create state note remove container remove image linux ubuntu user work word caution- remove way remove container volume associate use remove image use need delete invoke docker remove docker image container volume filesystem bug window disk space reclaim remove image reboot docker window work case use docker desktop follow work go troubleshoot clean purge datum save lot disk space want note remove think delete image explanation docker image |||| awk print command return image use delete image use d. delete image return image ids remove unused image container beware use docker swarm local machine join remote swarm manager worker local deploy repo executing remove deploy image try way xargs unix docker image rm docker image remove image least container associate get name image docker image remove image use command line image attach run container good idea stop first remove image create day h verify use follow command add techtabu accept answer use docker window use follow command docker ps docker rm command docker ps list image list pass docker rm see detail type command format work windows cmd delete docker local docker image follow step step docker image list docker image ids step docker image rm image check docker container volume docker system df prune image volume docker prune command use put batch file remove echo remove container docker container ls docker container stop docker container ls docker container rm docker container ls -aq fi echo remove image docker image docker rmi docker image fi echo remove volume docker volume ls docker volume rm $ docker volume ls -q fi echo remove network docker network ls |||| awk print |||| grep |id||bridge||host||none| |||| awk print docker network rm $ docker network ls |||| awk print |||| grep |id||bridge||host||none| |||| awk print fi answer seem provide easy way delete container auto generate name frequent intent write powershell script take caution course script use regular expression z]+_[a z]+$ use know container care use format lowercase word underscore lowercase word run line run echo containerstoremove check list execute deletion remove stop container unused image docker system prune
pandas dataframe column string value need select row base partial string match idiom return boolean familiar syntax df[df['a world seem find way partial string match say base github issue look able follow update vectorized string method available pandas 0.8.1 use pandas macos ipython notebook try propose line get error index vector contain nan value work = true condition add post mean reader want know method prefer other p.s see lot question similar topic think leave friendly disclaimer post long str.contain use perform substre search regex base search search default regex base disable example regex base search regex search require specify regex false disable performance wise regex search slow substre search avoid use regex base search need address valueerror perform substre search filter result result mix datum nan object column stre string method apply result nan case specify false ignore non string datum apply multiple column answer question use dataframe.apply solution apply multiple column use column apply method book many column dataframe mix column want select object string column take look select_dtype achieve regex search use regex pipe create list term join wise escape term case character interpret regex metacharacter term contain follow character need use escape re.escape effect escape special character treat default substre search search specify substre pattern full word match full word make use regular expression particular pattern specify word boundary \b example consider similar add word boundary \b join pattern p look little bit string method string method vectorise loopy implementation use operator list comp use cache regex pattern.search list comp col nans use addition str.contain list comprehension use follow alternative np.char.find support substre search read regex np.vectorize wrapper loop less overhead pandas str method regex solution possible dataframe.query support string method python engine offer visible performance benefit useful know need generate query information query eval family method find evaluate expression formula pandas wonder perform related problem select column partial string use select row partial string matching pass axis=0 filter quick note want selection base partial string contain index try follow need case insensitive search string pandas dataframe column say follow dataframe use operator lambda expression create filter trick use axis=1 option apply pass element lambda function row row oppose column column consider string suppose column name entity dataframe df filter df entire dataframe df row entity column contain use mask follow end partial string match efficient way know use contain work stre special character find work generalise example look part word specific word stre specific part sentence word creat column show affect row filter necessary want search text column pandas dataframe subset case follow code help warn method slow convenient similar @cs95 answer need specify engine answer accomplish ask feature show way way let get column look way write proper regex expression case worth follow
advantage @property notation hold classic getter+setter specific case situation programmer choose use property property prefer property reason attribute public python start name underscore warning give attribute implementation detail stay future version code prevent get set attribute standard attribute access normal pythonic way access attribute advantage property identical attribute access change change client code version class use property say code contract debug production change code use time write getter setter case need well control access python use getter setter property fun first use attribute need migrate property change code use class lot code extension .py use getter setter inheritance pointless class simple tuple code people write c++ use python python code use property let begin normal attribute access getter setter necessary short answer property win hand need getter setter hide world plenty way python getattr setattr getattribute concise clean brief article introduce topic getter setter python skip end code example prefer use different idiom involve use nice complex use case bit background first property useful allow handle set get value programmatic way allow attribute access attribute turn get computation turn set event let say follow class code getter setter wonder call defaultx defaulty object init method reason case want assume somedefaultcomputation method return value vary time say timestamp set purpose example set mean set none want value x default computation lame number reason describe rewrite use property gain ' gain ability refer attribute attribute scene end run method course real power property want method addition get set value point use property getter example run function body pick default value set common pattern lose main annoyance view define getter define setter.[1 extra noise clutter code annoyance initialize value init course add use setattr extra code example getter accept parameter hear say take parameter getter official sense true practical sense reason able name attribute set value specific parameter nice example close get override assignment imply special semantic course ensure setter know extract value key dictionary set value number support property get value pass parameter getter return introduce asymmetry java style getter setter let handle need getter setter mind want capture follow requirement user define method give attribute indicate attribute read read write property fail test attribute writable need user define extra variable underlie function need init setattr code variable exist fact create new style attribute default code attribute execute method body set attribute attribute reference attribute parameterize attribute term code want way write able want way special case parameterizable attribute allow default assign case work see tackled point yay point solution come follow create new object replace notion property object intend store value variable set maintain handle code know calculate default job store set value run method value set let call uberproperty assume method class method value value uberproperty add isset none real value allow clean way declare value way sentinel sort give object put class well property use decorator let see go stick use single attribute x work course uberproperty make sure handle get set let start get first attempt create new uberproperty object return discover course work python bind callable object need object order call function create decorator class work class object work go need able know method represent time let go keep decorator modify uberproperty store method reference callable moment work complete picture well end create example class use new decorator case get uberproperty course callable much use need way bind uberproperty instance create decorator class create object class object return user use init call dude let write want find result bind uberproperty instance obvious thing return bounduberproperty maintain state attribute representation get object approach easy explain use init method mapping time init call decorator run need look object dict update attribute value attribute type uberproperty uber property cool want use lot make sense create base class subclass think know base class call add change example inherit uberobject modifying run simple test get output want work late note use getvalue setvalue clearvalue link mean return think good place stop get tired see core functionality want place rest window dress important usability window dressing wait change update post finish example next post address thing make sure uberobject init call subclass make sure handle common case alias function need e.x return e.x.getvalue default need support set e.x e.x = newvalue parent class need update init code handle add parameterized attribute obvious code exist case think place issue use @property extend behaviour getter setter subclass use standard class mechanism problem actual getter setter function hide property get hold function access getter setter function c.p.fget c.p.fset use normal method inheritance super facility extend dig intricacy use super way use clunky property redefine use counter intuitive super(cls cls mechanism get unbound copy p. use property intuitive fit well code compare obvious easy read property allow private variable easy feel property let get write getter setter need java programming culture give access property go getter setter need bit verbose write obvious piece code notice time replace non trivial logic python people care embrace follow practice prefer use case problem property make class transparent issue raise exception setter example account.email property user class expect assign value property cause exception result exception go unhandle propagate high call chain handle result unhelpful traceback present program user common world python java avoid use getter setter property getter setter prefer complex logic define place validation method similiar account.save method note try say case property useful make class simple transparent need surprised mention property bind method descriptor class adam donohue neilenmarais get idea post getter setter function use present smart way hide implementation detail code cruft regular expression type cast try block assertion compute value general crud object mundane consider example datum persist relational database orm hide implementation detail particular sql vernacular method bind fget fset fdel define property class manage awful elif ladder ugly code expose simple elegant self.variable obviate detail developer use orm think property dreary vestige bondage discipline language miss point descriptor complex project prefer use read property getter explicit setter function long living project debug refactoring take time write code several downside use @property.setter make debug hard python allow create new attribute exist object make follow misprint hard track object complicate algorithm spend quite time try find converge notice extra line setter evolve complicated slow method hit database hard developer figure follow function slow spend lot time profiling do_somethe method cause slowdown @property traditional getter setter advantage depend use case change interface change implementation datum access project small want use direct attribute access access class member example let say object foo type foo member num get member num = foo.num project grow feel need check debug simple attribute access @property class datum access interface remain modify client code cite simple public datum attribute good expose attribute name complicated accessor mutator method keep mind python provide easy path future enhancement find simple data attribute need grow functional behavior case use property hide functional implementation simple datum attribute access syntax use @property datum access python regard pythonic strengthen self identification python java programmer help job interview interviewer think java style getter setter anti pattern traditional getter setter allow complicated datum access simple attribute access example set class member need flag indicating like force operation look perfect obvious augment direct member access foo.num num augment traditional setter additional force parameter traditional getter setter make explicit class member access method mean get result store class access look simple attribute access performance vary class user expect @property hide attribute access statement make thing explicit help minimize class user surprise mention @neilenmarais post extend traditional getter setter subclasse extend property traditional getter setter use long time different language people different background team look familiar @property project grow need migrate python language @property use traditional getter setter make migration smooth @property traditional getter setter make class member private use double underscore name excerpt effective python specific way write well python amazing book recommend thing remember ✦ define new class interface use simple public attribute avoid define setter getter method ✦ use @property define special behavior attribute access object necessary ✦ follow rule least surprise avoid odd side effect @property method ✦ ensure @property method slow complex work involve cause side effect use normal method advanced common use @property transition simple numerical attribute fly calculation helpful let migrate exist usage class new behavior require call site rewrite important ’s call code n’t control @property provide important stopgap improve interface time @property let make incremental progress well data model time @property tool help address problem come real world code n’t overuse find extend @property method time refactor class pave code poor design ✦ use @property give exist instance attribute new functionality ✦ make incremental progress well datum model use @property ✦ consider refactore class call site find use @property
easy way method string ascii unicode fine look string embed apostrophe note doc algorithm use simple language independent definition word group consecutive letter definition work many contexts mean apostrophe contraction possessive form word boundary desire result method work try string.capword method python documentation capword split argument word use str.split capitalize word use str.capitalize join capitalize word use str.join optional second argument sep absent none run whitespace character replace single space lead trail whitespace remove sep use split join word thing fun solution split word initial cap word split group rejoin change white space separate word single white space matter edit remember think write code build explicit list use generator expression lazy fashion well solution use regular expression match begin stre white space separate word single non whitespace character use parenthese mark match group write function take match object return white space match group unchanged non whitespace character match group upper case use re.sub replace pattern punctuation problem first solution redo white space first solution produce good result ' m glad research answer idea re.sub take function nontrivial processing re.sub produce final result summary different way pitfall watch work input splitting sentence word capitalize first letter join split string check blank space find start word use generator use regular expression steveha answer answer post input work expect define word start sentence blank space .capword use split fix second output .upper careful multiple blank space fix use split show top answer copy paste ready version @jibberia anwser complicate life join loop solution simple safe want first letter capitalize word str.title work capitalization liner clear example empty string raise error access use uppercase first letter answer satisfactory try cover extra case previous case space uniform maintain string start alphabet use give mark point use make first letter uppercase django template use use variable suggest method str.title work case example 3c think well capitalize word @gary02127 comment solution work title apostrophe try simple neat overlook preservation white space want process fre flinstone fred flinstone fre flinstone ' corrupt white space solution lose white space solution good python preserve white space method work test case use .split good choice capitalize first letter word caps(y quick function work python capitalize string non uniform space add gupta point non uniform space original question capitalize word string brown fox string brown fox non uniform space easy solution question work case oneline solution answer copy paste ready version @jibberia anwser line send split blank character cause error try s[1 well way add
achieve equivalent sql list require value scenario current way follow seem horrible kludge improve use use something.isin(somewhere work example alternative solution use method pandas offer method series.isin dataframe.isin series dataframe common scenario apply isin condition specific column filter row dataframe series.isin accept various type input follow valid way get want want apply membership check search term multiple column apply isin condition column b use dataframe.isin retain row column true use first axis note want search column omit column selection step retain row column true use manner addition method describe use numpy equivalent numpy.isin worth consider numpy function bit pandas equivalent elementwise operation depend index alignment situation method appropriate replacement pandas isin pandas routine iterative working string string operation hard vectorise lot evidence suggest list comprehension fast resort check lot unwieldy specify use know cover answer numexpr ftw ' generic filtering row collate possible solution answer df[df['a'].isin([3 df[-df["a"].isin([3 df[~df["a"].isin([3 df[df["a"].isin([3 false df[np.logical_not(df["a"].isin([3 want filter dfbc row business_id business_id dfprofilesbusid talk performance various filtering method fact topic pop see example performance test large datum set interesting instructive isin method turn fast method apply slow surprising use negate query use update way use comparison operator negate query use implement implement rest country trick want keep order list worth need combination ifelse statement dataframe work
can python method convert integer long binary string python myriad dec2bin function google hope use build function library python string format method take format spec format spec docs python format spec docs python look bin equivalent hex add python example python build ability operation b}'.format(42 give bit pattern stre general philosophy language library give user base desire work environment provide need collect snippet code develop ensure write thing example pseudo code construct binary string base decimal value keep mind generic bit pseudo code efficient way iteration seem propose make much difference mean guideline do general idea use code order preference want textual representation 0b prefix use want bit representation prefer function surprised mention nice way accomplish use format string support python high tldr functionality format string available python request binary specify width request padding add common prefix signify binary number let python add prefix much version take prefix width consideration info available official documentation format string literal format specification mini language reference function convert positive integer large represent string modify serve large integer handy b}".format bin python keep lead zero simple way use string format see page want fix length binary string use complement require follow line use width binary string liner lambda test edit compare precede answer use format f string implementation output 00111 convenience python docs link format string literal https://docs.python.org/3/reference/lexical_analysis.html#f-string summary alternative contributor include john fouhy tung nguyen mvchr martin thoma martijn pieter convert sign integer range -2**(digits-1 2 complement binary string work produce use numpy pack unpackbit good friend solution algorithm use bitwise operator fast version reverse string accept answer address negative number cover addition answer use bin hex function opposite direction use binary notation negative number thing get bit complicated question specify want handle negative number python add negative sign result computer hardware binary datum negative sign exist read produce binary streams datum process software hardware know notation use notation sign magnitude notation first bit represent negative sign rest actual value case 0b1100101 0b0100101 look python add front positive negative number common complement notation seem complicated result different python string format read detail link 8bit sign integer 0b11011011 python easy way produce binary representation use numpy turn complement binary value python integer know easy way builtin function bitstring package help python add new string formatting approach call format string literal f string example output bob number discussion question find misunderstand mean binary string think module look struct output example documentation link complement return input number negative width specify code implement method use ready use function similar solution simple solution use divmod fucntion return reminder result division fraction way use regular math loop recursion trivial case return calculator neccessary function dec bin hex make test python change input test number convert one calculate binary number calculate hexa decimal number calculate binary calculate hexa decimal find method use matrix operation convert decimal binary eis input decimal datum binary order bindata output binary data format binary matrix feel martijn pieter comment deserve highlight answer clear versatile willing give pure python gain lot firepower sage example note return string use number want simple binary decimal converter loop answer work similar line yusuf yazici answer adjust variable mutate result course need use function result use module consider follow adjustment sentinel value indicate conversion fail assume convert positive number integer long debug program use divmod construct binary list program output
get error ' m confused know answer question socket module contain class socket need socket.socket socket import socket error message mean say module object callable code call module object module object type thing get import module try call class object module object happen name module contain break sort error assume content yourclass.py use way get typeerror module object callable tried call yourclass use use yourclass.yourclass work add main init__.py yourclassparentdir e.g. instance class ready import script short answer call file directory function real function read error happen import module thinking function call python module file packages(directorie consider module let say file file function code file give error call create.py file function get gotcha see read post set script call python bin script get module callable zig follow zag need follow summary double check package module nest try script directory extension bin module mypackage bin extension new packaging try follow standard interpreting setup root compliant standard let know seem do import socket module import socket socket module need change line self.serv socket.socket(socket.af_inet socket.sock_stream use socket module change import statement socket import socket get import socket socket import know thread year old real problem work directory believe work directory c:\users\administrator\documents\mibot\oops\. check file name socket.py directory find rename move import socket current directory use socket.py python directory hope help note use file name python directory save program file name conflict program(s configure console_script entrypoint setup.py find issue exist endpoint module package function module example refer callable function module seem make difference module name main block make module callable faced problem try use yourclass import yourclass copy whole code yourclass.py run main code current solve error guess overridden builtin function variable module set global variable module print module see possible extra edge case stumble puzzled hope help some_module a.py b.py some_module/__init__.py main.py main.py load b go init__.py try load b.py a.py mean b.py try load get module function meaning get error message module object callable solution swap order some_module/__init__.py create circular dependency change file name match function load file rely init__.py simple way solve problem export thepythonpath variable enviroment example python debian gnu linux operating system find location module socket.py file check import statement module callable python include function method module class object
numpy propose way get index maximum value array like similar thing return index maximum value instance array return index correspond element new numpy version function call argpartition get index large element argsort function run linear time bad case return index sort see result evaluate a[ind get top k element sort order way take o(n k log k time simplest ve able come involve complete sort array wonder numpy provide build way partial sort able find solution turn slow small n worth look code cython simple number maximum value use regular python list use python use xrange range source heapq heap queue algorithm work multidimensional array flatten unravel index example speed important need test answer question code answer modify need specific case compare speed method code wise npe answer fre foo answer off99555 answer care order large element use argpartition perform full sort argsort credit go question run test look argpartition outperform argsort size array value k increase multidimensional array use axis keyword order apply partition expect axis grab item note return sorted result case use np.argsort intend axis example method np.argpartition return large index perform local sort np.argsort(performe full sort array large return index ascend descend order let say example see want strict ascending order top k index np.argpartition return want np.argpartition solution use pytorch torch.topk tool neural network construction provide numpy apis cpu gpu support fast numpy mkl offer gpu boost need large matrix vector calculation strict ascend descend top k indices code note torch.topk accept torch tensor return top k value top k index type torch.tensor similar torch.topk accept axis argument handle multi dimensional array tensor full sort depend size original array size selection course involve tamper original array fix need make copy replace original value cheap use case use result list contain n tuples index value value maximize use work array example follow easy way see maximum element position axis domain axis mean column wise maximum number axis mean row wise max number case high dimension depend complicated way increase nth value tie find intuitive use idea unique method return index input value max unique value indicie position original value recreate think time efficiency way iterate array keep k size min heap people mention come brute force approach set large element large negative value use argmax get index next call argmax return large element log original value element recover want code works numpy 2d matrix array produce true false n_larg matrix indexing work extract n_larg element matrix array top_k<<axis_length well argsort use dictionary find top k value indices numpy array example find top maximum value index vectorize implementation use argpartition deal nan problem understand np.argpartition try pandas.dataframe.sort_value example give index large nan value inefficient easy read customize
want know number local machine use python result user real output time(1 call scale userspace program python version use interested number processor available current process check cpuset cpuset use multiprocessing.cpu_count way go python new follow method fall couple alternative method old version python option use psutil library turn useful situation work platform support psutil(unix window note occasion multiprocessing.cpu_count raise notimplementederror psutil able obtain number cpus psutil try use technique use multiprocesse fail use technique len(os.sched_getaffinity(0 want add python return set cpu available consider sched_setaffinity linux system call limit cpus process child run mean get value current process function return set allow cpu need len multiprocessing.cpu_count os.cpu_count hand return total number physical cpus difference important certain cluster management system platform lsf limit job cpu usage sched_getaffinity use multiprocessing.cpu_count script try use way core available lead overload timeout see difference restrict taskset utility allow control affinity process minimal taskset example example restrict python core core core system test script main.py output nproc nproc respect affinity default output man nproc make explicit print number processing unit available behave nproc default nproc flag common case want get physical cpu count consider taskset os.cpu_count documentation documentation os.cpu_count mention https://docs.python.org/3.8/library/os.html#os.cpu_count number equivalent number current process use number usable cpus obtain comment copy documentation multiprocessing.cpu_count https://docs.python.org/3/library/multiprocessing.html#multiprocessing.cpu_count source lib multiprocessing context.py see multiprocessing.cpu_count os.cpu_count multiprocesse throw exception return none os.cpu_count fail availability system native sched_getaffinity function downside os.sched_getaffinity appear unix python cpython seem try compile small c world sched_setaffinity function call configuration time present have_sched_setaffinity set function miss psutil.process().cpu_affinity third party version window port third party psutil package pip install psutil mention https://stackoverflow.com/a/14840102/895245 cpu_affinity function https://psutil.readthedocs.io/en/latest/#psutil.process.cpu_affinity usage function standard library os.sched_getaffinity linux implement window make call getprocessaffinitymask windows api function word window user stop lazy send patch stdlib test ubuntu python python os.cpu_count multiprocessing.cpu_count implement term function raise notimplementederror os.cpu_count return none determine number cpus know number physical core virtual hyperthreade core platform independent solution note default value logical true want include hyperthreade core use give number os.cpu_count multiprocessing.cpu_count logical keyword argument give hyperthreade cpu count give virtual machine cpu count matter work vms python version use look equivanlent linux command nproc option multiprocessing.cpu_count return number logical quad core cpu hyperthreading return want number physical cpus use python binding hwloc hwloc design portable os architecture work use different os system want get good world use joblib purpose method give number cpus system joblib need instal information joblib find https://pythonhosted.org/joblib/parallel.html use numexpr package python lot simple function helpful get information system cpu figure add code reply message support jython tack give use torch mp library torch interface main python commenter mention hope help nice option option python look print number core system try help
file.py contain function name function import give error importerror module name file package first import function call function use note file python core module suggest change filename file.py note try import function a.py file call b.py need make sure a.py b.py directory write import let contain function import function file_z.py file different package structure want call different package call fashion let say follow package structure python project com.my.func.differentfunction python file function want call different function follow way define import statement example3.py file import function define function name want import example3.py call function execute output method import specific function(s want method import entire file call function use call function different directory case want function directory work way alternative one work alternative change work directory alternative add directory function sys.path fix modulenotfounderror module name try use dot front filename relative import function file course different directory import writing directory first file name extension use function_name rename module file call function 1)if import entire module reiterate module name call 2)or import specific function function alias function use reiterate module name save file format example my_example.py file function call function type line file_name my_example2.py mathmethod.py main.py append dot front file name want import file directory run code example run file name a.py want import method name addfun write b.py b.py directory add keep file location file want import import function solution1 file define function(s file solution2 solution work colab file location python file try import file import function enough solution work get modulenotfounderror module name whtever error solution import inside first file define function fun inside second file let say want call function fun suppose file want call anotherfile.py method want call method1 first import file method method1 part class let class create object class1 suppose object name ob1 case name file helper.scrap.py make work change main script detectiverob.py file need call passgen function generate password hash function quick easy solution directory structure detectiverob.py import function syntax modules.passwordgen import passgen quick suggestion believe auto import press alt+ enter pycharm get help change file name want import right clicking file click refactor- rename auto import option start come
intend use optional else clause try statement statement block execute execution fall bottom try exception find need handle exception note use clause add additional code try clause avoid catch exception n’t raise code protect try statement method throw ioerror want catch exception raise want first operation want catch ioerror operation write put another_operation_that_can_throw_ioerror operation_that_can_throw_ioerror catch second call error put whole try block run let make sure big reason use else style readability good idea keep code exception code deal example compare second good return early throw exception possible write note answer copy post duplicate askpassword stuff intend use optional else clause try statement intend use context code run exception expect handle context avoid handle error expect important understand precise condition cause clause run return continue break interrupt control flow else statement run exception interrupt return continue break statement doc optional else clause execute control flow end try clause bolde add footnote read control flow end case exception execution return continue break statement require precede clause see grammar try try else(-finally optional python tutorial elaborate intend usage try statement optional else clause present follow clause useful code execute try clause raise exception example use clause add additional code try clause avoid catch exception n’t raise code protect try statement handle error block run example use test code raise exception code abstract generic test practice try great combine eafp pattern duck typing think naïve code fine great way hide severe bug code typo ed cleanup attributeerror let know swallow bad write cleanup method pass user type misname attribute cause fail half way leave file unclosed good luck debug find useful get cleanup do exception think use right bet use unimaginative sample variable define error throw remove try block require messy detection variable define nice example try pep come different exception handle different part algorithm allow write exception handle code near exception occur error exception handle exception docs.python.org try statement optional else clause present follow clause useful code execute try clause raise exception example use clause add additional code try clause avoid catch exception n’t raise code protect try statement example output copy https://geek-university.com/python/the-try-except-else-statements/ look python reference seem execute try exception optional else clause execute control flow end try clause exception clause handle precede clause dive python example understand try block try import module fail get exception bind default work option go block bind require see link example explanation try work catch block throw exception guess else block come handy else block try clause exist code run try operation succeed use abuse use appropriate semantically group statement add use case seem handle db session use lead use place use pattern find try construct useful situation run database query log result query separate database flavour type let say lot worker thread handle database query submit queue course distinguish possible exception throw use code react successful piece code throw exception successful piece let second possible exception go return success kill thread case come handy block exist complement functionality occur block case inconsistency_type set block behaviour complement error case course describe pattern turn code specific case set inconsistency_type try block find useful deal incorrect config file exception read lock config disable lock monitoring valueerror log helpful warning message suppose programming logic depend dictionary entry give key test result dict.get(key use construct use scenario think unpredictable exception circumvent try instance operation try block involve random number exception choose validation exception predict code pattern place use construct handle exception common way clause exception block confuse useless part statement statement abuse terrible way create bug hard find consider think problem avoid statement consider document else- condition make explicit
try print instance class get output define print behaviour string representation class instance example refer code modify test class print instance show value str method call happen print repr method happen use repr function look interactive prompt str method give python print result repr define str repr python use see repr use str print chris lutz explain define repr method class documentation repr many type function make attempt return string yield object value pass eval representation string enclose angle brackets contain name type object additional information include name address object class control function return instance define repr method give follow class test act follow way python shell str method define print(t print(str(t use result repr repr method define default use equivalent generic way apply class specific formatting do follow produce situation @keith try go consider good style try debug want pretty version response @user394430 produce nice list name value fancy version thank ruud sort item simple print long constructor python specific format important debug inherit printable class need write code object inspire answer add cent answer follow example implement sentence official documentation cite return string yield object value pass eval give class definition easy serialize instance test class run last piece code say last comment info need use repr standard function init example repr str mention many answer want add lazy add magic function class use objprint simple decorator @add_objprint help add str method class use print instance course use objprint function library print arbitrary object human readable format output lot answer thread none help work hope little informative make sure parenthese end class e.g example code project work print hydrogen class use note work parenthesis end hydrogen necessary hope help know question old post convenient method introduce dataclasse python special function eq hash provide repr function class attribute example want hide certain attribute output set field decorator parameter repr false
develop piece software python distribute employer customer employer want limit usage software time restrict license file distribute file file easy decompile remove code check license file aspect employer want code read customer fear code steal least novel idea good way handle problem good way handle problem protect reverse engineering firmware dvd machine reverse engineer aacs encryption key expose spite dmca make criminal offense technical method stop customer read code apply ordinary commercial method license contract term condition work people read code note python base component require pay fee sell software use component open source license prohibit conceal source origin component offer significant value stuff good price hard refuse incentive waste time money reverse engineering reverse engineering expensive make product expensive offer upgrade enhancement make reverse engineering bad idea next release break reverse engineering point carry absurd extreme offer new feature make next release valuable reverse engineering offer customization rate attractive pay build support enhancement use license key expire cruel give bad reputation make software stop work offer web service saas involve download customer python byte code compile interpret language difficult lock use exe packager py2exe layout executable know python byte code understand case make tradeoff important protect code real secret key symmetric encryption bank transfer paranoid choose language let develop good product quick realistic valuable novel idea need enforce license check write small c extension license check code extra impossible reverse engineer leave bulk code python use right tool right thing python design obfuscate contrary open easy reveal modify python language philosophy want see look tool bad thing important several different tool exist different usage compile program reverse engineer think protect code analyze obfuscate php break flash encryption key new version window crack time prevent misuse code discover casual legal issue business model tend go sell service product copy service pirate steal time consider go flow sensible idea use cython nuitka shed skin similar compile python code distribute app python binary library pyd python byte code leave do reasonable amount obscurification employer expect regular code think .net safe case bytecode obfuscate decompile reasonable source cython get compatible cpython think work consider product build thirdparty libs pyd dll ship python code binary big step see blog post tutorial thx @hithwen crazy idea get cython store c file module concatenate build heavy inlining way python module monolithic difficult chip common tool crazy able build single executable link optimize python runtime library dll way difficult intercept call python framework librarie use do use lgpl code understand want customer use power python want expose source code suggestion write critical piece code c library use sip swig expose c c++ apis python namespace b use cython python c possible distribute library license binary python interface look pyminifier minify obfuscate compress python code example code look nasty casual reverse engineering employer aware steal idea people get code mean read work look benefit situation yield well return investment fear much lose edit answer nick comment gain lose customer want pay change release change happen customer sell software change copyright notice illegal sue win simple case change copyright notice 2nd level customer notice software come original wonder go chance contact learn resell work case original customer sell copy mean make much money bother sell volume mean well chance learn end company try law reputation ruin hard business steal work work improve include source license protect simple reselling chance push change make make sure change next version maintain win win get change make change need unwilling include official release use cython compile module high performant c file compile native binary library un reversable compare bytecode write detailed article set cython python project check protect python source cython rely obfuscation conclude offer limited protection update link paper reverse engineer obfuscated python code dropbox approach opcode remappe good barrier defeat many poster mention make kick ass python wingide give code right give code people come upgrade support ship file problem compatible python version python version create mean know python version running system product run limit factor circumstance possible move key part software web service organization host way license check perform safety server room perfect solution follow do call native code remove program start remove license enforce cross platform pure python solution work surprise see pyconcrete answer new question need(ed obfuscate code encrypt decrypt load time pypi page protect python script work flow think method protect python code part obfuscation method believe game mount blade change recompile python interpreter original interpreter believe open source change op code op code table different standard python op code python source unmodified file extension file different op code match public interpreter check games data file datum python source format sort nasty trick do mess immature hacker stop bunch inexperienced hacker professional hacker beat company keep pro hacker staff imagine likely thing hack immature hacker place read curious staff example modify interpreter allow check certain comment doc string source special op code line code example op source line copyright write compile line op code equivalent false copyright miss disable whole block code appear obscure reason use case recompile modify interpreter feasible write app app big pay protect dedicated server admin financial app find little contradictory leave source opcode open eyeball use ssl network traffic ssl safe use stop eye read wee bit precaution sensible enough people deem python source opcode visible likely develop least simple protection tool people ask protect python app promote development reliable way protect code run server control provide client client interface server depend client simple protection mechanism combine sensible license agreement effective complex licensing encryption obfuscation system good solution sell code service say host service offer support practical shipping code file prevent protection foil effective anti piracy protection technology end day achieve decent license agreement company concentrate make code nice use possible happy customer make company money prevent theoretical piracy attempt make code hard steal use jython use java obfuscator work jythonc translate python code java java compile bytecode ounce obfuscate class understand go decompilation mention recover actual code problem jython use python module write c. take look guy client software include linux tricky crack require creative disassembly get protection mechanism sign code standard encryption scheme hash sign important file check public key method way issue license file public key customer additional use python obfuscator google good python obscure thing able add additional obscurity encrypt part decrypting fly pass eval matter break none stop determined attacker disassemble bytecode dig api help dir idea time restrict license check instal program work perfect obfuscation license check remove check license remote system run significant part program close remote system able protect ip prevent competitor use source code write inspire version code way protect add signature program logic secret able prove code steal obfuscate python source code hard read utilize good obfuscation add protection code compile executable strip binary figure obfuscate complex code work write implementation help prevent hack program obfuscation code license stuff crack program modify different behaviour way compile code binary help protection native program addition symbol obfuscation good idea unrefactor code make confuse call graph point many different place different place thing logical signature obfuscate code create table value use program logic use signature use determine code originate decide use obfuscate code module part product reobfuscate make seem different show code steal secret signature look software protection general project general philosophy complete protection impossible thing hope achieve add protection level cost customer bypass purchase license say check google python obsfucation turn lot .net solution obsfucation approach problem window platform sure solution linux work mono next thing write code compile language want go way assembler strip executable lot hard decompile interpret language come tradeoff end ease software development python hide secret end software write assembler write easy hide secret boss choose point continuum support requirement give tool time build want bet object real development cost potential monetary loss possible py2exe byte code crypte resource launcher load execute memory idea think self modifying program make reverse engineering expensive find tutorial prevent debugger make disassembl fail set false debugg breakpoint protect code checksums search crypte code execute memory link other say code worth reverse engineer succeed end use way protect binary file c c++ obfuscate function body executable library binary file insert instruction jump begin function entry jump special function restore obfuscate code byte code binary code python script obfuscate file use normal python interpreter code object call first time first op jump_absolute jump offset offset n instruction call pycfunction function restore obfuscate bytecode offset n put original byte code offset obfuscate code follow code function return last instruction jump offset byte code execute tool pyarmor obfuscate python script way comprehensive answer conceal python source code find possible technique discuss use compile bytecode python executable creator installer pyinstaller software service good solution conceal code opinion python source code obfuscator use cxfreeze py2exe linux job http://cx-freeze.sourceforge.net/ available ubuntu repository focus software licensing recommend take look stack overflow answer write get inspiration license key verification system construct open source library github help license verification bit install pip install licensing add follow code read rsa public key configure neiher cython nuitka answer running solution compile nuitka cython file cache directory generate file copy cache directory attacker decompile file see code change
good way open file read write exist create open read write read file open('myfile.dat rw working python wonder version problem suppose work bottom line need solution problem curious stuff need nice way open part enclose directory writeable user group ' m linux system permission word exact error ioerror file directory use open mode advantage follow approach file close block end exception raise way equivalent try short open file appending reading file pointer end file file exist file open append mode file exist create new file read write -python file mode seek method set file current position character allow see stack overflow question python file mode detail example fyi use python version good practice use follow change rw w+ use appending erase exist content python use pathlib touch file much elegant solution propose one thread thing directory read write answer use note file close open context manager nice way let python take care python + problem open create file target directory exist create mode enough case open('myfile.dat work fine py3k code raise valueerror python-2.6 raise ioerror think rw ' m starter see documentation want file writing read write allow write create file exist need read file file exist open test existence opening use try put w+ write file truncating exist read file create exist write return null create new file append exist want open read write assume want truncate open want able read file right opening solution use want write datum file n’t exist problem solve use little know mode open usual w mode example file binary mode use mode xb
write chat program local network like able identify computer get user set computer name python use socket gethostname functionality get hostname computer interpreter run portable solution use host hostname environment variable portable work system run work run special environment cron load os module suggestion want look result platform.uname os.getenv('hostname os.environ['hostname work cron job wsdl http hostname set use window return qualified host name define short alia host define alia host return alia thing run case work use first call gethostname see return look host name use original solution python use field nodename avoid use array indexing documentation os.uname suggest use socket.gethostname ' m correct look socket.gethostname function socket.gethostname execute line code use name find addr systems hostname set environment case module pull environment os.getenv example hostname environment variable contain want follow get update note comment work environment set way believe time answer use solution first thing find web search work time due lack portability use leave answer reference purpose eliminate need import environment system name import os module test work environment expect program operate use solution provide get qualified hostname use need name pc use pylog conf file socket library available os library window use defaultvalue string prevent none return
use virtualenv run project default version python project use python use brew install python3 install mac create virtualenv use new version sudo virtualenv envpython3 try run update op edit bug op version virtualenv describe problem fix run python build support virtual environment venv use refer docs creation virtual environment execute pyvenv script pyvenv new virtual environment update python new pawciobiel comment pyvenv deprecate python new way try pyenv handy switching python version global local folder virtualenv install python version create virtualenv path need interpreter version check version plugin pyenv pyenv virtualenv work install prerequisite create python3 base virtual environment enable site package flag set virtual environment install requirement use pip package manager work multiple python project recommend install common package pdbpp reuse virtualenvs use technique save lot time spend fetch package instal consume minimal disk space network bandwidth lot system wide python package recommend use site package flag development notice slow django startup lot presume django environment initialisation scan append site package system path reason python manage.py shell become slow say experiment option work safe skip site package flag django project work need order run virtual environment python python3 first virtualenv instal run run cmd virtualenv fail use activate virtual env run see full path dir env_name>/bin python suffix exit virtualenv run specify specific version python create environment mention virtualenv.py case full path executable work error message tbrisker solution work case solve issue addition answer recommend check instance virtualenv executing turn local bin possible instal virtualenv use instance easy_tool pip use system package manager brew op case problem year ignorant instal virtualenv masking system package provide virtualenv remove old break virtualenv problem go simple command create virtual env version want virtual env version python come implementation virtual environment name venv suggest use virtualenv quote venv doc deprecate version pyvenv recommend tool create virtual environment python deprecate python change version use venv recommend create virtual environment window initiate venv project open cmd suggest use double quote directory path contain space ex c:/my dox space directory venv set see new folder project directory script activate invoke venv need deactivate virtual environment type deactivate shell ready install project specific library reside folder lib edit = = = scenario discuss ask add case use vscode python extension case use code python extension face issue pylint point global installation case pylint able see module instal virtual environment show error import simple method get activate environment invoke code pylint start environment see local package try python3 venv myenv documentation take long simple quick command python venv yourenv work python3.6 mac follow get work install python3 brew install python3 virtualenv burrito mkvirtualenv python3 env_name course know virtualenv burrito wrapper serve well year reduce learn curve virtualenv --python=/usr local bin python3 virtual env name add python3 path virtual enviroment work trouble work anaconda3 python use activate environment linux macos window try stuff work brute force instal anaconda instal virtualenv work want keep python default version centos python virtual environment run virtual environment python find link good solution new python version python https://www.digitalocean.com/community/tutorial_series/how-to-install-and-set-up-a-local-programming-environment-for-python-3 show step different platform basic step use pipenv install specific version window command line follow work find python executable locate output path different system mine python3 locate first path cd root folder application create virtual environment folder run follow include path python3 executable naming virtual environment venv next activate virtual environment install dependency virtual environment populate know library module need application virtual environment application run environment produce dependency run follow cd application folder environment work frozen install requirement machine clean environment follow cd application folder see python version virtual environment run voila python3 run virtual environment output get error due conflict miniconda3 install type virtualenv instal miniconda pointing install remove move change environment variable point install want
use follow check item my_list find item item my_list pythonic way find item list first question item my_list fine work item equal element my_list item match item list instance abc abc match float point value particular suffer inaccuracy instance second question several possible way find thing list use case describe check list know use operator find element sequence meet certain condition use list comprehension generator expression latter return generator imagine lazy list build iterate way equivalent python see high order function work python filter return list generator object want first thing match condition know fine use loop use clause know use return first match raise stopiteration none find use list index method useful want know certain element list note duplicate return low index duplicate want index use enumerate want find element none use default raise stopiteration item find list answer niklas b. pretty comprehensive want find item list useful get index find first occurrence recipe itertool example follow code find first odd number list copy paste install itertool recipe include alternative check item list item list order o(n deal big list item know member list convert list set take advantage constant time set lookup go correct solution case case give well performance note create set set(my_list o(n fast way check membership lookup initial set creation definition usage count method return number element specify value syntax example question example want use possible search working list string list element equal item example item your_list true ex_1 one','ex','two = false list element item ex example_1 match = el el your_list item el match = el el your_list el item check read need go check value exist collectible use operator fine go check recommend use bisect module keep mind use bisect module datum sort sort datum use bisect use bisect module machine time use operator example code use python syntax output use list.index(x return index find list return valueerror message find use list.count(x return number occurrence list validation list return absence cool thing count break code require throw exception find say several trial whitespace line feed interfere give solution more_itertools.first_true(iterable default none pre none install use check additional unwanted white space item list string reason interfere explain item find work list dict() python matter order
use python open text document want substitute value string variable totalamount text document let know advise use context manager advantage make sure file close explicit version remember context manager version prefer use high preferred use str.format high use python3 optional file parameter print function introduce f string alternative case pass multiple argument use tuple print multiple argument python use python3 use print function python2 example python print string text file use pathlib module indentation need python f string available use numpy print single multiply string file do line guess lot people use answer general quick reference write string file write string file want specify file encoding specify encode encoding use platform dependent see doc think default behavior useful practical point view lead nasty problem set encode parameter use f string good option put multiple parameter syntax str example split long html stre small string add file separate new line \n use python3 script case send long html string server client send small string one careful unicodeerror special character example horizontal bar emoji replace other char make sure replace html
need iterate file give directory action do efficient way python version answer use assume directory path str object variable call directory_in_str use pathlib original answer iterate descendant file immediate child directory try use glob module python search subdirectory doc glob module find pathname match specify pattern accord rule use unix shell result return arbitrary order tilde expansion do character range match python thing easy 20x fast source use scandir listdir increase performance code need file type file attribute information os.direntry object expose information operating system provide scan directory os.direntry method perform system call is_dir is_file require system call symbolic link require system call unix require symbolic link window python offer pathlib standard library like list comprehension path object convert string iterate file python none technique guarantee iteration order super unpredictable notice sort filename important order file matter video frame time dependent datum collection put index filename use glob refer directory list get list directory array use os ' m happy implementation want custom constructor directoryindex._make(next(os.walk(input_path pass path want file listing edit welcome use scandir directive build os library work example get files directory understand answer complicated python replace directory_to_loop directory want use
try import request get error importerror module name request request build module come default python installation install python sudo pip install request python sudo pip3 install request pip instal pip package installer python come default python installation pip instal path use python pip install request python3 pip install request python3 use sudo easy_install request instal use system package manager centos sudo yum install python request debian ubuntu python2 sudo apt get install python request debian ubuntu python3 sudo apt get install python3 request use pip install request pip3 install request python3 pip instal pip.exe add path environment variable pip instal path use python pip install request python3 pip install request python3 cmd prompt use path\easy_install.exe request path folder instal example c:\python32\script want add library window machine download compress library place package folder python path example c:\python27\lib\site package miss library source available download request https://pypi.python.org/pypi/requests mac osx windows download source zip termiminal cmd run python setup.py install uncompressed dir source obvious version python use python solution sudo pip3 install request install request module debian ubuntu python2 sudo apt get install python request python3 command sudo apt get install python3 request brew user use reference command install request homebrew python pip package installer python need package request liittle bit late command run pip path set use python run window command replace request uninstalled library use ubuntu need install request run command face permission deny error use sudo command case request instal need upgrade follow command trick osx command depend flavour python installation python default python window open command line issue copy folder name request https://pypi.python.org/pypi/requests#downloadsrequests download /library site package use import request work fine use python script add third party package application follow link https://cloud.google.com/appengine/docs/python/tools/libraries27?hl=en#vendore step1 file name file name appengine_config.py root project add line google.appengine.ext import vendor vendor.add('lib step create directory name lib root directory project step use pip install lib request step deploy app engine try sudo apt get install python request work thing work face issue unable fix solution try way curl https://bootstrap.pypa.io/pip/2.7/get-pip.py get-pip.py sudo python2 get-pip.py pip install request window give path cd path script python execute command requests.then try import request use anaconda python package manager execute follow instal request pip help issue couple time month see good solution fedora system post solution use rhel7 discover follow instal pip request instal yum issue correct package instal apply instal yum request instal pip fix issue confirm library remove aware work system run fedora redhat centos source question comment answer github issue instal open command line find set path python change path path="/usr local cellar python/2.7.13 bin:${path make sure python2.7 path save work want request import window beautifulsoup4 make sure request module instal recent version python use python run python file enter python interactive mode work run file python3 try follow work next method work leave comment work depend operate system use pip command vary work command try order fix solved try method file add code alias python=/library framework python.framework bin case hit pip install request output massage requirement satisfied get error importerror module name request happen find different interpreter virtual environment copy append path module working environment note path come message requirement satisfied import request import sys append copy path example command prompt pip install request output requirement satisfied request local lib python3.9 site package type command command prompt windows terminal linux macos answer @pi k. case program work fail build qa server suspect devop old version package block version date decide upgrade get import error request build module create need install request use follow command terminal work install python request library error solve use anaconda step python step open anaconda prompt administrator mode step cd python path step install package location case show request requirement satisfied use error instal request several time problem instal request global python environment app virtual environment instal request virtual environment error disappear good reading install request app virtual environment virtual environment package follow tutorial find issue vscode read wrong python interpreter youtube tutorial solve install file https://www.lfd.uci.edu/~gohlke/pythonlibs/#jpype run cmd machine run pip install path to/.whl file equal
see recur question ask various facet pandas merge functionality information merge various use case today fragment dozen word unsearchable post aim collate important point posterity q&a mean next installment series helpful user guide common pandas idiom see post pivot post concatenation touch note post mean replacement documentation read example take ease access merge basic basic type join read first index base join generalize multiple dataframe cross join post aim give reader primer sql flavor merging pandas use use particular post go basic type join leave outer inner post post thread go note example default inner join operation demonstrate various feature specify dataframe copy replicate play see read dataframe clipboard visual representation join operation hand draw use google drawing inspiration sake simplicity key column name inner join represent note forthcoming figure follow convention perform inner join call merge leave dataframe specify right dataframe join key least argument return row leave right share common key example b leave outer join leave join represent perform specify note placement nan specify key leave use miss datum replace nan outer join right join specify how='right key use miss datum leave replace nan full outer join give specify how='outer use key frame nan insert miss row documentation summarize various merge need left exclude join exclude join step leave exclude join represent start perform left outer join filtering row come exclude right exclude join require merge retain key leave right iow perform join similar fashion key column name differently example leave keyleft right keyright key specify left_on right_on argument merge keyleft leave keyright want keyleft keyright output start set index preliminary step contrast output command output left2.merge(right2 left_on='keyleft right_on='keyright notice keyleft miss figure column keep base frame index set key say perform outer join operation example consider require merge newcol column subset column merging leave outer join performant solution involve map mention similar join column specify list left_on right_on appropriate event name different merge dataframe series index see answer merge dataframe.update use certain case update dataframe pd.merge_ordere useful function order join pd.merge_asof read useful approximate join section cover basic design whet appetite example case see documentation merge join concat link function specification jump topic pandas merge continue learn merge basic basic type join index base join generalize multiple dataframe cross join supplemental visual view pd.concat([df0 df1 kwargs notice kwarg axis=1 mean intuitive df.mean df.apply(func animation explain credits garrick aden buie tidyexplain answer consider practical example pandas.concat pandas.dataframe.merge merge dataframe index column one use different dataframe case pandas.concat consider follow dataframe column name price2018 size price2019 size combine use pandas.concat result dataframe size one want clear picture happen work source pandas.dataframe.merge section consider specific case merge index dataframe column dataframe let say dataframe geo column column date type dataframe price column price name price index correspond date date order merge use pandas.dataframe.merge follow geo price previous dataframe result follow dataframe post go follow topic top option simpler other depend use case setup basic inner join index look join follow similar syntax notable alternative dataframe.join default join index dataframe.join leave outer join default how='inner necessary note need specify lsuffix rsuffix argument join error column name problem name join index join dataframe full outer join default how='inner require information concat see post perform inner join use index leave column use dataframe.merge combination left_index true right_on= join follow similar structure note merge perform index column join multiple column provide number index level leave equal number column join concat capable mixed merge need set index step use dataframe.set_index index name pandas = dataframe.merge allow specify index name left_on right_on necessary previous example merging index leave column right use left_on index name leave jump topic pandas merge continue learn merge basic basic type join index base join generalize multiple dataframe cross join post go follow topic top oftentime situation arise multiple dataframe merge do chain merge call get hand many dataframe necessary generalise unknown number dataframe introduce multi way join unique key multi way join unique key first setup key key column index unique use note join dataframe index omit join='inner full outer join note specify leave outer join need use join describe concat fast shortcoming handle duplicate situation use join handle non unique key note join join dataframe index call merge hood leave outer join specify jump topic pandas merge continue learn merge basic basic type join index base join generalize multiple dataframe cross join think include explanation relevant merge see term cross join believe merge occur unique df share column merge side side setup create dummy column merge drop produce df_merge pandas moment support inequality join merge syntax option conditional_join function pyjanitor contributor library column pass variable argument tuples tuple comprise column leave dataframe column dataframe join operator example multiindex column return overlap column name performance wise well naive cross join
create empty list hold element want assign value list example give indexerror list assignment index range editor note python list set capacity possible assign element present answer show code create list dummy element replace beginner encounter problem want build list add element do use method problem specific way create list see iterative list grow code give indexerror list assignment index range add element list detail assign list xs[i = value list initialize least element use xs.append(value add element end list use assignment notation use dictionary list create empty list assign value exist element list keep mind xs[15 fail list element range(x create list use function create list list comprehension use square range need return range(0,9 try create list size position initialize none add element pythonic way thing simple python initialize list value python varunl accept answer work non reference type number want create list list run reference error example python see element pointing list object get create method initialize position different object reference likely default build python way write function ' m sure happy correct edit range(10 example quick method appear none]*x ok range range(x fast ' m surprised suggest simple approach create list empty list old thread add completeness create list empty list list try access element s1[i exist accept answer gotchas example dictionary refer object hold true initialize array object create empty list hold element list hold many element subject limit available memory size list matter number element give indexerror list assignment index range first time loop equal attempt xs[0 work element list valid index use indexing write list element exist overwrite exist one use method next problem note list element end point skip range function side note work list semicolon unnecessary parameter need range start address issue miss mark range magical keyword part language way say def range function return list want range design class range(10 create instance desire list feed list constructor simple way create matrix size use nested list comprehension ' m bit surprised easy way create initialised list answer use generator list function option use numpy fix size array pointer pip install numpy want number numpy code 2d list python read row input come question search similar problem build array replace element list array element dict come question help beginner get key trick initialize array numpy array use j array[i][j reference piece code use know use list comprehension simplicity sake use nested loop hope help other come post list similar list term functionality fix length full get item add item result item @index discard fifo append direction use say need list full use list(deque object list iterable add new element case instantiate empty list length try add value list use list index refer location get error indexerror list assignment index range create list size 10(let say create empty array np.empty(10 convert list use arrayname.tolist chain create list use bracket add list use list.append make reusable function code generate array contain random number
print numpy array truncate representation want full array use numpy.set_printoption suggest use np.inf np.nan suggest other work purpose set threshold infinity obvious read code mean threshold number seem little vague use numpy release new use printoption context manager course replace numpy np import numpy use context manager block ensure context manager finish print option revert block start ensure set temporary apply code block see numpy.printoption documentation detail context manager argument support previous answer correct one weak alternative transform list way useful want change default setting sound use numpy case add disable corner print information see numpy tutorial use context manager paul price sugggeste numpy.savetxt need string default output format configure argument note particular show square bracket allow lot customization mention print numpy array bracket test python numpy slight modification remove option pass additional argument set_printoptions)of neok answer show use contextlib.contextmanager create contextmanager few line code code use slight modification go print huge list increase number character line default linewidth use value linewidth suit code environment save go huge number output line add character line change many line wanna see source complementary answer maximum number column fix numpy.set_printoptions(threshold numpy.nan limit character display environment call python bash interactive session fix set parameter linewidth follow case window limit number character wrap line use sublime text want see result output window add build option false sublime build file source turn return normal mode numpy version detail see github ticket suppose numpy array want print full array way toggle np.set_printoption want simple less code context manager use jupyter notebook find simplest solution case convert numpy array list string print benefit keep comma separator array use numpyp.printoptions(threshold np.inf want item print large array simple way show item work fine slice array default use jupyter try variable inspector extension click variable see entire array use array2string function doc hackiest solution print numpy array large print numpy central part array print corner disable behaviour force numpy print entire array change printing option use set_printoption refer numpy documentation numpy documentation part help pandas available avoid side effect require reset numpy.set_printoptions(threshold sys.maxsize get numpy.array bracket find convenient dumping wide array log file
' m able update pip manage package update pip accord pip pip instal virtualenv want update late version command need use distribute native pip virtualenv command try pip update pip update pip success pip pypi package use upgrade way upgrade package window recommend command safe method run pip python module window seem problem binary try replace method work limitation case pip version break update work fix try solution mention debian jessie work take late version compile debian package manager equate version package use pip prerequisite work result spacy need option cache dir function actual good way solve problem run get-pip.py download use wget website use curl follow install current version time write solution way debian provide case use venv update pip install result upgrading system pip venv pip upgrade pip bootstrappe package window ubuntu follow error execute command command solve problem upgrade pip use pip install pip work dread cert issue problem confirm ssl certificate ssl tlsv1_alert_protocol_version tlsv1 alert protocol version use line command virtual envs want install box need give curl -s flag want silence output run automation script get work drill python directory use python command prompt win10 code case directory run command work ' m good go case work terminal command line debian stable open command prompt administrator permission repeat command pip version issue manif error solution venv want upgrade run similar situation want update urllib3 package work linux windows type command prompt windows search box command prompt type cd\ press enter see drive name c:\ locate python application path folder instal python example python application path retrieve python application path type follow command command prompt cd follow python application path example press enter type python pip install pip press enter lap top window right way install late version pip first sudo apt install python3 pip python setuptool doc non root user run pip root note synonym --upgrade know instal python c:\python\python36 go windows command prompt type cd c:\python\python36 get right directory enter python install pip good single line python program good way find write single line program download run official get pip script see code official doc recommend use curl download get pip script work window curl instal prefer use python download run script single line program run command line use python line get official get-pip.py script installation note execute script exec command python2 replace urllib.requ urllib2 precaution worth note run python script dangerous reason official instruction recommend download script inspect run say many people inspect code run line program make easy similar problem raspberry pi problem http require need force use https get requirement head command prompt type follow envirnment folder struture myenv\scripts\python h:\foldername\myenv\scripts\python pip install pip simple download pip https://bootstrap.pypa.io/get-pip.py save file forlder dekstop save file command prompt navigate folder download pip type linux update code
try make function compare multiple variable integer output string letter wonder way translate python say return list misunderstand boolean expression work work english sentence guess talk comparison name look x evaluate false true shorten use containment test tuple use set take advantage constant cost membership test take fix amount time leave hand operand use python see side operator separate expression expression treat first boolean test false expression test due operator precedence operator low precedence test evaluate case expression z interpret z expect z evaluate first argument truthy e.g. false numeric empty see boolean expression detail python consider false boolean context value = z = z resolve first true value argument false true apply inverse testing multiple value single variable fail reason use = = problem address dictionary structure state martijn pieter correct fast format use advice separate statement python read statement former true false work comfortable use dictionary see clean make initial dictionary mapping number letter want use loop direct way write z think way ugly way lot ifs write lazy put value array put number letter dictionary lot complicate statement try extra lazy thing compile way put variable statement example program check variable null way write statement make sense bool inbuilt function python command verify boolean statement know try make statement lazy way find check value contain set variable use inbuilt module itertool operator example import declare variable create mapping value order want check use itertool allow repetition variable use map function create iterator check value original order use next advantage lambda x x variable operator inbuilt module efficient use lambda create custom place function option check non false value list equivalent set good approach order variable seem goal z x order parameter way whole solution o(n think handle well output want use else statement follow solution excellent answer provide concentrate specific requirement original poster concentrate z solution put martijn pieter ignore broad implication question test variable multiple value solution provide work partial hit use string example test stre wild multiple value scenario easy convert string note mention @codeforester word boundrie lose method letter rot exist combination list individual word testing rot fail list item rot hell fail upshot careful search criterion use method aware limitation code helpful try method show method freedom specify input number variable wish enter line solution pythonic way represent pseudo code python need direct formula output bit set let map bit c':1 d':0xb10 f':0xb1000 relation isc use math formula https://youtu.be/kadkcgbgk0k?list=plni9xbpdzuamul8htsl6vtopqrrn3hhfp&t=315 c xyz=0 isc=0 isc=0 x-1)(y-1)(z-1)=0 isd=2 isc=0 connect formula follow logic total equation express sum total formula sum sum&1 sum&2 sum&4 e sum&5 f form predefine array index string element correspond ready string array[sum give string do test multiple variable single value b c test multiple value variable look build caesar generalize approach output sure desire side effect code order output sort want final line change use dictionary dict try solution give help unite variable change condition output develop way work explain answer generic answer use good specific problem case repeat test worthwhile compose set variable simplify use dictionary result value order mylist arbitrary loop value match mapping pattern test multiple value readable work many situation pitfall want generalization previous expression base answer ytpillai write expression return result readable first expression way mix list comprehension keyword usage example first correction conditional need say reason split condition separate logical part way original statement write part last part fine checking see z = instance part say y. integer evaluate true mean first part condition true x equal case cause whole condition work true avoid need make sure part condition side make sense pretend side(s statement exist confirm condition define write statement mean correct mergin keyword solve problem want check see variable match give integ assign letter match mapping want certain list integer output list letter use list comprehension achieve result fast test multiple variable single value wrap variable set object b c use operator test value store variable operator return true value store variable source https://bobbyhadz.com/blog/python-test-multiple-variables-against-single-value use row col selector act condition
try follow pep follow directory structure core_test.py follow import statement run follow error search find relative path work init__.py import module relative path help miss elaborate ignacio vazquez abrams answer python import mechanism work relative name current file execute file usual name main name relative import work igancio suggest execute use option part package mean run script use package attribute tell file name suppose package hierarchy see http://www.python.org/dev/peps/pep-0366/ detail use package depend want launch script want launch unitt command line classic way case component test sibling folder import relative module use insert append method sys.path module launch script argument note case talk package give extension case use relative import mix approach script work matter call example use import append current directory sys.path core_test.py follow issue testing method try python core_test.py get error valueerror attempt relative import non package reason testing packaging non package source test module package source project structure cd pkg pkg/ single want import folder directory step add how.py incase want import hello.py use case run test seam follow run test script python use testing framework pyt command line enter run test directory get issue name main pointed @brenbarn put empty init__.py file test directory make test directory part package able run test script main program thing fail use test runner work test runner nosetest check hope help quick fix add directory path paolo say invocation method difference sys.path[0 string interpret search sys.path import test run core_test.py method note py36 test old thread find add all__= submodule init__.py file use current_module import target work fine use pkg.components.core import gameloopevent example use pycharm project structure image import root package work approach work cluttered solution parent directory pythonpath init__.py file parent directory directory work python python hit importerror modulenotfounderror latter new python subclass importerror follow tweak work python mark module need use relative reference launch python module run parent pkg use try look workaround stumble bit context want test method ' file run complain relative import try apply solution fail work many nested file multiple import create launcher external program import necessary method call great solution work way piss work test run import component work set value package parent directory add parent directory sys.path run script python myscript.py problem relative import work run main module command line state release show surprising obvious retrospect interaction pep explicit relative import work main module due fact relative import rely name determine current module position package hierarchy main module value name main explicit relative import fail work module package issue unique switch problem relative import base name main module name value main relative import work main module application main module know fit python module namespace fixable theory main module execute switch execute file interactive interpreter luck understand see relative import python detailed explanation get ve similar issue software engineer think suggest solution ideal want relative import try absolute import run program change sys.path program work independent current work directory independent start create new experimental import library ultraimport allow file system base import matter run code original question change core_test.py find matter run test put example example folder git library experimental interested feedback work test confusing use ide pycharm little confusing work make pycharm project setting run python python directory wrong way define work folder1.file1 import class work use import folder1.file1 environment variable mention system provide command line argument project structure look go import file1.py file2.py file2.py know work code contain name = main import package use sys.path.append solve problem
nice way follow return today date yyyy mm dd format use strftime include pad hour minute second end get utc date time use datetime.date.today convert result datetime.date object string use isoformat method note work datetime object need time standard iso format late answer use datetime lovely remember funny code prefer simplicity module clever understand mean pip install arrow addendum answer become exercise answer say arrow represent alternative approach deal date python mean suggest use pd.to_datetime pandas library various option depend want return python datetime object format date string get date timestamp call timestamp.date to_datetime instantiate timestamp object use want make timestamp timezone aware pass timezone argument good promise work pendulum interesting choice get current timestamp use today date use today get tomorrow yesterday date additional timedelta arithmetic various format option available lot pandas user stumble question believe python question pandas answer aim useful folk use library interest know way achieve result scope library work pandas pendulum recommend instal sake run code librarie heavy come lot plumb hood worth trouble use standard library need pacific standard time pst use f string good choice text variable mix take python f string format work strftime inline official link code little complicated use lot reference:'https://strftime.org/ look reference make want yyyy dd change code work output time additional get day number date python yyy)order_date need output
surf namespace notice odd look object call ellipsis seem special available builtin search find use obscure variant slicing syntax numpy scipy object add language support numpy scipy ellipsis generic meaning use come question elaborate answer ellipsis object appear slice notation example interpretation implement getitem function see ellipsis object main intended use numpy third party library add multidimensional array type dimension slicing become complex start stop index useful able slice multiple dimension give × array top leave area define slice extend ellipsis use indicate placeholder rest array dimension specify think indicate full slice dimension gap place 3d array a[0 a[0 many colon middle make full number dimension array python3 ellipsis literal usable outside slice syntax write edit ellipsis use standard library typing module callable int indicate callable return int specify signature tuple[str indicate variable length homogeneous tuple string python can¹ use ellipsis literal nop placeholder code write magic expression use use word sanction say use reject guido ¹ python pep484 literal ellipsis use denote certain type static type checker use type module example arbitrary length homogeneous tuple express use type ellipsis example tuple[int example possible declare return type callable specify call signature substitute literal ellipsis dot list argument sum other say python ellipsis singleton constant similar none particular intend use exist use include possible use use ellipsis specify expect doctest output python documentation object use slicing see slicing support special operation ellipsis object name ellipsis build name type(ellipsis produce ellipsis singleton write ellipsis getitem minimal example custom class magic syntax pass custom class getitem receive ellipsis class object class want singleton object example python build list class choose give semantic range sane usage course stay apis create separate explicit method test python come answer work codebase heavy pydantic use pydantic indicate field require set none refer require optional field end use fastapi use ellipsis custom slicing situation numpy do usage builtin class know add use numpy see use use ellipsis slicing syntax python mention @noɥʇʎԁʎzɐɹɔ @phoenix use stub file information example use ellipsis discover https://www.python.org/dev/peps/pep-0484/#stub-file equivalent constant define build constant ellipsis ellipsis literal special value use conjunction extend slicing syntax user define container datum type intend use 3rd party module mention python documentation find ellipsis use cpython place use represent infinite datum structure python come notation play list see question info typer use create require parameter argument class expect default value pass complain user pass particular argument use none ellipsis remove opportunity express none default value case make sense program fastapi make use ellipsis create require parameter https://fastapi.tiangolo.com/tutorial/query-params-str-validations/
think want common task find reference web text punctuation want list word python str.split work argument words punctuation split whitespace idea re.split re.split(pattern string maxsplit=0 split string occurrence pattern capturing parenthesis use pattern text group pattern return part result list maxsplit nonzero maxsplit split occur remainder string return final element list incompatibility note original python release maxsplit ignore fix release case regular expression justify quick way regexp replace character many answer find solution title question ask split multiple possible separator many answer split word different answer question title rely python standard efficient module re.split split multiple separator ask question title solution immune problem non ascii character word find solution see first comment ghostdog74 answer module much efficient speed concision python loop test hand way regex tip use fast string operation python proof slow way sorry pprzemek next use give suggest answer use translate explanation string.translate implement c many string manipulation function python produce new string fast get string substitution bit awkward need translation table order magic make translation table maketrans convenience function objective translate unwanted character space substitute new datum produce next use good old split split default operate whitespace character group split result list word want approach 4x similar dilemma want use module want agree other regex str.translate base solution performant use case performance function significant want add idea consider criterion main goal generalize idea answer solution work string contain regex word blacklist explicit subset punctuation character whiteliste word character note approach consider use string.punctuation place define list surprised see answer use re.sub find simple natural approach problem solution nest call re.sub performance critical compile regex beneficial use case difference significant prefer simplicity readability line benefit expandable check need escape certain character regex nice able map str.replace stre think do immutable string mapping list character work run replacement character sound excessive edit see next option functional example python reduce available global namespace import functool become liner explanation haskell know list monad idea monad monad stay monad take example haskell say map python range(n n function list result list append list place get map(range know map append mappend idea get operation apply splitting token join result list abstract function token = string.punctuation default advantage approach solution sep.__contains method use operator convenient groupby get string function split string group use function value function change new group generate sep.__contains need groupby return sequence pair pair[0 result function pair[1 group use k filter group separator result sep.__contains true separator sequence group word group iterable use join convert string solution general use function separate string split condition create intermediate string list remove join expression become lazy group iterator use replace time result try print python use method py4e python solve problem use string method low punctuation translate translate subtle method documentation translate your_string.translate(your_string.maketrans(fromstr tostr deletestr replace character fromstr character position tostr delete character deletestr fromstr tostr empty string deletestr parameter omit see punctuation example information refer use module function re.split achieve result use series.str.split method pandas first create series string apply method series thestring |||-| parameter pat take delimiter return split string array delimiter pass use |||| operator output follow acquaint python need thing findall solution come use maketran translate way achieve use natural language tool kit nltk print big drawback method need install nltk package benefit lot fun stuff rest nltk package get token think intention use punctuation delimiter split function description suggest want eliminate punctuation resultant string come usual solution require require import string traditional function line list comprehension addition import string leave contraction hyphenate word intact use text.replace("- turn hyphens space split general solution specify character eliminate list comprehension get course generalize lambda function specify string character come solution test fail point seem work least example get problem @ooboo find topic @ghostdog74 inspire find solution usefull input space place split use character want split space use re.compile perform regex operation loop work normal operation problem first compile pattern perform action answer explanation line update answer create function take input string source string split splitlist string delimiter outputs list split word pprzemek solution assume delimiter single character try leverage regex work number separator get crazy long readable version solution clarity go split multiple deliminater think follow good answer suite need suitable case suitable case here take usage replace follow procedure change separator define string splitlist first separator splitlist split text separator account splitlist happen empty string return list word empty string want reversible operation preserve delimiter use function need want function match standard library str.split function function behave standard library call argument note function useful separator consist single character usecase
work code throw lot moment useless warning use warning library read /scanne documentation find way disable warning single function want change much code flag python -no warn foo.py recommend suppress warning section python docs use code know raise warning deprecate function see warn possible suppress warning use catch_warning context manager condone suppress warning ex -w option define environment variable new feature test default ignore warning deprecation warning look ignore deprecation warning copy documentation warning module window pass -w ignore::deprecationwarne argument python resolve issue cast int note python deprecation warning ignore default get deprecationwarning one cause want complicate make complicated use line old question new guidance pep turn warning write python application use reason recommend turn warning default allow switch python command line pythonwarning fail use https://github.com/polvoazul/shutup pip install shutup add top code disclaimer owner repository write 5th time need find simple work know useless warning encounter filter message change ignore default working file add new functionality enable warning realise applicable niche situation numpy context use use good part apply specific line code warning.filterwarning suppress warning suggest use follow method want suppress specific set warning filter warning output stderr simple solution append null cli make lot sense many user centos stick python dependency yum various module push edge extinction coverage true cryptography involve sni et cetera update https handling use proc https://urllib3.readthedocs.io/en/latest/user-guide.html#ssl-py2 warn place want port direct stderr leave clean terminal shell output stdout content change respond friendfx sentence respond problem universal solution sentence take account cite anchor disable warning python specific note rhel centos user specific warning cite para answer question get short coming cryptography module modernize upgrade backport fix python https tls performance para explain outcome use direct upgrading module dependency
applicable difference dict.item dict.iteritem python doc dict.item return copy dictionary ’s list key value pair dict.iteritem return iterator dictionary key value pair run code seem return reference object subtle difference miss output part evolution python item build real list tuple return take lot extra memory generator introduce language general method reimplemente iterator generator method name iteritem original remain compatibility python ’s change item return view list build iteritem method go item python work viewitem python dict.item return list tuple key value key value dict.iteritem generator yield tuple former take space time access element second take less space time bit time generate element command dict.item dict.key dict.value return copy dictionary list k v pair key value take lot memory copy list large command dict.iteritem dict.iterkey dict.itervalue return iterator dictionary ’s k v pair key value command dict.viewitem dict.viewvalue return view object reflect dictionary change del item add k v pair dictionary view object change time thing clean dict.item dict.key dict.value available return view object dict.viewitem py2.x note view object iterator want return iterator py3.x use ask applicable difference dict.item dict.iteritem help python see d.item return list tuple key value pair d.iteritem return dictionary itemiterator list d.item slice able iter method iterator d.iteritem slice able iter item container deliver item different list iterator depend python version applicable difference dict.item dict.iteritem applicable difference list iterator dict.item return list tuple dict.iteritem return iterator object tuple dictionary key value tuples container different dict.item copy dictionary list try use follow code compare execution time dict.item dict.iteritem see difference output machine show dictionary.iteritem much efficient dict.iteritem go use iter(dict.item get output memory alocation dict = key1 value1 key2 value2 key3 python dict.item copy tuple return list tuples dictionary key1,value1 key2,value2 implication whole dictionary copy new list contain tuple dict.iteritem return dictionary item iterator value item return key1,value1 key2,value2 list dictionary item iterator object mean less memory usage less tuple compare tuple get python dict.item return iterator object dict.iteritem remove issue dict.iteritem give iterator use iterator pattern loop dict.iteritem python equivalent dict.item python
compile python code get error indentationerror unindent match outer indentation level poster correct space mixed tab try search replace replace tab space try important space prefer method see pep indentation tab space thank sublime text user set sublime text use tab indentation view indentation convert indentation tab uncheck indent use space option sub menu resolve issue check problem tabs space set editor sure mix tab space indentation white space cause error note use tab python code see style guide configure notepad++ insert space tab encounter error ' mix tab space editor use hit escape type gg g auto indent clear space throw use python idle editor suggest similar error message select ctrl go format untabify region double check indent correct save rerun program use python line result result indented body loop mixed space tab character spyder user goto source fix indentation fix issue use visual studio code use code convert mix indentation space tab use simple step press ctrl shift p type indent use space press enter atom go check file indentation use notepad++ replace extended search mode find \t replace space look indentation problem match curly bracket python match indentation level good way prevent space tab problem display invisible character text editor give quick way prevent resolve indentation relate error inject copy paste code common source type problem use colab avoid error command tab indentation convert space indentation addition similar problem indentation notepad++ outer indentation level go search tab tap replace hit radio button extend replace \t space go search tab tap replace hit radio button extend replace \n use jupyter notebook try solution adapt scenario use go line line delete space line replace tab solve issue worth docstre indented throw error indentationerror unindent match outer indentation level use sublime text ubuntu os fix issue go view indentation convert indentation tab function indented way realize answer specific spyder add look statement make sure elif space line start use sublime text flask project fix error use view indentation tab width unselected indent use space mix tab space remove space replace tab try write begin code line resolve difference tabs space issue yesterday indentation error use sublime text editor take hour try fix end ended copy code vi text editor work fine ps python whitespace sensitive make sure mix space tab atom user package ->whitspace remove trail whitespace work function define content function comment yell note line mark point empty multiple solution comment function add function comment add line case make sure make obvious empty function peer use code remind logical error keep result=1 output result=0 loop run write leave line tell python shell statement end experience use python shell understand leave line example code situation occur delete previous indent space line use tab space use give proper indentation write code python spyder goto source fix indentation go vc code sublime text editor fix indentation get error tabs code reason superfluous closing parenthesis code figure mess space equal sign find run reformat code ide run autopep8 make sure parenthesis match start weird space equal sign error thing tab space indent much space oversee long code block thing docstring need aligned see answer page reproducible line throw get pylint bracket wrong place add answer send lot time look tab case tab space get similar error indentationerror expect indented block forgot put pass class function code write class function show code write class function show get error syntaxerror unexpected eof parsing
embarrassing get application throw flask serve single static html page link css js find documentation flask describe return static file use render_template know datum templatize think send_file right thing get work open file read content rig response appropriate mimetype want give code sample url know go dead simple production configure http server nginx apache front application serve request /static static folder dedicated web server good serve static file notice difference compare flask low volume flask create /static/<path filename route serve filename static folder python module define flask app use link static file url_for('static filename='js analytics.js use serve file directory route take base directory path ensure path contain directory make safe accept user provide path useful case want check serve file log user permission use send_file user supply path expose directory traversal attack design handle user supply path know directory raise error path attempt escape directory generating file memory write filesystem pass bytesio object send_file serve file need pass argument case infer thing file name content type want move location static file simplest method declare path constructor example move template static file folder call web use method follow url return css file snap folder structure flask_server.py flask instance favorite set folder static path file reachable set use standard html ' m sure find need http://flask.pocoo.org/docs/quickstart/#static-file need static folder root package use url_for('static filename='foo.bar link file http://example.com/static/foo.bar edit suggest comment use /static foo.bar url path overhead performance wise low use mean customise behaviour change folder change url path move static file s3 use function send_static_file(filename function use send static file static folder browser use work great template directory static directory place file flask template template directory static contain css js render_template work fine generic html file knowledge extent use flask template syntax sample call views.py file make sure use want reference static file separate static directory end css js file link html instance link canonical informal flask tutorial lot great tip hit ground run http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world work example base answer follow html call important folder call static meaning projectpath file projectpath>\static html file want server visible network use app.run(debug true edit show file folder request use blackmamba answer give upvote angular+boilerplate flow create next folder tree use follow solution help redefine static folder custom template root directory place app = flask(name work file contain location file location specify template location enable flask point location default folder name static contain static file code sample link url_for('static filename='vendor bootstrap css bootstrap.min.css get thing work base @user1671599 answer want share guy hope ' m right first app python project structure server file css reference html simple way cheer demo.py create folder name call template add file template folder project structure issue relate index.html file serve directory use static_url_path static_folder solution think share example work well simple answer good work use simple function flask work send html file response host port apiname show output file browser simple way create static folder main project folder static folder contain file main folder image main folder contain static template folder flask script flask html layout html url static file create use static endpoint follow default flask use template folder contain template files(any plain text file kind template language jinja2 static folder contain static files(i.e image route u use render_template render template file say default place template folder response request template file file use .css file guess question u link static file current template file try open file use reading file look static directory create template directory directory add html file create separate directory css javascript flask treat recognize html file template directory work case need file static folder accessible user need use template html file common html code place template code reuse achieve file keep static folder parallel main flask file example return adsense file use
wonder good practice indicate invalid argument combination python come situation function annoyance package differ badvalueerror know java exist java.lang.illegalargumentexception understand create badvalueerror python preferred method raise valueerror need specific exception point class badvalueerror(valueerror):pass custom class identical use valueerror use inherit valueerror create exception inherit build close want possible catch specific error helpful name think good way handle way python handle python raise typeerror example junior dev find page google search python exception wrong argument ' surprised obvious answer suggest decade question ask depend problem argument argument wrong type raise typeerror example get stre boolean note python make check argument invalid deep function complain check boolean value code user feed string know non empty string true save cast argument invalid value raise valueerror seem appropriate case specific case true value recurse imply true value save consider recovery error want complain log see builtin valueerror use situation use valueerror raise valueerror full case depend type bad value example make function allow string user put integer typeerror user inputte wrong input mean right type qualify certain condition value error good choice value error use block program exception example use valueerror stop shell form raise zerodivisionerror example function p.s list python build exception go https://docs.python.org/3/library/exceptions.html official python databank agree markus suggestion roll exception text exception clarify problem argument list individual argument value propose use keyword argument miss require specific call argument value valid inconsistent valueerror specific argument right type range standard exception python general like python style bit sharp distinguish bad input function caller fault bad result function fault badargumenterror distinguish value error argument value error local ' m agree inheritance valueerror interpretation documentation valueerror raise builtin inherit raising seem incorrect raise build operation function receive argument right type inappropriate value situation describe precise exception indexerror valueerror documentation
create simple object hierarchy python like able invoke method parent class derive class perl java keyword super perl python appear name parent class child example have foo::frotz seem right behavior make make deep hierarchy child know class define inherit method sort information pain create actual limitation python gap understanding use super function python opt use new style class use python super(type object type return proxy object delegate method call parent sible class type useful accessing inherit method overridden class search order use getattr type skip example fine immediate parent class define frotz inherit need proper support multiple inheritance work class use general go look anyclass ancestor anyclass define override hold true child class call parent method occurrence python different simple syntax call parent method foo class inherit bar bar.__init invoke foo super().__init many answer explain call method parent overridden child call parent class method child class mean call inherit method call method inherit parent class method child class overwrite python obvious feel point people leave thread impression jump ridiculous hoop access inherit method python question rate search access parent class method python op write perspective new python find https://docs.python.org/3/tutorial/classes.html#inheritance useful understanding access inherit method example use super super python bit wonky python old- new style class use e.g. constructor recommend use class.__base know many argument get want pass child python clean way override init optional kwarg use call super python example super class method call sub class method example similar explain difference super argument pass code executable python version example cafec_param base class parent class abc child class abc call awc method base class output python lot luck use answer jimifiki thread refer parent method python add little twist think improvement usability long class name define base class module import class module parent want call method class call instance class inheritance clean work instance child class abstract method
python follow way get number element strange syntax work tuple string array character do way list tuples container type iterable implement public .length method check len implement magic len method seem redundant length checking implementation vary language uncommon see collection type use .length method type use .length property use language level keyword unify entry point type object consider list element length check include string queue tree functional nature len lend functional style programming way take length make sense list dictionary tuple string call len reason strange syntax python translate len(object apply object define class make sense length define len method call len instance use len(arr preferred way get length python object pass argument len function python try call special len method object pass python use duck typing care object appropriate interface situation hand call build function len object call internal len method custom object implement interface len return answer object sequence complete list interface look http://docs.python.org/reference/datamodel.html#basic-customization use len(arr suggest previous answer get length array case want dimension array use return height width len(list_name function take list parameter call list len function python suggest user use len len consistency guy say benefit build type list str bytearray cython implementation len shortcut return c structure call len interested detail read book call fluent python luciano ramalho many interesting detail understand python
operator mean python code f(**k single star unpack sequence collection positional argument unpack tuple execute double star use dictionary name argument combine execute see section unpack argument list python documentation define function take argument allow function accept number positional name argument name declaration example allow specify large number optional parameter declare combine small point operator operator use expression create new value exist value become example part syntax function declaration call function call single star turn list seperate argument zip(x1,x2,x3 x=[x1,x2,x3 double star turn dictionary seperate keyword argument f(x = my_x my_y k = x':my_x y':my_y function definition way single star turn arbitrary number argument list double start turn arbitrary number keyword argument dictionary def mean foo take arbitrary number argument accessible list user call foo(1,2,3 def bar(**k mean bar take arbitrary number keyword argument accessible dictionary user call bar(x=42 y=23 k x find useful want store function call example suppose unit test function add way call add add(test[0 test[1 ugly variable number variable code get ugly statement need place useful define factory object object create object suppose class factory make car object return make myfactory.make_car('red bmw 335ix create car('re bmw 335ix return useful want call superclass constructor call extended call syntax documentation syntax expression appear function call expression evaluate sequence element sequence treat additional positional argument positional argument x1 xn expression evaluate sequence y1 equivalent call m+n positional argument x1 xn y1 ym syntax expression appear function call expression evaluate mapping content treat additional keyword argument case keyword appear expression explicit keyword argument typeerror exception raise
future appear python module understand future use read python future doc explain example answer regard basic usage future receive seem correct understand thing regard future work confusing concept current python release include feature future release program use feature future release compile current version python guess current release package potential feature future feature available use future current standard let know right future module inclusion accustom incompatible change one introduce new keyword use context manager future import with_statement keyword new use variable name use python keyword python old need use import example future stuff print statement print internal difference import map div method truediv use case call floordiv apropos print print become function lose special property keyword way use import statement future statement read wrong doc import module future statement special change python module parse top file give new different meaning word symbol file docs future statement directive compiler particular module compile use syntax semantic available specify future release python future statement intend ease migration future version python introduce incompatible change language allow use new feature module basis release feature become standard want import future module access usual future pseudo module programmer use enable new language feature compatible current interpreter example expression evaluate module execute enable true division executing expression evaluate import future module evaluating variable see new feature add language become default great answer none address complete list future statement support put future statement force python interpreter use new feature language feature support follow prior python follow code raise nameerror future import nested_scope directive allow feature enable introduce generator function save state successive function call classic division use python version mean division statement return reasonable approximation division true division other return floor floor division start python true division specify floor division specify x//y future import division directive force use python style division allow parenthesis enclose multiple import statement example add statement keyword python eliminate need statement common use file print_function force use python parenthesis style print function call print message style statement unicode_literal introduce literal syntax byte object mean statement world ascii express b'hello world replace use stopiteration exception use generator function runtimeerror exception use mention future statement require use python interpreter use old version throw runtime exception use use feature appear new version old release python example allow use print function say python v2.7 use different print function add python v2.7 add python print long statement eg print message function print("message option way code run python print break print_function module contain new implementation print behave python v3 explanation http://python3porting.com/noconv.html use find useful print_function future module python want char different print statement print line space do use comma end append extra space statement use print value v_num iteration single line space future python module add avoid confuse exist tool analyze import statement expect find module import add version import future fail use prior version see code division return format feature(optionalrelease mandatoryrelease compilerflag optionalrelease mandatoryrelease tuple form case optionalrelease 2.2.0a2 mandatoryrelease 3.0.0a0 optionalrelease tell first release feature accept mandatoryrelease predict feature part language show feature become part language release module need future statement use feature question continue use import mandatoryrelease none plan feature drop compilerflag bitfield flag pass fourth argument build function compile enable feature compile code flag store compiler_flag attribute feature instance python onward print long statement function include pep think python package special functionality let see usability traditional pyramid program python use normal print function able achieve output print come extra newline time inner loop execute print next line
see m window unix output platform.system follow see platform access underlie platform ’s identify data dang louis brandy beat punch mean provide system result vista n’t believe post window record result mac sample code differentiate operating system use python short story use platform.system return windows linux darwin osx long story way get pro con method work source call os apis get name define see various os specific value magic low level con os version dependent good use method work source check python specific module call posix pro simple check posix os con differentiation linux osx method work source call internal os get os version specific name win32 win16 linux1 normalize generic name windows linux darwin apply several heuristic good portable way windows osx linux con python folk keep normalization heuristic date summary start bit systematic listing value expect use various module feel free edit add system 32bit column run 32bit subsystem remark compare system run script append result miss use sys.platform import sys want import module want user readable datum detail use platform.platform different possible call identify linux_distribution dist remove recent python version outputs script run different system linux window solaris macos architecture x86 x64 itanium power pc sparc available ubuntu server example give new answer output use macos use platform.system return system os name linux darwin java window empty string return value determine use wlst tool come weblogic implement platform package patch system javaos.py issue os.system window jdk1.5 use weblogic box use bin jython way get os name find check os.name java property try sys os platform module jython winxp interesting result window edit bug watch windows cygwin os.name posix know old question believe answer helpful people look easy simple understand pythonic way detect os code test look kernel version look linux distribution want use follow python2.4 work run linux want generic script platform mix code sample give answer use platform module import module get information nice tidy layout reporting purpose achieve use line give output miss operate system version know run windows linux mac platform indipendent way test vein check available test module platform print answer system run macos x run platform.system get darwin macos x build apple darwin os darwin kernel macos x macos x gui solution work python jython module os_identify.py use simple enum implementation follow need external libs access enum value p.s python3 look code pyosinfo part pip date package get relevant os information see python distribution common reason people want check os terminal compatibility certain system command available success check dependent python installation os example uname available window python package python program show output use build function provide os sys platform site good way get essential code look example guess paste correct late game case need function use make adjustment code run windows linux macos alot way find easy way use os package
want change couple file time iff write wonder combine multiple open call statement possible elegant solution problem look python write historical note early version python use contextlib.neste nest context manager work expect open multiple file see link documentation detail rare case want open variable number file time use start python version note want process file open time particular variable number file replace do open many file long file path useful break thing multiple line python style guide suggest @sven marnach comment answer python new feature parenthesize context manager permit syntax python use class exitstack contextlib module open arbitrary number file manage dynamic number context aware object mean prove useful know many file go handle fact canonical use case mention documentation manage dynamic number file interested detail generic example order explain exitstack operate output nest statement job opinion straightforward deal let say write outfile edit understand reason downvote test code publishing answer work desire write outfile question ask duplicate write fail write curious know answer consider wrong suboptimal python work use way open multiple file late answer yr look join multiple file one follow function help
use matplotlib inline matplotlib magic function ipython quote relevant documentation read convenience ipython set predefine magic function call command line style syntax kind magics line orient cell orient line magic prefix character work os command line call get argument rest line argument pass parenthesis quote line magic return result use right hand side assignment cell magic prefix double function get argument rest line line separate argument matplotlib inline set backend matplotlib inline backend backend output plot command display inline frontend jupyter notebook code cell produce result plot store notebook document use inline backend matplotlib graph include notebook next code worth read make ipython notebook matplotlib plot inline reference use code want interactivity use nbagg backend matplotlib notebook ipython describe provide run ipython matplotlib inline make plot output appear store notebook accord documentation set plot import matplotlib perform execute matplotlib magic command perform necessary scene setup ipython work hand hand matplotlib execute python import command name add namespace interesting backend provide ipython inline backend available jupyter notebook jupyter qtconsole invoke follow backend output plot command display inline frontend jupyter notebook code cell produce result plot store notebook document explain clear add matplotlib inline jupyter notebook want add plot jupyter notebook matplotlib inline standard solution magic command use matplotlib matplotlib plt plot command cause figure window open command run update plot change draw force update use plt.draw matplotlib notebook lead interactive plot embed notebook zoom resize figure inline draw static image notebook mean graph create part code appear notebook separate window happen use magic statement ipython kernel ability display plot execute code ipython kernel design work matplotlib plot library provide functionality matplotlib magic command perform necessary scene setup ipython work hand hand matplotlib execute import command name add namespace available jupyter notebook qtconsole valid value gtk3agg gtk3cairo macosx nbagg qt4agg qt5agg qt5cairo tkagg tkcairo webagg wx wxagg wxcairo agg cairo pdf pgf ps svg template example gtk3agg agg render gtk canvas require pygobject pycairo cairocffi detail matplotlib interactive backend start ipython matplotlib avoid use ipython specific magic use matplotlib.pyplot.ion()/matplotlib.pyplot.ioff advantage work ipython refer ipython rich output interactive plotting start ipython matplotlib avoid use ipython specific magic use matplotlib.pyplot.ion()/matplotlib.pyplot.ioff advantage work ipython ipython docs know backend read https://matplotlib.org/stable/users/explain/backends.html people use matplotlib python shell plot window pop type command people run jupyter notebook draw inline plot quick datum analysis other embed matplotlib graphical user interface wxpython pygtk build rich application people use matplotlib batch script generate postscript image numerical simulation other run web application server serve graph support use case target different output capability call backend frontend user face code plot code backend hard work scene make figure type matplotlib inline activate inline backend discuss previous post backend output plot command display inline frontend jupyter notebook code cell produce result plot store notebook document provide run jupyter notebook matplotlib inline command make plot output appear notebook store think recent version jupyter matplotlib figure plot inline need use matplotlib inline think command useless understanding create manager configure plot parameter matplotlib look exist manager create figure create necessary matplotlib.pyplot.figure setting plotting parameter rcparam create manager plot figure first time new manager create overwrite parameter comment un comment matplotlib inline see happen forget restart kernel try mandatory write work matplotlib magic function use sypder compiler one come
change font size element tick label title matplotlib plot know change tick label size do change rest matplotlib documentation set font item font specify kwargs object font use rcparams update method suggest answer find full list available property customize matplotlib page control freak want set font size note set size call rc method matplotlib want change fontsize specific plot create try update see bottom answer well way update ' figure change legend title font update bug matplotlib cause tick label logarithmic axis revert default font fix 2.0.1 include workaround 2nd part answer answer try change font include legend try use different font size thing use rc seem work cumbersome get grip method combine ryggyr answer answer benefit method several font dictionary choose different font size weight colour various title choose font tick label choose font legend update work different cluttered approach font dictionary allow font system font separate font thing write font_path font_prop variable comprehensive answer different approach work change font size change figure size use code small make figure size large font relative plot upscale marker note set dpi dot inch learn post amta american modeling teacher america forum example code use plt.rcparams["font.size set matplotlib use set try example use plt.tick_params(labelsize=14 use jupyter notebook change rcparams granular time want scaling font size see well figure figure size good trick carry figure way matplotlib use seaborn set font scale seaborn disclaimer know use matplotlib want install whole module scaling plot mean use seaborn control option case seaborn data science virtual env use notebook solution base stuff agree prof huster simple way proceed change size figure allow keep default font complement bbox_inche option saving figure pdf axis label cut extension marius retegan answer make separate json file modification load rcparams.update change apply current script save folder want point herman schaaf pedro duarte answer work instantiate subplot setting affect instantiate object know brainer spend quite time figure answer work try use change call subplot mention comment deserve answer modify conjunction adjust figure size scale text label short bit tricky figsize control scale text relative plot extent aspect ratio plot dpi adjust size figure notebook keep constant relative scale text plot aspect ratio write modified version answer @ryggyr allow control individual parameter work multiple subplot
use kwargs python know objects.filter table pass kwargs argument specify time delta timedelta(hour time1 work classify unpack b=1,2 use kwargs let function take arbitrary number keyword argument kwargs mean keyword argument use kwargs syntax call function construct dictionary keyword argument pass function python tutorial contain good explanation work nice example python iteritem use item unpack dictionary useful construct parameter let use function kwargs dictionary add parameter dictionary contain key value pair kwargs simple example hypothetical interface call routine job get new method drive wait minute new parameter vehicle know add signature mydo function throw kwargs play add kwargs signature way need change signature interface function time call routine change nice example find kwargs helpful basis good sample well long discourse write function use python variable argument pass facility positional name argument able see output motif args kwargs serve placeholder argument pass function call use args kwargs call function use args call define function arg1 arg2 use kwargs call function arg1 arg2 bottomline args intelligence interpolate pass args parameters(in leave right order kwargs behave place appropriate value require place say let explain name argument arbitrary number name argument kwargs name argument example arbitrary number name argument kwargs example pass tuple dict variable custom args finish note pass call make follow note function call omit get ill result omit tuple args print tuple custom param1 custom param2 custom param3 print omit dict args give addition mix different way usage call kwargs function give output note kwargs last argument simple function serve explain usage argument specify function definition put args list kwargs list depend keyword argument add keyword argument pass function error raise kwargs syntactic sugar pass name argument func dictionary name arguments(to func example hope helpful run program get key take variable number name argument call translate dictionary function keyword argument shorten kwargs python computer programming keyword argument refer computer language support function call state name parameter function call usage asterisk parameter name kwargs know many keyword argument pass function case call arbitrary wildcard keyword argument example django receiver function notice function take sender argument wildcard keyword argument kwargs signal handler take argument signal send keyword argument change keyword argument time case request_finishe document send argument mean tempt write signal handling my_callback(sender wrong fact django throw error point argument add signal receiver able handle new argument call kwargs need name kwargs convention simple example understand python unpack eg1 java use constructor overload class allow multiple input parameter python use kwargs provide similar behavior example https://beginnersbook.com/2013/05/constructor-overloading/ python example way think
python package setup.py build ubuntu trusty fresh vagrant ubuntu trusty vm provision travis ci trusty beta vm get create wheel python relate note instal wheel upgrading setuptool install wheel package date give error work issue ubuntu new machine installation require last line line require prerequisite work add setup.py save pip install command require module instal need import setuptool module setup.py file add follow line lead setup.py file mention wheel documentation https://wheel.readthedocs.io/en/stable/#usage problem bit complicated explain https://github.com/travis-ci/travis-ci/issues/4989 solution install user travis sudo case version wheel pip setuptools create venv old work error weird many propose answer get mixed solution try add add pip install pip remove error time isolate fyi setup.py change create virtualenv run command work wheel instal tried uninstall reinstall fix issue weird fix apt install python3 dev pip version outdate experienced problem wsl instal module create virtual environment able resolve run follow command apt get install python3 dev ubuntu add setup_requires=["wheel setup.py try modifying file importing setup setuptool use file add part example setup.cfg project help follow instruction https://packaging.python.org/guides/installing-using-linux-tools/ debian ubuntu python python use ubuntu problem resolve instal python3 wheelpackage instal dependency python package build container image work install miss instal none work experience problem see error attempt install pyspark solution explain stackoverflow question unable install pyspark post b obvious error message issue stem pyspark dependency pypandoc hope save other hour head scratch relate travis ci run similar problem try install jupyter mac osx 10.8.5 none answer help problem cause building wheel package call pyzmq error message fill hundred page solution find install old version package installation succede error try pip install wheel instruction give work tell requirement satisfied turn use python-3.10 pip site package realize enter python pip compare directory realization instal new version pip go instal wheel work @philippe remy mention import setuptool reference official doc
wonder simple way convert string representation list follow list case user put space commas space quote handle convert know strip space strip split check non letter character code get kludgy quick function ' m aware ast.literal_eval ast.literal_eval evaluate expression node string contain python literal container display string node provide consist follow python literal structure string byte number tuple list dict boolean none json module well solution stringifie list dictionary json.loads(your_data function use convert list eval dangerous execute user input new use ast eval strip string old version python get close want simple regular expression good ast solution example handle escape quote string simple involve dangerous eval good enough purpose old python ast quick solution unwanted whitespace list element remove way inspire answer work base python package compare performance use python method ast method json method import disappoint see consider method bad readability method good performance trade off consider go readable option type workload use python value readability performant option usual depend dimensional list do import good accept answer safe way good answer accept aware eval danger answer post need import evaluate line basic use case include give original question output parse clean list need use list comprehension nest list get bit annoying use regex simplify replace assume want return flatten list zen python say nest retain nested list get bit ugly do regular expression list comprehension last solution work list store string nest assume inputs list double quote input do simple regexp replace bit perl work charm note output list unicode string specify need seem make sense give unicode input junker variable contain compile regexp speed character want use character require backslash trickery re.sub replace character split result string comma note remove space entry u'["oh > u'ohno want regexp need soup bit know list contain quote string pyparse example give list strip string preserve original unicode ness list datatype contain list list need complete grammar pyparse example directory handle tuple list int float quote string run problem deal scrape datum store pandas dataframe solution work charm list value present text external library require complete ryan answer use json convenient function convert unicode answer example double single quote happen load list store string csv list store csv form op ask load list listitem list provide intuitive patterning solution regex function take input stringifie list contain arbitrary string stepwise explanation remove whitespace bracket value_separator provide part value want extract make regex complex split clean string single double quote take non empty value odd index value preference testsample save function slice last character string representation list see third line pure python import library follow answer decide time common method end regex win solution simple read previous answer require match feature list output
python multiprocesse library variant pool.map support multiple argument variant pool.map support multiple argument python include pool.starmap method old version notice itertools.izip use due bug mention @unutbu use functools.partial similar capability python simple wrapper function func_star define see workaround suggest uptimebox answer situation dependent general answer recent version python describe j.f sebastian.1 use pool.starmap method accept sequence argument tuple unpack argument tuple pass give function early version python need write helper function unpack argument want use need write wrapper turn pool context manager thank muon point simple case fix second argument use partial python inspired answer accept stuck top seem improve future reader think well output use python pool.starmap result zip argument zip(a b c e case want constant value pass argument case function return give list return value take multiple argument learn itertool j.f sebastian answer decide take step write parmap package take care parallelization offering map starmap function python python take number positional argument installation parallelize uploaded parmap pypi github repository example question answer follow fork multiprocesse call pathos note use version github need starmap map function mirror api python map map take multiple argument pathos multiprocesse interpreter stick main block pathos due release mild update conversion python pathos several way get exact behavior starmap way pass list list argument routine construct list list argument favorite method well way use decorator write wrapper function hand lot function map decorator save time avoid write wrapper function decorate function picklable use functool get discussion find example map zipped argument course use pool.starmap python mention answer well solution python use follow function avoid write wrapper new function use function function list argument arg_0 arg_1 arg_2 follow simple alternative wrap function parameter tuple wrap parameter pass tuple ideal deal large piece datum believe make copy tuple give output random order way imho simple elegant answer provide program function take parameter print print sum output see python doc info https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.pool particular sure check starmap function use python ' m sure work old python version example docs ' m sure use obtain context object use multiple start method replace official documentation state support iterable argument use apply_async case case many answer none seem provide compatible code work version want code work work python version use multiprocesse regular python way example work python python example routine use pass multiple argument argument function use fork option trick wrapper function return function pass pool.map code read input array unique element return many time count element appear array example input appear time time get store argument array tuples example say call function pass tuple unpack argument build tuple use loop execute use map pass array tuple know python try use high level library concurrent future low level multiprocesse library python use trick
cd shell command change work directory change current work directory python change work directory good practice follow use method change current work directory subprocess change current work directory parent process true python interpreter use os.chdir change cwd call process example context manager change work directory simple activestate version refer get job do try concise equivalent(below use contextmanager use os.chdir way need figure current path use cd easy write use generator decorator directory revert exception throw use new version python use context manager update prefer roll point other solution change work directory current process lose exit unix shell desperate change parent shell directory unix horrible hack os.chdir pythonic version cd os.chdir right way use os.chdir(abs_path need call use relative path direction point brian base sh perform cd option type os.chdir windows cmd cd course import os neccessary e.g type 1st line code path object path library offer context manager chdir method purpose use spyder love gui click folder button upper right corner screen navigate folder directory want current directory go file explorer tab window spyder see file folder present check current work directory go console spyder ide type print path select change current directory script process trivial think question change current directory command window python script invoke difficult bat script windows bash script bash shell ordinary cd command shell interpreter windows linux python program program change parent environment combination simple shell script python script hard stuff achieve desire result example make extend cd command traversal history select revisit write complex python script invoke simple bat script traversal list store file target directory first line python script return bat script read first line file make argument cd complete bat script comment brevity python script dsup.py
seem work get syntax error proper way log kind exception file define type exception want catch write exception e e general exception log possibility write whole try code way python modern version python use exception e exception e syntax support python use follow want error class error message stack trace use sys.exc_info minimal work code formatting give follow output function sys.exc_info give detail recent exception return tuple type value traceback traceback instance traceback object format trace method provide find traceback documentation case use e.message e.message work case safe use str(e update simple logger work python need traceback module old way work exc_value error message use logger.exception("msg log exception traceback python use format string literal neat https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498 use str(e repr(e represent exception get actual stack trace helpful find exception read answer log package doc follow way work great print actual stack trace easy debug use logger.exception print exception try specify baseexception type catch derivative baseexception include implementation provide exception raise arbitrary old style class see original error message file line number show error message use try future struggler python version syntax use str(ex print execption easy way available polog library import use note less space code take line
search item contain stre abc follow list follow check abc list detect abc-123 abc-456 check presence abc string list get item contain abc throw happen match string example abc def combine comprehension follow output use filter get element abc use list comprehension need know abc item short way note assume abc alphanumeric text use abc special character old question offer answer previous answer cope item list string iterable object item cause entire list comprehension fail exception deal item list skip non iterable item use follow list get match item abc-456 test iterable get python determine object iterable new python code working make easy understand use contain method python string class need list index correspond match follow output want get list datum multiple substring change way add nan list work search require input certain value look value list contain input try search abc question give information abc
generate permutation list example use itertools.permutation standard library adapt demonstration itertools.permutation implement couple alternative approach list documentation itertools.permutation one base itertools.product python onwards return generator use list(permutations(xs return list first import itertool call output swap content list require mutable sequence type input perm(list("ball work perm("ball change string python implementation inspire algorithm present book computer algorithms horowitz sahni rajasekeran solution implement generator avoid hold permutation memory functional style result follow code place permutation give list implement generator return reference list list modify generator solution non recursive use low memory work multiple copy element input list obvious way opinion regular implementation yield memory yield implementation basic idea go element array 1st position 2nd position go rest element choose element 1st recursion stop criterion get array element case return array output use algorithm base factorial number system- list length n assemble permutation item item select item leave stage choice first item second last use digits number factorial number system index way number n!-1 correspond possible permutation lexicographic order output method recursive slow computer xrange raise error large converted integer n=13 need itertools.permutation long shot note algorithm factorial time complexity length input list print result run example output iterate first element permutation tzwenn answer efficient write solution way solution thank recursion end len(element much memory efficient use generator function yield riccardo reye solution inspire haskell implementation use list comprehension performance numpy solution inspire knuth p22 copy large blocs memory save time 20x fast list(itertools.permutations(range(n disclaimer shameless plug package author trotter package different implementation generate pseudo list contain permutation describe mapping permutation respective position order make possible work large list permutation show demo perform instantaneous operation look up pseudo list contain permutation letter alphabet use memory process typical web page case generate list permutation follow output want use builtin method implement permute function approach libs input string list algorithm work list create new intermediate list similar ber solution https://stackoverflow.com/a/108651/184528 try code beauty recursion algorithm effective avoid array pass manipulation recursive call work python usage generate possible permutation use python3.4 test case see lot iteration go recursive function pure recursion abide single loop gross unnecessary recursive solution save folk possible hour search experiment non recursive permutaion solution python work numba give impression performance use version call njitte function prefer itertool implementation use sympy library support multiset permutation answer inspire get permutation numpy array solution optimal way generating permutation initial sort n permutation hasnextpermutation run o(n time complexity step python solution output abc acb bac bca cab cba use intend exhaust possibility new line make unique case fancy ugly liner work string solve recursion iterate element take element ask permutation rest item element left explain solution https://www.youtube.com/watch?v=_7ge7pss2b4 case user want keep permutation list follow code use python use itertool import permutation combination solve problem
start pandas dataframe documentation introduction datum structure fill dataframe value time series kind calculation initialize dataframe column b timestamp row nan add initial value go datum calculate new row row say use code feel ugly dataframe well way general note use python tldr read bold text answer tell create empty dataframe fill tell bad thing advice accumulate datum list dataframe use list collect datum initialise dataframe ready list list list dict format work pd.dataframe accept pd.dataframe convert list row row scalar value dataframe function yield dataframe call pro approach cheap append list create dataframe go create empty dataframe nan append list take less memory light datum structure work append remove need dtype infer assign object rangeindex create datum take care assign correct index row append iteration convince mention documentation append row dataframe intensive single concatenate well solution append row list concatenate list original dataframe pandas append deprecate use see release note big mistake see beginner memory allocate append concat operation couple loop quadratic complexity operation mistake associate df.append user tend forget append place function result assign worry dtype deal object column good thing pandas vectorize operation column fix see loc use append dataframe create empty pre allocate amount memory need time memory grow time create new row bad append create dataframe nan caveat associate therewith create dataframe object column other append issue method timing method fast way see differ term memory utility benchmarke code reference couple suggestion use index note create empty dataframe nan write type calculation datum use numpy array create dataframe want create empty datum frame fill incoming datum frame try example use pandas doc create new datum frame use append write newdf datum keep append new datum newdf olddfs use loop iterate pandas.dataframe.append note append deprecate version use concat initialize empty frame column name add new record frame want pass dictionary append frame exist frame performance consideration add row loop consider performance issue first record my_df.loc performance become increase number record loop plan thin big loop say record use mixture fill dataframe iloc size get append original dataframe empty temp dataframe boost performance time fill assume dataframe row keep column constant keeping column b variable give loop replace first x pd.series([x index = x value way make dynamic dataframe several list loop loop result
import python module give relative path example dirfoo contain foo.py dirbar dirbar contain bar.py import bar.py foo.py visual representation foo wish include bar restructure folder hierarchy option assume directory real python package file safe solution inclusion module location script assume want need include set module script use production several product work many special scenario script call directory execute execute open new interpreter bonus approach let force python use module one instal system warning know happen current module egg file fail sure dirbar init__.py file make directory python package add subdirectory python path import normal script simple thing import file different folder let say directory keep empty file lib folder name use keep init__.py file folder hierarchy import module structure project way foo.py able tom comment require src folder accessible site_package search path mention init__.py import first import module package directory init__.py empty file easy method use sys.path.append interested imp module provide access internal import function use load module know module name use create plugin type interface application user write script application specific function drop script specific directory function useful relevant pep http://www.python.org/dev/peps/pep-0328/ particular presume dirfoo directory dirbar dirfoo\foo.py easy way modification script set pythonpath environment variable sys.path initialize location run sys.path contain path show opinion good choice put init folder call file recommend use sys.path.append go wrong use file name exist python package test ambiguous tinker care deployment issue use symbolic link assume filesystem support make module package visible folder request module note module file extension package folder contain file init__.py empty file usage standpoint module package identical expose contain definition statement request import command see http://docs.python.org/2/tutorial/modules.html case dirbar instal confuse foo.py reader case import bar.py foo.py turn folder python package like foo.py want namespace look bar.whatever want namespace dirbar.bar.whatever second case useful module dirbar package add init__.py file add code start foo.py relative sys.path example base answer mention want access folder module relative main script run import solution script d:/books module need import subdirectory d:/books include place verify go way work python definition sys.path initialize program startup first item list path[0 directory contain script use invoke python interpreter script directory available interpreter invoke script read standard input path[0 empty string direct python search module current directory first notice script directory insert entry insert result pythonpath solution install py require package use follow foo.py use desktop.filename import example give file name directory user user desktop import everthing code make sure make empty file call init__.py directory way import file level use relative path move work directory level relative location add path move work directory start experience python wrong word tell file hierarchy arrange module_1.py define function call func_1 module_2.py run python module_2.py cmd run func_1 defines import hierarchy file write import func_1 module_2.py python interpreter say module name main__.module_1 main package fix keep change make move module package make third module caller run module_2.py reason add module_2.py run main.py python interpreter say module name module_1 little tricky module_1.py module_2.py let func_1 module_1.py name record call func_1 keep module_1 run print module_1 indicate call func_1 hierarchy main.py imply module_1 hierarchy module_2.py dot recognize hierarchy recognize package_1 let make bit complicated config.ini module define function read hierarchy unavoidable reason call module_2.py import upper hierarchy.module_2.py dot mean import upper hierarchy dot access upper upper run main.py interpreter say valueerror attempt relative import top level package top level package main.py config.py main.py hierarchy config.py main.py lead main.py main.py fix simple way think coincide principle arrange project file hierarchy arrange module different function different folder leave top caller import want work simple sys module call cautious make mine portable unsafe assume file place computer code look file path use linux look course plan package case need separate file
create zip archive directory structure python easy way use shutil.make_archive support zip tar format need complicated zip whole directory skip certain file need dig zipfile module other suggest other point use zipfile documentation tell function available explain use zip entire directory think easy explain example code add content mydirectory new zip file include file subdirectorie python shutil make_archive function zip archive name zipfile_name.zip farth root_dir exclude file base_dir archive file parent dir root_dir issue test cygwin want argument cwd python shell use zipfile module zipname name destination file want add want sourcedir path directory try zip python package init__.py main__.py want parent dir run package note run subpackage entry point zip archive want zip python package use zipapp function zip directory tree compress file record correct relative filename archive archive entry generate zip output.zip use shutil part python standard library set use shutil simple(see code code modern python use pathlib module concise oop handle path pathlib.path.rglob recursive globbe tell equivalent george v. reilly answer zips compression topmost element directory keep empty dir use relative path note optional type hint indicate zip_name path object fix python pathlib zipfile module create zip file system neat type less code add compression result zip file check link need change make change code give mark byer function add empty directory example make clear path add zip simple function work simple case find elegant class gist https://gist.github.com/eccenux/17526123107ca0ac28e6 code example help use python3 pathlib zipfile work retain folder hierarchy parent directory archive want change use pathlib file globbing want functionality compress folder common graphical file manager use follow code use zipfile module use code zip file path root folder many answer hope contribute version base original answer way graphical perspective use context zipfile setup sort order order output folder file folder want create cap folder apply comment well understanding process iteration os.walk(path open context zipfile setup iterate iterate file list file root directory form relative path file base current root directory append zipfile context run output present see content directory use less command want look zipfile module documentation http://docs.python.org/library/zipfile.html want index directory structure variation answer give nux work try work give flexibility select directory file name use file tree select dir4 root.txt listdir script invocation directory add say want zip folders(sub directory current directory zip file tree directory sub directory append exist archive pass mode='a create fresh archive mode='w default let say want bundle different directory tree archive solution use independent os use obvious way go go shutil second top answer say wish go zipfile reason get trouble err window use fix iterate sub folder file give folder write zip file attempt zip folder modern approach use pathlib context manager put file zip subfolder prepare function consolidate mark byer solution reimund morten zilmer comment relative path include empty directory good practice use zipfile file construction function prepare default zip file name zip directory name extension work argument source directory zip reading suggestion come similar way work create funny directory name absolute name create specify folder zip case need zip contain folder content select directory function create zip file
easy way python f string fix number digit decimal point f string string format option example let say want display digit decimal place let say include type specifi format expression come float number use format specifier miss type specifi decimal value link find available presentation type float point decimal example use f fix point presentation type add robᵩ answer case want print large number use separator great help note comma case want pad use fix width width go comma add rob answer use format specifier f string go format string syntax see lot do refer output output output output change value decimal point sign represent decimal point want print detailed video f string number seem use dynamic formatter use dynamic formatter use format see https://docs.python.org/3.6/library/string.html#format-specification-mini-language reference other answer
difference python module python package see difference package module language python file module name file base name extension package collection python module module single python file package directory python module contain additional init__.py file distinguish package directory happen contain bunch python script package nest depth provide corresponding directory contain init__.py file distinction module package seem hold file system level import module package correspond object create python type module note import package variable function class file package visible sub package module example consider xml package python standard library xml directory contain init__.py file sub directory sub directory etree contain init__.py file other file see happen import package module python build module sys write think mean consider question module single file file import import use package collection module directory give package hierarchy documentation module introduction package keep mind precise definition module object memory python interpreter create read file disk call disk file b c.py module become combined information several source create module object note example module different name load file depend sys.path setting happen python my.module follow import my.module interpreter module object main my.module create file disk package module submodule include subpackage module example create small module hierarchy ensure file a. start python interpreter python3 -i examine result follow statement module package fact certain kind package call namespace package worry module package demonstrate add file b.py directory structure start fresh interpreter python ensure parent module load child module load find a/ directory create namespace package b.py python source file load use create non package module point module package submodule see package module path attribute package non package module a.b python glossary important keep mind package module module package put way package special kind module module contain path attribute consider package python file dash name my-file.py import simple import statement code wise import file import file raise exception file characterize script importable file module answer bit vague post clear answer important note title question bit misleading first place well title opinion special package module compare regular module package module special type special sense directory contain special file init__.py main__.py point package special type module need understand module general first special package module make sense notice refer package module answer package let talk module general vague understand thing module import module execute python import module single obvious goal access module execute module pursue goal let make sense example let assume foo.py module example main module start program run type command terminal python3 foo.py execute main module start program let assume want try function talk bar.py module example run whole program call module foo.py change bar.py run command terminal python3 bar.py try functionality module isolation print bar know module general let return main question final example explanation late answer definition package represent import top entity self contain module special module top entity set module sub directory structure package distribution unit provide module module module simple python file extension contain collection function global variable executable file notion package python use arrange module example save code file call demo import demo module module use mymodule1 function solution module name math package package basic directory contain collection module directory contain python module init file interpreter use recognize package package namespace package sub package example student package |||| constructor |||| module |||| marks.py module |||| module |||| demo_module.py module package set module organize directory form package directory read different answer give question issue cover seem make extra point bad idea examine value package different module reach follow result module type package define check package random math define folder follow see package output know late simple answer sufficient module file package folder
compare processing speed list surprised discover run time fast list run test dict result identical take 0.128sec cycle list dict take cycle pass copy empty stock literal name counterpart list dict tuple str go create object element idea method differ love find find answer doc search empty bracket turn problematic expect get time result call timeit.timeit("list timeit.timeit timeit.timeit("dict compare list dictionary run python discover true slow compare performance true seem touch similar literal global scenario worth consider literal syntax python create bytecode create list dictionary object list dict separate object name resolve stack involve push argument frame store retrieve call make take time empty case mean least load_name search global namespace builtin module follow call_function preserve current frame time name lookup timeit time discrepancy dictionary hash collision subtract time time call object compare result time use literal call object take additional second call avoid global lookup cost aliase global name local use timeit setup bind name local overcome call_function cost list require global lookup function call compile single instruction see list function convert say string list object use create list bat try make sense give actual list contain put answer great point cover question drop step byte code interested use recent repo cpython old version behave similar regard slight change place break execution build_list call_function list view horror convolute know simple wonder fast custom make create new list first thing see peek code handling call_function look harmless call_function straightforward guy call function grab object stack grab argument stack switch base type object call list type argument pass call_function pylist_type cpython call generic function handle callable object name pyobject_fastcallkeywords yay function call function make check certain function type understand create dict kwargs require go call pyobject_fastcalldict pyobject_fastcalldict get perform check grab tp_call slot type type pass grab proceed create tuple argument pass pystack_astuple call make tp_call match type.__call take create list object call list new correspond pytype_genericnew allocates memory pytype_genericalloc part catch pylist_new previous necessary handle object generic fashion end type_call call list.__init initialize list available argument go return way come remmeber load_name guy contribute easy see deal input python jump hoop order find appropriate c function job curtesy call dynamic list boy many people path take list lose much explore python need find literal syntax hand mean thing change behave determined way footnote function name subject change release point stand stand future version dynamic look slow thing big reason python treat list user define function mean intercept aliase list different use subclassed list deque create new instance builtin list explanation give intuition know literal syntax grammar refer list display docs list display empty series expression enclose square bracket list display yield new list object content specify list expression comprehension separated list expression supply element evaluate leave place list object order comprehension supply list construct element result comprehension short mean builtin object type list create circumventing mean python hand list intercept create builtin list use builtin list constructor example say want list create intercept name list module level global scope create list create subtype list remove global namespace put builtin namespace note list display create list let undo change remove new list object builtin lose track original worry get list type list literal fast list see overwrite list intercept creation literal type use list lookup see call callable look grammar call call callable object function empty series argument see thing name list function call python bytecode level go straight building list lookup call bytecode level demonstrate list intercept user code use scope rule list look callable call list display literal avoid name lookup function call
hear lot pypy project claim time fast cpython interpreter site talk dynamic language python speed top issue solve say pypy time fast second issue parallelism infamous global interpreter lock gil pypy say give gil less python pypy solve great challenge weakness prevent wide adoption say prevent typical python developer switch pypy right note pypy mature support question ask avoid draw conclusion date information main reason affect say site claim pypy time fast cpython geometric average benchmark time fast cpython different statement blanket statement make understand difference understand set reason say use pypy sound nit pick understand statement different vital break statement make apply benchmark use say program program benchmark statement average group benchmark claim run pypy give time improvement program test claim pypy run program cpython run let pypy compatible take gig ram compile move target experimental cpython stable default target module builder decade include c extension work pypy deploy pypy reference implementation good tool second question easy answer use pypy drop replacement code pure python many use library include standard library write c compile python extension make work pypy pypy provide face tool python python innard different tool interface innard work first question imagine catch-22 first pypy evolve effort improve speed enhance interoperability code make experimental official think possible pypy get stable state start use think great move underpinning happen pypy reach critical mass useful enough want motivate people fill gap small benchmark topic many poster make good point compatibility experience pypy move bit many use python exist translate bit service example many web application perform cpu intensive analysis dataset take bytes client store sort database return client format datum change bdfl cpython developer intelligent group people manage help cpython perform excellent scenario shameless blog plug http://www.hydrogen18.com/blog/unpickling-buffers.html use stackless derive cpython retain full module interface find advantage use pypy case q pypy solve great challenge speed memory consumption parallelism comparison cpython weakness prevent wide adoption little evidence pypy team solve speed problem general long term evidence show pypy run certain python code slow cpython drawback seem root pypy current version pypy consume much memory cpython large set case solve memory consumption problem pypy solve mention great challenge general less memory hungry friendly parallelism cpython open question solve short term people bet pypy able offer general solution enable dominate cpython case pypy succeed well cpython general questionable main weakness affect wide adoption compatibility cpython exist issue fact cpython run wide range cpus os issue important compare pypy performance cpython compatibility goal drop replacement cpython pypy pypy compatible cpython simulate cpython hood program depend cpython unique feature absent pypy c binding c implementation python object&method incremental nature cpython garbage collector cpython reference count garbage collection pypy garbage collection object delete early del call predictable way cpython software rely behavior ready migrate pypy software work use less memory cpython unused object free measurement indicate significant implementation detail affect memory use lot project difference different python term speed dominate engineering time python amount library support make simple pypy provide speed lack cpython sacrifice compatibility people choose python flexibility battery include feature high compatibility speed preferred find example pypy slow python window think pypy forget windows linux achieve awesome acceleration example list prime run time fast pypy python window 3x fast pypy python support accord hackernoon post anthony shaw april 2nd pypy3 several time slow pypy python many scientific calculation matrix calculation well choice see faq install numpy numpypy pypy support gmpy2 make use gmpy_cffi test speed project release project euler problem make frequent use pypy simple numerical calculation future import division sufficient purpose python support work good bet bit linux windows v6.0 late december beta cite zen python readability count example python introduce fstring feature python important pypy support python moment shameless self advertisement killer feature python version know thing miss use old python version
integer value b need ratio float point know b want calculate b use integer division get remainder a. force c float point number python follow behaviour reverse see integer division yield float integer specific problem python division int produce int python produce float get new behaviour import future cast float c = float(b numerator denominator float result caveat commenter point work b integer float point number string represent deal type complex number need check use different method integer value b need ratio float point know b want calculate b use integer division get remainder a. force c float point number python ask force true division b return fraction python get true division b. floor division classic division behavior integer stick use python write code work python simple way deal classic python division robust other get python division behavior give module follow import top apply python style division entire module work python shell give point python good solution ensure code module compatible python want apply entire module limited workaround popular coerce operand float robust solution b fresh python shell robust truediv operator module operator.truediv(a slow function call see float(b raise typeerror b complex number division complex number define make sense division fail pass complex number divisor make much sense make code brittle run python -qnew flag downside execute module new python behavior module expect classic division recommend testing demonstrate python single slash mean true non truncating division operator use truncating division python get behavior put top module make parameter division float point format produce output float point example add dot indicate float point number work want use true float point division default command line flag drawback pep argue command line option change default evil dangerous wrong hand example combine 3rd party library package require -qnew one require learn flag value change warn behavior division look man page full detail division change read pep change division operator dividend b divisor function handy quotient division integer float
idiomatic python equivalent c c++ code implement static member function level oppose class level place function class change bit reverse work want counter initialization code top bottom create decorator use code require use foo prefix credit add attribute function use static variable want setup variable outside function use hasattr avoid attributeerror exception static variable find well place variable likely inside class consider reason many people suggest test hasattr simple answer try test hasattr getattr default answer demonstrate way way default value initialize function evaluate time execute use list mutable object store static value python static variable fake define callable class object use function see answer note call make instance class object callable name call foo call class call method documentation instance arbitrary class make callable define call method class encapsulate version require external initialization call python function object add monkey patch member variable special attribute dict build var return special attribute dict edit note alternative try attributeerror answer approach variable ready code logic follow initialization think try attributeerror alternative follow dry awkward flow edit2 recommend approach function call multiple location function call place well use nonlocal use generator function generate iterator use want upper limit iterator terminate example loop course simple case well use xrange documentation yield statement solution attach counter attribute function convolute logic handle initialization inappropriate new code python right way use nonlocal statement see pep specification nonlocal statement counter intend private module name use attribute function static variable potential drawback idiomatic python second issue name variable lead underscore signal mean access keep accessible fact alternative pattern use lexical closure support nonlocal keyword python know way encapsulate solution decorator option undocumente parameter serve mutable value container work default argument evaluate function define call clean container type list aware builtin type communicate purpose little bit readable verbose zen python explicit well implicit see explanation work python use underscore indicate private variable reason declare static variable function hide function idiomatic python vincent code use function decorator static variable access function name prefix advantage code smart enough figure multiple static variable initialise conventional manner try several approach end use improve version @warvariuc answer idiomatic way class attribute need instance separate use singleton number way fake munge static variable python mention mutable default argument pythonic idiomatic way use class generator usage pattern fit static variable python method recommend twist callable object https://stackoverflow.com/a/279598/916373 mind use funky call signature soulution global declaration provide functionality example python great use variable define function define global function signify global version outside function make available function time function run modifie value function preserve function follow decorator use create static function variable replace declare function return imply decorate function return function use decorator function return function capture variable nonlocal require python think counter variable local variable capture variable python behave variable assignment counter assignment function make python think variable local assign variable inner function ignore nonlocal statement example function use indent line stre python variable nonlocal p.s delete answer propose know author delete prompt question present alternative bit use look method function usage implementation create function static local variable create call function object give standard non static member variable give example write c++ explain function object c++ function object class overloaded operator instance class behave function example write int square object overload operator function give function object feature give class object python overload operator method name call class definition example class use output print console want function take input argument add call answer build @claudiu answer find code get clear prepend function name intend access static variable function code prefer write solution remark method use class name bunch dictionary support attribute style access javascript see original article instal pip install bunch hand write prefer follow decorator build daniel answer addition reason want add part static variable use incrementing value check static var equal value real life example static variable protect use scope function example call foo function respect correspond c++ equivalent class foo define singleton class ideal make pythonic write simple function use static variable use sure old question think provide update seem performance argument obsolete test suite appear give similar result siint_try isint_re2 course result vary session computer python kernel xeon w3550 run several time result seem similar moved global regex function static performance difference negligible performance issue way seem try catch produce future- cornercase- proof code wrap function
follow dataframe dataframe read csv file row type top follow row type follow row type like shuffle order dataframe row type mixed possible result achieve idiomatic way pandas use .sample method data frame sample row replacement frac keyword argument specifies fraction row return random sample frac=1 mean return row random order note wish shuffle dataframe place reset index specify drop true prevent .reset_index create column contain old index entry follow note look operation place python pandas smart malloc shuffle object reference object change mean id(df_old id(df_new underlie c object show case run simple memory profiler use sklearn shuffle row data frame indexing shuffle index eg use np.random.permutation np.random.choice possibility want keep index number n example reset index true np.random.shuffle(ndarray job case dataframe hood use numpy ndarray data holder check dataframe source code use shuffle array first axis multi dimensional array index dataframe remain unshuffled point consider sec fast sec sec 3x fast sec conclusion okay axis info(index column shuffle ndarray use use pythonbenchmarke enough reputation comment top post hope concern raise first method make deep copy change dataframe run follow code result mean method return object suggest last comment method make shuffle copy follow way frac=1 mean row data frame random_state=42 mean keep order execution true mean reinitialize index randomize useful use machine_learning want separate datum use make sure keep random choice replicable way shuffle pandas data frame take sample array case index randomize order set array index datum frame sort datum frame accord index shuffle dataframe output insert data frame place code way shuffle dataframe use sample pass frac parameter save shuffle dataframe new variable propose test column arbitrary length string dtype object 30x fast @haku answer avoid create copy expensive variant 3x accept @kris'es answer seem avoid copy base re column linux top numpy sklean case want shuffle value keep row column name place
none test preferable pythonic idiom testing variable set none particular use case declare keyword functions default parameter test identity python instance none present run python script program optimal test johnsyweb point discuss pep programming recommendation prefer part zen python readability count good python close good pseudocode programming recommendation pep comparison singleton none do equality operator beware write mean none test variable argument default none set value value type container false boolean context pep essential reading python programmer good bet type question see python dis module informative notice last case reduce sequence operation python read val none use operator use operator compare none point answer use compare none bad idea latter val type define eq return pass none
notice interesting look python grammar specification optional arrow block absent python find information regard mean python turn correct python accept interpreter think kind precondition syntax familiar syntax style explain function annotation detail python docstring allow attach metadata stre various type object handy python extend feature allow attach metadata function describe parameter return value preconceived use case pep suggest several handy one allow annotate parameter expect type write decorator verifie annotation coerce argument right type allow parameter specific documentation encode docstre function annotation cover pep mark return function annotation example annotation dictionary python data structure stre use function attribute validate call value print follow code int tell f return integer force function return integer call return annotation access f.__annotations__['return python support parameter annotation float tell people read program third party librarie programs e. g. pylint x float access f.__annotations__['x meaning see documentation information https://docs.python.org/3/reference/compound_stmts.html#function-definition https://www.python.org/dev/peps/pep-3107/ answer state symbol use part function annotation recent version python = define meaning pep function annotation describe specification define grammar change existence func.__annotations store fact use case open python pep type hint attach single meaning use indicate type function return seem enforce future version describe exist use annotation conceivable scheme introduce silent deprecation non type hint annotation full deprecation declare type hint allow use annotation python emphasis mine implement far tell bump future version accord example supply forbidden future current version confusing change describe function f return object type int annotation use way python populate ignore 3rd party library work mean type result function return none widespread modern library orient python example code library pandas profile many place example summary introduce get developer specify return type function see enhancement proposal indication thing develop future python adopt indication strong type personal observation specify type argument specify return type function argument help reduce logical error improve code enhancement expression return type function parameter level result expression access annotation object return attribute annotation empty expression return value lambda inline function def function(arg)->123 return type integer case matter number write java python jim fasarakis say return type hint suggest return allow return type string give result word str effect return type introduce python3 simple word content denote return type function return type optional tell user expect return value funcname.__annotation print detail output return value display refer pep3107 specification function annotation python docstring python introduce use function annotation python use generate documentation
symbol python symbol begin line use class function decorator common python decorator middle line matrix multiplication show function method class define decorator pass argument function method sign microframework flask introduce decorator begin follow format turn translate realize allow feel peace flask python overload operator name matmul design matrix multiplication want see pep465 detail simple implementation matrix multiplication code yield code snippet equivalent code definition decorator add modified thing return function short use decorator syntax matrix multiplication context decorator syntax equivalent context matrix multiplication b invoke a.__matmul__(b make syntax equivalent equivalent dot example numpy matrix multiplication function b matrix know search search python docs google return relevant result symbol include want complete view particular piece python syntax look grammar file python branch see use contexts google search decorator python docs give top result compound statement section python language reference scrolling section function definition find search word decorator see lot read word decorator link glossary tell function return function apply function transformation use @wrapper syntax common example decorator classmethod staticmethod decorator syntax syntactic sugar follow function definition equivalent concept exist class use see documentation function definition class definition decorator see python evaluate foo expression dotted lookup function call bar decorator syntax evaluate foo expression bar case difference make difference mean code reconsider life pathological go function definition syntax documentation see equivalent demonstration call function decorator stack decorator function first class object mean pass function argument function return function decorator thing stack decorator function define pass first decorator next sum usage context decorator lexical analysis section language reference section operator include make operator follow token operator next page data model section emulate numeric type method call implement binary arithmetic operation see matmul correspond search documentation matmul get link new python matmul head pep dedicated infix operator matrix multiplication implement define matmul rmatmul imatmul regular reflect place matrix multiplication learn @= place version explain matrix multiplication common operation many field mathematics science engineering addition allow write clean code operator overload numpy example use syntax calculate inner outer product array matrix research prior usage learn inplace matrix multiplication attempt use find implement numpy implement expect result look symbol python symbol syntactic sugar python provide utilize decorator paraphrase question decorator python put simple decorator allow modify give function definition touch innermost closure case import wonderful package third party visualize use touch innermost heart quick example suppose define read_a_book function ipython see forgot add name solve problem course define function allow manipulate original function thousand function handle solve problem think different define new_function employ tada amend read_a_book touch inner closure stop equip decorator fancy handy way say read_a_book add_a_book(read_a_book syntactic sugar fancier refer code python notebook use numpy library operator mean matrix multiplication example decorator add python make function method wrapping function receive function return enhance easy read understand original use case able define method class method static method head definition decorator syntax require sparse repetitive definition decorator syntax use purpose code short easy understand general syntax possible implementation decorator name object lambda expression allow accept single argument call decorate function return callable object callable use function premeditation decorator discuss scope method function limit fact callable object implement call method consider callable use decorator object return simple function instance complex class implement call method decorator syntax syntactic sugar consider follow decorator usage replace explicit decorator call function reassignment latter readable understand multiple decorator use single function decorator use multiple different way show function many way write custom decorator simple way write function return subfunction wrap original function call generic pattern follow class decorator implement use function situation use user define class well option true decorator need complex parametrization depend specific state generic pattern nonparametrize decorator class follow parametrize decorator real code need use decorator parametrized function use decorator solution simple second level wrapping use simple example decorator repeat execution decorate function specify number time time call decorator define way accept parameter note parametrized decorator default value argument parenthese name require correct way use precede decorator default argument follow let see decorator property property property provide build descriptor type know link attribute set method property take optional argument fget fset fdel doc last provide define docstre link attribute method example rectangle class control direct access attribute store corner point use width height property good syntax create property use property decorator reduce number method signature class make code readable maintainable decorator class start python use dedicated infix symbol matrix multiplication pep see math operator decorator mean decorator code use decorator write decorator argument see geeksforgeek post indicate use decorator bruce eckel example python decorator wrapper function class conceptual code definition decorator decorate function function_decorator name decorator wrapped_func name inner function use decorator definition func function decorate inner function wrapped_func func call decorator define use follow call function func behaviour ’ define decorator execute example output say other different way decorator python use kind useful thing make possible function object necessary instruction symbol use access variable plydata pandas dataframe query pandas.dataframe.query example
want define dimensional array initialize length give error indexerror list index range try index uninitialized array initialize outer list list add item python call list comprehension add item list note matrix address major word index come index name wish look way avoid confusion arise indexing use inner outer list want non square matrix want matrix use numpy matrix operation numpy use array type dimension many way create new array useful zero function take shape parameter return array give shape value initialize way create array matrix output remove compactness numpy provide matrix type recommend use remove numpy future short notation initialize list list shorten 5*[5*[0 work end copy list modify change example want create empty matrix correct syntax want generate matrix size fill want dimensional container hold element use dictionary work tuple use key index dictionary result similar dumb sparse matrix indicate osa josap vall use matrix collections.defaultdict(lambda:0 miss element default value vatsal point method efficient large matrix use non performance critical part code python create list list declare dimension time example matrix[0][0 = matrix[1][0 use list comprehension syntax example build dimensional list code beginner come c cpp java background long code python ask comfortable python see single line answer write matrix tell use matrix python single line scary give information python note aware shorthand make list list good way use nested comprehension example create list integer try access 5th item raise indexerror 5th item accept answer good correct take understand use create empty array result use first dimension work level datum immutable create array python find syntax remember compare use loop list comprehension rewrite easy reading declare matrix zero one e.g. numpy.ones((x dimension possible http://www.astro.ufl.edu/~warner/prog/python.html see multi dimensional array ' m first python script little confused square matrix example hope example help save time create empty dimensional list nest square brace third bracket separate comma square brace suppose want append matrix[0][0 type type matrix hit enter output enter follow statement matrix use numpy initialize empty matrix append datum read comma separate file list datum list list index data[row][col use think numpy way go generic want use numpy want able think array force think term list list much natural opinion follow result list numpy array overwrite individual position number string define key value way result size information start create dimensional list store entire row 1st list do append list list output use list use dict store info hash table search matrix['1 give result time nb need deal collision hash table careful short expression see full explanation @f.j answer code snippet create matrix python miss go module numpy try case need matrix predefine number use follow code user define function input matrix print want create matrix dimension define variable initialise default value element use simple syntax
migrate python code work python upgrading ' get typeerror byte object require str error last line pattern search code try use .decode function side statement try able resolve python python issue little statement bugging open file binary mode mean datum read file return byte object str use string containment test use bytes object test tmp open file textfile replace mode r encode string use example error describe order write string file need encode byte object first encode encoding byte string mention reading file binary mode create list byte follow loop compare string byte code fail decode byte add list work change code look follow bytes type introduce python code work python python datum type byte change wb w change error disappear write file case answer source remove change rb bring error io.unsupportedoperation write small example add get http://www.py4inf.com/code/romeo.txt http/1.0\n\n solve problem b character front string literal use encode function hardcoded string value give single example open file binary mode follow code throw typeerror byte object require str follow code work use decode function try opening file text link python official page io core tool work stream open function open try handle binary consider encode string get error try convert char string byte code python way python deal unicode character work python byte require extra argument encode little tricky different encoding output different result case iso_8859_1 encoding byte order solve issue
create figure matplotlib want specify font size figure title axis label need different font size set global font size mpl.rcparams['font.size']=x want set font size figure title axis label function deal text label title accept parameter matplotlib.text.text font size use size fontsize set title label size contain axes.titlesize axes.labelsize page see way set label size see axes.titlesize affect suptitle guess need set rcparam dictionary use use ax object plot find ax.xaxis.label.set_size easy remember easy find use tab ipython terminal seem redraw operation see effect example know similar way set suptitle size create modify title font font axis use fontdict accept kwargs official guide use pylab recommend matplotlib.pyplot use set font size rcparam do default restore use create style sheet stylelib directory matplotlib configuration directory get configuration directory matplotlib.get_configdir style sheet format style sheet mpl_configdir stylelib mystyle.mplstyle use create modify matplotlibrc file share format depend matplotlibrc file modify change use current work directory working directory matplotlibrc file work directory matplotlibrc file matplotlibrc file specify see section customize matplotlib page detail complete list rcparam key retrieve adjusting font size italic quote accept string size xx small x small small small medium large large large xxlarge float pt string size define relative default font size specify weight specify default appear create figure axis object set title fontsize create title fontdict argument set x label fontsize create label fontsize argument example work seaborn pandas plot matplotlib backend other provide answer change title size axes tick label size use set_tick_params method make axis tick label size small make axis tick label large enter labelsize float follow string option xx small x small small medium large large large alternative solution change font size change padding python save png change layout use dialogue box open space axis padding altered stage place right_ax set_ylabel ax.right_ax.set_ylabel('ab scale import numpy import matplotlib.pyplot plt height bar = b c e x_po np.arange(len(bar plt.bar(x_pos height color plt.title('my title plt.xlabel('categorie plt.ylabel('value plt.xticks(x_pos bar plt.show
script mean use usage dir -v dir positional argument define want dir optional specify cwd specify dir argument get error argument use need dir extend example extension @vinaysajip answer additional nargs worth mention n integer argument command line gather list command line argument present gather list note make much sense positional argument multiple optional argument possible command line args present gather list error message generate n’t command line argument present argparse.remainder remain command line argument gather list useful command line utility dispatch command line utilities nargs keyword argument provide number argument consume determined action mean single command line argument consume single item list produce edit copy comment doc say argument consume command line possible produce single item command line argument present value default produce show previous answer accept optional positional argument turn argument path type shorten cwd want myfile.py mention flag style true false option -v question example use refer optional option take argument flag flag care give flag argparse add long version --help override consider -v myfile.py note second argument add_argument long name option mandatory make subsequent code readable parsed_args.v make call installer explicit one argue case better optional argument positional switch require use require false sample snippet python
ask question know much raw string claim django trainer suck know encoding know get unicode r kind string result ur reliable way go unicode string simple raw string way system text editor charset set u raw string raw string literal string literal mark r opening raw string literal different syntax string literal backslash take mean backslash come right terminate literal escape sequence represent newline tab backspace form feed normal string literal backslash double avoid take start escape sequence syntax variant exist syntax regular expression pattern heavy backslashe end clause matter look avoid double gain popularity express native window file path backslashe regular slash platform need normal slash work fine window imperfect due clause r byte string python ur unicode string python kind quote produce type string example r r r r byte string mean go direction raw string type alternative syntax express normal string object byte unicode python u course distinct former unicode string latter byte string encoding literal express orthogonal issue consider python unicode object course take memory space small difference short string type stre python traditional str type new unicode type type string literal u front get old str type store bit character u front get new unicode type store unicode character r change type change stre literal interpret r backslashe treat escape character r backslashe treat literal way type ur course unicode string backslashe literal backslashe part escape code try convert unicode string old string use str function unicode character represent old string get exception replace question mark wish course cause character unreadable recommend use str type handle unicode character raw string mean store appear example backslash escape let explain python store string different type ascii str type python use byte memory character store english alphabet simple symbol 2nd type unicode unicode type python unicode store type language default python prefer str type want store string unicode type put front text u'text call unicode('text u short way call function cast str unicode r part put front text tell computer text raw text backslash escape character create new line character plain text contain character want convert str unicode put raw text use ur ru raise error important part store backslash use r exception code produce error r'\ store backslash need use want store character use r r'\\ produce backslashe expect know reason r work backslash storage reason describe hope bug u prefix denote value type unicode str raw string literal r prefix escape escape sequence len(r"\n escape escape sequence end string literal single backslash valid escape sequence raw part type way represent value example \\n r"\n identical value identical unicode raw string literal source file encoding determine interpret source file affect expression type recommend code encoding ascii change mean file use ascii python code cookie used comment docstre need mention author name require use \x escape preferred way include non ascii data string literal unicode string literal string literal prefix use python valid compatibility purpose python want create string literal consist typable character english letter number type world want include exotic character use workaround workaround escape sequence way example represent new line string add typable character \n string literal print string word print separate line handy hand want include actual character string interpret new line look example situation prefix string literal r character r'hello\nworld escape sequence interpret python string print create many people expect raw string literal raw sense place quote ignore python true python recognize escape sequence interpret leave unchanged mean raw string literal valid string literal lexical definition string literal clear string literal raw contain bare character hello'world end backslash world\ valid obvious make string call chr(92
read possible add method exist object class definition python understand good python difference function bind method bind method bind descriptive instance instance pass first argument method call callable attribute class oppose instance unbound modify class definition want define instance update overridden attribute problem come want attach method single instance function bind attach instance bind use methodtype function type module time instance class affected information find reading descriptor metaclass programming preface note compatibility answer work python answer work python writing python leave inherit object code remain ' read possible add method exist object class definition python understand good decision recommend bad idea couple reason suggest good reason define correct method class definition monkey patch class instructive go show way setup code need class definition import create instance create method add dotted lookup function call get method function instance binding object method create bind method first import type get method constructor add method instance require methodtype constructor type module import argument signature types.methodtype python function instance usage python signature function instance class create wrapper function bind method instance usage partial function apply first argument(s function keyword argument call remain argument override keyword argument make sense consider bind method partial function instance try add way add class unbound instance take implicit self first argument make unbound function work pass instance method use self argument variable consistent expect signature instance monkey patch instance know several way seriousness module new deprecate python remove use type see http://docs.python.org/library/new.html example remove return value patch_me function think give return value make believe patch return new object true modifie incoming facilitate disciplined use monkeypatche think answer miss key point let class method let play ipython become unbound method a. like turn function reference add class dictionary magic a.m give unbound method dot translate simple dictionary lookup call ' m sure top head last line print clear go default getattribute check attribute call descriptor implement special get method implement method return result call get method go first version class python function implement descriptor protocol call behalf object bind object get method add method exist object assume mind patch class simple b.m become unbound method thank descriptor magic want add method single object emulate machinery use way python work overwrite class function signature example zope wiki code overwrite create method call speak class jeff atwood recent post monkey patching show example c current language use work use lambda bind method instance output look setattr believe use set attribute object way attach method instance types.methodtype useful link data model invoke descriptor descriptor howto guide invoke descriptor consolidate jason pratt community wiki answer look result different method bind note add bind function class method work reference scope incorrect prefer external addmethod function route allow assign new method name iterator question ask non python version javascript jason answer work work add function class work try exist method source code file take age find workaround trick seem simple import code source code file force use convert import bind method function pass current global variable reload method different namespace continue suggest jason pratt use types.methodtype example question open year easy way simulate bind function class instance use decorator pass function instance binder decorator create new function code object give instance class store attribute create function decorator return third function call copy function give instance first parameter conclusion get function simulating bind class instance let original function unchanged find strange mention method list create cycle reference add method instance cause object persistent garbage collection old trick add descriptor extend class object help release python library name gorilla make process monkey patch convenient use function needle patch module name guineapig go follow take care interesting use case show faq documentation code available github use self pointer jason pratt post correct see python consider different python method variable happen function thank arturo answer get right track base arturo code write little class class allow add new attribute method time edit generalize solution let test other say find repr str method monkeypatche object level repr str use class method bound object method
code print want list append go wonky code print follow get simple date python date object manipulate manipulate object string timestamp object python string representation regular representation use print use str function time common human readable format use ease display str(datetime.datetime(2008 give alternative representation use represent object nature datum use repr function handy know kind data manipulate develop debug repr(datetime.datetime(2008 give datetime.datetime(2008 happen printed date use print use str see nice date string print mylist print list object python try represent set datum use repr well manipulate date keep use date object long way get useful method python api expect date object want display use str python good practice cast time print get string representation date use last thing try print date print mylist want print date print date object container list e.g want print date list note specific case omit str print use become habit date default representation want print specific format case get custom string representation use strftime method strftime expect string pattern explain want format date e.g letter represent format look official documentation mccutchen quick reference know pep3101 object format use method format string case datetime format use strftime advantage form convert object time introduction format string literal python write date adapt local language culture use right way bit complicated question so(stack overflow edit cee suggestion start use time well date datetime time object support strftime(format method create string represent time control explicit format string list format code directive mean datetime time module python print use format argument describe documentation want take locale account short output 25.12.2013 today 25.12.2013 wednesday main____2014.06.09__16-56.log simple answer type specific datetime string format see answer use str.format format string literal python date time format directive document part format string syntax date datetime time strftime documentation base c standard include iso directive python hate idea import many module convenience work available module case datetime call new module time convert datetime object str follow code work know need help python format datetime use strftime method date time datetime class datetime module specific case use date class datetime use follow snippet format today variable string format yyyy mm dd follow complete example directive source consider fact ask simple want want locale base date include time use want append string print today return want mean today object str function return string look mylist.append(today.__str well print want quick disclaimer answer learn python week mean expert explanation use incorrect terminology go notice code declare variable today datetime.date.today choose name variable name build function next line code mylist.append(today append list append entire string datetime.date.today set value today variable append today simple solution coder use work datetime module change name variable try print yyyy dd use easy_date make easy display date year month day pandas.timestamp strftime use isoformat format way get date format example jun-2017 understand use pandas get times right format store string convert
try understand monkey patch monkey patch method operator overload delegate common thing thing dynamic replacement attribute runtime instance consider class method get_data method external lookup database web api example various method class call unit test want depend external datum source replace get_data method stub return fix datum python class mutable method attribute class fact replace class function module way point use caution monkeypatche test logic call call monkey patch replacement original good bad beware variable attribute exist point function time replace alias change mean continue point original get_data python rebind name get_data class function object name binding impact monkeypatch piece python code extend modifie code runtime startup simple example look source monkeypatch page zope wiki put monkey patch make change module class program run example monkey patching pandas documentation break first import module next create method definition exist free outside scope class definition distinction meaningless function unbound method python unbound method attach method class want use use method instance class delete method do use name mangling prefix attribute double underscore alter name recommend name mangle recommend name mangle demonstrate use knowledge example testing say need simulate datum retrieval call outside datum source result error want ensure correct behavior case monkey patch datum structure ensure behavior use similar method name suggest daniel roseman test behavior rely method raise error implement get behavior test result alter structure object life process want use setup teardown unittest avoid fine well idea use mock library patch code mock patch decorator error prone require line code opportunity introduce error review code mock imagine use monkey patch similar way accord wikipedia python term monkey patch refer dynamic modification class module runtime motivate intent patch exist third party code workaround bug feature act desire first monkey patch evil hack opinion use replace method module class level custom implementation common usecase add workaround bug module class replace original code case replace wrong code monkey patch implementation module package monkey patching do dynamic language python good example change method runtime update object definition add attribute method variable runtime consider monkey patch do work module source object definition change consider bad mean object definition describe behave monkey patching reopen exist class method class runtime change behavior use use need python dynamic programming language class mutable reopen modify replace monkey patch monkey patching technique use update behavior piece code run time use monkey patching allow modify extend behavior librarie module class method runtime modify source code conclusion monkey patch cool technique learn python discuss drawback use
sample code output problem human readable smart user want verify edit text file json dump use xml way serialize object utf-8 json string \uxxxx use ensure_ascii = false switch json.dump encode value write file use json.dump leave file object encode caveat python python caveat take account writing file use io.open open produce file object encode unicode value write use json.dump write file note bug json module ensure_ascii false flag produce mix unicode str object workaround python python use byte string type str encode make sure set encode keyword write file print stdout wrong answer useful understand wrong see comment use unicode escape pieter python workaround fail edge case crash .decode('utf8 part line fix problem make program simple avoid step special casing ascii python follow code work fine output thank original answer python follow line code consider try write much text code imperative good enough python console satisfy server need set locale explain apache set lang lc_all use mod_wsgi install he_il language locale ubuntu check instal install language example add follow text apache2 envvrs get python error apache print js unicodeencodeerror ascii codec encode character position ordinal range(128 apache try make utf default encoding explain change default encode apache early apache error pain debug think python case situation follow understand var reading answer google solution use json.dump system_encode set load json string file file content arabic text work do get result json index arabic value original resource：python3 使用 unicode escape 处理 unicode use codec possible use ensure_ascii false json.dump right direction solve problem point martijn raise exception unicodedecodeerror ascii codec decode byte position ordinal range(128 need extra setting site.py sitecustomize.py set sys.getdefaultencode correct site.py lib python2.7/ sitecustomize.py lib python2.7 site package want use def setencode change python use operation system locale prefer use sitecustomize.py create add line chinese json output format get encode string escape json string verify default encoding get verify site.py sitecustomize.py setting note sys.setdefaultencoding("utf-8 interactive python console
want filter dataframe condition keep row particular column value range try get error truth value series ambiguous use a.empty a.bool a.item a.any a.all python statement require truth value pandas consider ambiguous use bitwise |||| operation overload kind data structure yield element wise add explanation statement exception throw want get bool pandas.serie hit place operator convert operand bool use happen statement several python function hide bool call filter problematic pandas.serie completeness want mention case exception helpful mention right alternative want element wise comparison use numpy.logical_or |||| operator operator use operator set parenthese operator precedence several logical numpy function work pandas.serie alternative mention exception suited encounter explain want check series empty python interpret length container list tuple truth value explicit boolean interpretation want python check x.size x.empty x. series contain boolean value want check first item series .bool work boolean content want check item empty false well pandas use bitwise |||| condition wrap example follow work query proper bracket boolean logic use |||| see happen get column booleans comparison multiple criterion get multiple column return join logic ambiguous use treat column reduce column single boolean value example see value value column true convoluted way achieve thing zip column perform appropriate logic detail refer boolean indexing doc use operator module detailed information python doc excellent answer explain happen provide solution add solution suitable similar case use query method see test dataframe work suggest method bit use bitwise operator series boolean ms µs piece warn situation straightforward column name happen python expression column name wt_38hph_ip_2 wt_38hph_input_2 wt_38hph_input_2 want perform follow query log2(wt_38hph_ip_2 wt_38hph_input_2 wt_38hph_ip_2 > obtain follow exception cascade guess happen query parser make first column identify expression name third column possible workaround propose common question beginner make multiple condition speak possible condition cause error condition python operator precedence paragraph boolean indexing |||| indexing select data pandas documentation explain common operation use boolean vector filter data operator group use parenthesis default python evaluate expression df['a df['a desire evaluation order df['a possible way rid parenthesis cover later condition improper operator statement explain previous quotation need use |||| possible situation use boolean series statement clear python statement accept boolean expression pandas series use pandas.series.any method list error message convert series value accord need example let talk way escape parenthese first situation pandas define lot mathematical function include comparison follow result use want select row value use pandas.series.between document reference chapter query method explain pandas.dataframe.query help select dataframe condition string query string use bitwise operator boolean omit parenthese recommend readable reason pandas.dataframe.eval evaluate stre describe operation dataframe column use method build multiple condition syntax pandas.dataframe.query pandas.dataframe.query pandas.dataframe.eval thing describe recommend read documentation fun get error command work change value single value use bitwise operator pandas use bool statement python complex filtering create mask apply mask dataframe put query mask apply suppose try give benchmark common way mention result support panda series numpy array pandas data frame arround time slow see number result note add line code = x.to_numpy need µ prefer timeit result faced issue work panda dataframe use try select row match 41d7853 degreee_type certification try write code get error use work encounter error stall pyspark dataframe day able fill value compare integer value field minor thing waste time put conditions(if compare use = parenthesis failing raise exception work
read zipfile documentation understand unzip file zip file unzip content zip file directory use python need use close try catch use context manager construction zipfile low level library need specific provide get shutil high level function make_archive unpack_archive make_archive describe answer unpack_archive unpack_archive detect compression format extension filename filename extract_dir path object pathlib.path instance python use extractall method use python import zipfile work python python try import zipfile def un_zipfiles(path file = os.listdir(path file file file.endswith('.zip filepath = path+'/'+file zip_file zipfile.zipfile(filepath name zip_file.namelist zip_file.extract(names path zip_file.close path unzip file path want shell write code myfiles.zip zip archive myfile path extract file directory extract file need exist name moment yourzip.zip name zip project directory use path i.e c:// think escape path permission deny try launch i.e anaconda administrator your_destination_directory create directory project contain validation file zip folder contain non .zip file fail
convert string list integer give use map list obtain list integer python list unnecessary map return list use list comprehension list xs e.g. list contain pure integer string accept answer way go crash give thing integer datum contain int float thing leverage function errorhandle output handle iterable iterable use helper output convert string list item int item use loop shorthand python say string result give output several method convert string number list integer python use map function return list element apply function python use map python map function return map object iterator yield result(value one reason need add function name list apply iterable item refer image return value map function type case third method common python python i.e list comprehension little bit expand list comprehension useful simple solution explanation query append use add item i.e integer version string program end list b note int function convert integer form stre integer form output console convert string item list integer give stre compose number error generate line take input split want convert list list put list name place input().split want add python |||| convert string list integer method naive method output method use list comprehension output method use map output answer popular one work situation solution resistant thrust str thing aa = laugh work
instal tensorflow window cpu version receive follow message instal tensorflow tensorboard-0.4.0rc2 try run find https://github.com/tensorflow/tensorflow receive follow message c:\tf_jenkins\home\workspace\rel cpu support instruction tensorflow binary compiled use avx avx2 run run output tensorflow indicate installation successful wrong know problem fix modern cpu provide lot low level instruction usual arithmetic logic know extension sse2 sse4 avx wikipedia advanced vector extension avx extension x86 instruction set architecture microprocessor intel amd propose intel march support intel sandy bridge processor ship q1 amd bulldozer processor shipping q3 avx provide new feature new instruction new code scheme particular avx introduce fuse multiply accumulate fma operation speed linear algebra computation dot product matrix multiply convolution machine learning training involve great deal operation fast cpu supports avx fma warning state cpu support avx hooray like stress cpu tensorflow default distribution build cpu extension sse4.1 sse4.2 avx avx2 fma default build one pip install tensorflow intend compatible many cpu possible argument extension cpu lot slow gpu expect medium- large scale machine learning training perform gpu gpu care avx support expensive op dispatch gpu device set case ignore warn set export tf_cpp_min_log_level=2 unix tensorflow work see annoying warning gpu want utilize cpu much possible build tensorflow source optimize cpu avx avx2 fma enable cpu support discuss question github issue tensorflow use build system call bazel building trivial doable warning disappear tensorflow performance improve update tensorflow binary cpu os use command download url whl file find https://github.com/lakshayg/tensorflow-build performance gain instal tensorflow source gpu use training inference reason tf operation cpu implementation run gpu performance enhancement tip make good use cpu tensorflow performance guide recommend follow place input pipeline operation cpu improve performance utilize cpu input pipeline free gpu focus train good performance write code utilize cpu gpu work tandem dump gpu tensorflow binary optimize cpu pay hour save run time windows check official intel optimization tensorflow wheel compile avx2 solution speed inference window thank owner f040225 go https://github.com/fo40225/tensorflow-windows-wheel fetch url environment base combination python cpu_instruction_extension use cmd install encounter file zip file error download local computer use cmd install use pip version tensorflow mean compile installing install tensorflow gpu download repository try build build cpu avx support ignore warn time run cpu look proper way compile tensorflow sse4.2 avx avx cpu support tensorflow easy way find fix uninstall install specific version tensorflow gpu check work add follow code python file run file output hope work tho library https://pypi.org/project/silence-tensorflow/ install library instruct page work charm try use anaconda error lone option build tensorflow source take long time try use conda work work provide list delete see answer download package list output message say cpu support instruction tensorflow binary compiled use issue cpu version tensorflow perform avx advanced vector extension instruction seem tensorflow use avx instruction part code message warning ignore compile version tensorflow avx instruction
read example python doc figure method mean help example python doc parameter int list python dictionary throw keyerror try get item key dictionary defaultdict contrast create item try access provide course create default item call function object pass constructor arbitrary callable object include function type object first example default item create use int return integer object second example default item create use list return new empty list object defaultdict mean key find dictionary keyerror throw new entry create type new entry give argument defaultdict example standard dictionary include method setdefault retrieving value establish default value exist contrast defaultdict let caller specify default(value return front container initialize define doug hellmann python standard library example initialize pass callable first argument(mandatory kwargs second argument(optional child class standard dictionary perform function case pass unknown key return default value error ex case want change default value overwrite example int pass unknown key return default string pass loop increase count alphabets d. example list pass default_factory unknown(non existent key return list default list tuple pass loop append value d[color dictionary convenient way store datum retrieval name key key unique immutable object string value dictionary many application value simple type integer string get interesting value dictionary collection list dict case value empty list dict initialized first time give key use easy defaultdict type automates simplifie kind operation defaultdict work normal dict initialized function default factory take argument provide default value nonexistent key defaultdict raise keyerror key exist get value return default factory conclusion dictionary element value start default value use defaultdict great explanation defaultdict parameter int list function pass remember python accept function name argument int return default list return empty list call parenthesis normal dictionary example try call d[a get error keyerror key p exist key initialize defaultdict take function name argument try use key initialize call function pass assign return value value new key behavior mimic use dict.setdefault d[key call word code equivalent difference use defaultdict list constructor call use dict.setdefault list constructor call code rewriten avoid need argue performance consideration topic minefield post show big performance gain use defaultdict example imo defaultdict collection add confusion benefit code useless other think different question work reader want see nuts bolt method question missing__(key method see https://docs.python.org/2/library/collections.html#defaultdict-object answer show make use missing__(key practical way https://stackoverflow.com/a/17956989/1593924 clarify callable mean interactive session work v3 typical use defaultdict pointless use variable thing explicit default value simple value follow work pass simple function create fly nameless function take argument return different default value 2¢ subclass defaultdict come handy complex case defaultdict raise keyerror follow case remember give argument defaultdict defaultdict tool container collection class python similar usual dictionary dict container difference value field data type specify initialization example print short defaultdict(int argument int indicate value int type defaultdict(list argument list indicate value list type defaultdict assign new value unseen key modify example think use place switch case statement imagine switch case statement switch case statement available python achieve use defaultdict print snippet dd key print default value configure helper function nice raw dictionary keyerror throw key present evident defaultdict switch case statement avoid complicated elif elif block good example impressed lot site try access item eggs spam get standard dictionary include method setdefault retrieving value establish default value exist contrast defaultdict let caller specify default front container initialize work appropriate key default useful default type use aggregate accumulate value list set int standard library documentation include several example use defaultdict way https://msatutorpy.medium.com/different-between-dictionary-and-defaultdictionary-cb215f682971 documentation explanation self explanatory http://docs.python.org/library/collections.html#collections.defaultdict type function(int str pass argument use initialize default value give key key present dict
seem obvious seem figure convert index datum frame column example .reset_index multi index frame level index want convert 1st tick 3rd obs level index column rename index desire label elevate series work multiindex dataframe provide bit clarity let look dataframe level index multiindex reset_index method call default parameter convert index level column use simple rangeindex new index use level parameter control index level convert column possible use level name explicit level name refer level integer location begin outside use scalar value list index reset rare event want preserve index turn index column follow multiindex extract subindex use si_name name subindex want use reset_index method preserve exist index use change place example want rid index label trick multilevel indexing course set inplace true want assign new variable function parameter rename new version pandas use function reset_index new argument name specify list name want give index column reproducible example index column output apply multiindex create list name want
programmer see numerous trick hack read many different argument way python programmer sys.argv list contain argument pass script command line sys.argv[0 script name canonical solution standard library argparse docs example argparse support thing go evangelize argparse well reason copy link argparse module handle positional optional argument optparse handle optional argument argparse n’t dogmatic command line interface look option support require option optparse refuse support feature prefer purity practicality argparse produce informative usage message include command line usage determined argument help message positional optional argument optparse module require write usage string way display help positional argument argparse support action consume variable number command line args optparse require exact number argument know advance argparse support parser dispatch sub command optparse require set parser dispatch personal favorite argparse stdlib module impovement stdlib optparse module example introduction argparse usage need flexible main.py run python main.py james smith produce follow output hello james smith docopt library slick build argument dict usage string app eg docopt readme way use sys.argv print script name first argument parameter pass use optparse direction simon willison take introduce optfunc library work introspecting function definition include argument default value use construct command line argument parser example function definition turn optparse help text getopt stdlib wrap similiar make thing verbose eg make implicit see optparse optparse module deprecate developed development continue argparse module pocoo click intuitive require less boilerplate least powerful argparse weakness encounter much customization help page requirement docopt seem clear choice interest little python module write make handle command line argument easy open source free use commando option argh build argparse let write thing generate help use decorator provide extra guidance arg parse work recommend look docopt simple alternative other docopt new project work parse usage message require implement put usage message posix format python3 find convenient use extend iterable unpack handle optional positional argument additional dependency argv unpack make arg3 optional specify argv none specify valueerror thouwn solution entrypoint2 example help text let name file command_line.py let run let write simple program sum.py result several biotechnology client pose question include python script believe answer question let assume follow python script save file script execute macos computer terminal shell show result print standard output sure current directory include file script execute windows computer command prompt show result print standard output sure current directory include file script answer question pose good starting point develop script execute command input value handle simple switch value switch optional alternative flag reason new answer example argparse program expect config file argument provide print follow option specify argument optional specify expect type argument use type key parser.add_argument("age type int help="age person specify default value argument specify default key document help understand extent
point space want calculate distance numpy use numpy.linalg.norm work euclidean distance l2 norm default value ord parameter numpy.linalg.norm theory see introduction datum mining use scipy.spatial.distance.euclidean interested computing multiple distance do little comparison use perfplot small project mine first advice organize datum dimension n c contiguous add happen contiguous first dimension thing matter much use sqrt sum axis=0 linalg.norm axis=0 slight margin variant hold true row variant sum second axis axis=1 slow code reproduce plot want expound simple answer various performance note function design work list return value compare distance pa set point remember several thing innocent look time call global lookup np scope lookup linalg scope lookup norm call function equate dozen python instruction waste operation store result reload return pass improvement make lookup store get streamline function call overhead amount work want benchmark determine well math platform fast math.sqrt mileage vary advanced performance note calculate distance sole purpose display move compare distance range check add useful performance observation let take case sort distance cull list item meet range constraint first thing remember use pythagoras calculate distance dist sqrt(x^2 y^2 z^2 make lot sqrt call math short require distance unit x^2 eliminate hard part calculation great function expensive square root go check sort_things_by_distance need naive disclaimer times answer bottom a1 improve in_range converting generator benefit next thing go require distance consider yield tuple useful chain range check find thing nm calculate distance search large list thing anticipate lot worth consideration simple optimization useful depend size thing consider yield dist_sq hotdog example become a1 sort_things_by_distance key call distance_sq single item innocent look key lambda second function invoke instance problem solve method start python math module provide dist function return euclidean distance point give tuple list coordinate work list do follow know use numpy nice liner speed concern recommend experiment machine find use math library sqrt operator square fast machine liner numpy solution run test use simple program machine math_calc_dist run fast second second get measurable difference fastest_calc_dist math_calc_dist total_location fastest_calc_dist take second take ~60 second experiment numpy.sqrt numpy.square slow math alternative machine test run python subtract vector innerproduct follow example find dist function matplotlib.mlab think handy post reference np.dot dot product python easy return euclidean distance point p give sequence iterable coordinate point dimension equivalent sqrt(sum((px px q b define use python math module include function math.dist see https://docs.python.org/3.8/library/math.html#math.dist math.dist(p1 p2 return euclidean distance point p1 p2 give sequence iterable coordinate concise code euclidean distance python give point represent list python calculate euclidean distance multidimensional space use formula use pythagoras theorem calculate distance add square δx δy δz root result first change list numpy array print(np.linalg.norm(np.array(a np.array(b second method python list print(np.linalg.norm(np.subtract(a b answer work float point number compute distance integer dtype subject overflow underflow note scipy.distance.euclidean issue common many image library represent image ndarray dtype="uint8 mean greyscale image consist dark grey pixel say pixel color diffe black image end x consist cell register image unsigned integer type compute distance numpy sign integer type cast float first image datum use opencv norm method find difference matrix apply element wise multiplication numpy multiply command find summation element wise multiplied new matrix find square root summation good way numpy python general good way safest fast suggest hypot usage reliable result chance underflow overflow little compare write sqroot calculator let see np.hypot vanilla np.sqrt(np.sum((np.array([i j k 2 axis=1 refer
give name python package instal pip way list possible version pip install right trial error try install version third party library newest version new incompatible change make like list version pip know test pip = use note command experimental change future pip = use pip use pip use available version print download instal package pip blork stre valid version number update march many people report yolk instal pip install yolk3k return late version chris answer seem upvote work script pastebin work convenient work multiple environment host copy create time well solution use yolk3k available install pip see version django available yolk3k fork original yolk cease development yolk maintain indicate comment yolk3k appear support python note involve development yolk3k seem work leave comment make much difference use yolk3k issue tracker consider submit fix possible need third party package get information pypi provide simple json feed package python code use standard library get version code print feb 23rd update sep method work install remove pip use pip install -v see version available install package use follow solution test pip come dead simple bash script thank jq author update use small python script use standard library module grab list available version package pypi use json api print reverse chronological order python solution break loose version django uwsgi save script run package name argument look pip code look code responsible locating package find packagefind class pip.index method look version installrequirement return recent version code copy original function return line change return version script expect package name first argument return version guarantee correctness ' m familiar pip code help sample output code yolk3k package yolk yolk3k fork original yolk support python2 https://github.com/myint/yolk try install package version exist pip list available version work osx return list line get late version available keep mind gsort instal osx parse version install brew install coreutils project luddite feature example usage list version package available query json api https://pypi.org/ update solution need check comment answer original answer pip version use old solv order get available version run pip install packagename==somerandomstre return error say find version satisfie requirement packagename==somerandomstre error pip list available version server unlucky random string aksjflashd turn actual package version course use trick pip download https://pypi.python.org/pypi/django/ work package maintainer choose show package https://pypi.python.org/simple/pip/ trick list link pypi version package excellent job work nexus sonatype proxy alternative solution use warehouse apis https://warehouse.readthedocs.io/api-reference/json/#release instance flask print answer sort list jq use system -v avalable fetch last version number package bit simple simple bash script rely python assume context question instal curl wget assumption setuptool package instal sort version instal rely external dependency little bit version comment put package name variable get version use curl get version use wget print sort version luck yolk yolk3k pip install end use adapt python eric chiang answer work recent pip version extra tool necessary py3.9 version limmy+ericchiang solution understand releases key drop future solution use get https://pypi.python.org/pypi/{package_name}/json work find available incompatible version use -vv flag pip = incompatible version list log take combination couple post answer modification make easy use run python environment idea provide new command model install command give instance package finder use upside work use index pip support read local pip configuration file get correct result normal pip install make attempt make compatible pip v try https://gist.github.com/kaos/68511bd013fcdebe766c981f50b473d4 example output usage provide programmatic approach chris answer use pip install package_name>== use return list version note seem provide compatible release release get full list use json approach eric fetch late version gitlab private package work
mean code main conventional use python hold result execute expression interactive interpreter session see doc precedent set standard cpython interpreter interpreter follow suit translation lookup i18n see gettext documentation example code general purpose throwaway variable name indicate part function result ignore discard code part function definition use def lambda signature fix callback parent class api particular function implementation need parameter code long time answer list use case come note worth list use case conflict translation lookup use case necessary avoid use throwaway variable code block use i18n translation many folk prefer double underscore throwaway variable reason linter recognize use case example year month day date raise lint warning day use code fix day need write year month date lambda function lambda arg create function require argument use catch lint fix write unused variable hide typo set day use dya next line pattern matching feature add python elevated usage convention language syntax match statement concern match case wildcard pattern runtime bind value symbol case use case remember valid variable name keep object alive case undesirable release memory external resource explicit del name call satisfy linter name use clear reference object variable name conventional python use throwaway variable indicate loop variable use underscore consider care throwaway variable python python interpreter store last expression value special variable call underscore use ignore specific value n’t need specific value value use assign value underscore ignore value unpack ignore index case use underscore python store value last expression interpreter ignore specific value call n’t care give special meaning function name variable function use internationalization i18n localization l10n function separate digit number literal value nice article example mingrammer python language concern special meaning valid identifier foo foo f_o_o exception match statement python case pattern match statement soft keyword denote wildcard source special meaning convention several case common dummy name variable intend use name require syntax semantic many repls shell store result last top level expression builtin special use interactive interpreter store result last evaluation store builtin module interactive mode special meaning define source due way name look shadow global local definition bare refer builtin note shell ipython assign builtin special case context internationalization localization use alias primary translation function return localized translation message base current global domain language locale directory function aliase local namespace see example
read django code see model call slug know urls slug thing suppose read definition glossary slug short label contain letter number underscore hyphen use url example typical blog entry url https://www.djangoproject.com/weblog/2008/apr/12/spring/ last bit spring slug slug way generate valid url use datum obtain instance slug use title article generate url advise generate slug mean function give title piece datum set example let pretend django model reference object url meaningful name instance use article.id url look want reference title space valid url replace result attempt result meaningful easy read well example the-46 year old virgin slug create title casing letter replace space hyphen see url web page example provide historical context term slug casting metal lead case press font make paper font factory melt recast fresh mold many print become worn apprentice start career go way top typograph compose text article backward manner lead character stack wise printing time letter straight paper typograph read newspaper mirror print slug snail slow story fix many bench wait identify fist letter whole title readable hot news wait bench possible last minute correction evening paper last assembly definitive printing django emerge office lawrence journal kansas print jargon linger django old slug boy france term slug come world newspaper production informal name give story production process story wind path beat reporter assume exist editor printing press name reference fix error kate william story system django use slug part url locate story example www.mysite.com/archives/kate-and-william stack overflow geb ish(a self referential replace slug blahblah find okay date screenplay slug line start scene set background scene similar precis preamble follow linotype machine slug single line piece metal create individual letter form make single slug whole line improve old character character compositing follow pure conjecture meaning slug counterfeit coin press envisage usage transform printing term slug press use original character change piece metal definition story summary definition short step proper print online world godel escher bach douglas hofstadter consider great modern intellectual work check work metamagical thema slug newspaper term slug short label contain letter number underscore hyphen use urls django docs slug field django use store generate valid url create web page way add question stack overflow dynamic page generate see address bar see question title place space job slug field title enter slug django store slug field become slug django see url page slug friendly short label specific content contain letter number underscore hyphens slug save respective content pass url string slug create use slugfield ex want use title slug django simple function call slugify need uniqueness add unique true slug field instance previous example lazy slug process worry plugin help django autoslug slug newspaper term mean final bit url example post title bit django become bit django change n’t auto generate slug descriptive part url make human descriptive require web server slug django slug django slug slug used determine page serve site auto slug django admin add modeladmin slug part url identify particular page website read form example /builde your-1st django site slug contain slug short label contain letter number underscore hyphen use url example typical blog entry url https://www.djangoproject.com/weblog/2008/apr/12/spring/ last bit spring slug short slug help rid ugly look url valid url example ecommerec site show url www.myecom.com/product/5432156 show www.myecom.com/product/iphone11 help slug way generate valid url use datum obtain instance use title article generate url slug use django generate human friendly readable url example current url page say slug django notice url slugify actual slug django
want know memory usage python application know code block portion object consume memory google search show commercial python memory validator window open source one pysizer heapy try want know consider give detail least change code module memory_profiler capable printing line line report memory usage work unix window need psutil last output detailed goal give overview code consume memory exhaustive analysis allocate object decorate function @profile run code memory_profiler flag print line line report guppy3 simple use point code write follow give output find object reference get statistic doc bit sparse graphical browser write tk python use heapy recommend dowser easy setup need change code view count object type time view list live object view reference object simple web interface import memdebug call try pysizer heapy appreciate other review update code cherrypy cherrypy server.quickstart method remove take block flag use cherrypy consider objgraph library see blog post example use case muppy memory usage profiler python focus toolset lay identification memory leak muppy try help developer identity memory leak python application enable track memory usage runtime identification object leak tool provide allow locate source release object develop memory profiler python call memprof http://jmdana.github.io/memprof/ allow log plot memory usage variable execution decorate method import library use decorate method use example plot look project host github https://github.com/jmdana/memprof find meliae much functional heapy pysizer run wsgi webapp dozer nice middleware wrapper dowser try pytracemalloc project provide memory usage python line number edit gui analyze snapshot
delete content local folder python current project window see nix use filter path example path/*.txt remove text file directory delete folder content use shutil.rmtree delete entire directory tree path point directory symbolic link directory ignore_error true error result fail removal ignore false omit error handle call handler specify onerror omit raise exception expand mhawke answer implement removes content folder folder test linux file folder symbolic link work window ' m surprised mention awesome pathlib job want remove file directory oneliner remove directory write use rmtree recreate folder work run error delete recreate folder network drive propose solution use walk work use rmtree remove folder attempt use os.unlink file folder cause error post glob solution attempt delete non empty folder cause error suggest use code many answer try adjust permission enable removal file directory use context manager protocol python early version python note case vote answer explain ugly reliable efficient solution resolve problem address answerer code useful function oneliner robust solution accounting file directory use solve problem way delete file directory sub directory remove folder delete file folder use use distinguish file directory get trouble try unlink good example use remove directory hint adapt circumstance use nix system leverage system command remove file separate folder single parent directory simple code trick ' m unix hope help konw old thread find interesting official site python share idea remove content directory problem authorization use shutil.rmtree want remove directory recreate address original http://docs.python.org/2/library/os.html#os.walk hope help solution think code work delete folder use code delete file particular extension intuitive way answer limited specific situation assume want delete file maintainig subfolder tree use recursive algorithm topic think many find useful use method bellow remove content directory directory use function resolve issue rmtree makedirs add time.sleep easy way delete file folder remove file trick use os module list remove work problem know
want find number column data use isna method alias isnull compatible old pandas version sum count nan value column several column work let assume df pandas dataframe give number nan value column need nan value row subtract total length count non nan value time datum small series get speed comparison isnull solution base vote answer define function give dataframe preview miss value miss value column pandas suggestion keyword argument value_count method implement count nan value pandas column quick way print nan column descend order print nan column descend order df.isnull().sum give column wise sum miss value want know sum miss value particular column follow code work df.column.isnull().sum use jupyter notebook nan data use follow function give output dataframe copy paste follow function call pass pandas dataframe output want keep simple use follow function get missing value use particular column count count zeroes count nan hope help use value_count method print value np.nan simple option suggest count nan add shape return number row nan 1st part count nan multiple way method count due count ignore nan different size method isnull isna chain sum method describe info notice output notnull value count method numpy 2nd part question drop column thresh try dropna thresh optional require many non value trick code count null value column wise nice dzone article july detail various way summarise nan value check article cite provide additional value showing way count display nan count column decide discard column demonstrate way select row specific nan discard impute quick example demonstrate utility approach column usefulness obvious found help large datum frame case get non none none count different group pull groupby return count na total number entry group try need gran total nan base answer give improvement approach use loop count miss value column use loop datum frame set conditional loop calculate nan value percent column drop contain value nan set threshold use solution propose @sushmit code possible variation advantage return result column df give output suppose want get number miss values(nan column(serie know price dataframe call review get miss value n_missing_price variable simple sum key method try use count realize sum right method use context write short function python produce .info pandas write excel give way completeness use np.count_nonzero compare top answer use row × column dataframe datum https://pandas.pydata.org/pandas-docs/stable/generated/pandas.series.count.html#pandas.series.count return number null observation series task use pandas.dataframe.dropna https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.dataframe.dropna.html thresh parameter declare max count nan value column dataframe code output
want know difference init call method example use initialise create object receive argument use second implement function call operator define custom call method allow class instance call function modify instance python function first class object mean function reference pass input function method execute instance class object treat function pass method function call order achieve call class function specialize def args take input variable number argument assume instance class x.__call__(1 analogous call x(1,2 instance function python init define class constructor del class destructor net distinction init call first build instance class second make instance callable function impact lifecycle object call impact construction destruction lifecycle modify internal state show example call make instance class callable require init call new object create initialize many scenario want redefine object say do object find need new object call redefine object new case many init treat constructor call method call object number times init call function take default argument try explain use example suppose want print fix number term fibonacci series remember first term fibonacci series 1s want list contain fibonacci number initialize update use call functionality read @mudit verma answer want object callable function initialize time call output observe output init call time class instantiate first time late object call initialize call allow return arbitrary value init constructor return instance class answer point init call possible call call multiple time case initialize instance assign intermediate variable init call create instance class initialize instance variable example call call call object function example use call method favor implement decorator example take python pattern recipe idiom output case run result case run result short sweet answer provide wanna provide practical implementation compare java note scenario scenario seem term result output scenario1 create new instance instance1 scenario2 modify create instance1 call beneficial system need create new instance equivalent java init special method python class constructor method class call object class construct say initialise new object example use give error typeerror init miss require positional argument require argument init call implement class help invoke class instance function call example use b run fine init function use call method use class method static method call method use make object act function pass class variable want bring table short cut syntax sugar well technique use see current answer many case example make api request logic encapsulate inside class give datum class run separate entity instantiate class need declare method call create actual call method allow declare global function method reason reason example modify method need call class init call use instance method example person class init call show create initialize instance person class show init call show next call call way show call call show init call many time show init call instance person class reinitialize none return init show init return none call init show error occur typeerror init return none str call define person class call obj("hello show error occur typeerror person object callable call show error occur attributeerror person object attribute call
remove last character string simple try follow code snippet understand work cast string list case want accept string user make take last word sentence word separate whitespace space try extension string slicing python say string length last char remove remove last character simple solution use string slicing python python python use slice specify start stop index extract part string s. format s[start stop start default need specify stop use stop use stop = remove character end good method use stop len(s function call rstrip stuff enter value want delete case last element string[-1 runt code shouul see f value delete
want insert print statement code see print exercise usual way exercise exist pyt test run seem able see standard output least pycharm simple way see standard output run switch disable test capturing test fail equivalent capture stdout individual test display certain condition summary test print default extra summary info show use option show capture output pass test show capture output fail test default behaviour format output pretty run test use option print statement get print console test run upvoted comment accept answer joe ask way print console capture output show junit report unix refer tee tee capturing py.test default non py.t exist third party py.t plugin know support tee python support tee box monkey patch py.t unsupported non trivial answer monkey patch py.t = option capture default option capture stderr stdout tee course great journey begin tedious prequel forget year tell py.t drive test suite contain slow functional test display stdout test helpful reassure prevent leycec reach killall -9 long run functional test fail week end display stderr test prevent py.t report exception traceback test failure unhelpful coerce py.t capture stdout get answer assume custom setuptools test command invoke py.t see manual integration subsection py.t write good practice page install pyt runner third party setuptool plugin provide custom setuptools test command invoke py.t pyt runner instal need uninstall pip3 package adopt manual approach link assume follow instruction manual integration highlight codebase contain pytest.run_test method modify method resemble enable monkey patch run py.t follow stderr stdout capture nifty extend monkey patch tee stdout leave exercise reader barrel full free time accord pyt documentation version pyt temporary disable capture test = tee sys add capture see output stdout err try pyt -v test_login.py info console -v short -s mean disable capturing enable live log setting follow tox.ini project root specify cli simple suggest use command interesting command use particular case shortcut use log need specify turn log output addition generic stdout base log pyt test use pyt cli level debug -s my_directory/ use pycharm run individual test test use run toolbar run tool window display output generate application see print statement part test output want run test code output capsy capsysbinary capfd capfdbinary fixture allow access stdout output create test execution example test function perform output relate check result pass test pass
append string fast alternative handle multiple string list see concatenate join item list single string reference string concatenate string end cpython special case try extend string place end result operation amortize o(n use o(n^2 o(n source bytesobject.c easy enough verify important note optimisation part python spec cpython implementation know empirical testing pypy jython example show old o(n**2 performance good ouch bad quadratic pypy work short string perform large string optimize reason believe speed bottleneck cause string concatenation stick say aim java stringbuilder canonical python idiom add item list use str.join concatenate end join str1 str2 space separator str2 str.join take iterable put string list tuple efficient get builtin method case generate whole string go append exist string example + str(obj1.count use s:%d obj1.name easy read efficient python give string delight curly brace need many append operation build large string use stringio cstringio interface file write append text append string use depend application loop hundred word want append list put long sentence use = difference consistent trend python seem get slow version python loop good loop python loop good loop python loop good loop python loop good loop python loop good loop python loop good loop python loop good loop python loop good loop append string add function output option use follow depend try format variable string print want output give name bob want s. print("hello my_variable efficient work data type str(my_variable str(5
take problem project euler programming exercise compare optimal implementation python erlang haskell order get high execution time search first triangle number divisor state original problem result follow c python python pypy erlang haskell summary suppose big advantage use long calculation arbitrary length integer need load runtime first other question erlang python haskell lose speed due use arbitrary length integer long value less maxint question haskell slow compiler flag turn brake implementation probable haskell book seal question offer hint optimize implementation change way determine factor optimization way fast native language question functional implementation permit lco last call optimization a.k.a tail recursion elimination avoid add unnecessary frame call stack try implement algorithm similar possible language admit haskell erlang knowledge limit source code use use ghc gcc linux x86_64 core2 duo machine compile use ghc -fllvm -fforce recomp haskell gcc -o3 c. right second c solution -fllvm flag ' get second backend well case conclusion haskell awesome result code edit explore let address question question erlang python haskell lose speed due use arbitrary length integer long value less maxint haskell use integer slow int slow depend computation perform bit machine int sufficient portability sake rewrite code use int64 word64 language long question haskell slow compiler flag turn brake implementation probable haskell book seal question offer hint optimize implementation change way determine factor optimization way fast native language answer answer question functional implementation permit lco avoid add unnecessary frame call stack issue good work glad consider problem erlang implementation baseline follow measured execution time unmodified erlang program second compare second code first thing run intensive erlang code use native code compile erlc native euler12 get time second low speedup expect native compilation kind code problem use useful experimentation fact function reachable cause native compiler conservative normal beam emulator affect replace declaration -export([solve/0 give well speedup second baseline code problem iteration factorcount loop perform test code general tricky make fair comparison different implementation code particular algorithm numerical need sure thing round error implementation due typecast cause many iteration reach result eliminate possible error source rid extra test iteration rewrote factorcount function follow model c code rewrite export_all native compilation give follow run time bad compare c code consider erlang gear write numerical code slow c program good regard question question erlang python haskell loose speed due use arbitrary length integer long value less maxint erlang way say use bit arithmetic wrap compiler prove bound integer check computation see fit single tag word turn heap allocate bignum bignum use practice runtime check perform hand mean know algorithm fail unexpected integer wraparound give large input question functional implementation permit lco avoid add unnecessary frame call stack erlang code correct respect last call optimization regard python optimization addition use pypy impressive speed up change code use pypy translation toolchain compile rpython compliant version cython build extension module c version testing cython module fast reference include c pypy benchmark result c compile gcc -o3 pypy rpython use late pypy revision c2f583445aee cython rpython version couple key change translate standalone program define target case main function expect accept sys.argv argument require return int translate use euler12-rpython.py translate c compile cython version rewrite extension module euler12.pyx import call normal python file version additional static type declaration normal boilerplate build extension use python setup.py build_ext little experience rpython cython surprise result use cpython write cpu intensive bits code cython extension module seem easy way optimize program question offer hint optimize implementation change way determine factor optimization way fast native language c implementation suboptimal hint thomas m. dubuisson version use bit integer datatype investigate assembly list educate guess memory access go compile code make use bit integer generate code fact fit less bit int sse register double bit integer slow modify code replace long int inline factorcount think necessary gcc run timing give reference haskell implementation thomas early answer give conclusion take great compiler gcc generate fast code take look blog year do project euler problem haskell python find haskell think languages fluency code style come python speed use wrong implementation pypy thing find fast fun follow native haskell implementation use ghc -o3 run second machine core i7 efficient factorcount function c version change long int main use gcc run second make run take advantage fact nth triangle number n*(n+1)/2 disparate prime factorization number factor multiply find number factor whole reduce c code run time second handle large search great factor take second machine leave similar haskell speedup interested reader haskell implementation speed use function haskell package case use prime instal cabal install prime timing original program improve implementation see run millisecond machine run second compilation command say much erlang haskell bit haskell point lot bottleneck python time program try execute operation value verify value proper type cost bit time factorcount function allocates list range isquare various time runtime malloc style memory allocation way slow iterate range counter c. factorcount call multiple time allocate lot list let forget python interpret cpython interpreter great focus optimize edit note use python range return list generator case point allocate list wrong function allocate range object inefficient inefficient allocate list lot item use hug hug slow interpreter get well time ghc cogitate hypotesis kind stuff good haskell compiler hood fascinating way comprehension say play unfunny game good part know various language use different way possible digress recommendation point sorry hope help case remember need make sure recursive call last command return value word function use optimization optimization function operation multiplication recursive call separate operation local variable make clear operation execute usual see function equivalent point make note compiler interpreter decide make tail recursion example python interpreter remember use python example fluent syntax find strange stuff factorial function parameter parameter name acc accumulator know people haskell need think recursion code replace explicit recursion @thomas answer common list operation code thing worry tail recursion run 7.49s slow version @thomas answer machine ghc c version @raedwulf run 3.15s seem ghc improve year ps know old question stumble google search forget search want comment question lco express feeling haskell general want comment top answer comment allow code block look erlang implementation timing include start entire virtual machine run program halt virtual machine set halting erlang vm take time timing do erlang virtual machine result different case actual time program question believe total time take process start load erlang vm halting put program include total time method use time program outputting consider use erlang timing use want time program virtual machine timer tc/1 timer tc/2 timer tc/3 way result erlang exclude time take start stop kill halt virtual machine reasoning think try bench mark suggest try time program language runtime runtime language order get precise value example start shut runtime system erlang python haskell stand correction base reasoning conclude say benchmark precise /fair enough language run top runtime system let change edit language runtime system start halt differ suggest time runtime system language apply erlang vm know considerable overhead start number explanation c version noone year remember upvote answer get top see learn laptop specification command filename fast gcc compiler give similar speed wrong code compiler option let investigate first point interest integer type conversion expensive consistency important well code generation optimization integer type mixed mess int right go improve type use get benchmark them'all integer type int long int32_t uint32_t uint64_t include stdint.h lot integer type sign unsigned play choice compile x86 x64 confuse actual integer size lot version compile run definitive conclusion trick question size int long c right answer size int long defined c spec int bit least int gcc man page -m32 -m64 flag bit environment set int long pointer bit generate code run i386 system bit environment set int bit long pointer bit generate code amd x86 architecture msdn documentation datum type range https://msdn.microsoft.com/en-us/library/s3f49ktz%28v=vs.110%29.aspx int byte know sign byte know long int sign long int bit integer fast bit integer standard integer type define c vary depend compiler architecture need consistency predictability use uint32_t integer family include stdint.h speed issue solve language hundred percent c c++ win next improvement multithreading use openmp question erlang python haskell lose speed due use arbitrary length integer long value less maxint question answer negative erlang last question answer use erlang http://bredsaal.dk/learning-erlang-using-projecteuler-net initial c example guess numerous problem other cover detail erlang module execute cheap netbook second use network thread model erlang take advantage event model distribute many node fast code test take place intel(r atom(tm cpu n270 try go get original c version go use get original c version thaumkid c version first go version second go version try alpha original c version thaumkid c version pypy3.3 alpha follow code get original c version thaumkid c version pypy3.3 alpha c++11 20ms run understand want tip improve language specific knowledge cover thought add context people look mathematica comment question wonder code slow answer provide context help people evaluate code question answer code use couple uglyish optimisation unrelated language use base take 19ms average desktop 80ms laptop cry code see many optimisation available make assumption number factor large number involve many small factor use thaumkid excellent algorithm use approximation factor count small simple check prime factor check remain number calculate upper bind nmber factor use calculate upper bind number factor number high enough calculate exact number factor code need assumption correctness seem work number estimate high require full check code find triangular factor second triangular number factor second triangular number factor minute second triangular number factor minute second core2 duo code take processor cycle number average last triangular number large modify jannich brendle version list result euler12.bin euler12.erl p12dist.erl erl code use native compile gcc euler.c time ./a.out user system cpu total
get python program sleep millisecond use time.sleep note rely sleep take ms get use time.sleep see python documentation https://docs.python.org/library/time.html#time.sleep module call time help know way sleep sleep reference ask program wait rest code way use sleep second way import whole module sleep use time unix time way useful need loop run complex use timer function code use pyautogui first argument none pause first argument second example second first argument none second argument true sleep global pause setting set wonder reason see source code
prepend integer beginning list work list.insert(index value insert item give position first argument index element insert xs.insert(0 x insert front list xs.insert(len(xs x equivalent negative value treat relative end list note use list variable name note try operation loop list wrong datum structure list optimize modification front somelist.insert(0 o(n operation somelist.pop(0 del somelist[0 o(n operation correct data structure use deque collection module deque expose interface similar list optimize modification endpoint appendleft method insertion front demo way use unpack list li = li = li = > base minimal benchmark use timeit module seem follow similar well performance accept answer list create new list mutate lst intention mutate list use lst.insert(0 make sure ur_data string type u data= int(5 convert ur_data str(data note fast python pure list loop relevant post none work convert first element part series single element series convert second element series use append function new list make add list
date 8/18/2008 good way get number day date date object subtract compute timedelta object relevant section doc https://docs.python.org/library/datetime.html see answer example use power datetime day christmas arithmetic answer use date try answer use pandas give answer case input dataframe column use dt.day place day want datetime module example point do arrow reference http://arrow.readthedocs.io/en/latest/ use pure code calculate date time several option write simple way hope help datetime.toordinal method mention https://docs.python.org/3/library/datetime.html#datetime.date.toordinal date.toordinal return proleptic gregorian ordinal date january year ordinal date object date.fromordinal(d.toordinal = = d. seem suited calculate day difference readable timedelta.day assume course verify date format r'\d+/\d+/\d+ way go problem want code calculation function return ordinal give year month day function compatible date.toordinal method datetime module get number day difference date follow use datetime object python date handle library suspect bug abstract algorithm translatable language perform follow calculation date subtract result quotient remainder positive integer step a. start identify part date year month day variable change go step b. subtract january -2 december step c. negative add subtract year y. change start year march month number march february reason day number year change leap year ordinary year short month end year follow month need special treatment step d. divide get quotient q₁ remainder r₁. add q₁ × d. use r₁ next step day month start march step e. divide r₁ get quotient q₂ ignore remainder add r₁ × q₂ d. group month day month first pair month day safe ignore fact feb short day point care day number feb mar follow year step e combine alternative method first use set tabulation cumulative number day adjust year first day month add l[m d. step f step use julian calendar date gregorian calendar date change vary country take sep english speak country oct europe skip step certain deal date range mar-1900 feb-2100 make choice date process divide get quotient q₃ remainder r₃. divide q₃ get quotient q₄ ignore remainder add q₄ × q₃ d. assign r₃ y. step g. divide get quotient ignore remainder add q₅ × d. step h. optional add constant choose force particular date particular day number step g date get d₁ d₂. step i. subtract d₁ d₂ get number day d₂ d₁. comment exercise extreme caution deal date agreement month start year many place count march new year
accord documentation interchangeable stylistic reason use use double quote string use interpolation natural language message single quote small symbol string break rule string contain quote forget use triple double quote docstring raw string literal regular expression need example quote official doc https://docs.python.org/2.0/ref/strings.html plain english string literal enclose match single quote double quote difference people tell choose style match context consistent agree add pointless try come convention sort thing end confusing newcomer use prefer docstring find create fluff type shift key swiss german keyboard change use triple quote docstring conform pep ' m stick mean lot escape get value single quote identifier stand quote rest practice give single quote identifier standing room string contain use example able say consistent module package project organisation code read people work c c++ switch language python use single character string long string help ease transition follow language interchangeable python code see wild tend favour exception common see triple quote comment interesting subtopic question pep specifie triple quote doc string quick check use google code search find triple double quote python popular triple single quote 131k occurrence code google indexes multi line case code go familiar people use triple double quote simple reason use double quote speak fluff good streamline string literal go use escape character represent apostrophe offend coder read novel imagine painful high school english class python use quote give follow output use double quote general specific reason habit guess want apostrophe inline literal string want double quote stick provide meaning confuse people collaborate stylistic preference check pep see mention single double quote prefer single quote keystroke mash shift key make single quote perl want use single quote string need interpolate variable escape character \n \r php make distinction perl content single quote interpret \n convert oppose double quote contain variable value print python ' m afraid see token separate name text variable python feature make python readable confusing single double quote use python choose use double quote easy see use strike fancy time convenient able switch whim quote characetrs switch whimsical team taste project code guideline multilanguage environment wish encourage use type quote string language use instance look none know look code use string text guess common inside text appear hashkey thing aim minimize pixel surprise prefer order minimize pixel string apostrophe minimize pixel docstre prefer latter non standard uncommon surprising bunch string use logic get use preserve consistency minimize surprise help think pixel minimization philosophy follow way english character look b c bb latter choice waste non empty pixel use double quote year language c++ java vb bash use double quote normal text use modify non english keyboard character require shift key = example result = single backslash escape character happen luck example \k \w valid escape \t \n want use single backslashe interpret use raw string put r front string far path window concern slash interpret stre different guarantee handle external device
python equivalent switch statement python introduce pattern match example python documentation official documentation happy provide switch see solution use dictionary example equivalent switch block invoke begin fall depend fall direct replacement many case well way python see replacement switch statement python
unicode string python remove accent diacritic find web elegant way need install library pyicu possible python standard library python important note avoid code explicit mapping accent character non accent counterpart unidecode correct answer transliterate unicode string close possible representation ascii text example work greek letter character category mn stand nonspacing_mark similar unicodedata.combining miniquark answer think unicodedata.combine well solution explicit keep mind manipulation alter mean text accent umlauts decoration find answer web work fine french example think second step remove accent handle drop non ascii character fail language greek example good solution remove unicode character tag diacritic edit trick unicodedata.combining(c return true character combine precede character diacritic edit remove_accent expect unicode string byte string byte string decode unicode string work project compatible python create ids free user entry thank create function work wonder result handle accent stroke elegant way think mention comment page think elegant fact hack point comment unicode name name give guarantee consistent special letter handle turn inverted letter unicode name contain depend want need accent stripping achieve dictionary sort order incorporate suggestion comment handle lookup error code view propose solution accept answer original question ask removal accent correct answer unspecified change observe result code accept answer change málaga málagueña additional change ñ n request simple function request task low form gensim.utils.deaccent(text gensim topic model human solution unidecode note suggest solution unicodedata remove accent character turn ł l response @miniquark answer try read csv file half french contain accent string become integer float test create test.txt file look montréal über mère françoise noël include line get work find python ticket incorporate @jabba comment result note mac os x use python language combine diacritic language letter accent diacritic specify accent think safe specify diactric want strip many answer consider sklearn useful use sklearn process text function call class countvectorizer normalize string use strip_accents='ascii strip_accents_ascii call strip_accents='unicode use call detail consider detail docstre hope get functionality similar elasticsearch asciifolding filter want consider fold ascii python port apache lucene ascii fold filter convert alphabetic numeric symbolic unicode character ascii character basic latin unicode block ascii equivalent exist example page mention edit fold_to_ascii module seem work normalize latin base alphabet unmappable character remove mean module reduce chinese text example empty string preserve chinese japanese unicode alphabet consider use @mo han remove_accent_chars_regex implementation short function strip diacritic keep non latin character case handle unicodedata standard library several æ rely give parallel string nb default argument outlier evaluate mean provide caller key sort list string natural order output string mix text number interested compose remove_diacritic function string_to_pair give make sure behavior meet need take look pangram
python easy_install make instal new package convenient tell implement common feature dependency manager list remove instal package good way find instal preferred way remove instal package file need update remove package rm local lib dist package my_installed_pkg.egg similar pip alternative setuptool easy_install provide uninstall command install pip accord installation instruction use pip uninstall remove package instal easy_install uninstall .egg rm egg directory remove matching line site package easy first run command remove dependency package remove egg file package info answer none summarize request seem make thing complex removal need use install use easy_install pip list instal package need use output package detail install easy_install yolk pip install yolk several source net suggest hack reinstall package option remove .egg file lib/ binary bin/. discussion setuptool issue find python bug tracker setuptools issue edit add link python bugtracker problem serious enough annoyance consider virtualenv allow create environment encapsulate python library install package global site package directory script run environment access package global one use lot evaluate package want need install need package easy enough blow virtual environment easy use make new env virtual_envt install setuptool new environment create boostrap script setup new environment command create new virtual env say python psycopg2 django instal default install env specific version python want official instruction http://peak.telecommunity.com/devcenter/easyinstall#uninstalling-package replace package version delete package(s need delete packagename-versioninfo.egg file directory find installation directory want delete instal version package version package first run ensure python continue search package plan remove do delete .egg file directory script wish remove try list instal python package use yolk need use easy_install yolk come question try uninstall many random python package instal time use information thread come package_list clean awk pip freeze virtualenv remove python package run problem macos x leopard solution make sure call macport python hope help delete file easy-install.pth work rest pip install django==1.3.7 work similar previous answer path package different plaform macos high sierra version
get dict whole bunch entry ' m interested select easy way prune one construct new dict use dictionary comprehension use version lack make dict((your_key old_dict[your_key uglier note jnnnnn version stable performance depend number your_keys old_dict size term speed memory generator expression process item time look item remove place elegant dict comprehension example python filter part statement method slow delnan answer want select many key project function funcy library take look select_key liner lambda work example basic list comprehension iterate dict key output list tuple key value pair key life desire key list dict wrap whole thing output dict object code code code pieced code performance measure timeit use number=1000 collect time piece code python performance way filter dict key python code give original dictionary orig set entry interested key nice delnan answer work python version interest fragile element key exist original dictionary base accept answer delnan one want key old_dict delnan solution throw keyerror exception catch need want include key excist set wanted_key default value key set old_dict function trick delnan version use dictionary comprehension stable performance large dictionary dependent number key permit total number key dictionary myggan version one allow list key include key exist dictionary bonus inverse create dictionary exclude certain key original note delnan version operation do place performance relate number key dictionary advantage function modify dictionary provide edit add separate function exclude certain key dict option get list python iterator python return filter dict seem easy way unpack value make new dictionary select key remove make use dictionary comprehension example achieve elegant dict comprehension accord title question expect filter dictionary place couple answer suggest method obvious obvious way add timing result seem del winner want update place dict comprehension solution depend size dict create course delete half key slow avoid create new dict filter place edit address comment calculate drop key give drop key assume keep_key drop_key set iteration take age assumption del sure moral set list tuple drop key go del short form answer suggest order maintain conciseness create duplicate object list dict create throw list delete keys original dict use python benedict dict subclass installation pip install python benedict open source github https://github.com/fabiocaccamo/python-benedict disclaimer ' m author library know negation set key advance simple method use del liner e_key list key exclude update dict give new one want new output dict make copy dict delete lambda function approach support nest field mongo query use function
dictionary insertion order python describe cpython implementation detail language feature documentation state dict use compact representation pioneer pypy memory usage new dict small compare python preserving order kwargs function implement order preserve aspect new implementation consider implementation detail rely change future desire new dict implementation language release change language spec mandate order preserve semantic current future python implementation help preserve compatibility old version language random iteration order effect python contribute inada naoki issue idea suggest raymond hettinger new dictionary implementation perform old preserve element order update december dict retain insertion order guarantee python dictionary order python + insertion python cpython implementation python dictionary remember order item insert consider implementation detail python need use ordereddict want insertion ordering guarantee implementation python order behavior[1 python guarantee language feature implementation detail python dev message gvr make dict keeps insertion order rule thank mean depend implementation python offer insertion order dictionary wish conform implementation python python dictionary implementation perform old preserve element order keep array first array dk_entrie hold entry type pydictkeyentry dictionary order insert preserve order achieve append array new item insert end insertion order second dk_indice hold index dk_entrie array value indicate position correspond entry dk_entrie array act hash table key hash lead index store dk_indice correspond entry fetch indexing dk_entrie index keep type array depend overall size dictionary range type int8_t(1 byte int32_t int64_t byte bit build previous implementation sparse array type pydictkeyentry size dk_size allocate result lot empty space array allow dk_size full performance reason empty space pydictkeyentry size case require entry store insert sparse array type intx_t depend dict size dk_sizes full keep empty space change type pydictkeyentry intx_t create sparse array type pydictkeyentry much memory demand sparse array store int see full conversation python dev regard feature interested good read original proposal make raymond hettinger visualization datum structure use see capture gist idea example dictionary store keyhash key value datum organize see original proposal lot space empty reduce collision make look up fast new approach reduce memory require move sparseness require index answer original first question use dict ordereddict python think sentence documentation enough answer question order preserve aspect new implementation consider implementation detail rely dict mean order collection want stay consistent rely side effect new implementation stick ordereddict make code future proof debate edit python keep feature see update guido van rossum announce mailing list python dict python implementation preserve insertion order want add discussion reputation comment python include reversed function dictionary remove difference ordereddict dict dictview iterable reversed insertion order use reverse contributed rémi lapeyre bpo-33462 see new python see mention equality operator feature ordereddict answer question let several statement official python doc change version dictionary order guarantee insertion order behavior implementation detail cpython change version dictionary order guarantee insertion order change version dictionary reversible dictionary dictionary view reversible statement regard ordereddict dict order dictionary regular dictionary extra capability relate order operation become important build dict class gain ability remember insertion order new behavior become guarantee python
understand construct work understand use keyword suggest code question run block complete opposite matter think brain progress statement block continue continuewith make sense try train read wonder python coder read construct head miss make code block decipherable question underlie design decision useful able write code see clause python statement specific question syntax mean common construct run loop find break loop problem break loop loop end determine case happen method create flag store variable let second test see loop exit example assume need search list process item flag item find stop process flag item miss exception need raise use python construct compare method use syntactic sugar first case raise bind tightly loop work bind strong error introduce maintenance strange construct season python coder use conjunction loop mean find item iterable none find see construct well alternative encapsulate search function use list comprehension equivalent version work good enough non performance critical code matter iterate whole list other disagree avoid use else block production code see python idea summary else thread excellent presentation raymond hettinger title transform code beautiful idiomatic python briefly address history construct relevant section distinguish multiple exit point loop start continue minute high point question change keyword cat give accurate answer point destructive exist code practical question ask reuse first place seem good idea time compromise comment break line mistaken glance belong loop clear concise option get brief mention summary bjorn link end answer completeness mention slight change syntax programmer want syntax right bonus part video call lambda makefunction ask lambda make simple think word loop iteration break break part call want introduce new keyword language steal identifi cause compatibility problem last resort think documentation great explanation continue execute loop terminate exhaustion list condition become false loop terminate break statement source python doc tutorial control flow easy way find use concentrate break statement jump construct single block break jump block jump clause content clause follow clause jump equivalent logic provide put say quite word help try run follow code fragment ' m favour break comment clarity edit notice question run second well thought break comment negative easy understand positive assertion iterable exhaust reinforce interpretation read condition run loop stuff technical part answer comment relation confusion produce recycle keyword python eloquent programming language misuse keyword notorious else keyword describe part flow decision tree imply language use keyword statement create confusion reason career programmer teach statement reside decision tree logical scope wrapper return path follow loop statement figurative explicit goal reach goal meet continuous iteration process indicate path follow loop follow path goal complete issue word define last option condition semantic word share python human language word human language use indicate action take complete used process complete issue rise break statement end keyword remain python clear mistake clear programmer try come story understand usage mnemonic device love choose keyword believe keyword fit iterative flow payoff loop resemble situation child follow step assemble toy dad great answer note come donald knuth say find reference construct indistinguishable python flow exclude low level difference point consider syntactic sugar implicit break end block implication loop extension common repeat loop conditional check teach true mean block execute time condition false ease understanding think way break return loop end condition long true case block execute case python consider c style loop condition translate note premature break return loop make impossible condition become false execution jump loop condition true come check wonder python coder read construct head think head encounter else clause execute break statement encounter loop reference see https://book.pythontips.com/en/latest/for_-_else.html#else-clause emphasis add change loop clause unfamiliar else clause execute loop complete mean loop encounter break statement say recommend use unusual feature language use else clause loop confusing people slow ability read understand code read iterable exhaust execution proceed next statement finish clause execute iteration break break execute agree elif condition(s raise break know old thread look question right ' m sure capture answer question way understand way read else else statement equivalent loop elif break equivalent condition(s raise break think key else pointless break include essential element loop follow read plainer english poster say break raise able locate loop look become target item locate example use exception handling break loop result example simple example break hit result example simple example break condition raise break error encounter result keyword confuse many people point nobreak notbreak appropriate order understand compare try else python programmer familiar follow code think break special kind exception difference python imply break write become know comparison difficult tiresome clarify confusion code else statement block execute loop break docs continue statement clause loop loop statement clause execute loop terminate exhaustion list condition become false loop terminate break statement exemplify follow loop search prime number correct code look else clause belong loop statement use loop clause common else clause try statement statement try statement clause run exception occur loop clause run break occur try statement exception see handling exception continue statement borrow c continue next iteration loop way think see mention remember loop syntactic sugar loop example loop rewrite remember loop repeat block read loop condition true execute body come check make perfect sense exact structure add functionality looping condition become false check condition make perfect sense loop syntactic sugar top loop need figure underlie loop implicit conditional else correspond condition become false simple mean clause complete wield write long statement clause complete introduce nature clause run statement logic combination put way way idiomatic use case search let say want wait condition true port open remote server timeout utilize construct try make sense find follow help think pair loop condition meet break loop pair multiple if satisfied multiple ifs think elifs break keyword use end loop loop end condition much satisfaction rest part think rest stuff stuff do loop clause execute loop complete mean block execute loop terminate break statement loop else branch execute loop enter body loop body enter finish loop break return statement encounter output else output consider structure for(if)-else special help understand execute structure for(if consider special loop try meet condition condition meet break b.
python order dictionary order set answer use collections.ordereddict python standard library key value none purpose update python cpython standard dict guarantee preserve order performant ordereddict backward compatibility readability wish continue use ordereddict example use dict order set filter duplicate item preserve order emulate order set use dict class method fromkey create dict ask key order set possible new link recipe refer python documentation run modification interface normal set initialisation do list mutableset signature .union match set include similar add update answer obsolete python see jrc answer well solution keep answer historical reason order set special case order dictionary key dictionary unique disregard value order dictionary assign none order set python collections.ordereddict follow example implementation orderedset note method define overridden collections.ordereddict collections.mutableset heavy lift other point build implementation insertion order preserve set python feel question miss answer state find pypi package implementation base recipe post raymond hettinger activestate mention answer implementation add(item contains__(item item my_set orderedset bolton pure python compatible indexedset type order set support indexing list pip install bolton copy codebase import indexedset unique retain order full disclosure write indexedset mean bug issue use order set maintain sorted order consider use sorted set implementation pypi sortedcontainer module provide sortedset purpose benefit pure python fast c implementation unit test coverage hour stress testing instal pypi easy pip note pip install pull sortedlist.py sortedset.py file open source repository instal sortedcontainer module maintain performance comparison several alternative implementation comment ask python bag datum type sortedlist datum type use implement bag answer mention python dict order definition subclasse ordereddict subclass abc.collections.mutableset use dict key store value add code test small library pip install case use pandas code index object behave order set show article example article little late game write class setlist part collection extend implement sequence set github https://github.com/mlenzen/collections-extende documentation http://collections-extended.lenzm.net/en/latest/ pypi https://pypi.python.org/pypi/collections-extended orderedset official library make exhaustive cheatsheet datum structure reference other say ordereddict superset order set term functionality set interact api need mutable ordereddict.key implementation abc.collections.set caveat immutability build set dict simple use build in parallelregression package provide setlist order set class method complete option base activestate recipe support method available list method available set pip library use small list possibility introduce non unique value search existence unique list realize testing existence element add work know caveat simple approach solve problem many purpose call sorted suffice example go use incur call sorted function want save result list change set maintain unique element sort agree suggestion use ordereddict collection arbitrary value none
use virtualenv need install do follow follow message question need get psycopg2 working note binary wheel window pypi long issue window user solution linux mac user lot find post web search install binary pypi package python wheel linux mac os install prerequsisite build psycopg2 package source install python3.8 dev similar python enough try instal see banjer answer see nichochar answer centos need postgre dev package solution centos least mac use homebrew option http://www.postgresql.org/download/macosx/ good luck mac maverick version 9.3.2.0 rc2 need use follow code instal postgre sudo path=$path:/application content bin pip install configure psycopg2 window machine easy install use windows executable binary find http://stickpeople.com/projects/python/win-psycopg/. install native binary virtual envrionment use easy_install python use sudo apt get install libpq dev python3 dev debian work rhel centos include path postgresql binary dir pip install make sure include correct path update python install python3 devel python devel answer magic recipe error receive tell pip find need part postgresql query library instal non standard place os message suggest use --pg config option common reason libpq instal happen machine postgresql server instal want run client app server os distro different instance debian ubuntu install libpq dev allow compile link code postgresql query library answer suggest instal python dev library careful use default python instal distro work new version cause problem build python machine dev library need compile c c++ librarie interface python use correct pip version instal bin folder python binary set install old version use mac os install postgresql source installation finish add path use append path file file vary operating system follow installation process http://www.thegeekstuff.com/2009/04/linux-postgresql-install-and-configure-from-source/ debian ubuntu install build dependency psycopg2 package virtual environment compile install psycopg2 module run command fine do window install first base python installation copy instal virtualenv install work install need install python dev package work linux system speak experience make sure exact version python run instal dev package example use command run error try use python need use command run issue python version change instal require package need add postgresql bin directory path add bin:$path export path source pip install psycopg2 macos use command install work charm window xp get error postgre instal instal postgresql92 use centos repository pg download site http://www.postgresql.org/download/linux/redhat/ get pg_config add bin path psycopg2 depend postgre library ubuntu use fedora python activate virtual environment battle day figure get pip install psycopg2 command run virtualenv window run cygwin hit pg_config executable find error download instal postgre window instal cygwin run pg_config cygwin give bin pg_config run pg_config give sane output version instal cygwin version = postgresql work current version appear require least add c:\program files\postgresql\9.2\bin window path cygwin pip installer able find correct version postgresql able install module use pip preferable use cygwin version postgresql native version run quick opensuse fix lowly window user stick install psycopg2 link install python installation setup place folder name psycopg2 site package folder python installation copy folder site package directory virtualenv problem link find executable install http://www.lfd.uci.edu/~gohlke/pythonlibs/ ubuntu need postgre dev package test virtualenv install window machine use anaconda spyder python follow command establish connection database arch base distribution osx 10.11.6 el capitan osx macports pip working download file https://pypi.python.org/pypi/psycopg2 extract python setup.py install problem main reason equal version instal homebrew choose keep app installation macos follow step work team member instal psycopg2 mac os big sur test big sur start make sure xcode command line tool instal install apple developer site step assume homebrew instal instal homebrew install least assume postgresql instal system install different people different preference default installation method official postgresql site enterprise db installer good method majority people put linkage pg_config file file export path="$path:/library postgresql/12 bin:$path way linkage pg_config file postgresql/12 bin folder postgresql installation mean postgre installation homebrew need file link pg_config file bin folder postgresql installation psycopg2 rely install openssl homebrew use command brew install openssl reason libpq library basis psycopg2 use openssl use instal follow commands file come important step install libpq use command brew install libpq install libpq library documentation c application programmer interface postgresql libpq set library function allow client program pass query postgresql backend server receive result query -binary package production discourage prove unreliable multithread environment fix recent version manage reproduce failure fedora user libpq dev dependency package name installation devel solve problem fedora macos mojave make sure new update command line tool work update software update previous version command line tool mojave work make sure postgre instal path update run pip install time run problem seem work error python2 upgrade virtual environment python3.8 error window work command prompt instal flask pip virtual environment run command check
add item exist dictionary python example give want add new item easy py possible solution nice want insert multiple item simple chris answer say use update add item example see documentation dictionary data structure dictionary build type occur ask implement operator dictionary follow seem work note use dict[key = value dict.update recommend use solution intend create new dictionary
python keyword use example http://docs.python.org/tutorial/inputoutput.html python keyword use work unmanaged resource file streams similar use statement vb.net c allow ensure resource clean code use finish run exception throw provide syntactic sugar block python docs statement clarify code use try block ensure clean code execute section discuss statement use next section examine implementation detail show write object use statement statement control flow structure basic structure expression evaluate result object support context management protocol enter exit method update fix vb callout scott wisniewski comment confuse use explanation preshe programming blog handy related operation execute pair block code classic example opening file manipulating file closing statement close file nest block code continue read see close occur advantage use statement guarantee close file matter nest block exit exception occur end block close file exception catch outer exception handler nest block contain return statement continue break statement statement close file case
time.time python time module return system time time utc time.time function return number second epoch float note epoch define start january 1st utc epoch define term establish global moment time matter earth second epoch time.time return value moment sample output run computer convert string variable time return second convert human readable string use datetime library text form timestamp use text file title question different introduction answer change clarify interpret time update get timestamp string use .utcnow datetime.datetime differ utcnow expect work way render timestamp string explicit format timestamp way want iso format use .isoformat method object use variable calculation print conversion base answer squiguy get true timestamp type cast float least concept answer time.time return number second elapse epoch result depend timezone utc local time posix defintion second epoch time.time require system clock synchronize reflect value local timezone different computer get different result time hand computer time synchronize get utc time timestamp leap seconds get timestamp utc time various python version see get date convert second epoch accord utc get local timestamp use datetime library python settle thing epoch specific timezone epoch define specific moment time change timezone time change time jan utc time.time return number second epoch timestamp time utc call datetime.datetime.fromtimestamp return time local timezone correspond timestamp result depend locale exist nice library arrow different behaviour case return time object utc timezone time.time return unix timestamp use datetime library get local time utc time
convert pandas dataframe numpy array dataframe give convert numpy array possible preserve dtype well df.value time deprecate usage value as_matrix pandas v0.24.0 introduce new method obtain numpy array pandas object visit v0.24 doc .value see big red warning say see section v0.24.0 release note answer information to_numpy recommend method production code need run many version future make scratchpad jupyter terminal use save millisecond type permissable exception add fit n finish spirit well consistency api new method to_numpy introduce extract underlie numpy array dataframe mention method define index series object see default view return modification make affect original need copy use to_numpy(copy true use pandas chance deal extension type lot little careful extension type convert call doc show answer dataframe.to_records good way do to_numpy alternative use performance use rec.fromrecord bit to_numpy addition array add result discussion github issue gh19954 gh23623 docs mention rationale unclear return value actual array transformation pandas custom array categorical example periodindex generate new ndarray period object time to_numpy aim improve consistency api major step right direction deprecate current version expect happen point future urge user migrate new api dataframe.value inconsistent behaviour note dataframe.get_value remove v1.0 deprecate v0.25 wrapper dataframe.value say applie dataframe.as_matrix remove v1.0 deprecate v0.23 use convert pandas dataframe df numpy ndarray use code note .as_matrix method use answer deprecate pandas warn method .as_matrix remove future version use .value pandas build give chain dataframe.reset_index dataframe.value function get numpy representation dataframe include index get dtype need transform ndarray structure array use view use method play bit dtype want go case copy df string index type string represent object dtype pandas convert recarray dtype work pandas note pandas set name index export record array bug profit type conversion correct moment pandas byte integer i8 float f8 see issue seem df.to_record work exact feature look request point alternative try use example call yield similar output look note recarray array move result regular numpy array call constructor np.array(df.to_record try approach make structure array pandas dataframe create datum frame define function make numpy structure array record array pandas dataframe use reset_index make new datum frame include index part data convert data frame structure array edit update df_to_sarray avoid error call python thank joseph garvin halcyon comment solution simple way example dataframe use get way convert data frame numpy array representation mah_np_array df.as_matrix(column none mah_np_array df.value doc https://pandas.pydata.org/pandas-docs/stable/generated/pandas.dataframe.as_matrix.html go answer method work work return multidimensional array prefer use method read datum excel sheet need access datum index hope help similar problem export dataframe arcgis table stumble solution usgs https://my.usgs.gov/confluence/display/cdi/pandas.dataframe+to+arcgis+table short problem similar solution simple way convert dataframe numpy array use encouraged preserve consistency reference https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.dataframe.to_numpy.html try information https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html valid numpy pandas meteore answer find code work put code convenience other stick issue
code read make change write result open result csv microsoft excel extra blank line record way put extra blank line csv.writer module control line ending write \r\n file file open untranslated text mode parameter newline= empty string write \r\r\n window default text mode translate \n \r\n python use binary mode open outfile mode wb w prevent windows newline translation python problem unicode require workaround write non ascii text see python link unicodereader unicodewriter example end page deal write unicode string csvs python look 3rd party unicodecsv module opening file binary mode wb work python convert datum binary write hassle keep text mode override newline empty note seem preferred solution extra line add window system state python document csvfile file object open b flag platform make difference window platform make difference change line terminator describe fix problem problem avoid open file binary mode say solution elegent fiddle line terminator resulted unportable code system case opening file binary mode unix system result effect result cross system compatible code python docs windows b append mode open file binary mode mode rb python windows make distinction text binary file end line character text file alter datum read write scene modification file data fine ascii text file corrupt binary datum jpeg exe file careful use binary mode read write file unix n’t hurt b mode use platform binary file original part optional paramater csv.writer get extra blank line change lineterminator info example adapate python page csv docs change \n stab dark problem work good guess simple answer csv file open binary mode input output window problem line end output csv module write standard csv row terminator text mode runtime replace \r\n window standard line terminator give result \r\r\n fiddle lineterminator solution lot answer become date year original question python3 answer right documentation csvfile file object open footnote explain detail specify newline embed quote field interpret platform use \r\n linending write extra \r add safe specify csv module universal newline handling use method define write datum csv file add additional parameter open method write csv row create additional row write answer w.r.t python ' get problem suppose get datum arduino use pyserial write file reading case end \r\n newline separate line case option work show error accept omission newline see answer mention line terminator writer object writer csv.writer(csv_file delimiter= lineterminator='\r work skip extra newlines permit pass next row empty row borrowing answer seem clean solution use manage solve problem follow answer compatible python compatibility suppose need wrap write logic block use writerow use python empty line avoid use codec module state documentation file open binary mode change newline kwarg necessary running issue work
tell use vectorization method basic example see map series method rest dataframe method confuse apply applymap method method apply function dataframe simple example illustrate usage apply work row column basis dataframe applymap work element wise dataframe map work element wise series straight wes mckinney python datum analysis book pg recommend book frequent operation apply function 1d array column row dataframe apply method many common array statistic sum mean dataframe method use apply necessary element wise python function use suppose want compute format string float point value frame applymap reason name applymap series map method apply element wise function first major difference definition second major difference input argument third major difference behavior fourth major difference important use case see want use pandas apply code writeup make appropriate scenario use apply note many apply slow footnote map pass dictionary series map element base keys dictionary series miss value record nan output applymap recent version optimise operation find applymap apply case suggestion test use work well map optimise elementwise mapping transformation operation involve dictionary series enable pandas use fast code path well performance series.apply return scalar aggregate operation series dataframe.apply note apply fastpath call certain numpy function mean sum dataframe.apply operate entire row column time dataframe.applymap series.map operate element time series.apply similar interchangeable slight difference discuss osa answer add answer series map apply apply make dataframe series map put series cell series want function side effect connect web server use apply sake clarity map use function dictionary series let say want manipulate permutation take square permutation compute use map sure self application document work @jeremiahbuddha mention apply work row column applymap work element wise use apply element wise computation simple explanation difference apply applymap apply take whole column parameter assign result column applymap take separate cell value parameter assign result cell nb apply return single value value column row matrix want point struggle bit modify reassign base answer cs95 give example additional context intuition explicit concrete example difference assume follow function see label function split value base threshold provide parameter example let assume dataframe column random number try mapping label function map result follow error take function use apply see work take additional argument element wise series.map method return error try apply function several column dataframe dataframe.applymap use use apply method dataframe dataframe.apply method different capability apply function element wise method apply function axis column wise row wise create function use set accept series column example apply pd.value_count function dataframe calculate value count column notice important use df.apply method transform multiple column possible pd.value_count function operate series try use method apply function work element wise multiple column get error example result follow error general use apply method vectorize function exist recall pandas use vectorization process apply operation whole series optimize performance use apply method loop row vectorize method perform equivalent task apply method example vectorize function exist want recreate use type apply map method understand function point view function variable compare row use apply lambda x x.max()-x.mean function apply element > column row locate use apply apply entire dataframe use applymap fomo follow example show apply applymap apply dataframe map function apply series apply map dataframe thing remember apply applymap apply extra option x factor option axis result_type result_type work axis=1 column sidenote series map function confuse python map function apply series map value second item iterable confuse dataframe apply method groupby apply method
want install pip support python require setuptool available python install pip python edit manual installation use setuptool standard process congrat pip instal read install package pip package manager version python old system include reason instruction common distros follow run follow command terminal run follow command terminal fresh debian ubuntu install package find centos install setup tool first use install pip direct package assume instal python epel install python setup tool use install pip install use manual way detailed want manual way recommend method install use script pip installation instruction install pip install pip download run follow require administrator access setuptool instal get-pip.py install setuptool able install pip python ubuntu run sudo apt get install python3 pip good news python release march ship pip good feature python release make community wealth librarie accessible newbie exclude prohibitive difficulty setup shipping package manager python join ruby haskell perl go contemporary language majority open source community thank python course mean python packaging problem solve experience remain frustrating discuss python package module management system ala use early python manual instruction follow follow detailed instruction https://stackoverflow.com/a/12476379/284795 https://pip.pypa.io/en/stable/installing.html download get-pip.py careful save file run command prompt need administrator command prompt follow http://technet.microsoft.com/en-us/library/cc947813(v=ws.10).aspx instal pip find computer add folder c:\python27\script path start edit environment variable able run pip command line try instal package go use python type ubuntu old work use https://pip.pypa.io/en/latest/installing.html current way think work version single python system install package python follow step note assume alias set python method confusion regard python version receive package multiple python say python3 ↔ python3.7 ↔ python3.7 method note find python follow python3 command spawn notice python second line note change python3 python point https://askubuntu.com/questions/320996/how-to-make-python-program-command-execute-python-3 ' m sure introduce instal pip3 exist macos use homebrew note check console install finish error due ownership people overlook log accord official homebrew page 1st march python formula upgrade python python@2 formula add instal python keg python python2 add path default manual brew link maintain python2 python3 python@3 alias install python run follow command pip instal install package pip install package linux distro come python instal able install pip use system package manager preferable system instal version python play script use windows mac advanced package tool python advanced package tool python pacman package manager python pacman package manager python yum package manager python yum package manager python dandify yum python dandify yum zypper package manager python zypper package manager python liner copy paste alternate installing get-pip.py install pip download get-pip.py follow link get-pip.py use curl run follow command folder download warn cautious use python install manage operating system package manager get-pip.py coordinate tool leave system inconsistent state use several different version python try use virtualenv http://www.virtualenv.org/en/latest/virtualenv.html#installation advantage pip local environment install local environment current directory note specify path python binary instal system local pythonenvironment folder ./env pip-3.3 use ./env pip-3.3 freeze list local instal library use ./env pip-3.3 install packagename install local environment use ./env python3.3 pythonfile.py run python script way solve problem ubuntu install python3 source code finish instal pip3 instal pip available default command pipx pipx.y instal platform x.y stand version python installation pip python package dependency https://docs.python.org/3/whatsnew/3.4.html#whatsnew-pep-453 instal sudo pip3 install xxx os x maverick get work brew instal install python get late version distribute hope help pip instal install python use sudo pip install module python3 pip install module follow step install python pip step install python download step need download get-pip.py step download get-pip.py open commant prompt go directory get-pip.py file save step enter command python cmd step pip instal verify pip installation type command cmd pip --version python3 try good thing detect version python environment python custom location proceed example source https://pypi.python.org/pypi/setuptools/1.1.6#upgrading-from-setuptools-0-6 assume restrict computer env root access ability install package setup fresh standalone raw non root instance python+virtualenv post bit googling make work pip pip pip final tip newbie pythoneer think need virtualenv start happy help installation upgrade scenario open source share package https://virtualenv.pypa.io/en/latest/installation.html install pip download run follow cautious use python install manage operating system package manager get-pip.py coordinate tool leave system inconsistent state refer pip installation window os user open cmd command prompt write c:\users\%username%\appdata\local\programs\python\python36 write pip3 install name package hint location folder python36 get different new python version use command python get-pip.py pip function python3 pip python2 present case uninstalle pip remove python2 run python make sure get-pip.py save folder python3 final step add directory pip command path solve = easy way install python version ubuntu ubuntu follow step update local sudo apt update step install support sudo apt install build essential zlib1 g dev libncurses5 dev libgdbm dev libnss3 dev libssl dev libreadline dev libffi dev wget step3 create directory home directory download new release python source code navigate source file directory use wget mkdir python source file step download late version python source code:- wget https://www.python.org/ftp/python/3.7.5/python-3.7.5.tgz change python version modifie this:-"3.7.5 version want step extract compress tar python-3.7.5.tgz tar xvzf step test system optimize python:- cd version python step configure(using optimization option speed code execution ./configure enable optimization face ssl openssl step install second instance sudo make altinstall recommend use altinstall method ubuntu system software package dependent python want overwrite default python installation sudo make install step check python python3 version step install pip python3 go sudo apt get install python3 pip
work python script start several process database connection want kill script ctrl+c signal like cleanup perl analogue python register handler signal.signal code adapt documentation signal find treat exception keyboardinterrupt make new file run shell follow content see mean context manager use nested handler handle ctrl+c catch keyboardinterrupt exception implement clean code exception handler python documentation refer main main function ctrl c handler adapt code support multiple signal fancy code support keyboard interrupt call sigint sigterm kill process contrast matt j answer use simple object parse handler thread need stop securlery want ensure cleanup process finish add matt j answer use sig_ign sigint ignore prevent cleanup interrupt use function python build signal module set signal handler python signal.signal(signalnum handler function use register handler function signal signalnum thank exist answer add signal.getsignal use try keyboardinterrupt use standard socket ipc mode block sigint cueue receive data socket set signal handler behave hand work actual terminal start environment accept ctrl+c handle signal exception baseexception python differ sense interpreter need exit cleanly exception high priority other exception derive baseexception
write python application take command argument example want application extensible able add new module implement new command change main application source tree look want application find available command module runtime execute appropriate python define import function take string module name import__(name global none local none level=0 function import module name use give global local determine interpret name package context fromlist give name object submodule import module give name source https://docs.python.org/3/library/functions.html#__import work fine wonder idiomatic way accomplish code note want get use egg extension point open source project expect plugin point simplify main application code remove modify time new command module add python old new version see importlib.import_module python python use exec want use import import list module rip straight dive python recommend way python use importlib module importlib.import_module(name package none import module name argument specifies module import absolute relative term pkg.mod mod name specify relative term package argument set name package act anchor resolve package name import_module mod pkg.subpkg import pkg.mod note imp deprecate python favor importlib mention imp module provide loading function use perform similar case define specific class define method require loaded module check class module create instance class use importlib doc provide recipe go way access member e.g function module pluginx.py snippet call module namespace e.g module.hello want import member e.g include module pluginx memory list module import package pluginx/__init__.py current dir straightforward use imp module direct import function want local work global use exec similar @monkut solution reusable error describe http://stamat.wordpress.com/dynamic-module-import-in-python/ piece work want import shell script follow work load module folder modus module single class name module name file modus modu1.py contain result list load class adapter
python pandas good way check dataframe nan value know function pd.isnan return dataframe booleans element post answer question jwilner response spot explore see fast option experience sum flat array counting code seem fast df.isnull().sum().sum bit slow course additional information number nan couple option datum frame look know isnull return dataframe make df.isnull().any find column nan value tell true operate way .any().any give summation number nan value column summation value get total number nan value dataframe find row nan specific column know many row nan pull row examine start use dataframe.any(axi none axi none specify logical reduction entire dataframe performant option run old version pandas check sum series.hasnan call series.hasnan example check single column nan check column nan use comprehension short circuiting operation add hobs brilliant answer new python pandas point wrong find row nan perform operation need transpose specify axis check true present row let df name pandas dataframe value numpy.nan null value see column null true false want see column null want see count null column want see percentage null column want see percentage null column null edit want see datum miss none mention variable call hasnan output true value pandas series nan false note function pandas version pandas find take look see implement discover make use dataframe.count count non null value dataframe pandas source code benchmarke technique figure author library make wise choice use follow type casting string check nan value allow check specific value series return contain series give count nan value present respective coloum dataframe use math.isnan(x return true x nan number false try follow interesting way find null replace calculate value see null value present dataset generating heatmap use seaborn moduleheatmap use isna use define isnull identical course accepted answer cover panda array use statement df.isna().any check column return true miss value nan false miss value recommend use value attribute evaluation array fast result note run timeit jupyter notebook work use df df.info(null_count true return number non_null row column way dropna check length equivalent include column null value check column contain nan check nan exist get percentage nan column use follow bar representation miss value depend type datum deal get value count column perform eda set dropna false work categorical variable many unique value
construct condition extract row datum frame take value particular column result get data frame contain row column cell need need value float number pandas dataframe row access first row series use iloc value use column name fast access method scalar turn dataframe numpy array access first value array answer use iloc good selection position need selection label loc convenient getting value deprecate df.get_value('a','a need complicated need value cell select column index name solution work original_conversion_frequency.loc[1,:].values[0 look change pandas upgrade iloc available iloc[0]['label get single value array scalar output quick easy option find follow represent row index index([u'country u'country code u'indicator name u'indicator code u'1960 u'1961 u'1962 u'1963 u'1964 u'1965 u'1966 u'1967 u'1968 u'1969 u'1970 u'1971 u'1972 u'1973 u'1974 u'1975 u'1976 u'1977 u'1979 u'1980 u'1981 u'1982 u'1983 u'1984 u'1985 u'1986 u'1987 u'1988 u'1989 u'1990 u'1991 u'1992 u'1993 u'1994 u'1995 u'1996 u'1997 u'1998 u'1999 u'2001 u'2002 u'2003 u'2004 u'2005 u'2006 u'2007 u'2008 u'2009 u'2010 u'2011 u'2012 u'2013 u'2014 u'2015 u'2016 dtype='object sure good practice notice get value cast series float name dtype float64 pandas iloc unavailable filter df get row data column value row filter obtain first row value exception filter result empty datum frame run use dataframe multiindexe find squeeze useful documentation squeeze dimensional axis object scalar series dataframe single element squeeze scalar dataframe single column single row squeeze series object unchanged note df.at work need use conditional afaik need specify level multiindex example dataframe level index level column specify outer level helpful later version fix convert integer work use .item return scalar series work single element select safe return first element many select get full row value json serie use to_json method
list list want element say tall short element = sorted(s key = itemgetter(1 want tall short colour sort element quick way key function return tuple achieve use itemgetter avoid python function call notice use use sorted reassigning ' m sure pythonic method list tuple need sort 1st descend integer value require reverse integer alphabetical sort solution fly exam btw aware nest sort function several year late party want criterion use reverse true case know wrap criterion function parenthesis appear use list tuple become important think grab attribute magic index list tuple case want multiple attribute class income key string need different sort different place want common default sort parent class client interact override sort key need way store list class share define helper method use use generate lambda function sort list object.attrb assume object getter corresponding string name provide second case sort object.attrc object.attra allow expose sort choice share consumer unit test tell want sort do operation api give list couple end implementation convert list list list tuple tuple multiple field output way write function take list sort function sort function compare attribute want test test see cmp function return non return break send return value call call lambda function list lambda advantage single pass datum previous sort method thing sort place sort seem make copy use write rank function rank list class object group score function add list attribute note un lambda hackish use lambda call setter rank part work array list sort way rank list object operator list give
start input datum print appear group simple enough printing yield groupby object want dataframe object contain row groupby object word want get follow result see accomplish pandas documentation hint welcome g1 dataframe hierarchical index want want change answer give wes version require as_index false set get empty dataframe source aggregation function return group aggregate name column true default group column index return object pass as_index false return group aggregate name column aggregate function one reduce dimension return object example mean sum size count std var sem describe last nth min max happen example dataframe.sum get back series nth act reducer filter see edit version use subset count reset_index parameter name size difference count size size count nan value count key use reset_index method use new dataframe g1 task grouped_df.size pull unique groupby count reset_index method reset name column pandas dataframe function call create dataframe object misunderstand question want convert groupby dataframe use .to_frame want reset index include part example code unrelated question find work solution simpler aggregated wise data store dataframe solution work multiple aggregation sample output group want convert dataframe want count provide reset_index write manual method convert image dataframe understand pythonic pandas verbose explicit need use reset_index method explain start scaffold dataframe loop group pairing group dataframe retrieve index perform calculation ungrouped dataframe set value new aggregated dataframe dictionary thing calculation apply inline loop return ordinal level index order vanilla groupby method answer @nehaljwani post comment store variable reset_index method call version return data percentage useful stat include lambda function example try set false group_by method prevent add group key index example
find mean average list python python + use statistics.fmean numerical stability float python + use statistics.mean numerical stability float slow old version python use python convert len float get float division use numpy.mean python + use mean new statistic module calculate average use reduce python cromulent sum function float necessary python force python float point division statistic library use python use mean method let say list number want find method stdev variance mode harmonic mean median useful cast float add sum edit add way get average list relevant python comparison make result get interesting look math.fsum(l fast way statistics.fmean(l sum(l nice thank @asclepius show way old answer term efficiency speed result test answer result winner sum(l len(l sum(l right answer completeness compute average single reduce note result slight round error try use option work try work python use pandas series.mean method demo docs series.mean(axis none skipna none level none none kwargs)¶ doc whole documentation https://pandas.pydata.org/pandas-docs/stable/10min.html similar question solve udacity´s problem build function code usual beginner challenge beginner code want mean average check scipy stat order use reduce take running average need track total total number element see trivial element list pass reduce extra argument fold give close similar value integer decimal value consider long float value different approach want achieve float value @andrew clark correct statement suppose notice dimension need get mean row type forget import numpy find average list use follow python code try post make sure get float point division combine couple answer come follow work reduce assume l available reduce function want add approach make function average usage code args allow number answer simple solution avemedi lib include script enjoy
find duplicate list integer create list duplicate remove duplicate use set(a print duplicate note counter efficient timing set perform well code compute list unique element source order recommend latter style obvious seen.add(x set add method return none need compute list duplicate element library list element hashable use set dict resort quadratic time solution compare example simple solution complexity o(n*n need count item see adapt answer problem case speed matter timing result do @johnlarooy timing rank change pypy use counter base approach benefit pypy optimization method cache approach suggest seem effect effect relate duplicatedness input datum set l = random.randrange(1000000 xrange(10000 get result use iteration_utilities.duplicate want duplicate combine iteration_utilities.unique_everseen handle unhashable element performance approach handle quick benchmark contain approach mention first benchmark include small range list length approach behavior graph axi represent time low value mean well plot log log wide range value visualize remove o(n**2 approach benchmark half element list see approach fast approach chain unique_everseen(duplicate fast approach additional interesting thing note pandas approach slow small list compete long list benchmark show approach perform matter much use o(n**2 runtime third party library write iteration_utilitie come question look relate wonder offer generator base solution solve problem concern scalability test several approach include naive item work small list scale horribly list get large note- use timeit include @moooeeeep comparison fast input list random itertool approach sort list include pandas approach @firelynx slow simple note sort tee zip approach fast machine large order list moooeeeep shuffle list mileage vary advantage assumption fast solution entry approach test result dupe test consistent finding first duplicate duplicate array list shuffle first price sort become apparent efficiency drop @moooeeeep approach dominate set dict approach similar lessor performer use pandas neat concise solution python liner care write algorithm use librarie print item count groupby take group function define grouping different way return additional tuple field need collections.count new python early version use conventional dict pandas use pandas lot give efficient code lot answer think contribute loop element list check number occurrence add set print duplicate hope help guess effective way find duplicate list use counter element unique element subtract second leave duplicate use itertools.groupby order find item dups output third example accept answer give erroneous answer attempt give duplicate correct version convert list simplest way useful interview ask use set get separate list unique value duplicate value helpful largish list find work show duplicate preserve order simple quick way find dupes iteration python output follow blog enter much late discussion like deal problem liner charm python want get duplicate separate list suggest below.say duplicate list call target want get duplicate use liner code put duplicate record key count value dictionary duplicate duplicate dictionary look want record duplicate list short code output work python version seem competitive o(n log complexity see benchmark sort bring duplicate index odd index unique value odd index intersection index value odd index value duplicate benchmark result use mseifert benchmark solution accept answer georgs slow solution fast solution exclude it_duplicate uniquify duplicate crowd color similar first line a.sort allow modify give list bit fast benchmark use list multiple time modifying mess benchmark set(a[::2]).intersection(a[1::2 create second set bit meh bit method explanation val idx val enumerate(input_list val input_list[idx+1 list comprehension return element element present current position list index example input_list = start first element list index check element present input_list[1 index end list present input_list[1 return go next element index check element present input_list[2 index end list present input_list[2 return go element list return repeat duplicate element list duplicate list pick duplicate remove duplicate duplicate call python build name set remove duplicate leave set list convert set list use typecasting list convert set element list method explanation create empty list start keep traverse element list see exist temp_list empty temp_list add temp_list use append method exist temp_list mean current element list duplicate add dupe_list use append method test course costly time long array give well result use next final method loop costly l.count operation code compare method example code output testing code remove duplicate convert set clean_list iterate raw_list remove item clean list occurrence raw_list item find raise valueerror exception catch item add duplicated_item list index duplicate item need enumerate list play index index item enumerate(raw_list optimise large list thousands+ element use list.count method list find duplicate element give list liner fun single statement require solution follow use collection library output line solution lot answer think readable easy understand approach notes fast generator use dict store element key boolean value check duplicate item yield list element hashable type list contain list use toolz try check duplicate assume list element work set order find unique element want get duplicate note noticed solution complexity o(n slow large list think share function write support integer string o(n good case scenario list element top solution take 30 mine finish .12s get unique duplicate achieve problem go multiple different method solve common solution implement real scenario think time complexity sample output general understanding method good real implementation prefer method take less time method see solution use iterator go require list sort check fast machine potential duplicate piece code generate datum run test needless say solution good list sort help data structure python try follow code mine work find duplicate various kind input string list check list item first index item equal last index item source way challenge use method sample work use set function eg:- eg:- output:- eg:- output:- eg:- output:- car toyota ford brand ranz mustang eg:- use sort function duplicate identify loop checking l1[i = l1[i+1
come situation current version package seem work require reinstallation pip install touch package date see force reinstallation first uninstalling pip uninstall instal way force update current version single step upgrade reinstall package date instal package reinstall want option --upgrade --force reinstall ensure reinstallation dep avoid reinstall dependency run problem pip start recompile numpy large package want reinstall package specify file upgrade reinstall specific version specify file appear force reinstall use ' use case need force reinstallation pip relevant answer difference pip install option ignore instal force reinstall text file load package need add flag
get current time millisecond python use time.time python + use time.time_ns time pass nanosecond epoch give time millisecond integer time.time give resolution second preferred approach millisecond datetime sample code output version python good answer use time.perf_counter_ns state doc time.perf_counter float return value fractional second performance clock high available resolution measure short duration include time elapse sleep system wide reference point return value undefined difference result consecutive call valid time.perf_counter_ns > int similar perf_counter return time nanosecond say use good counter system offer design use measure performance avoid common pitfall timer give nice integer number nanosecond divide get millisecond solution function embe want simple method code return millisecond datetime concern measure elapse time use monotonic clock python clock affect system clock update see query adjust system time example provide reference time second use compare measure elapse time simpli way find get current utc time millisecond use code time appear second decimal millisecond think difference window unix comment result window edit difference thank update thank @neuralmer efficient way efficient method benchmark see benchmark result different method machine testing python notice option give exact result window feel free use see need complicated solution multiplication millisecond decent solving making prerequisite acceptable use fill gap database use real situation require precise timing fail suggest use method mission critical operation require action process specific timing example round trip pings 80ms usa round use example require task second mean round first task respond incur processing time multiply main loop cycle end total function call second day accurate think people look accurate reasoning solve database gap use time unix time start program thank time solution use datetime module python round(datetime.datetime.timestamp(datetime.datetime.now
data frame df use several column groupby way get table datum frame miss additional column contain number row group word mean know many number use get mean example first group value second short get group wise statistic dataframe simple way get row count group call .size return series want result dataframe series want find calculate row count statistic group continue read consider follow example dataframe let use .size get row count let use .size().reset_index(name='count get row count want calculate statistic group datum look result little annoying deal nest column label row count column basis gain control output split statistic individual aggregation combine use join look code use generate test datum show disclaimer column aggregate null value want look group row count independent aggregation column mislead many record use calculate thing mean pandas drop nan entry mean calculation tell groupby object agg function take list apply several aggregation method give result need return count mean std useful statistic group get specific statistic select note need compute stat use groupby.agg compute column perform wasteful computation describe work multiple column change c c d']—or remove see happen result multiindexe dataframe get different statistic string datum example information see documentation available pandas want capture size group cut groupby minimal example find look user guide comprehensive listing support statical analysis correlation regression tool get multiple stat collapse index retain column name produce use groupby count remember use reset_index try code think code add column call count count group create group object call method example familiar tidyverse r package way python author datar package feel free submit issue question use
create pandas dataframe get like assign value particular cell example row c column x. expect get result code content df change dataframe contain nan suggestion ruktech answer df.set_value('c fast option suggest slate deprecation go recommend method df.xs('c')['x']=10 work df.xs('c default return new dataframe copy datum modify new dataframe df['x return view df dataframe modify df warning difficult predict operation return copy view reason doc recommend avoid assignment chain indexing recommend alternative modify df update method deprecate .iat/.at good replacement pandas provide little documentation fast way use set_value method time fast method example df.set_value('c use conditional lookup use see column want check condition variable column add new column exist value want add column row example work question hand useful want add specific value base condition try use col_indexer = value recommend way accord maintainer set value use chain indexing df['x']['c lead problem see thing work learn set value use good solution suppose simple data_frame want modify value cell u use solution complete example use iat get set value cell y_train y_train call prepossessing function iat change multiply value cell suggest modifiy multiple cell time df.loc[start_idx_pos end_idx_pos column_name some_value example change select cell result datafield column weight summary valid solution provide user datum frame index integer string df.loc df.at work type datum frame work row column integer indice df.loc df.at support set value use column name integer index specify index exist df.loc df.at append insert row column exist datum frame df.iloc raise indexerror positional indexer bound work example test python follow deal assignment chain indexing result settingwithcopy warn avoid mean assignment resort single .iloc slice explain case use set_value deprecate start release pandas announce future consider advice demonstration reference way use index condition get index row satisfy condition use row index multiple way example condition use row index variety way possible .index return array index use direct addressing avoid traversal test output df.set_value little fast official method df.at look fast non deprecate way note set value single cell vector loc iloc well option vectorize one want change cell position 0,0 df string follow option work use pandas.dataframe.at use pandas.dataframe.iat use pandas.dataframe.loc use pandas.dataframe.iloc time relevance use pandas.dataframe.at fast approach soo question convert nan x',c value answer alternative code df.loc['c','x']=10 change value cth row xth column want change value whole row column version use method difference compare mention pandas fast single value replacement addition answer benchmark compare different way add row datum exist dataframe show use set value efficient way large dataframe least test condition test exist dataframe comprise row column random numpy value use dataframe new row add code see search topic put way iterate dataframe update lookup value dataframe code
want create series list vary length list contain element e repeat n time length list create list use list comprehension e number xrange(n list write note e example empty list get list reference list n independent empty list performance test first glance seem repeat fast way create list identical element wait fair test function itertools.repeat create list create object use create list wish let try convert list want list use e n. want generate element use repeat careful item repeat list list clone element refer list depend use case want use different technique different semantic immutable item none bool int float string tuple frozenset note use immutable item string tuples frozensets list point item place memory use build table schema string give redundant mapping multiplying list give element need rare use map iterable list list see a_list contain range iterator time ' use python long time see use case mutable object get say mutable empty list set dict underscore throwaway variable name context number special code environment style checker complain intend use variable use name beware mutable object change change object foo return immutable object make work change reference object mutable object good place operation change object reference itertool function course itertool give iterator list e give list depend sequence itertool variant much efficient other point use operator mutable object duplicate reference change change want create independent instance mutable object xrange syntax pythonic way bother name variable use use anonymous underscore variable work look simple repeat use seek take time sorry late answer use numpy.repeat writing value like produce number repetition seek numpy use builtin itertool module simple list comprehension itertool
represent infinite number python matter number enter program number great representation infinity python python true course point infinity nan number python comparison ellipsis less e.g return true python use math.inf seem mention negative infinity think add negative infinity positive infinity sake completeness know float("inf give float infinity great number infinity numpy library numpy import inf get negative infinity write convenient way use decimal class python2.x dirty hack serve purpose use necessary check hold true integer i. deprecate python3 comparison end use sympy use sympy.oo positive infinity negative infinity represent python float("inf float("inf float("inf float("inf float("infinity float("infinity create float object hold represent python float("-inf float("-inf float("-inf float("-infinity create float object hold perform arithmetic operation summary kind definition infinity positive infinity negative infinity
difference see use lot class single inheritance see use multiple inheritance unclear advantage use kind situation mean call somebaseclass init mean call bind init parent class follow somebaseclass child class define method instance method resolution order mro instance subclass child class different parent come mro write class want class able use super make easy class use class write bob martin say good architecture allow postpone decision make long possible enable architecture class subclass class write inherit class class init come init base ordering class method resolution super hard code parent class write example mean call next init mro get reuse code write code personal use care distinction want other use code use super thing allow great flexibility user code work python work python work argument move stack frame get first argument method self instance method cls class method name find class child free variable look name class free closure variable method use prefer demonstrate cross compatible way use super python deprecate demonstrate python way thing call super argument give single inheritance example question identical static analysis point view use super give layer indirection compatibility compatibility important seasoned developer want code keep work minimal change change look revision history see change start single inheritance decide add base class change line basis basis change class inherit say mixin add change class python get argument correct method argument little confusing suggest use python method call know use single inheritance make debug difficult go people use code inject parent method resolution say add class object want inject class foo bar testing reason use un super child fail inject dependency child use code method call class child use super inject dependency world useful python linearize complicated inheritance tree c3 linearization algorithm create method resolution order mro want method look order method define parent find next order super unsuperchild access injectme conclusion avoid use missing unsuperchild access injectme unsuperinjector access injectme call class method method inherit unsuperchild child class intend call method name come next mro class aware create super hard code parent method restrict behavior method subclasse inject functionality call chain great flexibility call chain method intercept functionality inject need functionality subclasser code use super reference parent class code intend reference parent class next line see child inheriting use put unnecessary constraint user code benefit super single inheritance minimal hard code name base class method use parent method impossible use multiple inheritance super include common idiom mixin interface abstract class extend code extend want write class extend child mixin code work play bit recognize change call order example next hierarchy structure case mro python let create class super call method execution see resolution order mro call beginning method different order reverse order mro tuple additional reading recommend next answer assume base class new style class work python class new style i.e class a(object call super resolve parent version classmethod instance method staticmethod pass current class scope first argument indicate parent scope try resolve second argument object interest indicate object try apply scope consider class hierarchy b c class parent follow b c respective instance use new method explanation usual new take first param reference calling class implement python classmethod staticmethod reference class pass first argument call new call get parent class pass child class first argument pass reference object interest case class reference pass a.__new__(cls call case happen reference child class situation instance case multiple generation inheritance general rule new staticmethod super(a cls).__new return staticmethod need supply argument include reference object insterest case cls thing use init explanation 1- init instance method meaning take first argument reference instance call instance reference pass specify 2- call init pass child class first argument object interest second argument general reference instance child class 3- call super(a self return proxy resolve scope apply self instance parent class let call proxy s. init instance method call s.__init pass reference self first argument parent init 4- super need pass reference instance parent version init explanation 1- classmethod call class take first parameter reference class 2- call classmethod resolve parent version want pass current child class first argument indicate parent scope try resolve object interest second argument indicate object apply scope general reference child class subclass call super(b cls resolve scope apply cls alternate_constructor classmethod call super(b cls).alternate_constructor pass reference cls first argument version alternate_constructor 4- use super need get reference unbound version a.alternate_constructor explicit version function work work a.alternate_constructor method take implicit reference first argument cls pass second argument small example cover interesting case exact order call determined instance method call instance super call instance b ancestor chain b object instance c ancestor chain object instance ancestor chain interesting b c object mro stand method resolution order answer question super python next question use see step step tutorial minute video many great answer visual learner let explore argument imagine instance jack create class jack inheritance chain show green picture call super(jack jack).method use mro method resolution order jack inheritance tree certain order start search jack provide parent class start search instance jack find instance method whole point find parent method supply argument first argument pass class self second argument pass self auto calculate python3 want use jack method pass jack passed jen start search method jen search layer time width depth adam sue require method sue find first cain sue require method cain method call first correspond code mro leave right case multiple inheritance want call initializer parent use base class super find class next method resolution order mro return current object instance class example result replace super().__init result desire great answer tackle use super case different class hierarchy different signature case init answer part able use super suggest read answer super change signature cooperative method solution scenario example usage output consider follow code change constructor x.__init use super(y self).__init get p q involve file know write x y. know super(child self reference write class y(x signature simple y(x super choice understand ok happen use self child instance create mro(method resolution order order child somebaseclass object base inheritance assume somebaseclass parent default object pass child self super search mro self instance return proxy object next child case somebaseclass object invoke init method somebaseclass word super(somebaseclass self proxy object super return object multi inheritance mro contain many class super let decide want start search mro
try fix python plot datum say axis tick plot interval way make show interval set want tick mark plt.xtick example np.arange use python range function case min(x max(x float int plt.plot ax.plot function set default x limit wish keep limit change stepsize tick mark use discover limit matplotlib set default tick formatter decent job round tick value sensible number significant digit wish control format define formatter example runnable example approach set axis locator several different type locator depend need full example solution plot cookbook solution give explicit control tick space number give allow automatic limit determination read case interested general liner get current tick use set new tick sample tick bit clean easy understand example find answer clean way hide nth tick label matplotlib colorbar loop label set visible depend density want edit note matplotlib set label look label present fact display make sure loop actual visible label try want set space simple liner minimal boilerplate work minor tick bit mouthfull compact old topic stumble make function convenient caveat control tick enjoy interactive automagic update max scale add line run resadjust function develop inelegant solution consider axis list label point x. pure python implementation desire functionality handle numeric series int float positive negative mixed value allow user specify desire step size notice axis integer value space axis different interval matplotlib default behavior tick specify generalisable liner numpy import set context question work work want tick inclusive replace none solution work usecase provide solution use none pun adapt wide variety scenario sample piece code produce cluttered tick x axes clean clutter new plot show sparse set value axis tick depend adapt code change show_every use sample tick value x axis stepsize base solution fit populate value sparse_xtick sparse_ytick irregular interval desire loop label show hide want
matplotlib offer function use function different thing matplotlib use hierarchical order figure window contain figure consist many axis function pyplot interface method figure class discuss case pyplot module collect couple function allow matplotlib use functional manner assume pyplot import import matplotlib.pyplot plt case different command remove stuff see matplotlib.pyplot function function suit use case close function allow specify window close argument number name give window create use figure(number_or_name figure instance fig obtain usingfig = figure argument give close active window close syntax close('all close figure figure class provide method clear figure assume follow fig instance figure fig.clf clear entire figure call equivalent plt.clf fig current figure fig.clear synonym note del fig close associate figure window know way close figure window use plt.close(fig describe caveat discover today function call plot lot time use plt.close(fig first accumulate memory short memory concern use plt.close(fig seem well way go end comment relevant link follow script produce empty list produce list figure documentation clear difference closing figure closing window clarify want try complete script memory concern post work see create figure reference count plt.cla mean clear current axis plt.clf mean clear current figure plt.gca get current axis plt.gcf get current figure read matplotlib pyplot pylab difference use
get position character string python string method find index difference happen search string find find return index raise valueerror string.find(s sub start end return low index substre sub find sub contain s[start end return failure default start end interpretation negative value slice string.index(s sub start end find raise valueerror substring find sake completeness find position character string follow print wind way substre completion case want find extension file name order check find last case use rfind case use follow work complete file name happen string contain duplicate character experience index see duplicate get index example return case look documentation find difference character appear multiple time stre example string sentence position e indexing start find function find index return first position character solve python build string method work index let say need index character match pythonic way use enumerate well list comprehension third party tool find indicie item satisfy condition find index location letter give code method find refer find first substre string find substring need work example var iloveyoutosimidaandilikeyou solution numpy quick access index
way make pip play multiple version python example want use pip install thing site installation site installation example easy_install use easy_install-2.{5,6 know virtualenv solution particular problem current recommendation use python pip python version python use recommendation work version python form virtualenv example previous answer leave posterity version pip support pip-{version use easy_install-{version edit pip change schema use pipversion pip version version use follow pip check https://github.com/pypa/pip/pull/1053 detail reference window execute pip module give python version python launcher py.exe choose install python setup specific request exact sub version python get list instal python version available launcher run launch desire python executable python2.{5,6 pip install packagename work work python version pip instal need download pip python*version setup.py install example python3.3 setup.py install resolve import error comment suggest @hbdgaf python instal default amazon ami need external package application instal default python case install pip package non default install pip python version use specific pip version install package work window change name python file python3.py pythonw3.py run command prompt python3 pip install package answer show use pip python show handle case multiple python distribution eg original python anaconda python total python version original python python anaconda python install package original python original python anaconda python simple anaconda override original python binary user environment course instal anaconda do conda command example make sure pip instal specific install pip works ubuntu https://docs.python.org/3/installing/ install package various version instal time linux mac posix window use py python launcher combination switch run issue find get right pip python linux system python ensure instal pip python version python python install package version python use follow python python pip python package easy way install module specific python version multiple version easy_install pip seem big mess install django python ubuntu linux mac os x posix system use versione python command combination switch run appropriate copy pip versione pip command available window use py python launcher combination switch get error py -3.4 try installation multiple version python respective package python version window machine installation version python path version python rename executable version check command prompt version instal package version multiple version multiple architecture bit bit need add end version window go cmd type py produce version instal list look follow full command example want get indepth install specific version package specific version python use =( version package example take problem work python3 main feature prerequisite use bare bone thin client extra turf instal run first ubuntu least extra package add convenience step follow several extra python version instal way rid remove home/.local lib python3.x instal one touch system default python3 version download source different python version follow directory structure python-3.x.y/ directory follow use sudo step create file wish opt enter virtualenv virtualenv install favorite python package exit virtualenv python version type deactivate update seem site package deprecate easy fix activate virtualenv point home env variable actual home directory nice way general custom isolate virtualenv update sudo wan't force sudo use virtualenv try sudo python3 --version magic happen update docker enable virtualenv docker course build docker image use follow command course make sure correct version pip instal use command answer suggest use specify version python want use python window use syntax install package different version use git bash command prompt example instal urllib package default python normal pip command version py = python version use version use version -3.7 modify pip install normal pip command answer address issue want add confusing regard create alternate installation python local centos instal appear pip work use pip2.7 install install module figure instal version python see instal turn centos pip2.7 bin folder install pip new python distribution tell sudo go local bin pip2.7 instal local bin folder version python trick want install module need modify sudo path variable include local bin need execute want install new module take remember sudo see local bin context archlinux action install python2 pip sudo pacman -s python2 pip pip2.7 sudo pip2.7 install boto test case need boto run follow command success error exit ctrl+d example set version default want install pip python go example c:\python2.7\scripts run cmd path run pip2.7 install yourpackage install package version python wrong thing ' m python noob edit pip file python3.7 instal want use pip default first make sure pip instal python3.7 pip3.7 available edit add follow line order change take effect type shell type get pip local lib dist package pip python mean use example install package python3.7 possible way use conda pip time want use set particular version python combine create start conda enviroment python want https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html set whole enviroment use conda conda create python=3.6.4 activate enviroment python command change depend os source activae myenv python active continue use conda need want use pip python pip requirements.txt possible way use multiple version pip type pip{version run command example python pip3.10 pip3.10 list pip3.10 python pip3.7 pip3.7 list window pip install packagename work blender useful information debug pip debug command show location python interpreter attach 1st line warning
try install tensorflow use pip wrong use python pip issue find work edit test window mac linux change python3 python accord configuration change py3 py2 url use python edit list different version need edit list url available wheel package available https://www.tensorflow.org/install/pip#package-location need bit version python case use bit version tensorflow support bit version python window see install doc support check version python running type python python3 start interpreter type import 8) print tell bit version python run comment download different version python window go python.org/downloads/window scroll see version want end bit version work tensorflow need use right version python pip window python version face problem check notice python-32 bit installation bit machine remember tensorflow compatible 64bit installation python bit version python download python python.org default installation bit download bit installer install python bit add path environment run gpupdate command prompt python command work bit restart machine run python command prompt show bit run command install tensorflow cpu version recommend tensorflow support python 3.5.x python 3.8.x use bit version run multiple version python machine use virtual environment help manage tensorflow website need pip version follow command work run command upgrade pip try install tensorflow try install window machine need bit version python way install website tensorflow support bit python window test pip package follow distribution python python anaconda python python.org download proper version python make sure grab one say windows x86 able install pip install tensorflow python pip install tensorflow make sure use right pip python3 python2 python3 instal remember install anaconda late version python version support tensorflow figure tensorflow work python version python work downgrade python install tensorflow make work downgrade python version update tensorflow available pypi start release type install cpu gpu accelerate version tensorflow previous answer tensorflow pypi repository specify url appropriate wheel file operate system python version full list support configuration list tensorflow website example install version python linux use cpu type follow command install python bit amd version make sure add python path variable open command prompt type give follow result type problem solve find doc update new link new version example instal tensorflow osx need use error try install mac use python similar solution one give seem work python window accord different answer page yash kumar verma solution step go url tensorflow python package section tensorflow installation page copy url relevant link python installation step open terminal command prompt run follow command pip install paste copy url link follow pip install https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-1.2.0-py2-none-any.whl update july try other run windows machine python change line step python pip install paste copy url link update july python documentation use pip3 install paste copy url step try source https://www.tensorflow.org/get_started/os_setup page exist update documentation move https://www.tensorflow.org/install work window try work problem uninstalle bit version python reinstall bit version try reinstall tensorflow work link tensorflow guide https://www.tensorflow.org/install/install_window run issue say python release cause lack python support tensorflow side try use python mind trick find https://github.com/tensorflow/tensorflow/issues/20444 use risk use harpone suggest download tensorflow wheel python rename good news pull request support hope release multiple group answer question answer aim generalize group answer version tensorflow compatible version python true use new release python example delay release new version python release tensorflow version python case believe option today wonder python = cause issue uninstall python install resolve use anaconda python installation pip install tensorflow give error state show accord tensorflow installation page need use instal flag run pip install do see link ensure variable set relation desire version tensorflow wish install pycharm user try install tensorflow work need downgrade python version support late version check python version python version follow step stop problem conda search python conda install python=3.6.6 check version python version correct install tensorflow step pip install tensorflow reputation low command @sujoy answer docs claim support python link provide @mayur show wheel package try install tensorflow python seem install love see version claim work quote tensorflow support python 3.5.x window note python come pip3 package manager program use install tensorflow source https://www.tensorflow.org/install/install_window install hope terrible wrong ring alarm bell 😛 edit couple post point follow command work strange pip work 🤔 follow step allow install tensorflow keras download anaconda3 come https://repo.anaconda.com/archive/ install anaconda open anaconda prompt execute command tensorflow support python version ' write least december use https://www.tensorflow.org/install check python version support spend hour look answer take way long realise work python mac os x yosemite update install preview version tensorflow google colab use install tensorflow pip use pip install gpu-2.0 preview gpu pip install nightly-2.0 preview cpu instal tensorflow conda seem work window command work fine cmd try solution solve problem version inconsistency instal python install tensorflow pip uninstalle instal success max version tensorflow support check python version compatible current tensorflow facing issue try follow work instal mac os x anaconda python pip uninstall tensorflow export tf_binary_url=<get correct url http://tflearn.org/installation/ pip install --upgrade instal url install tensorflow window url work fine work window update solution work python pip install tensorflow use python tensorflow window environment window nvidia gpu want install tensorflow gpu fail multiple time able solve follow approach help instal tensorflow gpu window system step a. go windows explorer open device manager-->check display adaptors”-->it show ex nvidia geforce gpu show hd graphic b. gpu amd ’s tensorflow n’t support amd gpu a. find gpu model link support cuda b. n’t cuda enable gpu install tensorflow gpu a. go control panel-->search program feature search python b. uninstall thing anaconda python related plugin dependency interfere tensorflow gpu installation c. make sure python uninstalle open command prompt type python throw error system python proceed install python a.tf1.12 support upto python click download window x86 executable installer b. instal select add python path click install c. successful installation python installation window provide option disable path length limit root cause tensorflow build installation issue window environment click disable path length limit follow instruction complete installation d. verify python instal open command prompt type python show version python visual studio community a. click visual studio link visual studio community b. visual studio ide leave select community download c. installation select desktop development c++ install https://developer.nvidia.com/cuda-90-download-archive?target_os=windows&target_arch=x86_64&target_version=10&target_type=exelocal a. click link cuda toolkit download base installer b. install cuda https://developer.nvidia.com/cudnn a. click link install cudnn select agree term cudnn software license agreement b. register login check email verify email address c. click cudnn download fill short survey reach cudnn download page d. select agree term cudnn software license agreement e. select download cudnn v7.5.0 feb cuda f. dropdown click cudnn library window download g. go folder file download extract file h. add folder bin include lib extract file environment i. type environment window search bar locate environment variable click path user variable section click edit select new add path cuda folder j. close environmental variable window a. open command prompt type pip install --upgrade tensorflow gpu b. install tensorflow gpu a. type python command prompt b. type import tensorflow tf c. world d. sess tf.session e. print(sess.run(hello -->hello world a. tensorflow.python.client import device_lib print(device_lib.list_local_devices b. print(device_lib.list_local_devices python work uninstalle python 3.8.1 reinstalled execute work problem osx sierra turn wrong version python instal python tensorflow pypi package osx python solution install python get work note use homebrew install python use python installer window work download wheel link command line navigate download folder wheel present type follow command pip install tensorflow-1.0.0-cp36-cp36m-win_amd64.whl excerpt tensorflow website https://www.tensorflow.org/install/install_window instal native pip follow version python instal machine install python tensorflow support version 3.5.x python window note python 3.5.x come pip3 package manager program use install tensorflow install tensorflow start terminal issue appropriate pip3 install command terminal install cpu version tensorflow enter follow command command pip install tensorflowcompile version tensorflow new prefer use install upgrade tensorflow follow want use gpu easy install use problem pip 32bit version tensorflow work uninstalle python 32bit instal x64 note answer cygwin user leave answer none other work use case use nix windows terminal environment install tensorflow virtualenv cygwin http://www.cygwin.com/ least simple control+f answer page find tldr use virtualenv cygwin terminal know cygwin seem problem instal tensorflow throw error specify post question similar sentiment find https://stackoverflow.com/a/45230106/8236733 similar cause different error solve create virtualenv window command prompt access activate virtualenv cygwin terminal source use windows cygwin python use cygwin python3 try use tensorflow find problem instal tensorflow gpu package use cygwin python see error many propose solution none help case line python3 bit achitecture instal tensorflow require bit python mismatch mistake seem cygwin python problem instal tensorflow gpu end work notice source activate virtualenv create virtualenv cygwin pseudo linux environment source activate env win python error try pip install tensorflow pip install tensorflow gpu error install try step https://www.tensorflow.org/install/install_window follow instruction anaconda download site download install anaconda https://www.continuum.io/download create conda environment name tensorflow invoke follow command activate conda environment issue follow command issue appropriate command install tensorflow conda environment install cpu version tensorflow enter follow command install gpu version tensorflow enter follow command single line try install tensorflow anaconda window free advice uninstall anaconda download bit python version end amd64 release page python-3.7.8-amd64.exe install tensorflow virtual environment follow instruction official website tensorflow issue problem aws machine use arm processor build tensorflow able install tensorflow macos tensrflow metal mac correct way install mention find correct hardware tensor flow official homepage thing work use ananconda create new conda env conda create tensorflow python=3.5 activate use activate tensorflow conda install conda forge tensorflow work issue include ssl cert proxy setting need admin access note support tensorflow team source window disturb previous installation python step1 install window x86 executable installer link https://www.python.org/downloads/release/python-352/ step2 open cmd administrator step3 type command see work show picture try sample example find problem use windows computer python instal python instal set path check version pip3 python executable file point python2 set path python3 executable file remove python2 path start new command prompt try reinstall tensorflow work think problem happend mac os default python mac system check https://pypi.python.org/pypi/tensorflow see package available writing provide source package prebuilt platform error occur add -v pip command line see iterate package available pypi discard incompatible need find prebuilt package compile tensorflow source instruction https://www.tensorflow.org/install/install_source good reason building platform seem multiple reason tensorflow instal pip face window support version cudnn system path dec tensorflow windows support cudnn v6.1 provide path cudnn correct tensorflow instal experienced error try install tensorflow anaconda package struggle lot find easy way install package run error create environment anaconda administrator use command activate environment try run successful installation make environment accessible jupyter notebook need install package call ipykernel use command instal ipykernel enter follow command run command environment add jupyter notebook go jupyter notebook click new notebook see environment select environment try import tensorflow case want install package activate environment install package use environment jupyter problem look different .whl file notice bit version tensorflow python end install 64bit python compatible solution execute command terminal linux macos command prompt window install tensorflow use pip execute commands terminal linux macos command prompt window install tensorflow use bazel window use command similar problem turn default gpu version instal server gpu trick use git provide method website link access significant read reference https://www.tensorflow.org/install/source_window git clone https://github.com/tensorflow/tensorflow.git python tell issue pip install tensorflow show wheel file available match pip debug show tag compatible case try install tensorflow m1 mac multipass ubuntu instance need https://pypi.org/project/tensorflow-aarch64/ try answer help solve issue first answer add point check version python need bit version base operate system use follow command install tensorflow use pip command follow link google api link add end follow command install tensorflow respective machine root command python pip install --upgrade link link respective os link present link
give follow code work way make work check break input loop limited check loop break user satisfied first instinct refactor nest loop function use return break approach short disadvantage break outer loop want use construct explain python use loop key insight seem outer loop break inner loop break outer loop continue statement magic else clause definition happen inner break situation circumvent outer break pep propose label break guido reject code complicate require feature rare pep mention workaround exception technique guido refactore use return simple case ordinary logic helpful reason terminate condition work exception fall plan specific example exception necessary hand q option character mode application q option want immediate exit exceptional tend agree refactoring function good approach sort situation need break nest loop interesting variant exception raising approach describe use python statement make exception raise look bit define new context manager use context manager follow advantage clean explicit try block get custom build exception subclass use nested_break need declare exception subclass time introduce new variable use loop breaker assign it(false,0 outer loop break change value else(true,1 loop exit make parent loop check value let demonstrate infinite loop way loop execution lot work many nested loop exit endless possibility hope help consider make process validate input function function return value correct keep spin loop obviate problem solve apply general case break multiple loop keep structure code want deal bookkeeping boolean use goto follow way use april fool module know know shalt use goto work strange case break multiple nest loop refactore function make use simulated goto statement build stopiteration exception see discussion use goto statement break nest loop set variable inner loop check outer loop inner loop exit break appropriate kind goto method provide mind use april fool joke module ’s pythonic make sense prettiest way opinion good way ' m sure work use recursion know good option keep loop condition true think pythonic way way language level language other take argument python good option set flag check outer loop set outer loop condition put loop function use return break loop reformulate logic credit go vivek nagarajan programmer use function use flag factor loop logic iterator yield loop variable return do simple lay image row column image place put advantage splitting complicated loop logic processing hide trick python else structure use simulate double break much code change addition essence condition false else block trigger exception continue break trigger else block information see answer clause python statement python doc v2.7 downside need move double break condition condition add flag variable variation exist loop block trigger loop completion easy way turn multiple loop single breakable loop use numpy.ndindex index object oppose able iterate value simple case seem time simple answer suggest case point other functional decomposition way go code python way reduce iteration single level loop use generator specify python reference scale number level loop downside break single level downside work loop want post answer python break loop closed duplicate remind function python create right middle code access surround variable read nonlocal global declaration write use function breakable control structure defining place want return use function try run code comment return use function run code try run comment line contain break time bottom try use infinite generator example matrix equal matrix1 matrix2 size dimensional matrix first solution function second solution function final solution case implementation seem work draw define break loop use boolean toggle ready break outer loop example reason come outer loop inner loop see go go find solve run array know specific case op question post hope help think problem keep thing simple little trick prefer refactorial function add break_level variable control loop condition define variable example break_statement change different value break condition occur use statement break second loop try minimal change op question add flag break 1st loop check flag outer loop see need brake come want avoid duplicate return statement conceal logical error look idea work nested loop elegant alternative check condition next loop work adaptable require advantage allow condition duplicate potential result need test edge case complex nest loop throw raise exception promise tell come want test single iteration nested loop want track large amount break statement comment significant amount code wrap function use return context cumbersome example entry level programmer big jupyter notebook script heavy datum pre processing handy help similar compact boolean number question become standard question break particular loop give answer example use exception exist label name break loop loop construct make use user define exception break particular loop choice consider follow example let print number upto digit numbering system print output get value unit place case break loop breakloop(4 raise catch loop place break third loop use breakloop(3 place break second loop use place break first loop use short raise exception build user define inner loop catch loop want resume control want break loop catch exception loop show case example way solve define variable reference determine break next level example variable call shouldbreak give lot control want program break allow choose want break many level go
function return information second need store information hour minute second easy way convert seconds format python use datetime.timedelta function use divmod function single division produce quotient remainder result mathematical operation use string format convert result desire output name easy way least remember syntax possible use time.strftime give control format gmtime use convert second special tuple format strftime require note truncate quick trick info visit follow set work get example hour h calculate floor division second min hr sec min minute calculate floor division remain second remainder hour calculation sec min second remainder hour minute calculation rest string format need get datetime.time value use trick add timedelta time add datetime upd variation technique use number great use fact datetime.fromordinal return datetime object time component bit topic answer useful result dateutil.relativedelta convenient need access hour minute second float datetime.timedelta provide similar interface print divide second get minute divide get hour case want achieve format hh mm ss.fff solve solution work look convert single value second midnight date datetime object string mm ss landed page want whole dataframe column pandas wonder single value time end work way use matter inefficient result return_hm function use first variable second amount second want convert h s. second variable apply_zeroe format apply zero apply zeroes minute second apply zero value include hour simple program read current time convert time day hour minute second output look answer try result python ps code unprofessional
break long line multiple short line python indent error possible pep style guide python code prefer way wrap long line use python imply line continuation parenthese bracket brace necessary add extra pair parenthese expression use backslash look well make sure indent continue line example implicit line continuation topic line break binary operator go say decade recommend style break binary operator hurt readability way operator tend scatter different column screen operator move operand previous line python code permissible break binary operator long convention consistent new code knuth style line break operator suggest example explicit line continuation way long statement use parenthesis use quote pep8 preferred way wrap long line use python imply line continuation parenthese bracket brace necessary add extra pair parenthese expression use backslash look well make sure indent continue line preferred place break binary operator operator want assign long string variable add comma get tuple contain many string work python try enter continuous text say query put commas end line get list string long string kinda comment acgtyrant sorry see db relate code look easy eye multiple line enclose pair triple quote follow giant long line know do implicit line continuation parenthese bracket string quote string indentation continuation line important information want read article lexical analysis
use python max min function list minimax algorithm need index value return max min word know move produce max first player turn min second player value need able return actual index min max value value say list value need index small element case avoid solution itemgetter present answer use require import operator use enumerate faster(benchmark solution use itemgetter deal numpy array afford numpy dependency consider use fast first solution apply pure python list benchmark point run benchmark machine python solution blue pure python first solution red numpy solution standard solution base itemgetter black reference solution benchmark python show method compare python case present find min max index value time enumerate item list perform min max original value list way list traverse min max want find index max list number seem case suggest use numpy simple solution turn array value array value index pair take max min give large small index max min pair compare compare first element compare second element first one note necessary create array min max allow generator input give first index minimum think good thing convert list numpy array use function interested compare suggest solution use perfplot pet project mine turn fast method small large list former version np.argmin use take cake code generating plot think answer solve problem think share method give minimum index minimum appear pass list slow finding index encounter minimum need minima use matt anderson solution need use get maximum value try simple lot option use numpy array argmax function pandas get much gentle solution try possible use build enumerate max function optional key argument max function simple lambda expression docs max say key argument expect function list.sort function see sort work min btw return first max min value use numpy module function numpy.where index minimum value index maximum value fact function much powerful pose kind boolean operation index value say list follow method compact way get tuple minimum element index take similar time process zip method taste bother add index reverse enumerate function special case zip function usage let use appropiate way know use lambda key argument simple solution simple minor addition say values.index(min(value seem return small index min follow get large index last line leave side effect reverse place matter iterate occurrence sake brevity well idea cache min(value loop simple way find index minimal value list want import additional module choose example first assume follow list my_list = know max(my_list return min(my_list return want get index maximum minimum element follow my_list max_value = max(my_list return max_value_index my_list.index(max_value retun get index minimum value min_value = min(my_list return min_value_index = my_list.index(min_value retun https://docs.python.org/3/library/functions.html#max multiple item maximal function return encounter consistent sort stability preserve tool sorted(iterable key keyfunc reverse = get encounter use sort method create dictionary item key index value range(len(a))))[max(a return value correspond key max(a index maximum a. ' m beginner python know computational complexity solution
prefer way concatenate string sequence consecutive pair comma add map instance b c c case map end use .join(map(lambda x+',',l))[:-1 feel unsatisfie work list contain integer list contain non string type integer float bool none map lambda magic work case number list use list comprehension generator expression work case use csv module stringio alternative solution python allow non string list item standard way alternative solution note space comma intentional @peter hoffmann use generator expression benefit produce iterator save import itertool list comprehension preferred map expect generator expression prefer imap want get complicated need escape comma value case suggest look csv module standard library https://docs.python.org/library/csv.html my_list contain type variable avoid result a,,,d e @jmanning2k use list comprehension downside create new temporary list well solution use itertools.imap return iterator example list example want shortcut way want show logic miss ask edit jmanning2k point safe pythonic result string difficult parse element contain commas point need full power csv module douglas point answer say csv library sensible option build cope csv use case commas string output list l .csv file possible use writer.writerows(iterable output multiple row csv example compatible python answer use stringio python mmm need sql enjoit cent simple line code python pythonic work string number none empty string short satisfie requirement list go contain number use simple variation solution create new list use iterator @peter hoffmann point thank
list number need write code produce combination number find code googling look find code opaque wary using feeling elegant solution thing occur loop decimal integer convert binary use binary representation filter pick appropriate number know well way use map answer miss aspect op ask combination combination length r loop length l want get snazzy bend brain read code generate chain combination generator iterate look itertools.combination return r length subsequence element input iterable combination emit lexicographic sort order input iterable sort combination tuple produce sorted order battery include lazy liner use itertool main idea answer combination number binary string length n. binary string pick element correspond thing consider demo comment upvoted answer h mention make powerset recipe itertool documentation include dan post answer good approach problem give little encouragement commenter show function produce unique combination list element length possible include contain element note different goal obtain combination unique element change line list(iterable eliminate duplicate element fact iterable turn list mean work generator several answer output approach transfered programming language support recursion itertool yield list comprehension use recursion liner give combination item original list set contain distinct element use native method itertools.combination output try online http://ideone.com/coghfx generate combination list python use simple code result thought add function seek answer import itertool librarie simple yield generator usage output usage example agree dan h ben ask combination itertools.combination give combination issue input iterable big well return generator list output function solution liner involve use itertools.combination function use double list comprehension oppose loop sum demo use powerset function excellent more_itertool package verify meet op requirement standard recursive answer similar similar answer https://stackoverflow.com/a/23743696/711085 worry run stack space way process n permutation visit element turn take leave see cardinality algorithm demo know practical use itertool get combination achieve list comprehension happen desire grant want code lot combination pair combination pair easy result identical use itertools.combination use string list thing string treat list python itertool python carry implementation itertools.combination return list return generator note provide helper function advise prepend argument static change call superficial case safe sorry combination itertool code employ simple algorithm nest list state documentation implementation use itertool ' m bit late topic think help use product itertool output example change repeat arguement output problem many way implement decide create reference answer future intertool documentation self contain example use code people suggest use implementation install whole package tiny thing good way bitmaske use intuition subset use list comprehension output look reversed list ' m late party like share solution find issue look sequential combination star want star ta ar sr duplicate filter add additional last line reason return blank list output happen add want use combination library solution output mention james brady itertools.combination key full solution assume array length n. let bitmask b length denote particular combination c. b[i a[i belong combination c. go bitmask filter source array bitmask do itertools.compress represent combination consider case single b one case belong particular combination combine combination set get subsequence become obvious amount possible combination case drop case b[i zero assume empty set combination substract
search elegant way get datum use attribute access dict nest dict list javascript style object syntax example accessible way think possible recursion nice way get object style dict update python consider namedtuple datum structure suit need alternative original answer content use mention bunch library mean provide attribute style access dict object want demonstration python library available https://github.com/infinidat/munch credit go codyzu add recursion do edit implement use sequence dict value structure depth collection helper call namedtuple dict come json.load turn object dict line see convert json datum python object take feel good aspect previous example come leverage json module standard library custom object hook example usage read namedtuple change value structure want access dict key object dict difficult key able update original dict example usage end try attrdict bunch library find way slow use friend find main method write librarie result library recurse nested object make copy dictionary object mind make key change make attribute lazy load create copy dictionary object create copy light weight proxy object final implementation performance increase use code incredible use attrdict bunch library consume request code reduce time nothing(somewhere range course depend need use functionality bit code go simple see original implementation https://stackoverflow.com/users/704327/michael-merickel thing note implementation simple implement method need need write require dictproxy listproxy object use pydantic basemodel convert nest dict nest json object python object vice https://pydantic-docs.helpmanual.io/usage/models/ object dict object json dict object json object x.__dict__.update(d fine want mirror dict hierarchy object list tuple low level get x.b.b1.x x.c hi bar start work list wrap lists userlist overload getitem wrap dict know lot answer ' m late party method place convert dictionary object structure work 3.x.x work simple way use collections.namedtuple find follow liner beautiful support nested dictionary output look good let explain solution use time first reason illustrate fact follow code give error python keyword certain dictionary key allow solution allow access dictionary item use name allow use dictionary semantic code example usage old q&a get talk seem talk recursive dict code want upload version little paradigm preserve attribute type import class concern overwrite method dictionary parsing seem solid way implement silentghost original suggestion stumble case need convert list dict list object base roberto snippet work note tuple converted list equivalent obvious reason hope help much answer guy assign dict dict empty object course fail nest dict example walk dict example list element mean mapping list key value pair implementation edit miss bit handle dict list dict add fix usage use think dict consist number stre dict enough time ignore situation tuple list type appear final dimension dict consider inheritance combine recursion solve print problem provide way query datum way edit datum see example dict describe information student result find implementation nest dictionary object write usage building answer python add property class call makedata dictionary want convert trydata depending expect input spit datum object note dictionary format see nested dictionary list dict addr_bk decode protocol buffer datum convert python dict use optional field email = key unavailable repeat field phone = convert list dict try propose solution handle nested dictionary other print object detail solution dict2obj(dict dawie strauss work enhance little handle key find test nest ready version namedtuple = convert dict object reference answer satisfied mark upvoted answer simple general solution transform json style nest datastructure make dict list hierachie plain object build do accept answer like recursive use way handle problem getattr call construct new style class version version addition nonestruct return attribute call set allow none testing see attribute present usefull exact dict input know setting alternative way convert list dictionary object little class give problem extend use copy method update recursive array expansion sirwa code look simple wrapper class dict enable attribute style key access assignment dot notation satisfy exist option reason dataclasse pydantic great require static definition content replace dict code rely dict share method getitem syntax support develop metadict behave dict enable dot notation autocompletion object load ram shortcoming potential namespace conflict solution feature usage example find github see link full disclosure author metadict shortcoming limitation encounter try solution note write similar answer stackoverflow relate
train model tensorflow improve answer add detail save restore model in(and tensorflow version save model restore model advanced use case explain complete tutorial save restore tensorflow model tensorflow version save restore model call tf.train.export_meta_graph tf.train.import_meta_graph accord adapt doc exhaustive useful tutorial saved_model https://www.tensorflow.org/guide/saved_model keras detail guide save model https://www.tensorflow.org/guide/keras/save_and_serialize checkpoint capture exact value parameter object use model checkpoint contain description computation define model useful source code use save parameter value available savedmodel format hand include serialized description computation define model addition parameter value checkpoint model format independent source code create model suitable deployment tensorflow serve tensorflow lite tensorflow.js program programming language c++ java go rust c tensorflow apis highlight doc many good answer completeness add cent simple_save standalone code example use api python tensorflow restore original blog post follow code generate random data sake demonstration code print tensorflow version checkpoint save contain value variable model model graph mean graph restore checkpoint example linear regression training loop save variable checkpoint evaluation section restore variable save run compute prediction course restore variable continue train like docs variable cover save restore docs saver environment python tensorflow many solution base load .ckpt save redefine tensorflow network use weird hard remember name placehold_0:0','dense adam weight:0 recommend use tf.saved_model simple example learn serve tensorflow model save model load model part model model definition save supervisor model directory numerical value tensor save checkpoint file model.ckpt-1003418 model definition restore use tf.import_graph_def weight restore use saver use special collection holding list variable attach model graph collection initialize use import_graph_def use together moment roadmap fix use approach ryan sepassi construct graph identical node name use saver load weight hack use use import_graph_def create variable use tf.add_to_collection(tf.graphkeys.variable variable variable use saver take easy way run different python instance use case save restore disk use good option save restore graph structure see metagraph documentation detail default saver save graph structure .meta file call restore restore graph structure return saver use restore model state case need fast example implement early stopping want save checkpoint time model improve training measure validation set progress time want roll good model save model disk time improve slow training trick save variable state memory restore quick explanation create variable tensorflow create assignment operation x assign set variable initial value create placeholder extra assignment op make graph messy use exist assignment op first input assignment op reference variable suppose initialize second input initial value order set value want initial value use feed_dict replace initial value tensorflow let feed value op placeholder work fine yaroslav say hack restore graph_def checkpoint import graph create variable use implement personal use share code link https://gist.github.com/nikitakit/6ef3b72be67b86cb7868 course hack guarantee model save way remain readable future version tensorflow save model specify restorer variable use restore variable current session external model specify mapping variable name variable name view model variable name use command inspect_checkpoint.py script find python tool folder tensorflow source specify mapping use tensorflow worklab contain set class script train retrain different model include example retrain resnet model locate simple solution basic case differ want load graph file build runtime answer hold tensorflow include use technique make sure layer variable set unique name tensorflow make name unique different name store file problem previous technique name mangle way loading saving see great answer saving model use want provide couple pointer save tensorflow.kera model complicated many way save model provide example save tensorflow.keras model model_path folder current directory work recent tensorflow tf2.0 update description change future interested saving model weight load weight restore model custom op follow case need create function wrap lambda layer model save think cover many way save tf.keras model many way comment see use case cover thank check example tensorflow skflow offer save restore method manage model parameter control want back model use default session add extra code save restore thing pass checkpoint dir name monitoredtrainingsession constructor use session hook handle answer great want add thing elaborate @user7505159 answer important add begin file name restore example save graph file name order restore graph prepend file_name need cause problem depend environment version tensorflow want mention sess.run(tf.global_variables_initializer important restore session receive error regard uninitialized variable try restore save session make sure include sess.run(tf.global_variables_initializer saver.restore(sess save_file line save headache accord new tensorflow version preferable way save restore model checkpoint.save checkpoint.restore write read object base checkpoint contrast write read base checkpoint object base checkpointing save graph dependency python object layers optimizer variable name edge graph use match variable restore checkpoint robust change python program help support restore create variable execute prefer new code example information example describe issue tensorflow simple restore simple simple example use tensorflow savedmodel format recommend format accord docs simple mnist dataset classifier use keras functional api much fancy go serving_default name signature def tag select case default serve tag select explain find tag signature model use saved_model_cli disclaimer basic example want get running mean complete answer update future want give simple example use savedmodel tf see simple answer savedmodel example work tensorflow break change janapati answer say tf savedmodel format tensorflow become way simple save model format save model format load model format use save model remember need specify var_list want reduce model size val_list save variable network use restore network reuse script use important point follow @vishnuvardhan janapati answer way save reload model custom layer metric loss tensorflow way execute code save model tf.keras.models.save_model model.save modelcheckpoint callback load model need precise custom object simple want save model make sure name want restore use name want predict make sure saver run correspond session remember use late check point use m version simple way save restore new version tensorflow process save loading model lot easy implementation keras high level api tensorflow save model check documentation reference https://www.tensorflow.org/versions/r2.0/api_docs/python/tf/keras/models/save_model load model easy way use keras api line save model line loading model use saver object tensorflow save train model object provide method save restore model save train model tensorflow restore save model tensorflow
run program process similar file random number stop produce error source creation file come place good way proceed import read_csv take encoding option deal file different format use read_csv('file encode = iso-8859 encode utf-8 read to_csv use several alias option latin cp1252 window iso-8859 see python doc numerous encoding encounter see relevant pandas documentation python doc example csv file relate question good background resource developer know unicode character set detect encoding assume file contain non ascii character use enca see man page file -i linux file -i osx see man page simple solution alternate solution sublime text code bottom bar vscode see label click popup open click save encoding pick new encoding file read file usual different encoding type pandas allow specify encoding allow ignore error replace offend byte size fit method different way depend actual use case know encode encoding error file great specify encoding want bother encoding question want damn file load matter text field contain garbage use latin1 encode accept possible byte input convert unicode character code know file write specific encoding contain encode error real world example utf8 file edit non utf8 editor contain line different encoding pandas provision special error processing python open function assume python3 read_csv accept file object typical error parameter use ignore suppresse offend byte imho well backslashreplace replace offend byte python backslashed escape sequence execute code find encode execute code follow go general script approach state question start standard encoding available python version case python standard encoding usable python list standard encoding different python version provide helpful stack overflow answer try encode small chunk datum print working encode output obvious output address problem encoding latin1 run error produce want outcome case question try approach specific problematic csv file try use find work encode other try add help work make sure use correct delimiter column name start load row load file try change encoding case encode utf-16 work df = pd.read_csv("file.csv",encoding='utf-16 case file bom encoding accord encoding="utf_16_le python hope help find answer bit try specify engine='python work ' try figure case work python python struggle thought post question first search result add encoding="iso-8859 tag pandas read_csv work encoding keep give unicodedecodeerror pass file handle put encoding attribute file open read_csv obvious hindsight subtle error track posting answer provide update solution explanation problem occur say get data database excel workbook special character la cañada flintridge city export datum use encoding go introduce error la cañada flintridge city become la ca\xf1ada flintridge city use pandas.read_csv adjustment default parameter hit follow error solution option fix export sure use encoding option fixing export problem available need use pandas.read_csv include follow paramter engine='python default pandas use great read large clean file crash unexpected come experience setting encoding='utf-8 fix unicodedecodeerror need use errors_bad_line option need option solution prefer solution read file use vanilla python hope help people encounter issue first time line result error read excel file use read_csv method use read_excel read .xlx try trouble open csv file simplify chinese download online bank try latin1 try iso-8859 try cp1252 avail pd.read_csv("",encode gbk work try detect encode file first chardet cchardet charset normalizer answer seem catch csv encoding issue get strange encoding problem header byte order mark bom character begin csv file answer address issue python read csv bom embed first key solution load csv encoding="utf-8 sig help post update old thread find solution work require opening file open csv file libreoffice choose save edit filter setting drop menu choose utf8 encoding add encoding="utf-8 sig datum = pd.read_csv(r'c:\fullpathtofile\filename.csv sep = encoding="utf-8 sig hope help use jupyter notebook case show file wrong format encoding option work save csv format work try look take care encoding express argument check encoding pass pandas slow python problem file file corrupt faced issue save file csv case manage overcome issue use method provide change encoder type utf-16 iso-8859 type work use pd.read_csv(filename use pd.read_csv(open(filename r thing seem work fine try df encoding='gbk pandas replace offend byte change encoding style case change encode parameter encode utf-8 encoding utf-16 resolve issue
need timezone unaware datetime object add time zone order able compare timezone aware datetime object want convert entire application timezone unaware legacy case try demonstrate problem try astimezone surprising fail try conversion replace seem well choice get value datetime.today python timezone aware see replace seem set tzinfo make object aware get ready fall doctor input string timezone parsing use dateutil parse matter seem kludgy try python python result context write parser datum file old format need support date stre timezone indicator fix datum source need support legacy datum format time conversion legacy datum option various business bs reason general idea code default timezone case seem good option know reasonable confidence legacy datum question utc ' m prepare accept risk defaulting case general make naive datetime timezone aware use localize method utc timezone necessary use localize daylight saving time calculation handle work return new datetime modify unaware example use external module achieve result use datetime module present answer few dependency pytz issue note wish use python3 python2 use timezone import hardcode utc write python script check work python move dt_aware dt_unaware dt_unware dt_aware use statement django convert unaware time aware python add module standard library need attach timezone attach system local timezone convert timezone wikipedia list available time zone window system time zone database extra package need backport allow use zoneinfo python agree previous answer fine start utc think common scenario people work aware value datetime non local timezone go name infer replace applicable produce right datetime aware object case replace tzinfo= seem random behaviour useless use localize correct function use example complete example give timezone aware datetime value current local time use dateutil.tz.tzlocal get timezone usage datetime.datetime.now datetime.datetime.astimezone note convert datetime object utc timezone call original timezone information none codifie @sérgio @unutbu answer work pytz.timezone object iana time zone string seem datetime.localize accept string timezone object argument default utc time zone specify make timezone aware datetime want datetime non timezone start python stdlib way datetime object naive new python encounter issue find solution simple work fine python simple solution minimize change code time utc time rsa format unutbu answer make utility module handle thing intuitive syntax instal pip change timezone mention approach unix timestamp simple solution use pandas
make python script wait user press key python use input python use raw_input wait user press enter windows do want use msvcrt msvcrt module give access number function microsoft visual c c++ runtime library msvcrt wait key press note python raw_input exist python input(prompt equivalent eval(raw_input(prompt python use input python use raw_input linux box use follow code similar code see old python faqs instance code spin tight loop code lot odd corner case account code depend system command use verify work python window linux mac os x. use cause follow error use python syntaxerror expect eof parse simple fix code work python python use cross platform python code remove fctl non block stuff give ioerror need use code want block addendum implement package pypi lot goody call console python manual provide follow roll use case know platform independent way window use msvcrt module use getch function mscvcrt include non block kbhit function see key press wait sure correspond curse function unix curse package sure use use screen output code work unix note curses.getch return ordinal key press make output cast new python think stupid reproduce simple suggestion make turn pitfall know python script execute idle io command seem behave different terminal window block return ff report see https://bugs.python.org/issue9290 mark fix problem seem persist current version python idle code post work try run script idle want wait enter user knock keyboard cause un intend happen use use keyboard library https://github.com/boppreh/keyboard#api os.system seem invoke option read command pass bash want see press exact key say
compare string case insensitive way python encapsulate comparison regular string repository string use simple pythonic code like ability look value dict hash string use regular python string assume ascii string python casefold well alternative want comprehensive solution handle complex unicode comparison see answer compare string case insensitive way seem trivial use python python underdeveloped first thing note case remove conversion unicode trivial text text.lower text.upper().lower ß let say want compare busse buße heck want compare busse buße equal new capital form recommend way use casefold str.casefold return casefolde copy string casefolde string use caseless matching casefolde similar lowercase aggressive intend remove case distinction string use low casefold available help consider accent font renderer good think = ê accent latter combine character simple way deal unicodedata.normalize want use nfkd normalization feel free check documentation finish express function use python call .low string unicode object work time work situation @tchrist describe assume file call unicode.txt contain string σίσυφος σίσυφος python σ character lowercase form σ .lower help compare case python form resolve call low string work care edge case sigma greek use python reference python python show interpreter printout section unicode standard define algorithm caseless matching x.casefold y.casefold python implement default caseless match d144 casefolding preserve normalization string instance normalization need do å d145 introduce canonical caseless matching nfd call twice infrequent edge case involve u+0345 character example compatibility caseless match d146 case ㎒ u+3392 caseless matching simplify optimize caseless matching identifier see solution use regex work accent work unicode character case insensitive thank @rhymoid pointing understanding need exact symbol case true output follow use casefold method casefold method ignore case compare output usual approach uppercase string low case lookup comparison example convert lowercase use string.low clean solution find work constant file extension mention case false str.contain output search_specificword("affordable housing core affordable outhousing europe false search_specificword("affordable housing core affordable housing europe true consider use foldedcase jaraco.text want dictionary key text irrespective case use foldedcasekeyeddict jaraco.collection regex learn love hate last week import case reflect feel make normal function ask input use |re.compile(r'foo*||spam| yes.i re.i yes.i ignorecase make many mistake write search message use regex page point foo spam pipe case ignore find lost_n_found display lost_n_found equal none equal none return low case use return lost_n_found.lower allow match go case sensitive ncs stand care case sensitive question get
write program accept user input program work expect long user enter meaningful datum fail user enter invalid datum crash like program ask input ask valid input crash accept invalid value simple way accomplish put input method loop use continue get bad input break loop satisfied use try detect user enter datum parse want reject value python parse add validation logic technique combine loop need ask user lot different value useful put code function retype time extend idea make generic input function usage method work consider poor style look attractive short true method repeat principle software development increase likelihood bug system want backport change input raw_input change first input syntaxerror wait happen learn recursion tempt use get_non_negative_int dispose loop appear work fine time user enter invalid data enough time script terminate runtimeerror maximum recursion depth exceed think fool make mistake row underestimate ingenuity fool true break loop put requirement statement want stop age result follow work age value make sense code follow logic business process want bad input message separate input prompt answer string method course use string method get alphabetic string get uppercase see doc full list membership test several different way perform use contain method number comparison useful comparison method use example lt use dunder method dunder double underscore define function use one operator module path existance use pathlib library path.exist method want torture user ask number time specify limit call combine provide default value next function want reject input user supply cap space begin end string take simple mistake account preprocess input datum apply str.lower str.strip method example case membership testing code look case many function use preprocessing use function perform function composition example use simple case example program ask age add filter case many rule well implement function perform logical conjunction follow example use ready need custom message fail case ' m afraid functional way least find accept answer amazing like share quick hack problem take care negative age problem p.s code python click library command line interface provide functionality ask valid response user simple example note convert string value float different custom type provide get number specific range use intrange specify limit min max use click.choice type default check case sensitive use type check exist path resolve read writing file do case press enter key use enter value give default big fan unix philosophy thing capture user input validate separate step keep simple python walrus operator sample run python use get_input handle keyboardinterrupt print friendly exit message terminate application counter use limit allow retrie desire mess similar come follow solution use way get input reject junk check logical way read_single_keypress courtesy https://stackoverflow.com/a/6599441/4532996 find complete module example note nature implementation close stdin digit read hit enter need number merge thismany function module allow say digit use try handle error repeat build daniel q patrick artner excellent suggestion generalize solution opt explicit raise statement assert assertion checking turn validation provide robustness use get different kind input different validation condition example answer original question good question try follow code code use ast.literal_eval find data type input age follow follow algorithm ask user input age age float int data type check age>=18 age>=18 print appropriate output exit check age<18 age<18 print appropriate output exit ask user input valid number age go step age float int data type ask user input age go step code one:- use statement user enter true value input value number null value try ask example try answer question suppose age input value accept wrong value terminate program user use key enter value note read comment top code apply simple else logic add logic code loop infinite loo ask enter age try block work clean way accomplish task use write general logic allow user enter specific number time use case arise many real world application make input statement true loop ask user input break loop user enter response use try block handle invalid response var variable user enter stre integer program return able vote united states solution use input validation use customized validationerror optional range validation integer input usage output persistent user input use recursive function question requirement convert integer ask user repeat work loop run long user inputte meaningful answer break make sense use isdigit check string represent valid integer use recursive function loop code help want maximum try say use code note use recursion
portable way linux window get current user username similar os.getuid nice pwd module work unix people suggest get username window complicate certain circumstance run window service look getpass module availability unix windows p.s comment function look value various environment variable determine user name function rely access control purpose purpose allow user impersonate combine pwd.getpwuid see pwd docs detail use windows linux note environment variable modify user potential security vulnerability method attacker fake username work know behave run service portable os.name ifstatement see http://timgolden.me.uk/python/win32_how_do_i/get-the-owner-of-a-file.html need get user home dir consider portable win32 linux least part standard library parse string get last path component ie user name see use os module look good portability work good linux window output window user home dir c:\users\myuser username myuser linux user home dir username root need instal module extension combine pwd getpass approach base answer psutil provide portable way use environment variable getpass solution prone security issue accept answer today hood combine getpwuid base method unix gettokeninformation method windows unix work edit look work windows unix unix return username windows return user group slash username unix return username window return domain username interesting ideal terminal case use os.system begin example need add user group linux mind feel easy read import pwd getpass feel domain user helpful certain application window use standard python lib works windows drive c mac linux remove line immediate invocation none work case scroll actual solution problem get solution wrong username running command sudo switch sudo_user user give wrong result sudo python3 case solution bit tricky rely default root home directory location work case write plx module time get user name portable way unix window thing http://www.decalage.info/en/python/plx usage require win32 extension window get current username window go windows api bit cumbersome invoke ctype ffi getcurrentprocess openprocesstoken gettokeninformation lookupaccountsid write small module straight python getuser.py usage work window nix latter use pwd module describe answer work
list.append append end list explain list.prepend exist due performance concern large list short list prepend value s.insert(0 x form common see time consider use list prepende deque run constant time prepending list run linear time create new list prepende modify exist list want prepend list python list short lot ok use way inefficient python list array pointer python take pointer list move insert pointer object first slot efficient short list ask snippet cpython source implement see start end array move insertion want container list efficient prepende element want link list python link list insert begin end call deque collections.deque many method list list.sort exception make deque liskov substitutable list deque appendleft method deque ended queue link list matter length take amount time preprend big notation o(1 o(n time list usage relevant deque extendleft method prepend note element prepende time reverse order first setup iterative prepending function analysis compare operation range usage performance adjust number run trial compensate run time prepend repeat trial default deque fast list get long deque perform use deque extendleft get good performance way use list keep mind small list list.insert work large list insert use slice notation become fast list mean append prepended situation prepende hurt performace code switch deque reverse semantic accomplish goal reverse list append general avoid prepende build python list object find question performance test propose method see insert slice assignment fast explicit add close result raymond hettinger note insert common option prefer way prepend list opinion elegant idiomatic way prepende element list list python use expansion operator call unpack operator result list modification combine list operator show like common approach l.insert(0 value require magic number insert allow prepende single element approach syntax prepende single element multiple element let go method do fast python efficient way pythonic opinion
try urlencode string submit look urllib.quote_plus python urllib package break small component use note parse child module need pass parameter urlencode map dict sequence tuple python use urllib.parse.urlencode note url encoding use sense look output use try request need bother urlencode edit need order name value pair multiple value name set param use dictionary follow complete solution include deal pitfall python urllib.parse.quote_plus(string encoding none error none try urlencode work work dictionary produce correct output note trick problem service care order argument lose create dictionary case well ricky suggest python work future reference ex python3 use script program need support python module provide urlencode function syntax follow thing mention urllib.urlencode encode empty value dictionary string none parameter absent know desire fit use case use quote_plus python urllib3 work use follow official doc want use urllib https://github.com/wayne931121/python_url_decode
try pass list argument command line program argparse option pass list option script call use nargs option append set action option depend want user interface behave nargs nargs='+ take argument take append append provide option multiple time build list use type = list situation want use type list argparse let take look detail different way try end result output expect takeaway mean general mean use quote pass list argparse want prefer pass delimited string parse later script reason list type int str use nargs run problem multiple optional argument positional argument work fine delimiter space enforce quote argument value example question use lambda type suggest comment chepner nargs want use choice know list advance use nargs parameter argparse add_argument method use add_argument parameter use option pick default pass explicit argument include code snippet example example note sample code write python3 change print statement format run python2 note collect multiple string argument store list opts.alist want list integer change type parameter parser.add_argument int execution result intending make single switch take multiple parameter use nargs='+ example take integer produce specify argument multiple time default action store replace exist datum alternative use append action write custom handler action parse separate value add_argument type callable object receive string return option value allow edit incorporated improvement suggest katu remove separate parse step nice way handle pass list dict command line use json think elegant solution pass lambda function type mention chepner addition know beforehand delimiter list pass multiple delimiter re.split nested list inner list different type length preserve type foo bar baz use solution propose mason question show parse list string use eval builtin function read list case put single quote double way order ensure successful string parse testing apply chepner comment lunguini answer usage want handle pass multiple list integer value string helpful link = pass bash variable python order important want pass list seperate use comma output = my_stre my_args variable contain argument order advise pass default argument argparse attempt append supply default value replace default value expect action='append example give argparse docs case thing work expect opt provide default value argparse append action attempt append supply default replace default value expect argparse replace default value pass tuple default list lead confusing error bug track unexpected behavior date likely resolve
make migration add new table want revert delete migration create new migration command revert last migration delete migration file revert migrate previous migration example last migration need use full migration name number delete migration use django show name migration reverse migration app run answer alasdair cover basic point migration reverse django rule reversal change make migration ./manage.py makemigration reversal possible custom script need reverse write describe example https://docs.djangoproject.com/en/1.9/ref/migration-operations/ runpython operation want back migration write rigorous reversal script follow quick hack example docs link allow leave database state migration apply reverse work django update well way writing replace lambda app schema_editor none migrations.runpython.noop snippet thing credit comment delete migration file reversion make mistake migration file database know thing remove want revert migration use name migration delete migration file desire migration model solution solution cover use case use runpython access table orm query table delete entry relevant way modify detail rynpython migration take care datum add change removed example display access table djang orm delete last late migration create rm appname>/migrations/<migration > example rm myapp migrations/0011 log database run sql postgres example delete django_migration name able create new migration start migration number delete case revert migration migration_number_prefix number prefix migration want revert instance go migration delete migration use migration number revert migration app thing delete table create delete particular migration file delete particular entry django migration last case correlate particular migration revert migrate previous migration example use command delete last_migration file face trouble revert migration mess perform fake migration django version create entry south_migrationhistory table need delete entry able revert migration ps stuck lot time perform fake migration revert help answer similar case top answer alasdair help unwanted migration create new migration big migration revert table remove delete migration create new migration delete revert confused migration make new fixing model use method configure create table migrate command last migration create match current model case want create table model exist table exist database machine condition b table create special way c table use machine e.g. development project use multiple database settings.database migration create case b django case b c django apply database appropriate case require migration necessary running test django complete relevant current state record migration model manage false django + possible create foreignkey manage unmanaged model make model manage true later question write time django valid version current last migration revertible possible database backup fake revert ./manage.py migrate my_app delete table necessary create fix migration fix model apply change database structure ./manage.py migrate my_app 0011_fixed_migration find previous migration app python manage.py showmigration want rollback 0002_bazifff migration want rollback seem rollback good library use call djagno nomad relate question ask think share scenario time switching project feel revert change current branch library checkout https://pypi.org/project/django-nomad/ answer work great roll linear migration migration non linear i.e multiple leaf node wish rollback path follow way need rollback b y. way answer states i.e python manage.py migrate app x. need path i.e rollback b perform follow step bring migration file original location delete unapplied migration b wish gist django rollback migration file present location want rollback migration path i.e remove project location perform rollback
use python django application version python instal django run sample application testing django make sure django use version version module django use django support python linux want check python version use run python -v command line want check django version open python console type bcoughlan answer executable command instal application go django project home directory use idle python gui pip pip freeze show component version include django pipe grep get django version say version python assume different virtual environment venv conda environment instal django environment possible different version django version python unix mac terminal check python version follow want know source check version django python django mention other potential problem check version version upgrade code go date want make sure normal string comparison fail last comparison solution use strictversion distutil various way get django version use follow give accord requirement note work virtual environment load python environment feel free modify answer kind correction add related information type python django type pip freeze see version instal module include django check use python shell follow wish unix linux shell single line develop application check version use follow type cmd terminal django version package version open terminal command prompt type find package version example run pip list linux terminal find django version list run pip freeze cmd window official documentation second django use version python specify pythonpath environment variable use echo pythonpath shell determine version use module version use django module version instal version python specify pythonpath undocumented util version module django https://github.com/django/django/blob/master/django/utils/version.py get normal version string detailed version tuple python type django directory get pythonic way see get version package tie https://github.com/django/django/blob/master/setup.py#l37 distutil compare version get python version agree james bradbury tie django want make django version comparison use django pip install django example django version instal environment follow true get django version run follow command shell prompt python django django instal see version get error tell module name django type follow command python shell python version support django version verify django see python type python shell python prompt try import django import django type print statement give know version django instal system open cmd terminal run follow command code get version django use terminal run simple open line ide instal python django type django admin --version instal late python django system result show fig method get version django package need version variable package get version accord version__variable set python module method get version filesystem mind know get version django python package look init__.py package root navigate filesystem universal way get version package site package virtual environment method django debug toolbar helpful tool call django debug toolbar use recommendable django development list version app package.__version go set django project find django version
try save csv folder make edit file time use pd.to_csv('c:/path csv file separate column index want avoid print index csv try save file get unwanted index column avoid save file use index false way handle situation want index store csv file other state use index false saving dataframe csv file false df.to_csv file_name.csv df_new pd.read_csv('file_name.csv').drop(['unnamed 0'],axis=1 want index read file use save use other state want save index column first place use df.to_csv('processed.csv index datum use sort index let say timestamp column keep index load datum use save index datum set index save dataframe read datum index read datum set index solution want keep column index want good format next statement good case get csv file separate column format addition numerical index appear
simple question figure let say variable follow want construct dataframe generate error valueerror use scalar value pass index try give error message error message say pass scalar value pass index use scalar value column use list use scalar value pass index try wrap dictionary list use pd.dataframe.from_record convenient dictionary hand set index want create pandas series first second step convert pandas series pandas dataframe provide column name series provide function need dataframe think collection series concatenate multiple series datum frame describe add series variable exist data frame example pandas magic work logic error message valueerror use scalar value pass index say pass index mean pass index make pandas want pass index pandas treat dictionary key column name value column contain value index pass large index index generate dataframe none give pandas know many row want explicit default index base recommend pass dictionary list dataframe constructor create dataframe easy read developer pandas lot caveat make developer expert order read code try documentation orient argument key pass dict column result dataframe pass column default key row pass index use create small table dict let say dict key filename value correspond filesize use follow code put dataframe notice .item call dict need provide iterable value pandas dataframe column problem numpy array solution flatten figure valueerror understand dataframe scalar value need create dataframe dict array need imo array index array value need specify index e.g. index element 'd f output show output index dataframe index array array arbitrary length multi length comment col_4 raise valueerror("if use scalar value pass index cause scalar value integer bool string index note index call collection kind index use locate row dataframe index array output ' m beginner learn python english 👀 try transpose work downside create new object output input list record single dictionary well seem equivalent dataframe intuitive dimension column row specify column use dictionary key specify dimensional datum use series intend convert dictionary scalar include index index require dictionary list idea expand dictionary list course dictionary list build dataframe index change b value list follow execute code follow get simple option option convert scalar list fly use dictionary comprehension expression create new dict value list element convert dictionary datum frame give new name column try df2 = pd.dataframe.from_dict({'a':a,'b':b orient index dictionary turn pandas data frame follow line code pass dict list
find local ip address python platform use standard library find seem bit hackish say try nix windows work assume internet access local proxy work return machine hostname host paliative gimel show use course machine need resolvable hostname method return primary ip local box default route python return single ip primary default route need ip attach interface include localhost see answer nat firewall wifi router home show public nat private local network default route local wifi router need external ip run function external device wifi router connect external service https://www.ipify.org/ reflect ip see world idea different original question alias call myip note intend use python program proper way make use python module ipv6 support python code version work lan internet connection thank @ccpizza background use socket.gethostbyname(socket.gethostname work computer host duplicate entries reference socket.gethostbyname return last entry host initial attempt weed address start work python linux window deal several network device ipv6 stop work recent linux distros try alternative technique try connect google dns server 8.8.8.8 port combine technique liner work create myip alias python top answer increase popularity ipv6 server multiple network interface use third party python module finding ip address robust reliable method list use netiface module type command shell install default python installation use computer print author module claim work window unix mac os x. computer route internet work get prefer local ip address host set socket api method see https://stackoverflow.com/a/28950776/711085 downside reflector method note answer op question local ip address give public ip address desirable depend use case query site api use python2 advantage disadvantage workaround edit think method bad use many fallback code irrelevant many year pose question internet computer many interface point many different network thorough description topic google gateways route computer able access internal network internal gateway access world wide web gateway example router case local ip address ask define respect single link layer specify network card ethernet cable talk multiple unique answer question pose global ip address world wide web define absence massive network fragmentation return path gateway access tld linux use follow module test windows linux require additional module intend use system single ipv4 base lan fix list interface name work recent linux version adopt systemd v197 change regard predictable interface name point alexander case replace list interface name system use solution netiface window want use external package want rely internet server help code sample find google code search modify return require information usage rely windll work window use ubuntu machine work variation ninjagecko answer work lan allow udp require access address lan internet debian test suspect linux ms windows test version believe post test python ubuntu find solution http://code.activestate.com/recipes/439094-get-the-ip-address-associated-with-a-network-inter/ example result linux use check_output hostname system command variant unkwntech answer provide get_local_addr function return primary lan ip address host post add number thing ipv6 support error handling ignore localhost linklocal use testnet addr rfc5737 connect ' m afraid good platform independent way connect computer send ip address example findmyipaddress note work need ip address nat computer connect nat solution work linux get ip address associate network interface fyi verify method work os x 10.6,10.5 window xp administer rhel department server work minimal centos vm kernel hacking instance check address case follow parse ip address output note ifconfig normal user path default give full path command hope help simple way produce clean output command line util show ipv4 address system work linux boxes answer personal attempt solve problem get lan ip socket.gethostbyname(socket.gethostname return method require internet lan connection code python convert use udp broadcast look ipv4 address different localhost ip address neat piece python code write single line put localhost hostname code give local ip address real ip address speak computer number ip address filter private network 10.0.0.0/8 cross platform way get ip address linux use siocgifconf ioctl slight refinement command version use ip command return ipv4 ipv6 address use command ip route linux know current ip address show ip give interface dhcp server running router modem ip local network mean range posible ip address give dhcp server mask range example note pynotify addition get point require advantage need specify network interface useful running socket server install use easy_install pip python script interpreter netiface available pip easy_install know base worth install netiface oddity platform netiface code play code map address interface name useful generating ebtable iptable rule fly version keep information interface name tuple ' m love list comprehension way brain work day follow snippet print enjoy python version utilize introduce asyncio package base unkwntech excellent answer get ip address use shell command python return ip address ubuntu system macos output system ip address ip list ip address nix system bit late answer think find useful ps return broadcast address netmask note use standard library simple pip install pif solve problem figure ip address local first thought build list ips local match lead question realize straightfoward way try bind ip see work answer question helpful solve related question follow train think advantage cross platform solution think ok windows specific require installation python wmi module seem hackish try call external server option many good one good fit project way wmi powerful remote admin window machine check pythonic work window hack time feel guess operate system go use build work machine multiple network interface include local loopback mention concerned real ip address want track interface follow puthon package http://alastairs-place.net/netifaces/ think avoid gethostbyname return ommit loopback entry host file verify variant previous answer save executable script name ip take number remote host print local ip reach print good bet arg give linux env read net tcp second localaddress third remoteaddress give ips hexa format tip second column zero listen port https://www.kernel.org/doc/documentation/networking/proc_net_tcp.txt get self ip current active lan computer ip wifi router network switch note public ip device involve external request package public apis core idea parse output shell command ipconfig ifconfig linux use subprocess acquire output get output capture python use subprocess output c:\users\dell ipconfig parse string python manner select wireless adapter ip current network modern nix system iproute2 utility call output json -j switch use json.load module method convert python data structure follow code display first non loopback ip address alternativly multiple ip want find ip use connect specific destination use ip -j route get look ip address iterate list dictionary return -j pyroute2 great library use obtain ip address gateway information useful information follow code obtain ipv4 address interface simple sweet similar post answer find usage call use ipv4 ipv6 change settle use service api ipfy response obtain json jsonp formats ipify python library github @fatal_error solution accept answer implementation solution nodejs case people need
correct well way structure cover basis look request exception doc short event network problem e.g. dns failure refuse connection request raise connectionerror exception event rare invalid http response request raise httperror exception request time timeout exception raise request exceed configure number maximum redirection toomanyredirect exception raise exception request raise inherit requests.exceptions.requestexception answer question show cover basis catch connection relate error one time catch exception design script program acceptable exit go try error catastrophic go abort program raise systemexit nice way print error call sys.exit catch base class exception handle case catch different thing christian pointed want http error unauthorized raise exception call response.raise_for_status raise httperror response http error example print additional suggestion explicit seem good go specific general stack error desire error catch specific one mask general exception object contain original response e.response useful need see error body response server example generic way thing least mean surround request call try look source code requests.connectionerror subclasse single class requests.requestexception subclass single class ioerror builtin bottom page find requests.exceptions.requestexception time write link page confusing usage simple first check response none happen exception act way depend context exception gui application pyqt5 implement visual log give output user log file message add non technical follow give stack trace log need cross json object expect return exception give non technical user message response non-200 status bad response suggest prevent code continue fact mind worth make process generic next function cut line code use requests_call make handle log message standardise handful request call project code get lot nice bloated example call nb version deliverable exception response deliver json structure visual log message see user case miss key status_text example anomalous response check index xyz see log log give detailed technical message construct include stack trace detail miss key question know elasticsearch python module thin wrapper request illustration purpose
build function get size file object byte see people experience python lot helper function guess build use os.path.getsize(path return size byte path raise oserror file exist inaccessible use os.stat(path).st_size use path(path).stat().st_size python + return size byte path raise os.error file exist inaccessible use os.stat function wrapper system call stat try return size file report os.stat os.stat(path call http://docs.python.org/library/os.html#os.stat
create iterative function iterator object python iterator object python conform iterator protocol mean provide method iter next iter return iterator object call start loop next method return next value call loop increment method raise stopiteration exception value return capture loop construct stop iterate simple example counter print easy write use generator cover previous answer print output hood generator object support iterator protocol similar class counter david mertz article iterator simple generator good introduction way build iterative function example see method action result note generator type uc_genexp reverse plain iterator uc_iter need reverse magic method accord doc return new iterator return self work least cpython getitem iteratable uc_getitem len magic method answer colonel panic secondary question evaluate iterator example use method result least sample run choose use matter taste method see generators iterator protocol hybrid iter return generator generator expression useful replacing list comprehension lazy save resource need compatibility python version use getitem see return self iter want note iter generator remove need raise stopiteration exception course make generator complex class useful first itertool module useful sort case iterator useful need create iterator python yield cool yield use replace normal return function return object destroy state exiting save state want execute next iteration example action pull itertool function list state function description count function itertool module produce iterator return consecutive integer start n. generator expression whole worm awesome worm use place list comprehension save memory list comprehension create list memory destroy use assign variable generator expression create generator object fancy way say iterator example generator expression definition similar iterator definition full range predetermine find xrange suprise see add example xrange iterable version range advantage prebuilding list useful giant datum iterate much memory question iterable object iterator python sequence iterable way make iterable class make behave sequence give getitem len method test python look short simple enough example usage answer page great complex object contain builtin iterable type attribute str list set dict implementation collections.iterable omit certain thing class use iterable function yield make use iter function closure keep state mutable list enclose scope python python closure state keep immutable enclose scope nonlocal use local scope update state variable test include follow code class code make sure replace self.iterablewith iterable iterate example code output note string iterable use argument class output improve previous answer advantage use class add call return self.value next_value example class base python call iterate see implementation
difference search match function python module read python documentation python documentation seem remember keep look learn hope answer example stick head least well place return question take less time learn anchored stre newline use pattern re.match documentation say character begin string match regular expression pattern return correspond matchobject instance return none string match pattern note different length match note want locate match string use search re.search search entire string documentation say scan stre look location regular expression pattern match return correspond matchobject instance return none position string match pattern note different finding length match point string need match begin string match entire string use match use search documentation specific section match search cover multiline string python offer different primitive operation base regular expression match check match begin stre search check match stre perl default note match differ search use regular expression begin match start stre multiline mode follow newline match operation succeed pattern match start stre mode start position give optional pos argument newline precede enough talk time see example code search ⇒ find string return match object match find begin string return match object match fast search regex.search("word regex.match((.*?)word gain ton performance work million sample comment accept answer think hack speed let find many ton performance gain prepared follow test suite make measurement word give follow plot see search pattern python fast matching pattern python smart avoid try smart re.search search pattern string re.match search pattern choice match start string refer example understand work re.match re.match return none re.search return abc difference re.match mislead accustomed perl grep se regular expression matching re.search john d. cook remark re.match behave pattern prepende word re.match('pattern equal re.search('^pattern anchor pattern leave side anchor pattern right side require terminate give think deprecate interested know reason retain much short search scan whole string match scan begin string follow ex say re.match attempt match pattern begin string re.search attempt match pattern string find match quick answer
tail recursive function work n=997 break spit recursionerror maximum recursion depth exceed comparison stack overflow way get guard stack overflow python cpython implementation optimize tail recursion unbridle recursion cause stack overflow check recursion limit sys.getrecursionlimit change recursion limit sys.setrecursionlimit dangerous standard limit little conservative python stackframe big python functional language tail recursion efficient technique rewrite algorithm possible well idea look set high recursion depth need change recursion limit solve programming puzzle define simple context manager call function custom limit exit body statement recursion limit restore default value p.s want increase stack size python process big value recursion limit do ulimit shell builtin limits.conf(5 file example avoid stack overflow python interpreter limit depth recursion help avoid infinite recursion result stack overflow try increase recursion limit sys.setrecursionlimit write code recursion python documentation sys.getrecursionlimit return current value recursion limit maximum depth python interpreter stack limit prevent infinite recursion cause overflow stack crash python set setrecursionlimit resource.setrlimit use increase stack size prevent segfault linux kernel limit stack process python store local variable stack interpreter recursion take stack space interpreter python interpreter try go stack limit linux kernel make segmentation fault stack limit size control getrlimit setrlimit system call python offer access system call resource module sys.setrecursionlimit mention https://stackoverflow.com/a/3323013/895245 increase limit python interpreter self impose stack size touch limit impose linux kernel python process example program main.py course keep increase setrlimit ram run slow computer halt due swap madness kill python oom killer bash see set stack limit kb default value mb see test ubuntu python use language guarantee tail call optimisation use iteration get cute decorator realize old question reading recommend use recursion problem list avoid recursion implement use n+1 xrange start count fibonacci sequence similar issue error max recursion depth exceed discover error trigger corrupt file directory loop os.walk trouble solve issue working file path narrow corrupt file course fibonacci number compute o(n apply binet formula commenter note o(1 o(n 2**n difference get value recursion get value fibonacci(n value want get fibonacci number use matrix method fast numpy use fast exponentiation algorithm get answer o(log n well binet formula use integer want fibonacci number n well memorisation use @lru_cache decorator setrecursionlimit method functools lru_cache recursionerror maximum recursion depth exceed comparison solution know execute recursive function python large input > encounter maximum recursion depth exceed error sys module python function getrecursionlimit show recursion limit python version default version python change limitation important know increase much memory overflow error careful increase use setrecursionlimit increase limitation python follow link information something cause issue https://elvand.com/quick-sort-binary-search/ edit year realize use generator flippant answer question apology guess first question need change recursion limit answer deal change recursion limit apply note override recursion limit use sys.getrecursionlimit(n use generator fib function adapt introduction python generator @alex suggest use generator function equivalent code question many recommend increase recursion limit good solution limit use iterative solution want give example use memoization compute fibonacci allow compute large number use recursion recursive use simple hashtable allow reuse calculate fibonacci number use variation dynamic programming bottom approach ' m sure repeat time good soul write operator call function recursive function need form fibonacci number function look output tone digit
way rename dictionary key reassign value new name remove old name key iterate dict key value case ordereddict keep key position regular dict use move item end dict k_new exist case overwrite value place python + dict want preserve order simple rebuild new instance example rename key true ordereddict use dict comprehension syntax use generator expression modifying key question ask impractical key hashable imply immutable modify use check newkey!=oldkey way case rename dictionary key use ordereddict recipe write raymond hettinger modify add rename method go o(n complexity example output people mention trick delete create key liner find explicit implementation readable code return c suppose want rename key k3 k4 answer pretty good.but regular dict order hard keep key position normal case python go follow liner produce worth note print statement ipython console jupyter notebook present dictionary order choose case want rename key provide list new name come function mutate original dictionary function support list dictionary use answer dict.pop rename key find gotcha cycle dict change key separate list old key dict instance result cycle new change key loop miss exist key start find cycling dict way dictionary keep find key new key one change need separate instance avoid find change keys loop b find key find loop reason convert my_dict.keys list necessary get free reference change dict use my_dict.keys keep tie original instance strange side effect @helloswift123 function modification rename multiple key single call use code note example combine answer thread come solution simple used building block make complex key update dictionary
get error valueerror invalid literal int base end error show value try parse clear example case try parse empty string integer float example need convert follow acceptable python get valueerror pass string representation float int string representation integer include empty string pass string representation float int @katyhuff point convert float first integer pythonic way iterate file convert int try complicate way process line time use h.next next(h python reason valueerror int convert empty string integer case need check content string conversion error find work python convert number float call float convert int work output = int(float(input reason get error try convert space character integer impossible restricted.and get error check code correct work fine reason get empty string string argument int check empty contain alpha character contain character ignore part convert int floatinint int(float(floatinstring get problem line find empty string find string consist space look listen advice idiomatic python code clear iterate file think problem worth note test function split simple file face issue find split write exception handling come case none answer work encounter csv datum null byte mixed datum null byte strip numeric string strip consist byte counter field list csv value result splitting line simple workaround problem wrap code statement take advantage fact empty string truthy give input handle blank string use check problem code reading new line read file string compare convert integer sure example empty line produce error find need global count bad design python happen map space separate integer list enter integer line line use example solve problem hackerrank appetit follow error compile give input program line line try map space separate integer list use map method answer throw error line create program read file first line file blank read line calculation perform line line read work seem reading empty string error crop add extra check loop int(reading command answer case solution work original error similar op valueerror invalid literal int base try accepted answer get error valueerror convert string float try int(float(variable_name solution convert string float leave need check see string numeric value handle face error django model datetimefield save object change field datefield solve edit change date value format get issue try use readline loop file object suspicion fire readle readline file object cause error good solution use seek(0 reset file pointer handle condition set flag create new object file check set condition hard time figure actual reason read file need open file read readline method correct format output get similar error turn dataset blank value python convert integer
dump numpy array csv file human readable format numpy.savetxt save array text file use pandas take extra memory possible easy use want header index use to_csv("/path header none index none tofile convenient function man page useful note convenience function quick storage array data information endianness precision lose method good choice file intend archive datum transport datum machine different endianness problem overcome outputting data text file expense speed file size note function produce multi line csv file save line discuss good way dump array csv file use method certain thing know example numpy array dtype = np.int32 want save use savetxt store datum float point exponential format change format use parameter call fmt store datum original format savetxt use store datum compress format useful transfer datum network need change extension file numpy take care hope help write record array csv file header require bit work example read csv file example.csv write content csv file note example handle value string commas enclose non numeric value quote use csv build module believe accomplish follow store numpy array text file import savetxt numpy module consider numpy array name train_df want write column name numpy array file variable write file want write row python use csv.writer module write datum csv file module similar csv.reader module delimiter string use separate field default value comma want save numpy array np.array([[1,2],[3,4 cell convert save normal way cell cell csv file look restore array np.array(ast.literal_eval(cell_stre pure python use module numpy.savetxt method use save numpy array output text file default make use scientific notation avoid need specify appropriate format use fmt argument example
difference iterator generator example use case helpful iterator general concept object class next method next python iter method return self generator iterator vice versa generator build call function yield expression yield statement python early object meet previous paragraph definition iterator want use custom iterator generator need class complex state maintain behavior want expose method next iter init generator simple need generator expression sufficient simple code state maintenance reasonable limit do frame suspend resume example generator equivalent generator expression genexp take code build custom iterator course class square offer extra method actual need extra functionality application summary iterator object iter next python method generator provide build way instance iterator function yield function call return instance generator object generator expression return generator depth exposition example keep read generator subtype iterator create generator several way common simple way function function yield function call return generator generator iterator iterator iterable require iter method return iterator example iterable build tuple list dictionary set frozen set string byte string byte array range memoryviews python python get iterator build object custom object iter function iter method call attempt use object loop next method call iterator object get item loop iterator raise stopiteration exhaust reuse point generator type section iterator type section build type documentation python generator provide convenient way implement iterator protocol container object ’s iter method implement generator return iterator object generator object supply iter next python method information generator find documentation yield expression emphasis add learn generator convenient type iterator create object implement iterator protocol create extend object easy use generator simple generator expression work list comprehension use way use iterator protocol need extend python object object iterate vast majority case suited use yield define function return generator iterator consider generator expression note generator provide functionality coroutine explain generator yield statement depth answer yield keyword iterators object use next method get follow value sequence generator function produce yield sequence value use yield keyword next method call generator ex f return generator function ex foo generate next value sequence generator function call return generator object begin execution function next method call first time function execute reach yield statement return yield value yield keep track happen remember last execution next call continue previous value follow example demonstrate interplay yield call next method generator object add answer none exist answer address confusion official literature generator function ordinary function define use yield return call generator function return generator object kind iterator next method call next next value yield generator function return function object call generator depend python source document read python glossary say generator function python wiki imply generator object python tutorial manage imply usage space sentence generator simple powerful tool create iterator write regular function use yield statement want return datum time call generator resume leave remember data value statement execute sentence identify generator generator function third sentence identify generator object confusion seek python language reference clear final word yield expression use define generator function use body function definition use yield expression function definition sufficient cause definition create generator function normal function generator function call return iterator know generator generator control execution generator function formal precise usage generator unqualified mean generator object generator function reference python python language reference say thing python glossary state generator refer generator function refer generator iterator contexts case intend mean n’t clear use full term avoid ambiguity nice verbose answer example appreciate want give short line answer people clear create iterator little bit involve create class implement iter next method want go hassle create iterator python provide short cut way define iterator define function call yield call function return act iterator call next method use loop name python call generator hope clarify bit example ned batchelder recommend iterator generator method generator number use generator call evens method generator usual iterator book full page iterable bookmark iterator bookmark move next use generator need function use iterator need next iter say generator function return iterator object whole benefit iterator store element time memory previous answer miss addition generator close method typical iterator n’t close method trigger stopiteration exception generator catch clause iterator get chance run clean‑up abstraction make usable large simple iterator close generator close file bother ’s say personal answer first question iteratable iter method typical iterator next method generator iter additional close second question personal answer public interface tend favor generator lot resilient close method great composability yield use iterator flat simple structure iterator compose reason believe sequence short stop reach end tend look iterator low level primitive literal control flow matter generator much important concept promise composable code line cheat sheet difficult answer question concept iterable iterator protocol iterable python list string range iterator enumerate zip reverse check use approach confusing easy type difference range zip reason range lot additional functionality index check contain number see detail create iterator implement iterator protocol see write next iter method raise stopiteration exception see alex martelli answer example possible motivation see practice use generator seem main method create iterator python give interesting example show confusing usage concept practice generator function generator object generator generator function regular function python contain yield statement generator function great tool create iterator object possible iterator object returend generator function call generator object generator example create generator function return generator object generator object fib 0x01342480 iterator generator object use loop build function next return next value generator generator function easy way create iterator object iterator generator object iterator vice versa custom iterator object create class implement iter next method call iterator protocol easy use generator function create iterator simplify creation custom iterator give freedom implement method accord requirement show example thread cover many detail difference want add conceptual difference iterator define gof book retrieve item collection generator produce item thin air fibonacci sequence generator common example infinite series number store collection ramalho luciano fluent python p. media kindle edition cover aspect think give good notion useful compare approach datum check memory footprint generator take less memory need store value memory time iterable object iterate need iterator object terminology confuse iterable object include iter method return iterator object iterable object iterator object object implement iterator protocol set rule case method iter next method function supply new value iter method return iterator object complex object separate iterator simple case iter return object return self iterable object list object ’s iterator iter method return iterator call method things.__iter use iter(thing want iterate collection need use iterator python use iterator see example write writing iterator tedious python simple alternative generator function generator function ordinary function run code return final result code defer function return generator object generator object iterator object implement iterator protocol ’s good enough purpose many example generator answer short iterator object allow iterate object ’ collection source value generator simplify iterator less job easy implement go generator need build complex object include iteration feature use iterator protocol write python newbie simple way deep python many thing let start basic consider list let write equivalent function p print(l p print(f let make list iterable python list iterable mean apply iterator let apply iterator list let make function iterable write equivalent generator function python introduce keyword yield become generator function iterator apply note generator iterable implicit iterator apply implicit iterator crux generator function observe make function f generator iter(f l list apply iterator method iter become iter(l f iter(f apply iterator method iter become iter(f kinda casting int int(x int remain example p forget python c conclusion explanation list l ~= iter(l generator function f iter(f generator iterator vice versa output
round number python try round(number round number example like try int(number round number example math.ceil ceiling function return smallest integer high equal x. python python know answer question want import math want round work first part become second part evaluate true remainder addition true false remainder stay integer remainder add interesting python issue keep mind problem divide int python produce int truncate ceiling call make value float cast get correct result javascript exact code produce different result work integer way round take advantage fact round division negative number negate answer import float point conditional need example like numpy say well math use numpy purpose keep code consistent detail come use numpy lot surprised mention course accept answer work fine use math.ceil round note input float need integer call int convert use math.floor round round round near integer surprise suggest integer division round use common way divup syntax pythonic like powerful library https://docs.python.org/2/library/decimal.html want round b get integ variant use integer division note b non negative integer try way use modulo bool output shure rounded value float answer correct import math module function feel bit way true false interpret statement involve number python g.is_interger translate g.has_no_decimal g int(g last statement english read round g add g decimal case look specific decimal place import math use basic envionment method class method b lambda function require module -1 -1 confusing work get = -1.1 get need import module want use import give list number evaluate number equal integer round result true return number return integer(number math logic cut number part integer decimal decimal add ps explain detail comment ask m comment want import write simple function use import know find interesting answer go fix edge case work positive negative number require function import cheer ' m surprised see answer round(x ' go put note work python version change make python round scheme make thing difficult see post import use work doc build type support round value round close multiple power multiple close do choice get round round case round do add want avoid get halfway point add get close enough margin round expect course fail equal n].5000 unlikely use floor devision add operate python result default python asume integer result ceil use result ceil use javascript recieve result javascript asume result numeric type return result float good luck think confuse work mechanism int round int truncate decimal number float number give round case equal distance python return point share test print(-(-101 give example round use spread multiply division ' m beginner python try
find answer online experience regular expression believe need string need split semicolon comma follow space individual comma trail space leave untouched example string split list contain follow python build update follow comment str.replace str.split safe way iterable delimiter use regular expression re.escape allow build pattern delimiter escape solution function copy pasting pleasure split use delimiter compile regular expression describe use regexobject.split leave original delimiter string change regex use lookbehind assertion replace attach delimiter righthand side leave response jonathan answer seem work certain delimiter example put delimiter square bracket seem work regex look
assume search pam name want retrieve relate dictionary name pam age achieve use generator expression handle item user matt suggest comment provide default use different api find index item item enumerate list look pythonic way result return list python note python filter object return python3 solution @frédéric hamidi answer great python syntax change slight modification mention comment @matt add default value use list comprehension test various method go list dictionary return dictionary key certain value result test do python w7x64 result try pandas package perfect kind search task optimize add little bit benchmarke illustrate pandas runtime large scale entry add tiny bit @frédérichamidi case sure key list dict help use list comprehension sample code achieve usage filter next method python filter method filter give sequence return iterator next method accept iterator return next element list find element output note code return none incase name find simple way use list comprehension l list general way search value list dictionarie way put accept answer function easy use lambda result thought want consider create dictionary dictionary example search small number time premature optimization wrong implementation propose flaw update proposition pythonic least bit failsafe usage gist comparison use iterate throuhg list use filter+lambda refactoring(if need valid case code dict dict list dict output conclusion dictionary dict efficient way able search case say search use filter slow solution create dict dict use info post question get name pam age go element list shortcut keep dictionary name point item list take care consequence pop element list find thread search answer question realize late answer think contribute case useful duck lot fast list comprehension filter build index object lookup need scan item pip install ducks result name pam age
quick way http get python know content string search documentation quick liner find use google httplib urllib unable find shortcut librarie standard python shortcut form write function url_get python python documentation urllib.requ read use request library stuff install request run command want solution httplib2 onelin consider instantiate anonymous http object look httplib2 next lot useful feature provide want content response body string resp contain status response header include standard python install require standard python worth check simple powerful urllib3 library import make request add header info find urllib3 documentation safe easy use builtin http module stable python read http response file example read json api necessary import solution work https difficulty grab content specify user agent header information request cancel urllib2.httperror http error forbid urllib.error.httperror http error forbid send header python python theller solution wget useful find print progress download process perfect add line print statement reporthook wget script python want low level api excellent solution xuan theller work python make follow change enter precede http:// return unknown url type error working http apis convenient choice nap example get gist github may 1st example https://github.com/kimmobrunfeldt/nap#example python use dload json install pip install dload
come java world read bruce eckel python pattern recipe idiom reading class go say python need declare instance variable use constructor boom example true object class simple change value variable outside class example java teach public private protect variable keyword make sense time want variable class outside class access require python cultural python write class instance class variable java prevent want edit source class achieve effect python drop pretence security encourage programmer responsible practice work want emulate private variable reason use prefix pep python mangle name variable foo visible code outside namespace contain get determine get java protection work convention prefix mean variable use internally class module prevent access play class variable look foo bar private variable python less hack interpreter rename variable try access var class definition get know method invoke x.printvar = a.printvar(x a.printvar access field x field access a.printvar function create reusability special power give statement game different compiler involve privacy compiler level concept know class definition access control modifier error rule follow compile time mention many comment let forget main goal access modifier help user code understand suppose change suppose see private field mess syntactic sugar achieve python private variable c++ java access member variable time want need private variable python python bad expose class member variable need encapsulate member variable use @property break exist client code python single underscore use indicate method variable consider part public api class part api change different version use method variables code break use new version class double underscore mean private variable use define variable class local overridden subclass mangle variable name example self.__foobar name mangle self._a__foobar class a. class b mangle self._b__foobar subclass define variable foobar override parent variable(s prevent access variable begin double underscore name mangle prevent call variable /method recommend watch raymond hettinger python class development toolkit pycon give good example use @property -instance variable expose public variable need encapsulate use @property start simplest solution possible leave member variable public concrete reason example variation private variable underscore convention subtle difference sake programming pattern ideological purity good enough example @private decorator implement concept mileage vary write class definition use meta mention indicate variable method private prefixing underscore feel enough use property decorator example way reference bar reference return value bar function variable access change want use bar assign new value surefire way prevent access variable method wish hide say use property clear message send variable edit property use complex getter setter deleter access path explain https://docs.python.org/3/library/functions.html#property python limit support private identifier feature prepend class name identifier start underscore transparent programmer part net effect variable name way use private variable see general python implementation object orientation bite primitive compare language enjoy simple implementation fit well dynamic style language java teach public private protect variable require python reason require java free use use private protect python java programmer find private protect important design concept practical matter ten thousand line java python use private protect question protect programmer team source protect mean change programmer team work company phone call get source client work hire programming client code protect time use private variable need thing write read variable need force use setter getter go culture state ' ve work project read writing class variable free implementation deprecate take lot identify code path use function use setter getter force debug statement write identify deprecate method call code path call project write extension notifying user deprecate method disappear release vital keep module breakage minimum upgrade answer colleague maintain simple code set protect class variable necessary writing extensible system become imperative change core make need catch extension use code python want encapsulate class attribute java thing instantiate note throw error practice python obfuscate global attribute name turn private attribute java attribute name global inaccessible way private attribute language afraid matter job private protect concept important python tool prototyping rapid development restrict resource available development protection level follow python use class member work look good enough access field contain character notice python oop concept perfect smalltalk ruby pure oop concept c close good tool simplify oop language simplify main goal python existence bring developer possibility write easy readable code high abstraction level fast manner source change access right bypass language encapsulation java c++ source source manage system allow certain programmer access source professional context programmer responsible certain class know source manager lock source modify course manage access right programmer trust software human experience convention good multiple protection access management real private variable source management m new python background c javascript python feel mix term feature javascript struggle area create closure prevent access datum n’t want expose return different object https://www.programiz.com/python-programming/closure https://developer.mozilla.org/en-us/docs/web/javascript/closures#emulating_private_methods_with_closure handle python class field access private_variable underscore myclass method read access public_read_variable underscore outside class modify variable thinking private class attribute method name member read start develop package want publish think make impossible overwrite member warn touch come solution help first solution use favorite python book fluent python upside technique book hash symbol use use integer convert string python forbid use klass.1 downside technique solution come write setattr pro con prevent subclass overwrite method use init_subclas see way protect class member guarantee user overwrite give idea end use meta class open new danger encounter technique use simple minded take look documentation find useful feature technique customize need
code spread multiple file try import follow main.py run main.py follow error ' m assume error due import entity main.py work problem see happen use mutual circular cyclic import python general overview allow cause problem wrt circular import see circular import work call stack raise importerror technical detail problem occur circular dependent import import entity class ent define physics try import entity initialize remove dependency physics entity module avoid circular dependency defer import python example least instance circumvent error circular dependency solve structural modification code problem occur vector demand entity make available use vice versa reason problem ask access content module ready use x import y. python able detect circular dependency prevent infinite loop import happen empty placeholder create module content dependent module compile update import module work python able work circular dependency use import style refer content module top level python compile module access content circular dependency top level mean line execute compilation oppose content function = x.y static class variable access module content cause problem case work jupyter notebook happen due import cache defined class function working file restart jupyter kernel error disappear make logic clear important problem appear reference become dead loop want change logic put import statement cause importerror position file example end get import error importerror import name a1 change position test.b import b2 want circular dependency solve problem use import module class function need use approach fix circular dependency a.py b.py get error different reason main script window line ending my_sub_module unix line ending change fix problem need character encoding mention cause circular dependency mention use python type module import class use annotate type use forward reference type hint contain name define definition express string literal resolve remove dependency import note remove import statement problem clear circular dependency name entity physics module import whole module class name load watch example compile slight change solve compile try solution rename work python script name current python script name module import get error example fail importerror thing refer medicaltorch rename working python script import file1.py file2.py use variables file1.py import file2.py name equal main want import file1.py file2.py need use file1.py case doubt make assert statement determine way track import error step step try run python import file track bad one get importerror import name launch importerror import name b launch importerror import name c non exist module error relevant op fail restart pycharm python console add new object module great way confuse importerror import name confuse part pycharm autocomplete import console import see stupid make sure import correct variable function get error importerror import name implicit_wait variable change import use correct name get error ️ asker error show class name import match definition file import case miss filename file meet error case common throw error case encounter error jupyter notebook write import c python file c class m.py reason error create minute jupyter notebook run long time restart jupyter notebook let reload m.py
python way find concatenate list list.extend modifie first list concatenation function return result modify argument list1 list2 give new list concatenation list1 list2 simple method use operator return concatenation list concat = first_list second_list disadvantage method memory use large list depend go use create itertools.chain good bet create generator item combine list advantage new list need create use c concatenation list list large efficiency concern method itertools module handy know note example use item need reinitialise reuse course list(c create full list create new list memory concatenated_list list_1 list_2 use sum give start argument work general operator notable exception string create new list result add list list mutable sequence guess make sense modify original list extend append list concatenate save time intermediate list create nice variable number list flatten args know write list1 list2 calling add method list1 return new list way deal myobject list1 add add method personal class
need way get dictionary value key exist return none python raise keyerror exception search key exist know check key look explicit way return none key exist use dict.get return none key d. provide different default value return none wonder build language use dict.get return value key key dictionary else default default give default none method raise keyerror use get method dict class result r none key find dictionary get function return second argument want transparent solution subclass dict get behavior use defaultdict situation supply factory method take argument create value see new key useful want return empty list new key see example other say use get check key line solution useful try add dictionary value new list want provide default use dict object get method other suggest depend able use try suite consider pythonic approach handling case use dict.get technique nest dictionary check level dictionary extend dict class set default return value empty dictionary level example warn note technique work expect key value dictionary key what_level exist dictionary value string integer raise attributeerror throw possible python2 python3 answer base end python3 objective simple check json response dictionary format give error dictionary call token key looking error look key error setting value none checking value none procee code else statement handle key error use try block complex requirement equate cache class come handy constructor take function call key return value dictionary value store retrieve dictionary next time use d1={"one":1,"two":2,"three":3 d1.get("four run code keyerror mean use dict.get avoid error execute code false hasattr build funtion
read several csv file directory pandas concatenate big dataframe able figure guess need help loop see pandas tool available .read method try follow code csv file column add header=0 read csv file first row assign column name attribution comment sid alternative darindacoder answer answer complex glob pattern match rely additional third party librarie line use pandas python version build specific thing want change pd.read_csv header make separate function call map pandas line set df utilize thing import csv file make list name dask library read dataframe multiple file source https://examples.dask.org/dataframes/01-data-access.html#read-csv-file dask dataframe implement subset pandas dataframe api data fit memory call df.compute convert dataframe pandas dataframe google way gaurav singh answer late find fast manipulation use numpy assign dataframe manipulate dataframe iterative basis seem work solution want hit page consider approach want attach huge piece code comment make readable leverage numpy speed dataframe concatenation timing statistic liner use map specify additional argument note map let supply additional argument want search python follow note last line express single line find documentation use iglobinstead glob return iterator list edit multiplatform recursive function wrap multiplatform function linux windows mac function inspire mrfun answer note default list file generate glob.glob sort hand many scenario require sorted want analyze number sensor frame drop timestamp command ignore_index true specified reserve original index dataframe individual csv file list main dataframe look ignore_index true look helpful create histogram number frame drop minute duration bin want base calculation first timestamp df['timestamp'][0 ignore_index true df['timestamp'][0 generate series contain first timestamp individual dataframe give value liner list comprehension allow use argument read_csv multiple csv file zip use zipfile read concatenate alternative use pathlib library prefer method avoid iterative use pandas concat()/appe pandas documentation worth note concat append make full copy datum reuse function create significant performance hit need use operation several dataset use list comprehension base sid good answer concatenate load csv file intermediate dictionary give access datum set base file name form dict_of_df['filename.csv dictionary help identify issue heterogeneous datum format column name align example import module locate file path note ordereddict necessary keep order file useful analysis key file name f value data frame content csv file use f dictionary key use os.path.basename(f os.path method reduce size key dictionary small part relevant nr fnr represent number line process fnr current line file nr include first line first file header fnr > skip first line subsequent file case unnamed column issue use code merge multiple csv file axis way consider use convtool library provide lot datum processing primitive generate simple code hood suppose pandas polar concat csv file reuse code course want obtain dataframe write concatenate file take pandas need zip column write use colaboratory google drive
want fill string space know follow work want course measure string length str+ leftover like short way fillchar return string leave justified string length width padding do use specify fillchar default space original string return width less len(s flexible method work format complicated string use string format mini language use f string str.format method new(ish string format method let fun stuff nest keyword argument simple case pass variable want pass variable whole kit kaboodle result guess use python f string course result try correct way use python format syntax describe official documentation case 10}'.format('hi output explanation know ^. update python convenient literal string interpolation use str.ljust consider string.zfill str.ljust str.center string format chain fill character specify stre format operation advantage work python v3 take look pydoc str sometime wealth good stuff python literal string interpolation padding size variable thank @matt m. use f string literal interpolation variable space constant space want space specify begin center string use python mini format string leave align pad character character remove add space pythonic use slice example pad string space right character long pad space leave character require know long want pad course require measure length string start nice trick use place various print format pad space pad lead zero leave use list comprehension give idea number space liner
python use traceback module way determine function name function say module foo function bar execute foo.bar way bar know bar name foo.bar name output python feature access function name function propose want play stack use bar bar.__name depend context give rejection notice pep reject implement precise semantic edge case enough important use case give response good way get result note inspect.stack call thousand time slow alternative update original post write want similar thing put function name log string go number place code good way way get name current function get name define use approach @andreas jung show name function call distinction important say keep handy utility nearby usage guess inspect good way example find wrapper write function name print my_funky_name stub derive answer question take likely advantage version use thousand time see alex melihoff post timing regard use use inspect.stack print(inspect.stack()[0].function seem work python sure people make complicated future proof approach combine @camhart @yuval suggestion @roshoxymoron accept answer benefit avoiding think play nice future python version test update test code output ' m foo daddy ' m bar daddy foo bar daddy test output use name attribute access function name function use name attribute ' come question several time look way correct answer contain python documentation see callable type section function name parameter return name qualname parameter return full name include class belong see qualified name easy accomplish decorator use decorator suggest rely stack element use code different contexts python interpreter instance stack change break index suggest approach use call super safety multiple inheritance scenario put code sample usage testing output @with_name decorate method access self.__fname current function name try use answer access docstre function context function question return name string work find simple solution want refer function get string represent name apply eval string function name sincesys._getframe().f_back.f_code.co_name work python following use result idea use decorator avoid touch function argument provide alternative need save restore name call function consequence global variable call f produce alternative global variable change function argument reference variable create context function generate code look global variable seem answer use inspect library write return inspect.stack()[0 namedtuple form call name inspect.stack()[0].function small dummy example see run print @jeff laughlin answer beautiful modify achieve think intent trace execution function capture list argument keyword argument thank @jeff laughlin wrapper function executing function name thank argument thank keyword argument username @jeff laughlin wrapper function function thank 0x7f13e6ceaa60 inner function thank @jeff laughlin teach concept closure decorator wrapper function execution thank take second wrapper function executing function name thank argument thank keyword argument username stackoverflow wrapper function function thank 0x7f13e6ceaa60 inner function thank stackoverflow teach concept closure decorator wrapper function execution thank take second function thank surprising way intercept function runtime inspect take action base surprising thing memory address inner function time know way go understand decorator closure magic
print python exception message log file logging.error possible print detailed information exception code generate exception string thing line number stack trace great logger.exception output stack trace error message example output @paulo cheque note aware python call logging.exception method part call method arbitrary place get bizarre exception docs alert use option allow choose error level use exception error level nice thing logging.exception siggyf answer show pass arbitrary message logging show full traceback exception detail default recent version log behaviour printing error look quote application log way use log module traceback use use python use python log stack trace exception second optional keyword argument stack_info default false true stack information add log message include actual logging call note stack information display specify former stack frames bottom stack log call current thread latter information stack frame unwound follow exception search exception handler example use plain log log record correspond rule record line follow rule use grep tool process log file traceback information multi line answer extend version solution propose zangw thread problem traceback line \n need extra work rid line ending analyze log copy paste require traceback line log file profit answer build excellent one application call logging.exception(e define custom logger specific application module case use logger call exception(e debug information mean value present exception raise logging.exception help need tool log variable value traceback line box get log look pypi tool name give pretty crash message find pypi little bit decorator treatment inspire monad lift remove python type annotation use old message format style demo modify solution return bit meaningful none part make solution generic specify return value fallible argument log module(if custom module enable stack_info look code example work python see function definition extract entire stack trace exception course function entire gist link particular extract_all_sentry_frames_from_exception frame_tran exception info extraction total less line hope help approach create context manager log raise exception pass logger name logg instance logerror default use base logger pass none logging.getlogg add switch raise error log wrap function custom design logger cope extra dependency use log error return entire traceback time file stream clean way use format_exc parse output get relevant part regard
instal library use command install github repository work fine want dependency ' look ticket solve problem put file pip install result follow output documentation requirement file mention link use git+git protocol support solution problem requirements.txt file look specify github need package name== convention example update package use github text denote specific package note egg package comment state package name blog post discussion topic editable package syntax use requirements.txt import package variety vcs git hg bzr svn possible point particular commit allow follow way specify dependency package git repository pip 7.0:1 github mean notice omit extra answer get confused flag answer clarification --editable flag mean package instal venv someproject bury venv path>/lib pythonx.x site package someproject place in.2 documentation install git+git git+https way know example instal kronok branch brabeion project second use pip freeze get right thing requirements.txt case get third test result pip release jan changelog pr specify subdirectory git repo contain module syntax look note pip module author want publish module top level feature helpful pre exist repos contain python module subdirectory force install publish pypi github zip endpoint opinion preferable use git protocol advantage want entry look prefix install main branch equivalent .zip endpoint report comment use endpoint avoid problem unicode package name none answer work thing work e double git previous install necessary seem valid format pip install look instal run pip freeze see package describe format copy paste ' find tricky get pip3 instal ubuntu package manager install thing tell install post answer save time run problem put file fail fail mean download code git end instal original version code find pypi code repo branch instal commmit branch name work private repository find work fine refer main branch replace branch name information use recent github api see git instal available achieve allow flexibility append @commit hash approach clone local temp folder take noticeable amount time use url
set current work directory python try os.chdir change current work directory path availability unix window look set work directory work mac check work directory people use pandas package follow syntax use import file python cli
suppose df column define function f lambda x my_function_expression want apply f df column col_1 element wise calculate new column col_3 add detail sample clean line way pandas allow f user define function multiple input value use safe column name unsafe numeric index access column example datum base original question output print(df column name contain space share name exist dataframe attribute index square brackets example use apply dataframe calling axis = note difference try pass value function f rewrite function accept pandas series object index series get value need depend use case helpful create pandas group object use apply group simple solution interesting question answer output change column name i d j1,j2,j3 ensure j1 j2 j3 column display right sequence brief version method look series.combine seem take datatype example test answer call throw error good guess seem expect result type series call method df.col_1 follow work return list apply dangerous operation result object guarantee series dataframe exception raised certain case let walk simple example possible outcome return list apply length return list equal number column series list return length return list equal number column return column get corresponding value list length return list equal number column row row list different number element number column valueerror raise apply possible get well performance large dataset basic iterative method create large dataframe @thomas answer go put vote np.vectorize allow shoot number column deal dataframe function great function control send column constant function foo ' m sure fast solution use pandas numpy operation want rewrite function use map use original example datum pass many argument want function way output want fast solution time fast df.apply(f axis=1 @aman time fast df['col_3 df.apply(lambda x @ajrwhite add benchmark result short use apply slow speed thing use function operate pandas series well numpy array operate pandas series numpy array able vectorize operation function return pandas series numpy array assign new column benchmark code output final note thing optimze cython numba trick write f need input look error message say provide input f error message correct mismatch df[['col1','col2 return single dataframe column separate column need change f take single input keep data frame input break inside function body return single value need function signature syntax f need take single thing dataframe thing current f expect provide body f help detail provide way change code use method apply option df.itertuple recommend df.iterrow docs user testing itertuple return iterable namedtuple access tuple element attribute column name dot notation index example question suppose want change get_sublist function want use dataframe apply method job get result write help function get_sublist_list unlist function name suggest get list sublist second extract sublist list need call apply function apply function df[['col_1','col_2 dataframe use enclose get_sublist function get_sublist_list function return plain list raise valueerror broadcast input array shape shape @te petrou mention huge datum set use easy faster(execution time way use swifter do simple way let say want sum col1 col2 output column name col_sum method use complex function apply dataframe method use output multiple column require
way tell string represent integer e.g. asfasfas use try mechanism positive integer use .isdigit work negative integer suppose try follow work format similar int casting sense edit annoyed use try except place write helper function go way code cover string python consider integer say pythonic know find test try perform reason try several way thing think find method use try perform test fact seem method come bad case many case know lot people say pythonic way area part way performant elegant tend use error trapping reporting go gripe php perl ruby freak shell simple function testing string integer hood due diligence verifying assumption trip lack common sickness quick dirty edit bruno post performance comparison result method do c method scan string right thing think edit update code work python include check_int function vote answer use current popular regex find test integer hood regex reject string abc ' add abc test value interesting note point none function test include try method popular check_int function popular regex testing integer hood return correct answer test value depend think correct answer see test result build int function truncate fractional part float point number return integer part decimal float point number convert string check_int function return false value integer return true value current python test result try add function perform check_int return true value +1.0 return true pick poison guess trick examples edit @buzzmoschetti point way fail number e.g -23 case less use re.sub(regex_search regex_replace content apply example use regular expression accept decimal fraction improve performance compile regular expression use proper regex solution combine idea greg hewgill nowell use global variable accomplish attach attribute method know frown put import method go lazy module effect http://peak.telecommunity.com/devcenter/importing#lazy-import edit favorite technique use method string object adventurous member class output function time b mild irrational aversion use try pattern use accommodate negative number strip sign leave side check result comprise digit pass str sure input string edge case fall work possible input exclude ok line check return false x integer true x integer want behavior model int build use try know pythonic line clear code mean say interpreter ignore lead sign number lead sign change result integer int(--1 interpret -(-1 int(---1 interpret -(-(-1 number lead sign give positive integer odd number sign give negative integer result integer greg hewgill approach miss component lead match start string compile approach allow avoid try exept interested try avoid try think rewrite s[1 create new string well solution easy way use use method check like shavais post add test case build isdigit function beat time rest use normal python test case add isint_loop pass exact test case accept unsigned integer think people clever modifying string implementation isint_loop oppose build isdigit function include slight difference execution time method beat lot handle extra stuff find interesting note regex isint_re2 method beat string comparison test perform shavais regex library improve straightforward pythonic way approach opinion see solution regex regex function parse raise error handle obvious case return none failure handle -/+ sign default cpython test result need use accept low ascii digit test python u.isdecimal u.isascii python u.isdecimal u str(int(u answer suggest use .isdecimal include upper unicode character u'\u0662 precondition short answer use follow code simple correct many variant thread outperform try regex variant answer test main variant try re.match string operation see third variant try re.match regex variant slow see test script output possibility use int raise exception string represent number work kind stre float accept positive negative engineering notation suggest follow doc evaluate expression node string contain python literal container display string node provide consist follow python literal structure string byte number tuple list dict set boolean none note raise valueerror exception call constitute python literal question ask solution try kobayashi maru type solution cast value string check integer check string first character value rest string isdigit check isdigit test a2kk78 -8.5 +88751.71 +7 check result understand want check string convertability int p.s modify def checking string convertability float add replace check existance use value.count guess question relate speed try time penalty create list string fail string numeric string work unicode string np.core.defchararray.isnumeric(u'+12 return array good solution thousand conversion miss data non numeric data seem numpy solution try work put string number forget put number check part function check string number str.isdigit example call a.isdigit return true
try streamline class introduce functionality style flyweight design pattern bit confused init call new expect tell happen implement functionality put implementation new feel example output use new need control creation new instance use init need control initialization new instance new first step instance creation call first responsible return new instance class contrast init return responsible initialize instance create general need override new subclasse immutable type str int unicode tuple april post use new init mail.python.org consider do factory good way use new good clean solution consider usage factory good example activestate fᴀᴄᴛᴏʀʏ ᴘᴀᴛᴛᴇʀɴ recipe new static class method init instance method new create instance first init initialize note init take self parameter create instance self gather try implement singleton pattern python way python use class decorator know oo language expression someclass(arg1 allocate new instance initialise instance attribute return know oo language initialise instance attribute part customise class define constructor block code operate new instance use argument provide constructor expression set initial condition desire python correspond class init method python new similar class customisation allocate new instance part course allow unusual thing return exist instance allocate new python think part involve allocation require new come suitable instance be half job way python system run half job init want behavior say refactor need new need new init behave initialise object want python allow redefine job someclass(arg1 arg2 call new follow init need create metaclass define call method metaclass class class class call method control happen call instances class metaclass call method control happen call class allow redefine instance creation mechanism start finish level implement non standard instance creation process singleton pattern fact less line code implement singleton metaclass require futz new turn normal class singleton add metaclass = singleton deep magic warrant situation documentation typical implementation create new instance class invoke superclass new method use super(currentclass cls).__new__(cls appropriate argument modifying create instance necessary return new return instance cls new instance init method invoke new intend allow subclass immutable type int str tuple customize instance creation realize question old similar issue follow wanted used page resource http://infohost.nmt.edu/tcc/help/pubs/python/web/new-new-method.html new return instance class init run return object use new prevent init run return create object new double triple initialized init generic approach singleton pattern extend vartec answer fix full story approach fact involve new use classmethod pay attention approach need decorate method @classmethod use real instance myclass think simple answer question new return value type class init function execute case code return a._dict('key class cls init execute output nb side effect m._dict property become accessible take care update @antonyhatchkin answer want separate dictionary instance class metatype mean init method metaclass initialize class object dictionary make global class go update original code init method change syntax python notation arg call super metaclass class argument attribute way important point class initializer call method execute new init key find much cleaner use new require mark object want skip default init step new return new blank instance class init call initialise instance call init new case new call code call new keep track init call particular instance unusual add attribute object init function indicate initialise check existence attribute first thing init proceed refer doc subclasse immutable build type number string situation static method new come handy new first step instance construction invoke init new method call class first argument responsibility return new instance class compare init init call instance first argument return responsibility initialize instance situation new instance create call init example instance load pickle way create new instance call new case get call base class new regard wish achieve doc info singleton pattern use implementation pep use decorator look init simple constructor traditional oo language example familiar c++ constructor pass pointer instance case variable inspect byte code generate java notice call call new method next call init method actual call user define constructor step process enable creation actual instance call constructor method class method instance case python new add facility accessible user java provide flexibility due type nature language provide facility implementor new many thing method return instance include create new instance unrelated object case approach work immutable type case python dig little deep type generic class cpython type base class object define base class metaclass sequence low level call find first method call type_call call tp_new tp_init interesting part tp_new call object base class new method object_new tp_alloc pytype_genericalloc allocate memory object point object create memory init method call init implement class object_init call type_call return object bind variable bit confused init call new think c++ analogy useful new allocate memory object instance variable object need memory hold step new init initialize internal variable object specific value default get problem reason avoid decorator factory metaclasse try online init call new override subclass add code call try subclass class new unaware start adapt init forward call subclass init convention call init new help work expect init need allow parameter superclass new need fail create clear runtime error new allow args kw make clear extension bad form new init class level inheritance behavior original poster describe bit confused init call new much reason do way new responsibility initialize class method call possibly-- know sure expect tell happen implement functionality put implementation new feel hacky init initialize write new metaclass new call call init new instance return new simple reason new use create instance init use initialize instance initialize instance create first new call init first new call create instance class init call initialize instance call create new instance class cls new invoke object construction return instance cls new instance init method invoke call instance create new new init work construct object new create init customize
' m new python try understand package work egg sort packaging mechanism quick overview role play information 're useful create note egg packaging supersede wheel packaging concept .jar file java file metadata file rename .egg distribute code bundle internal structure python eggs python egg logical structure embody release specific version python project comprise code resource metadata multiple format use encode python egg other develop key principle python egg discoverable importable possible python application find egg present system ensure desire egg content importable .egg format suited distribution easy uninstallation upgrade code project self contain single directory file unmingled project code resource make possible multiple version project instal individual program select version wish use .egg file distribution format python package alternative source code distribution window exe note pure python .egg file cross platform .egg file file change extension zip see folder archive .egg file install package use easy_install example create .egg file directory say mymath several python script follow step terminal generate lot output complete see new folder build dist mymath.egg info folder care dist folder find .egg file mymath-0.1-py3.5.egg default python installation version number(mine source python library blog disclaimer egg abandon format python package tool egg exist egg python package zip archive contain python source file compile library format specify contain make package different version python different operating system reason replace format appear use mid 2010s replace wheel pip install egg instal command command remove setuptool v58.3 year use egg see mention egg stack overflow answer tutorial obsolete answer depth history python packaging go pip wheel egg much egg single file importable distribution format python relate project quick guide python egg note egg python jar java egg rich jar hold interesting metadata licensing detail release dependency
try convert list tuple solution google offer follow code code result error message run typeerror tuple object callable fix problem work use tuple list special name variable name cause problem expand eumiro comment tuple(l convert list l tuple redefine tuple tuple type tuple get typeerror tuple callable recover original definition tuple quit restarting interpreter thank add alternative tuple(l python = short bit suffer readability unpack list l tuple literal create due presence single comma p.s error receive due mask name tuple i.e assign name tuple e.g tuple = use del tuple good go do problem use tuple variable hold tuple early tuple object type tuple type callable use build type variable name name use arbitrary name variable find many answer date answer add new stack answer python infinite way instance normal way smart way remember tuple immutable use store valuable example password key hash store tuple dictionary knife need use sword cut apple make program efficient l list want convert tuple l = tuple(l invoke tuple convert list l tuple do go access item tuple use square bracket l[0
learn work playing python year half biologist make turn bio informatics language core major contribution make lab fall love way python permit express beautiful solution semantic language allow natural flow thought workable code know answer kind question see forum question seem central path python improvement wonder next step let sum want ask first want know opinion step recommend python journeyman apprenticeship guru status feel free stop expertise dictate order become well python coder step time people seem worthy worship python prowess enlighten kind answer enjoy feel free surprise readership format care know opinion pay attention various stage order progress due effort course come specific field expertise discuss path see appropriate field edit thank great input ' m python improvement track appreciate think process python mastery go good way python knowledge dig source code librarie platform framework use example build site django many question stump answer look django implement feature question way continue pick new idiom code style python trick good bad see pythony understand source hop python irc channel find plenty language lawyer happy explain accumulation little clarification year lead deep understanding language in out understand python data type role regard memory mgmt community aware teach python course popular one comprehensive intro+intermediate course advanced course introduce variety area application development ask question similar take intro advanced course program python year think intro simple jump advanced course recommend answer question probe see strong area good way measure ready advanced course see basic knowledge python object memory model cause many python bug write beginner go point simple part quiz question many time able get output difficult important response weigh output answer get credit get python experience steer people comprehensive intro+intermediate course spend lecture object memory management point able answer output sufficient confidence know python syntax year make ready move beginner label well understanding python work cover succeed inquiry require similar answer tough example next topic recommend understanding reference counting learning intern mean use learn shallow deep copy example interrelationship various type construct language list tuple dict set list comprehension generator expression iterator generator suggestion post time hope help ps agree response get intimate introspection study project source code add strong +1 suggestion pps great question wish smart beginning ask long time try help other many year full time python programming check peter norvig essay become master programmer year http://norvig.com/21-days.html wager hold true language understand introspection thing give simple effective piece advice think give code use language imply understand code code inspired ask question find answer get hour spare write code reverse string find optimum solution free evening try web scrape read people code see thing ask ' m bored computer open code storm jot idea sound interesting challenge url shortener sure learnt convert number base side effect valid skill level stop learn code spare time little additional effort come understand language become guru build knowledge reusable code memorise idiom use python science seem part learn understand scientific library know use right library vectorize code essential scientific computing want add handle large numeric dataset common pythonic ways(object orient approach list iterator inefficient scientific compute necessary structure code way differ conventional python coder approach data google release online python class class course study answer full question think great place start download twist look source code employ advanced technique understand data type structure type structure write series demo program exercise aspect type datum structure worthwhile blog note useful lot people learn python first summer tutorial python site seem able find post link python teach first year course university summer follow practice pythonchallenge problem google code jam solve problem help algorithmic perspective perspective learning python manipulate get full python similar reason hear code golf work try get guru hood start try work project euler problem tax decent high school mathematic know google solve get forum look people solution teach decent post solution idea encourage people work force work python unforgive use brute force algorithm lay large dataset memory access fast language feature dictionary learn relevant bioinformatic learn oop feature python experience see book bioinformatic programming use python look exact member focus group lot reading material handle recommend learn evolution python read python enhancement proposal finish pep defer abandon withdraw reject pep see language change decision make rationale absorb philosophy python understand idiomatic python come http://www.python.org/dev/peps/ attempt http://challenge.greplin.com/ use python teach start learn python great way get idea clear get lot neat question student think conceptual thing python ask think good advice learn language matter much language idea convention learn learn difference language different try functional language haskell see benefit challenge function free side effect see apply thing learn language python recommend start force explore expressive power syntax python allow many different way write functionality single elegant fast approach use idiom language find accept well way spend weekend trudge first project euler problem make simple webapp django google app engine take apprentice novice continue make advanced webapps solve advanced project euler problem month go solve pe problem scratch hour weekend
documentation argparse python module excellent ' m sure tiny beginner brain grasp need math command line meddle format line screen change option character want arg b none show help quit way argparse multiple args args dictionary contain argument case add argument understand original question fold first term possible argparse example ' m surprised see dead simple overhead little power start positional argument require leave invoke program get error miss argument lead second part original question matt wilkie seem want single optional argument name label --option label suggestion modify code follow elegant solution work minimalist argparse documentation good leave useful detail obvious @diego navarro mention try expand answer basic usage follow object get parse_arg namespace object object member variable name command line argument namespace object access argument value associate note argparse replace argument name underscore naming variable many situation wish use argument flag take value add argparse create variable name foo value true no_foo value false note use required option add argument way omit argument command line argparse tell miss stop execution script note possible create dict structure argument use var function make life easy see var return dict argument name key value value lot option thing cover essential common usage scenario matt ask positional parameter argparse agree python documentation lack aspect single complete example odd page show parse use positional parameter none answer show complete example positional parameter complete example thing throw argparse convert name argument bar foo_bar positional parameter name foo bar stay foo bar make obvious use program notice line end example work get value foo bar positional param first wrong arithmetic expression bar second work want use foo bar attribute use getattr see last line example crazy try use d foo_bar change property name easy access get bizarre error message example run summary introduction inspire post argument define combination follow common option note argparse tutorial python howtos start basic example progress basic one example predefine choice option ask come learn project thank demo code evolve available online command-line.py script give code workout command-line-demo.sh code file argparsedemo.py code usage run command line output note use plac wrapper argparse bonus generate neat help instruction see argument supply example.py unexpected argument supply example.py c correct argument supply full help menu generate name argument equal parameter name arg tuple annotation arg parameter follow mean learn use plac check great documentation plac parse command line easy way add other state use d parameter specify variable name use globals().update put variable global namespace usage code go example answer way address need list scenario need help hope explain idea develop tool getting file process need optional configuration file use configure tool need follow solution code show solution multiple enhancement show idea list input mandatory input second argument get help command tool find follow outcome execute follow outcome config file optional remove argument outcome mean problem tool make optional modify program follow help outcome execute program outcome argument outcome change flag name --config_file keep variable name modify code include dest='config_file follow command add support debug mode flag need add flag argument support boolean debug flag implement add follow tool command outcome new combine python powershell use template inspire depth great command line argument python lot init_argparse cover simple scenario simple way use argparse amend --help switch display personal code help instruction set default help false add many additional .add_argument run python output clarify wheather argument b positional optional make mix positional argument require default give throw argument give case optional argument go name program take number return square default cube option use return cube usage optional argument take value want use flag use -s square cube change behaviour add action = change true use conditional block change usage addition exist answer lazy enough possible use code generation tool call protoargs generate argument parser configuration python use argparse configuration optional b configuration require b configuration positional b run use possible example want change configuration regenerate parser use update parser.config upd mention rule specify project code run result original request use argv solve use argparse simple answer p.s write document argparse foolish python code run code
able find understandable explanation use python itertools.groupby function try ' review documentation ' ve trouble try apply simple list number use itertools.groupby technique use pointer good prerequisite reading appreciate important note sort datum first part get example construction k current group key g iterator use iterate group define group key word groupby iterator return iterator example use clear variable name give output bear animal duck animal cactus plant speed boat vehicle school bus vehicle example thing list tuple first item tuple group second item belong groupby function take argument datum group function group lambda x x[0 tell groupby use first item tuple group key statement groupby return key group iterator pair unique key use return iterator iterate individual item group different example datum use list comprehension give output animal bear duck plant cactus vehicle speed boat school bus itertools.groupby tool group item doc glean k k g groupby('aaaabbbccdaabbb b c list(g k g aaaa bbb cc groupby object yield key group pair group generator feature comparison use note several latter example derive víctor terrón pycon talk spanish kung fu dawn itertool see groupby source code write c. function item pass compare influence result object key function include sort max min response example python doc straightforward case datum list nod keyfunc logic criterion function go groupby group datum careful sort datum criterion call groupby work groupby method iterate list key change create new group neato trick groupby run length encode line give list tuple first element char 2nd number repetition edit note separate itertools.groupby sql group semantic itertool general sort iterator advance group key merge example result note igroup iterator sub iterator documentation call useful chunk generator example groupby key sort follow example item xx group value yy case set zero output follow set one follow set zero produce warning syntax list(groupby work way intend seem destroy internal iterator object use produce list(groupby try k list(g k g groupby use syntax get access groupby functionality avoid pesky small datum iterator give example groupby work adapt example james sulak output group vehicule expect group @captsolo try example work output see e get separate group realize need sort list pass groupby function correct usage output remember list sort groupby function work sort groupby use python itertools.groupby use groupby group thing iterate give groupby iterable optional key function callable check item come iterable return iterator give tuple result key callable actual item iterable help example groupby use coroutine group count use key callable case coroutine.send spit count many iteration group sub iterator element print basic implementation help understand function hope help other n’t think advisable use itertools.groupby hard use ’s handful line write work expect use get useful example come helpful sample input sample output code show groupby use group list base lambda function key supply problem output merge resolve use dictionary example apply groupby result dictionary use show follow result iterate
function analyze csv file pandas produce dict summary information want return result response flask view return json response flask view return dict flask call jsonify flask version less return different json serializable object import use jsonify jsonify serialize datum pass json want serialize datum jsonify building response mimetype='application json pass keyword argument flask.jsonify output json object pass jsonify(d want use jsonify reason call flask.json.dumps create json data return response application json content type flask.json distinct build json module use fast simplejson module available enable various integration flask app return json response set status code use make_response inspiration take comment flask issue tracker version flask view return dict turn json response want analyze file upload user flask quickstart show get file user access get file pass summary function replace datum key request.file name file input html form flask 1.1.x support return json dict call jsonify want return dict need call jsonify equivalent see pull request add https://github.com/pallets/flask/pull/3111 use decorator return result jsonfiy think readable view multiple return support return tuple content status handle return error status flask jsonfiy allow return array pass list keyword argument flask return dictionary convert json make_summary return dictionary ask include status code close duplicate answer question include status code return tuple form dict int dict convert json int http status code input status default example code example change check status code use answer use flask class base view dict flask return version serialize object use jsonify flask module jsonify object dictionary get serialized default deal file use way
consider follow python code use get script file directory location run script command line give correct path run script run code django view print get path script script run django view update sum answer give current work directory directory script reside web host setup file give filename path way python able receive path script reside need call file file filename path get dir path try sys.path[0 python doc initialize program startup first item list path[0 directory contain script use invoke python interpreter script directory available interpreter invoke script read standard input path[0 empty string direct python search module current directory first notice script directory insert entry insert result pythonpath source https://docs.python.org/library/sys.html#sys.path use aiham point comment define function module use different script code set dn name directory contain execute script code set fn script_dir vcb.init platform independent manner open file reading execute script note execute script ambiguous whole program consist script execute script sys.path[0 solution work fine app consist script import package p call script b execute need get directory contain want os.path.realpath(__file solution file give name execute top stack script x.py give path info os.path.realpath call real work use work find stackoverflow question end work import script interpreter execute script old thread ' ve problem try save file current directory script run python script cron job getcwd lot path come home directory get absolute path script use directory os.path.abspath(os.path.dirname(__file try
' m sure flask specific run app dev mode http://localhost:5000 access machine network host ip]:5000 rail dev mode example work fine find doc regard flask dev server configuration idea configure enable possible use flask dev server production flask dev server design secure stable efficient see doc deploy correct solution option flask run host parameter control address development server listen default run localhost change flask run run machine ip address 0.0.0.0 special value use browser need navigate actual ip address machine network need adjust firewall allow external access port flask quickstart doc explain visible server section run server notice server accessible computer network default debug mode user application execute arbitrary python code computer debugger disabled trust user network make server available add command line tell operating system listen public ips use flask executable start server use flask run change default open non local connection run server notice server accessible computer network default debug mode user application execute arbitrary python code computer debugger disabled trust user network make server available add command line tell operating system listen public ips reference https://flask.palletsprojects.com/quickstart/ method work boring stuff battle lot get app accessible devices(laptops mobile phone local server try method luck try change port work try bunch different combination arrive solved problem deploy app local server step note step perform machine serve app machine accessing note ipv4 address change disconnect reconnect network run flask app acquire ipv4 address flask run case see image run flask run mobile device optional stuff perform procedure window use power shell cli able access website try ctrl c command shell run app power shell freeze need pinch revive terminate server trick give thumb find helpful 😉 optional stuff create short powershell script get ip address save file .ps1 extension powershell run start app save project folder run note save shellcode getip.ps1 cool add host='0.0.0.0 get oserror winerror attempt make access socket way forbid access permission window permission use port use find netstat cool app configuration load external file follow example forget update corresponding config file host="0.0.0.0 check particular port open server serve client ubuntu linux distro configure application handle remote request trouble access flask server deploy use pycharm take follow account pycharm run main .py file code name main execute change app.run(host='0.0.0.0 take effect configure flask server use run configuration particular placing additional option field configure flask server pycharm set host expose network face ip address port environment variable see get available command option set environment variable go project path cmd(command prompt execute follow set flask_app abc.py set flask_env = development flask run yourip follow p access flask machine use url follow answer modify bit create file .flaskenv project root directory parameter file virtual environment activate pip install python dotenv package go use .flaskenv file declaration import terminal session flask run problem use pycharm editor create project pycharm create flask server create server python follow way create new server flask python hope help answer relate flask applicable connect service host issue today run flask app usual notice connect server run netstat |||| grep port local address 0.0.0.0 try know allow connection local host use telnet host port result connect odd thought check tcpdump port port notice check iptable output section see several rule rule forbid output tcp vital packet handshake delete problem go work place end app.py main file go project path set flask_app abc.py set flask_env = development flask run yourip follow p serve flask app lazy loading environment development debug mode restarting stat debugg active debugger pin run press ctrl+c quit none solution work add http:// begin url chrome distinguish ip address]:5000 search query work stop connect change hypothesis browser prepend fix case case need test app external network serve whole internet deploy dev server time save lot time ' relate company make sure change port flask app app.run(host='0.0.0.0 port=80
seem python support many different command stop script choice find quit exit sys.exit os._exit miss difference use let give information quit raise systemexit exception print give message functionality include help people know python likely thing try exit python typing quit quit use production code work site module load function use interpreter exit alias quit vice exist make python user friendly give message print quit exit consider bad use production code reserve use interpreter rely site module sys.exit raise systemexit exception mean quit exit respect sys.exit consider good use production code sys module os._exit exit program call cleanup handler flush stdio buffer standard way exit use special case common child process(es create note method give unique sum method exit program consider bad use production code last non standard dirty way use special scenario want exit program go third method sys.exit well opinion sys.exit scene run way need import sys choice style function quit exit sys.exit function way raise systemexit exception real difference sys.exit available exit quit available site module import docs os._exit function special exit call cleanup function flush buffer example design specialized use case child call use exit quit use sys.exit script raise systemexit prefer use os._exit child process exit call call argument specify exit status raise exit status note portable program limit exit status code range raise systemexit(256 many system get truncate process exit status quit exit callable instance object think okay call function os._exit exit(0 exit(1 sys.exit quit thing think leave recommend use quit exit use sys.exit os._exit use big file use python control terminal use exit quit sys.exit canonical way exit sys.exit raise systemexit call sys.exitis idiomatic raising systemexit os.exit low level system call exit call cleanup handler quit exit exist provide easy way python prompt new user user enter python prompt want know right syntax try type exit quit exit interpreter least issue message tell way hack utilize fact interpreter print repr expression enter prompt
want change a.txt b.kml use os.rename usage file directory case specify path python use pathlib module solve happen old version use backporte version find let assume root path add bit difficulty want rename provide full path take path create path object provide information object extract thing example reason want rename file modifying filename the_file the_file_1 get filename part hold extension hand perform modification simple string manipulation python great make use f string perform rename call rename method path object create appending ext complete proper rename structure want showcase simplicity python + version less python use string format method work rename move file os.rename(old new find python docs use os.rename pass full path file function file a.txt desktop give full rename file python version preferred use os.rename fileexistserror raise destination file exist see documentation important point note check file exist new filename suppose b.kml file exist rename file filename lead deletion exist b.kml use pathlib library path.rename os.rename example use pathlib touch os change name file directory base string replace operation use stre concatenation python change first letter filename directory use window want rename 1000 file folder use code python3 os.rename(src src folder2 use os.system invoke terminal accomplish task
split sentence store word list example give string word get list word give string sentence store word list call word split string text consecutive run whitespace split string text custom delimiter word variable list contain word text split delimiter use str.split return list word string use sep delimiter sep specify none different splitting algorithm apply run consecutive whitespace regard single separator result contain empty string start end string lead trail whitespace depend plan sentence list want look natural language take kit deal text processing evaluation use solve problem add benefit splitting punctuation example allow filter punctuation want use word note solution use string.split plan complex manipulation sentence edit algorithm split text whitespace trim punctuation remove punctuation edge word harm apostrophe word want python function split sentence input store word list str().split method take string split list want char word sentence list shlex .split function differ str.split preserve quote treat quote phrase single word nb work unix command line string work natural language processing split word harm apostrophe word find input_1 input_2 moore law
give list xs number inclusive number condition reason get error list comprehension perform keep mind follow equivalent expression different format think switch subject verb order sentence code x+1 x l code x+1 x+5 x l rearrange expression reward comment write remember first time error python conditional expression b use right form valid form filter c combine put expression beginning list comprehension statement end filter element condition1 list1 condition2 ifs condition1 condition2 different thing part condition1 lambda expression condition2 lambda whole list comprehension regard combination map filter put conditional expression bracket list comprehension false true][condition syntax similar problem find question answer useful part confused write state english iteration go end loop go state list comprehension part answer case try way case move conditional start look little ugly use normal loop note use l list variable reduce confusion number think l avoid variable name circumstance quick dirty example code
way define c structure python ' m tired write stuff introduction data class python get close follow example similar namedtuple example result object mutable allow default value play new typing module case want use specific type annotation wait ask data class new namedtuple declaration combine type module godsend python become simple beautiful imho long live immutability new way declare namedtuple introduce allow type annotation use name tuple add collection module standard library python possible use raymond hettinger name tuple recipe need support python nice basic example cover bunch edge case run fragment write create type use use name argument use tuple lot thing use struct c coordinate rgb color example use dictionary utility class think definitive discussion publish version python cookbook look struct constructor dictionary use manipulate value value string much object df cool know access field class use dict mark situation wish want tuple heavy dictionary access field class use dictionary field class method property store use dict least cpython lead second comment believe python dict heavy non pythonistic concept read comment kill python zen good see declare class create complex wrapper dictionary add use simple dictionary overhead way meaningless case work performance critical application use c add solution use slot check documentation slot quick explanation slot python way say lock attribute attribute class commit add new attribute class instantiate add new attribute class instance see example large memory allocation allow add new attribute class instance use need slotted attribute example add attribute class instance use slot output example add attribute class instance slot use output attributeerror point object attribute z work struct use less memory class struct research recommend use slot create large amount instance object add attribute point object good example likely instantiate many point describe dataset subclass c structure available standard library ctype module provide structure class example doc pass init parameter instance variable position need instant datum object behave dictionary think c struct think cute hack say handy time need data bag class namedtuple incomprehensible answer elaborate simple option find http://norvig.com/python-iaq.html initialise add edit see example access c style struct python follow way note cstruct name use struct name var_i var_f var_str define structure member variable bit make solution use python meta class decorator version init call run time grab argument value assign instance variable class way make struct class assign value example error check easy follow action post reddit matchu post decorator version clean encourage use want expand metaclass version write decorator use method make argument pass default assign instance quick demonstration note use positional argument use default value b name argument c. print referencing self show ' assign method enter note decorator work method init see answer figure add lean python discover python tutorial python case give follow simple effective example empty class object create instantiate field add side simple downside self document intend member list anywhere class definition unset field cause problem access problem solve glance see field program expect prone typo = succeed work solution use class instantiate hold datum way involve little typing require additional package add field need get value field access usual variant extend @df answer support mode initialization blend print nice python package purpose see cstruct2py cstruct2py pure python library generate python class code use pack unpack data library parse headre struct union enum array declaration emulate python generate pythonic class parse pack data example use first need generate pythonic struct import name c code use type define code output cstruct2py run quick dirty trick work use builtin class warning derive exception use define class good point import define warn short name make clear dirty use small script way try find simple ms object last exemple work interested namedtuple comfortable share performance storage dict use choose slot high performance storage namedtuple clear reading use review link(usage slot get slot information https://stackoverflow.com/a/32448434/159695 work python3 https://stackoverflow.com/a/35993/159695 works python3 extend add default value follow solution struct inspire namedtuple implementation previous answer namedtuple mutable value c style struct immutable name attribute normal class dict usage @dataclass need mutability follow code work self document ide friendly auto complete prevent write thing extendable simple test instance variable initialize good way find use custom dictionary class explain post https://stackoverflow.com/a/14620633/8484485 ipython autocompletion support need define dir function define pseudo struct nest access value my_struct print(my_struct.com1.inst = > think python structure dictionary suitable requirement
suppose follow get value value s.pop want leave item set remove sure asynchronous call host quick dirty know well way constant time option require copy whole set general set support indexing slicing least code create new list contain member set great set large wonder function perform different set benchmark plot show approach randomsample setunpacking listindex depend size set avoid general case least performance show answer fast way forloop long constant time approach use performance difference negligible iteration_utilitie disclaimer ' m author contain convenience function use case include benchmark compete fast solution difference way muh_set break remain optimal approach python curse guido set python timing extrapolate wr excellent python specific response achampion helpful python specific response timing time outlier solution suggest include turn tune time behold order slow snippet manual iteration remain fast solution gap decrease bad old python day manual iteration time fast disappoint pep zealot verbose solution least convert set list extract first element set horrible expect thank guido light continue guide rng base solution horrible list conversion bad random take awful sauce cake random number god wish amorphous pep set.get_first method read provide timing figure different approach consider follow code get custom addition python setobject.c pop remove element output mean break solution fast custom get solution want random element work documentation seem mention performance random.sample quick empirical test huge list huge set seem constant time list set iteration set random order undefine predictable randomness important need bunch element constant time large set use random.sample convert list way python compact symbol slow way set element make possible python use symbol expression thank pep option time slow machine loop method use utility function write name misleading kind imply random item follow post get similar result output change underlie set call remove thing go iterable example iter result small collection create kind pars converter method use new list access index number list method need work unpack value access element f want first element try set()).pop s.copy().pop time work simple work good small set copy set option dictionary value care treat key set array side effect choice code compatible old pre set version python good answer option edit hide fact use dict array set
related_name argument useful manytomanyfield foreignkey field example give follow code effect related_name='map related_name attribute specifie name reverse relation user model model specify related_name django create use name model suffix set instance specify related_name map user model user.map_set work user.map syntax bit clunky example user object current_user use get instance map model relation current_us django documentation detail add exist answer relate name case fks model point table example case bill material access datum use relate name work able skip usage relate name case table related_name argument useful complex relate class name example foreign key relationship order access usermapdataframe object relate user default call user.usermapdataframe_set.all difficult read use related_name allow specify simple legible name get reverse relation case specify user = models.foreignkey(user related_name='map_data call user.map_data.all essential question follow map user model define manytomanyfield map model want get access member map option map_instance.members.all define member field say want access map user part option default django provide user_instance.modelname_set.all translate user.map_set.all case map well map_set related_name provide ability let django know go access map user model general access reverse model whole point create manytomany field use orm sense relate name parameter option set django create side relation case map model django create map_set attribute allow access m.map_set example(m class instance formula django use name model follow string set relate name parameter override django default provide new behavior prefetch_relate use prefetch datum many many many relationship datum select_relate select datum single value relationship use fetch datum relationship model example build model model relationship model request come query relationship data django good mechanism access datum relationship book.author.name iterate list model fetch relationship datum django create request single relationship datum overcome prefetchd_relate selected_relate
