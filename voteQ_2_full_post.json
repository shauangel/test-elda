[{"link": "https://stackoverflow.com/questions/209840/how-can-i-make-a-dictionary-dict-from-separate-lists-of-keys-and-values", "question": {"id": "209840", "title": "How can I make a dictionary (dict) from separate lists of keys and values?", "content": "<p>I want to combine these:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">keys = ['name', 'age', 'food']\nvalues = ['Monty', 42, 'spam']\n</code></pre>\n<p>Into a single dictionary:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">{'name': 'Monty', 'age': 42, 'food': 'spam'}\n</code></pre>\n", "abstract": "I want to combine these: Into a single dictionary:"}, "answers": [{"id": 209854, "score": 2754, "vote": 0, "content": "<p>Like this:</p>\n<pre><code class=\"python\">keys = ['a', 'b', 'c']\nvalues = [1, 2, 3]\ndictionary = dict(zip(keys, values))\nprint(dictionary) # {'a': 1, 'b': 2, 'c': 3}\n</code></pre>\n<p>Voila :-)  The pairwise <a href=\"https://docs.python.org/3/library/functions.html#func-dict\" rel=\"noreferrer\"><code>dict</code></a> constructor and <a href=\"https://docs.python.org/3/library/functions.html#zip\" rel=\"noreferrer\"><code>zip</code></a> function are awesomely useful.</p>\n", "abstract": "Like this: Voila :-)  The pairwise dict constructor and zip function are awesomely useful."}, {"id": 33737067, "score": 218, "vote": 0, "content": "<blockquote>\n<p>Imagine that you have:</p>\n<pre><code class=\"python\">keys = ('name', 'age', 'food')\nvalues = ('Monty', 42, 'spam')\n</code></pre>\n<p><strong>What is the simplest way to produce the following dictionary ?</strong></p>\n<pre><code class=\"python\">dict = {'name' : 'Monty', 'age' : 42, 'food' : 'spam'}\n</code></pre>\n</blockquote>\n<h2>Most performant, <code>dict</code> constructor with <code>zip</code></h2>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">new_dict = dict(zip(keys, values))\n</code></pre>\n<p>In Python 3, zip now returns a lazy iterator, and this is now the most performant approach.</p>\n<p><code>dict(zip(keys, values))</code> does require the one-time global lookup each for <code>dict</code> and <code>zip</code>, but it doesn't form any unnecessary intermediate data-structures or have to deal with local lookups in function application.</p>\n<h2>Runner-up, dict comprehension:</h2>\n<p>A close runner-up to using the dict constructor is to use the native syntax of a dict comprehension (not a <em>list</em> comprehension, as others have mistakenly put it):</p>\n<pre><code class=\"python\">new_dict = {k: v for k, v in zip(keys, values)}\n</code></pre>\n<p>Choose this when you need to map or filter based on the keys or value.</p>\n<p>In Python 2, <code>zip</code> returns a list, to avoid creating an unnecessary list, use <code>izip</code> instead (aliased to zip can reduce code changes when you move to Python 3).</p>\n<pre><code class=\"python\">from itertools import izip as zip\n</code></pre>\n<p>So that is still (2.7):</p>\n<pre><code class=\"python\">new_dict = {k: v for k, v in zip(keys, values)}\n</code></pre>\n<h2>Python 2, ideal for &lt;= 2.6</h2>\n<p><code>izip</code> from <code>itertools</code> becomes <code>zip</code> in Python 3. <code>izip</code> is better than zip for Python 2 (because it avoids the unnecessary list creation), and ideal for 2.6 or below:</p>\n<pre><code class=\"python\">from itertools import izip\nnew_dict = dict(izip(keys, values))\n</code></pre>\n<h2>Result for all cases:</h2>\n<p>In all cases:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; new_dict\n{'age': 42, 'name': 'Monty', 'food': 'spam'}\n</code></pre>\n<h2>Explanation:</h2>\n<p>If we look at the help on <code>dict</code> we see that it takes a variety of forms of arguments:</p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">\n&gt;&gt;&gt; help(dict)\n\nclass dict(object)\n |  dict() -&gt; new empty dictionary\n |  dict(mapping) -&gt; new dictionary initialized from a mapping object's\n |      (key, value) pairs\n |  dict(iterable) -&gt; new dictionary initialized as if via:\n |      d = {}\n |      for k, v in iterable:\n |          d[k] = v\n |  dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs\n |      in the keyword argument list.  For example:  dict(one=1, two=2)\n\n</code></pre>\n<p>The optimal approach is to use an iterable while avoiding creating unnecessary data structures. In Python 2, zip creates an unnecessary list:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; zip(keys, values)\n[('name', 'Monty'), ('age', 42), ('food', 'spam')]\n</code></pre>\n<p>In Python 3, the equivalent would be:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; list(zip(keys, values))\n[('name', 'Monty'), ('age', 42), ('food', 'spam')]\n</code></pre>\n<p>and Python 3's <code>zip</code> merely creates an iterable object:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; zip(keys, values)\n&lt;zip object at 0x7f0e2ad029c8&gt;\n</code></pre>\n<p>Since we want to avoid creating unnecessary data structures, we usually want to avoid Python 2's <code>zip</code> (since it creates an unnecessary list).</p>\n<h2>Less performant alternatives:</h2>\n<p>This is a generator expression being passed to the dict constructor:</p>\n<pre><code class=\"python\">generator_expression = ((k, v) for k, v in zip(keys, values))\ndict(generator_expression)\n</code></pre>\n<p>or equivalently:</p>\n<pre><code class=\"python\">dict((k, v) for k, v in zip(keys, values))\n</code></pre>\n<p>And this is a list comprehension being passed to the dict constructor:</p>\n<pre><code class=\"python\">dict([(k, v) for k, v in zip(keys, values)])\n</code></pre>\n<p>In the first two cases, an extra layer of non-operative (thus unnecessary) computation is placed over the zip iterable, and in the case of the list comprehension, an extra list is unnecessarily created. I would expect all of them to be less performant, and certainly not more-so.</p>\n<h2>Performance review:</h2>\n<p>In 64 bit Python 3.8.2 provided by Nix, on Ubuntu 16.04, ordered from fastest to slowest:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">&gt;&gt;&gt; min(timeit.repeat(lambda: dict(zip(keys, values))))\n0.6695233230129816\n&gt;&gt;&gt; min(timeit.repeat(lambda: {k: v for k, v in zip(keys, values)}))\n0.6941362579818815\n&gt;&gt;&gt; min(timeit.repeat(lambda: {keys[i]: values[i] for i in range(len(keys))}))\n0.8782548159942962\n&gt;&gt;&gt; \n&gt;&gt;&gt; min(timeit.repeat(lambda: dict([(k, v) for k, v in zip(keys, values)])))\n1.077607496001292\n&gt;&gt;&gt; min(timeit.repeat(lambda: dict((k, v) for k, v in zip(keys, values))))\n1.1840861019445583\n</code></pre>\n<p><code>dict(zip(keys, values))</code> wins even with small sets of keys and values, but for larger sets, the differences in performance will become greater.</p>\n<p>A commenter said:</p>\n<blockquote>\n<p><code>min</code> seems like a bad way to compare performance. Surely <code>mean</code> and/or <code>max</code> would be much more useful indicators for real usage.</p>\n</blockquote>\n<p>We use <code>min</code> because these algorithms are deterministic. We want to know the performance of the algorithms under the best conditions possible. </p>\n<p>If the operating system hangs for any reason, it has nothing to do with what we're trying to compare, so we need to exclude those kinds of results from our analysis.</p>\n<p>If we used <code>mean</code>, those kinds of events would skew our results greatly, and if we used <code>max</code> we will only get the most extreme result - the one most likely affected by such an event.</p>\n<p>A commenter also says:</p>\n<blockquote>\n<p>In python 3.6.8, using mean values, the dict comprehension is indeed still faster, by about 30% for these small lists. For larger lists (10k random numbers), the <code>dict</code> call is about 10% faster. </p>\n</blockquote>\n<p>I presume we mean <code>dict(zip(...</code> with 10k random numbers. That does sound like a fairly unusual use case. It does makes sense that the most direct calls would dominate in large datasets, and I wouldn't be surprised if OS hangs are dominating given how long it would take to run that test, further skewing your numbers. And if you use <code>mean</code> or <code>max</code> I would consider your results meaningless.</p>\n<p>Let's use a more realistic size on our top examples:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">import numpy\nimport timeit\nl1 = list(numpy.random.random(100))\nl2 = list(numpy.random.random(100))\n</code></pre>\n<p>And we see here that <code>dict(zip(...</code> does indeed run faster for larger datasets by about 20%.</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">&gt;&gt;&gt; min(timeit.repeat(lambda: {k: v for k, v in zip(l1, l2)}))\n9.698965263989521\n&gt;&gt;&gt; min(timeit.repeat(lambda: dict(zip(l1, l2))))\n7.9965161079890095\n</code></pre>\n", "abstract": "Imagine that you have: What is the simplest way to produce the following dictionary ? In Python 3, zip now returns a lazy iterator, and this is now the most performant approach. dict(zip(keys, values)) does require the one-time global lookup each for dict and zip, but it doesn't form any unnecessary intermediate data-structures or have to deal with local lookups in function application. A close runner-up to using the dict constructor is to use the native syntax of a dict comprehension (not a list comprehension, as others have mistakenly put it): Choose this when you need to map or filter based on the keys or value. In Python 2, zip returns a list, to avoid creating an unnecessary list, use izip instead (aliased to zip can reduce code changes when you move to Python 3). So that is still (2.7): izip from itertools becomes zip in Python 3. izip is better than zip for Python 2 (because it avoids the unnecessary list creation), and ideal for 2.6 or below: In all cases: If we look at the help on dict we see that it takes a variety of forms of arguments: The optimal approach is to use an iterable while avoiding creating unnecessary data structures. In Python 2, zip creates an unnecessary list: In Python 3, the equivalent would be: and Python 3's zip merely creates an iterable object: Since we want to avoid creating unnecessary data structures, we usually want to avoid Python 2's zip (since it creates an unnecessary list). This is a generator expression being passed to the dict constructor: or equivalently: And this is a list comprehension being passed to the dict constructor: In the first two cases, an extra layer of non-operative (thus unnecessary) computation is placed over the zip iterable, and in the case of the list comprehension, an extra list is unnecessarily created. I would expect all of them to be less performant, and certainly not more-so. In 64 bit Python 3.8.2 provided by Nix, on Ubuntu 16.04, ordered from fastest to slowest: dict(zip(keys, values)) wins even with small sets of keys and values, but for larger sets, the differences in performance will become greater. A commenter said: min seems like a bad way to compare performance. Surely mean and/or max would be much more useful indicators for real usage. We use min because these algorithms are deterministic. We want to know the performance of the algorithms under the best conditions possible.  If the operating system hangs for any reason, it has nothing to do with what we're trying to compare, so we need to exclude those kinds of results from our analysis. If we used mean, those kinds of events would skew our results greatly, and if we used max we will only get the most extreme result - the one most likely affected by such an event. A commenter also says: In python 3.6.8, using mean values, the dict comprehension is indeed still faster, by about 30% for these small lists. For larger lists (10k random numbers), the dict call is about 10% faster.  I presume we mean dict(zip(... with 10k random numbers. That does sound like a fairly unusual use case. It does makes sense that the most direct calls would dominate in large datasets, and I wouldn't be surprised if OS hangs are dominating given how long it would take to run that test, further skewing your numbers. And if you use mean or max I would consider your results meaningless. Let's use a more realistic size on our top examples: And we see here that dict(zip(... does indeed run faster for larger datasets by about 20%."}, {"id": 209880, "score": 134, "vote": 0, "content": "<p>Try this:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; import itertools\n&gt;&gt;&gt; keys = ('name', 'age', 'food')\n&gt;&gt;&gt; values = ('Monty', 42, 'spam')\n&gt;&gt;&gt; adict = dict(itertools.izip(keys,values))\n&gt;&gt;&gt; adict\n{'food': 'spam', 'age': 42, 'name': 'Monty'}\n</code></pre>\n<p>In Python 2, it's also more economical in memory consumption compared to <code>zip</code>.</p>\n", "abstract": "Try this: In Python 2, it's also more economical in memory consumption compared to zip."}, {"id": 209855, "score": 39, "vote": 0, "content": "<pre><code class=\"python\">keys = ('name', 'age', 'food')\nvalues = ('Monty', 42, 'spam')\nout = dict(zip(keys, values))\n</code></pre>\n<p>Output:</p>\n<pre><code class=\"python\">{'food': 'spam', 'age': 42, 'name': 'Monty'}\n</code></pre>\n", "abstract": "Output:"}, {"id": 10971932, "score": 31, "vote": 0, "content": "<p>You can also use dictionary comprehensions in Python \u2265 2.7:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; keys = ('name', 'age', 'food')\n&gt;&gt;&gt; values = ('Monty', 42, 'spam')\n&gt;&gt;&gt; {k: v for k, v in zip(keys, values)}\n{'food': 'spam', 'age': 42, 'name': 'Monty'}\n</code></pre>\n", "abstract": "You can also use dictionary comprehensions in Python \u2265 2.7:"}, {"id": 33728822, "score": 19, "vote": 0, "content": "<p>A more natural way is to use dictionary comprehension </p>\n<pre><code class=\"python\">keys = ('name', 'age', 'food')\nvalues = ('Monty', 42, 'spam')    \ndict = {keys[i]: values[i] for i in range(len(keys))}\n</code></pre>\n", "abstract": "A more natural way is to use dictionary comprehension "}, {"id": 210234, "score": 15, "vote": 0, "content": "<p>If you need to transform keys or values before creating a dictionary then a <a href=\"http://docs.python.org/ref/genexpr.html\" rel=\"noreferrer\">generator expression</a> could be used. Example:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; adict = dict((str(k), v) for k, v in zip(['a', 1, 'b'], [2, 'c', 3])) \n</code></pre>\n<p>Take a look <a href=\"http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html\" rel=\"noreferrer\">Code Like a Pythonista: Idiomatic Python</a>.</p>\n", "abstract": "If you need to transform keys or values before creating a dictionary then a generator expression could be used. Example: Take a look Code Like a Pythonista: Idiomatic Python."}, {"id": 16750190, "score": 11, "vote": 0, "content": "<p>with Python 3.x, goes for dict comprehensions</p>\n<pre><code class=\"python\">keys = ('name', 'age', 'food')\nvalues = ('Monty', 42, 'spam')\n\ndic = {k:v for k,v in zip(keys, values)}\n\nprint(dic)\n</code></pre>\n<p>More on <a href=\"http://www.python.org/dev/peps/pep-0274/\" rel=\"noreferrer\">dict comprehensions here</a>, an example is there:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; print {i : chr(65+i) for i in range(4)}\n    {0 : 'A', 1 : 'B', 2 : 'C', 3 : 'D'}\n</code></pre>\n", "abstract": "with Python 3.x, goes for dict comprehensions More on dict comprehensions here, an example is there:"}, {"id": 15709950, "score": 10, "vote": 0, "content": "<p>For those who need simple code and aren\u2019t familiar with <code>zip</code>:</p>\n<pre><code class=\"python\">List1 = ['This', 'is', 'a', 'list']\nList2 = ['Put', 'this', 'into', 'dictionary']\n</code></pre>\n<p>This can be done by one line of code:</p>\n<pre><code class=\"python\">d = {List1[n]: List2[n] for n in range(len(List1))}\n</code></pre>\n", "abstract": "For those who need simple code and aren\u2019t familiar with zip: This can be done by one line of code:"}, {"id": 47331117, "score": 3, "vote": 0, "content": "<p>you can use this below code:</p>\n<pre><code class=\"python\">dict(zip(['name', 'age', 'food'], ['Monty', 42, 'spam']))\n</code></pre>\n<p>But make sure that length of the lists will be same.if length is not same.then zip function turncate the longer one.</p>\n", "abstract": "you can use this below code: But make sure that length of the lists will be same.if length is not same.then zip function turncate the longer one."}, {"id": 49890306, "score": 3, "vote": 0, "content": "<ul>\n<li>2018-04-18</li>\n</ul>\n<p>The best solution is still:</p>\n<pre><code class=\"python\">In [92]: keys = ('name', 'age', 'food')\n...: values = ('Monty', 42, 'spam')\n...: \n\nIn [93]: dt = dict(zip(keys, values))\nIn [94]: dt\nOut[94]: {'age': 42, 'food': 'spam', 'name': 'Monty'}\n</code></pre>\n<p>Tranpose it:</p>\n<pre><code class=\"python\">    lst = [('name', 'Monty'), ('age', 42), ('food', 'spam')]\n    keys, values = zip(*lst)\n    In [101]: keys\n    Out[101]: ('name', 'age', 'food')\n    In [102]: values\n    Out[102]: ('Monty', 42, 'spam')\n</code></pre>\n", "abstract": "The best solution is still: Tranpose it:"}, {"id": 54786370, "score": 2, "vote": 0, "content": "<p>Here is also an example of adding a list value in you dictionary</p>\n<pre><code class=\"python\">list1 = [\"Name\", \"Surname\", \"Age\"]\nlist2 = [[\"Cyd\", \"JEDD\", \"JESS\"], [\"DEY\", \"AUDIJE\", \"PONGARON\"], [21, 32, 47]]\ndic = dict(zip(list1, list2))\nprint(dic)\n</code></pre>\n<p>always make sure the your \"Key\"(list1) is always in the first parameter.</p>\n<pre><code class=\"python\">{'Name': ['Cyd', 'JEDD', 'JESS'], 'Surname': ['DEY', 'AUDIJE', 'PONGARON'], 'Age': [21, 32, 47]}\n</code></pre>\n", "abstract": "Here is also an example of adding a list value in you dictionary always make sure the your \"Key\"(list1) is always in the first parameter."}, {"id": 57123635, "score": 2, "vote": 0, "content": "<p>I had this doubt while I was trying to solve a graph-related problem. The issue I had was I needed to define an empty adjacency list and wanted to initialize all the nodes with an empty list, that's when I thought how about I check if it is fast enough, I mean if it will be worth doing a zip operation rather than simple assignment key-value pair. After all most of the times, the time factor is an important ice breaker. So I performed timeit operation for both approaches.</p>\n<pre><code class=\"python\">import timeit\ndef dictionary_creation(n_nodes):\n    dummy_dict = dict()\n    for node in range(n_nodes):\n        dummy_dict[node] = []\n    return dummy_dict\n\n\ndef dictionary_creation_1(n_nodes):\n    keys = list(range(n_nodes))\n    values = [[] for i in range(n_nodes)]\n    graph = dict(zip(keys, values))\n    return graph\n\n\ndef wrapper(func, *args, **kwargs):\n    def wrapped():\n        return func(*args, **kwargs)\n    return wrapped\n\niteration = wrapper(dictionary_creation, n_nodes)\nshorthand = wrapper(dictionary_creation_1, n_nodes)\n\nfor trail in range(1, 8):\n    print(f'Itertion: {timeit.timeit(iteration, number=trails)}\\nShorthand: {timeit.timeit(shorthand, number=trails)}')\n</code></pre>\n<p>For n_nodes = 10,000,000\nI get,</p>\n<p>Iteration: 2.825081646999024\nShorthand: 3.535717916001886</p>\n<p>Iteration: 5.051560923002398\nShorthand: 6.255070794999483</p>\n<p>Iteration: 6.52859034499852\nShorthand: 8.221581164998497</p>\n<p>Iteration: 8.683652416999394\nShorthand: 12.599181543999293</p>\n<p>Iteration: 11.587241565001023\nShorthand: 15.27298851100204</p>\n<p>Iteration: 14.816342867001367\nShorthand: 17.162912737003353</p>\n<p>Iteration: 16.645022411001264\nShorthand: 19.976680120998935</p>\n<p>You can clearly see after a certain point, iteration approach at n_th step overtakes the time taken by shorthand approach at n-1_th step.</p>\n", "abstract": "I had this doubt while I was trying to solve a graph-related problem. The issue I had was I needed to define an empty adjacency list and wanted to initialize all the nodes with an empty list, that's when I thought how about I check if it is fast enough, I mean if it will be worth doing a zip operation rather than simple assignment key-value pair. After all most of the times, the time factor is an important ice breaker. So I performed timeit operation for both approaches. For n_nodes = 10,000,000\nI get, Iteration: 2.825081646999024\nShorthand: 3.535717916001886 Iteration: 5.051560923002398\nShorthand: 6.255070794999483 Iteration: 6.52859034499852\nShorthand: 8.221581164998497 Iteration: 8.683652416999394\nShorthand: 12.599181543999293 Iteration: 11.587241565001023\nShorthand: 15.27298851100204 Iteration: 14.816342867001367\nShorthand: 17.162912737003353 Iteration: 16.645022411001264\nShorthand: 19.976680120998935 You can clearly see after a certain point, iteration approach at n_th step overtakes the time taken by shorthand approach at n-1_th step."}, {"id": 66474032, "score": 1, "vote": 0, "content": "<pre><code class=\"python\">keys = ['name', 'age', 'food']\nvalues = ['Monty', 42, 'spam']\ndic = {}\nc = 0\nfor i in keys:\n    dic[i] = values[c]\n    c += 1\n\nprint(dic)\n{'name': 'Monty', 'age': 42, 'food': 'spam'}\n</code></pre>\n", "abstract": ""}, {"id": 72278884, "score": 1, "vote": 0, "content": "<p>It can be done by the following way.</p>\n<pre><code class=\"python\">keys = ['name', 'age', 'food']\nvalues = ['Monty', 42, 'spam'] \n\ndict = {}\n\nfor i in range(len(keys)):\n    dict[keys[i]] = values[i]\n    \nprint(dict)\n\n{'name': 'Monty', 'age': 42, 'food': 'spam'}\n</code></pre>\n", "abstract": "It can be done by the following way."}, {"id": 58700255, "score": 0, "vote": 0, "content": "<p><strong>Solution as dictionary comprehension with enumerate:</strong></p>\n<pre><code class=\"python\">dict = {item : values[index] for index, item in enumerate(keys)}\n</code></pre>\n<p><strong>Solution as for loop with enumerate:</strong></p>\n<pre><code class=\"python\">dict = {}\nfor index, item in enumerate(keys):\n    dict[item] = values[index]\n</code></pre>\n", "abstract": "Solution as dictionary comprehension with enumerate: Solution as for loop with enumerate:"}, {"id": 65325139, "score": 0, "vote": 0, "content": "<p>If you are working with more than 1 set of values and wish to have a <em>list of dicts</em> you can use this:</p>\n<pre><code class=\"python\">def as_dict_list(data: list, columns: list):\n    return [dict((zip(columns, row))) for row in data]\n</code></pre>\n<p>Real-life example would be a list of tuples from a db query paired to a tuple of columns from the same query. Other answers only provided for 1 to 1.</p>\n", "abstract": "If you are working with more than 1 set of values and wish to have a list of dicts you can use this: Real-life example would be a list of tuples from a db query paired to a tuple of columns from the same query. Other answers only provided for 1 to 1."}, {"id": 44149939, "score": -1, "vote": 0, "content": "<p>method without zip function</p>\n<pre><code class=\"python\">l1 = [1,2,3,4,5]\nl2 = ['a','b','c','d','e']\nd1 = {}\nfor l1_ in l1:\n    for l2_ in l2:\n        d1[l1_] = l2_\n        l2.remove(l2_)\n        break  \n\nprint (d1)\n\n\n{1: 'd', 2: 'b', 3: 'e', 4: 'a', 5: 'c'}\n</code></pre>\n", "abstract": "method without zip function"}, {"id": 63626892, "score": -1, "vote": 0, "content": "<p>Although there are multiple ways of doing this but i think most fundamental way of approaching it; <strong><strong>creating a loop and dictionary and store values into that dictionary</strong></strong>. In the recursive approach the idea is still same it but instead of using a loop, the function called itself until it reaches to the end. Of course there are other approaches like using <code>dict(zip(key, value))</code> and etc. <em>These aren't the most effective solutions.</em></p>\n<pre><code class=\"python\">y = [1,2,3,4]\nx = [\"a\",\"b\",\"c\",\"d\"]\n\n# This below is a brute force method\nobj = {}\nfor i in range(len(y)):\n    obj[y[i]] = x[i]\nprint(obj)\n\n# Recursive approach \nobj = {}\ndef map_two_lists(a,b,j=0):\n    if j &lt; len(a):\n        obj[b[j]] = a[j]\n        j +=1\n        map_two_lists(a, b, j)\n        return obj\n      \n\n\nres = map_two_lists(x,y)\nprint(res)\n\n</code></pre>\n<p>Both the results should print</p>\n<pre><code class=\"python\">{1: 'a', 2: 'b', 3: 'c', 4: 'd'}  \n</code></pre>\n", "abstract": "Although there are multiple ways of doing this but i think most fundamental way of approaching it; creating a loop and dictionary and store values into that dictionary. In the recursive approach the idea is still same it but instead of using a loop, the function called itself until it reaches to the end. Of course there are other approaches like using dict(zip(key, value)) and etc. These aren't the most effective solutions. Both the results should print"}]}, {"link": "https://stackoverflow.com/questions/67631/how-do-i-import-a-module-given-the-full-path", "question": {"id": "67631", "title": "How do I import a module given the full path?", "content": "<p>How do I load a Python module given its full path?</p>\n<p>Note that the file can be anywhere in the filesystem.</p>\n", "abstract": "How do I load a Python module given its full path? Note that the file can be anywhere in the filesystem."}, "answers": [{"id": 67692, "score": 1649, "vote": 0, "content": "<p>For Python 3.5+ use (<a href=\"https://docs.python.org/3/library/importlib.html#importing-a-source-file-directly\" rel=\"noreferrer\">docs</a>):</p>\n<pre><code class=\"python\">import importlib.util\nimport sys\nspec = importlib.util.spec_from_file_location(\"module.name\", \"/path/to/file.py\")\nfoo = importlib.util.module_from_spec(spec)\nsys.modules[\"module.name\"] = foo\nspec.loader.exec_module(foo)\nfoo.MyClass()\n</code></pre>\n<p>For Python 3.3 and 3.4 use:</p>\n<pre><code class=\"python\">from importlib.machinery import SourceFileLoader\n\nfoo = SourceFileLoader(\"module.name\", \"/path/to/file.py\").load_module()\nfoo.MyClass()\n</code></pre>\n<p>(Although this has been deprecated in Python 3.4.)</p>\n<p>For Python 2 use:</p>\n<pre><code class=\"python\">import imp\n\nfoo = imp.load_source('module.name', '/path/to/file.py')\nfoo.MyClass()\n</code></pre>\n<p>There are equivalent convenience functions for compiled Python files and DLLs.</p>\n<p>See also <a href=\"http://bugs.python.org/issue21436\" rel=\"noreferrer\">http://bugs.python.org/issue21436</a>.</p>\n", "abstract": "For Python 3.5+ use (docs): For Python 3.3 and 3.4 use: (Although this has been deprecated in Python 3.4.) For Python 2 use: There are equivalent convenience functions for compiled Python files and DLLs. See also http://bugs.python.org/issue21436."}, {"id": 129374, "score": 542, "vote": 0, "content": "<p>The advantage of adding a path to sys.path (over using imp) is that it simplifies things when importing more than one module from a single package.  For example:</p>\n<pre><code class=\"python\">import sys\n# the mock-0.3.1 dir contains testcase.py, testutils.py &amp; mock.py\nsys.path.append('/foo/bar/mock-0.3.1')\n\nfrom testcase import TestCase\nfrom testutils import RunTests\nfrom mock import Mock, sentinel, patch\n</code></pre>\n", "abstract": "The advantage of adding a path to sys.path (over using imp) is that it simplifies things when importing more than one module from a single package.  For example:"}, {"id": 53311583, "score": 114, "vote": 0, "content": "<p>To import your module, you need to add its directory to the environment variable, either temporarily or permanently.</p>\n<h1>Temporarily</h1>\n<pre><code class=\"python\">import sys\nsys.path.append(\"/path/to/my/modules/\")\nimport my_module\n</code></pre>\n<h1>Permanently</h1>\n<p>Adding the following line to your <code>.bashrc</code> (or alternative) file in Linux\nand excecute <code>source ~/.bashrc</code> (or alternative) in the terminal:</p>\n<pre><code class=\"python\">export PYTHONPATH=\"${PYTHONPATH}:/path/to/my/modules/\"\n</code></pre>\n<p>Credit/Source: <a href=\"https://stackoverflow.com/users/2312075/saarrrr\">saarrrr</a>, <a href=\"https://stackoverflow.com/a/3402176/7428659\">another Stack\u00a0Exchange question</a></p>\n", "abstract": "To import your module, you need to add its directory to the environment variable, either temporarily or permanently. Adding the following line to your .bashrc (or alternative) file in Linux\nand excecute source ~/.bashrc (or alternative) in the terminal: Credit/Source: saarrrr, another Stack\u00a0Exchange question"}, {"id": 50395128, "score": 93, "vote": 0, "content": "<p>If your top-level module is not a file but is packaged as a directory with __init__.py, then the accepted solution almost works, but not quite. In Python 3.5+ the following code is needed (note the added line that begins with 'sys.modules'):</p>\n<pre><code class=\"python\">MODULE_PATH = \"/path/to/your/module/__init__.py\"\nMODULE_NAME = \"mymodule\"\nimport importlib\nimport sys\nspec = importlib.util.spec_from_file_location(MODULE_NAME, MODULE_PATH)\nmodule = importlib.util.module_from_spec(spec)\nsys.modules[spec.name] = module \nspec.loader.exec_module(module)\n</code></pre>\n<p>Without this line, when exec_module is executed, it tries to bind relative imports in your top level __init__.py to the top level module name -- in this case \"mymodule\". But \"mymodule\" isn't loaded yet so you'll get the error \"SystemError: Parent module 'mymodule' not loaded, cannot perform relative import\". So you need to bind the name before you load it. The reason for this is the fundamental invariant of the relative import system: \"The invariant holding is that if you have sys.modules['spam'] and sys.modules['spam.foo'] (as you would after the above import), the latter must appear as the foo attribute of the former\" <a href=\"https://docs.python.org/3/reference/import.html#submodules\" rel=\"noreferrer\">as discussed here</a>.</p>\n", "abstract": "If your top-level module is not a file but is packaged as a directory with __init__.py, then the accepted solution almost works, but not quite. In Python 3.5+ the following code is needed (note the added line that begins with 'sys.modules'): Without this line, when exec_module is executed, it tries to bind relative imports in your top level __init__.py to the top level module name -- in this case \"mymodule\". But \"mymodule\" isn't loaded yet so you'll get the error \"SystemError: Parent module 'mymodule' not loaded, cannot perform relative import\". So you need to bind the name before you load it. The reason for this is the fundamental invariant of the relative import system: \"The invariant holding is that if you have sys.modules['spam'] and sys.modules['spam.foo'] (as you would after the above import), the latter must appear as the foo attribute of the former\" as discussed here."}, {"id": 37339817, "score": 49, "vote": 0, "content": "<p>It sounds like you don't want to specifically import the configuration file (which has a whole lot of side effects and additional complications involved). You just want to run it, and be able to access the resulting namespace. The standard library provides an API specifically for that in the form of <a href=\"https://docs.python.org/3/library/runpy.html#runpy.run_path\" rel=\"noreferrer\">runpy.run_path</a>:</p>\n<pre><code class=\"python\">from runpy import run_path\nsettings = run_path(\"/path/to/file.py\")\n</code></pre>\n<p>That interface is available in Python 2.7 and Python 3.2+.</p>\n", "abstract": "It sounds like you don't want to specifically import the configuration file (which has a whole lot of side effects and additional complications involved). You just want to run it, and be able to access the resulting namespace. The standard library provides an API specifically for that in the form of runpy.run_path: That interface is available in Python 2.7 and Python 3.2+."}, {"id": 67708, "score": 23, "vote": 0, "content": "<p>You can also do something like this and add the directory that the configuration file is sitting in to the Python load path, and then just do a normal import, assuming you know the name of the file in advance, in this case \"config\".</p>\n<p>Messy, but it works.</p>\n<pre><code class=\"python\">configfile = '~/config.py'\n\nimport os\nimport sys\n\nsys.path.append(os.path.dirname(os.path.expanduser(configfile)))\n\nimport config\n</code></pre>\n", "abstract": "You can also do something like this and add the directory that the configuration file is sitting in to the Python load path, and then just do a normal import, assuming you know the name of the file in advance, in this case \"config\". Messy, but it works."}, {"id": 67693, "score": 18, "vote": 0, "content": "<p>You can use the</p>\n<pre><code class=\"python\">load_source(module_name, path_to_file)\n</code></pre>\n<p>method from the <a href=\"https://docs.python.org/library/imp.html\" rel=\"nofollow noreferrer\">imp module</a>.</p>\n", "abstract": "You can use the method from the imp module."}, {"id": 43602557, "score": 18, "vote": 0, "content": "<p>I have come up with a slightly modified version of <a href=\"https://stackoverflow.com/a/67692/2988730\">@SebastianRittau's wonderful answer</a> (for Python &gt; 3.4 I think), which will allow you to load a file with any extension as a module using <a href=\"https://docs.python.org/3/library/importlib.html#importlib.util.spec_from_loader\" rel=\"nofollow noreferrer\"><code>spec_from_loader</code></a> instead of <a href=\"https://docs.python.org/3/library/importlib.html#importlib.util.spec_from_file_location\" rel=\"nofollow noreferrer\"><code>spec_from_file_location</code></a>:</p>\n<pre><code class=\"python\">from importlib.util import spec_from_loader, module_from_spec\nfrom importlib.machinery import SourceFileLoader \n\nspec = spec_from_loader(\"module.name\", SourceFileLoader(\"module.name\", \"/path/to/file.py\"))\nmod = module_from_spec(spec)\nspec.loader.exec_module(mod)\n</code></pre>\n<p>The advantage of encoding the path in an explicit <a href=\"https://docs.python.org/3/library/importlib.html#importlib.machinery.SourceFileLoader\" rel=\"nofollow noreferrer\"><code>SourceFileLoader</code></a> is that the <a href=\"https://docs.python.org/3/library/importlib.html#module-importlib.machinery\" rel=\"nofollow noreferrer\">machinery</a> will not try to figure out the type of the file from the extension. This means that you can load something like a <code>.txt</code> file using this method, but you could not do it with <code>spec_from_file_location</code> without specifying the loader because <code>.txt</code> is not in <a href=\"https://docs.python.org/3/library/importlib.html#importlib.machinery.SOURCE_SUFFIXES\" rel=\"nofollow noreferrer\"><code>importlib.machinery.SOURCE_SUFFIXES</code></a>.</p>\n<p>I've placed an implementation based on this, and <a href=\"https://stackoverflow.com/a/50395128/2988730\">@SamGrondahl's useful modification</a> into my utility library, <a href=\"https://haggis.readthedocs.io/en/stable/\" rel=\"nofollow noreferrer\">haggis</a>. The function is called <a href=\"https://haggis.readthedocs.io/en/latest/api.html#haggis.load.load_module\" rel=\"nofollow noreferrer\"><code>haggis.load.load_module</code></a>. It adds a couple of neat tricks, like the ability to inject variables into the module namespace as it is loaded.</p>\n", "abstract": "I have come up with a slightly modified version of @SebastianRittau's wonderful answer (for Python > 3.4 I think), which will allow you to load a file with any extension as a module using spec_from_loader instead of spec_from_file_location: The advantage of encoding the path in an explicit SourceFileLoader is that the machinery will not try to figure out the type of the file from the extension. This means that you can load something like a .txt file using this method, but you could not do it with spec_from_file_location without specifying the loader because .txt is not in importlib.machinery.SOURCE_SUFFIXES. I've placed an implementation based on this, and @SamGrondahl's useful modification into my utility library, haggis. The function is called haggis.load.load_module. It adds a couple of neat tricks, like the ability to inject variables into the module namespace as it is loaded."}, {"id": 67715, "score": 17, "vote": 0, "content": "<p>Do you mean load or import?</p>\n<p>You can manipulate the <code>sys.path</code> list specify the path to your module, and then import your module. For example, given a module at:</p>\n<pre><code class=\"python\">/foo/bar.py\n</code></pre>\n<p>You could do:</p>\n<pre><code class=\"python\">import sys\nsys.path[0:0] = ['/foo'] # Puts the /foo directory at the start of your path\nimport bar\n</code></pre>\n", "abstract": "Do you mean load or import? You can manipulate the sys.path list specify the path to your module, and then import your module. For example, given a module at: You could do:"}, {"id": 37611448, "score": 17, "vote": 0, "content": "<p>Here is some code that works in all Python versions, from 2.7-3.5 and probably even others.</p>\n<pre><code class=\"python\">config_file = \"/tmp/config.py\"\nwith open(config_file) as f:\n    code = compile(f.read(), config_file, 'exec')\n    exec(code, globals(), locals())\n</code></pre>\n<p>I tested it. It may be ugly, but so far it is the only one that works in all versions.</p>\n", "abstract": "Here is some code that works in all Python versions, from 2.7-3.5 and probably even others. I tested it. It may be ugly, but so far it is the only one that works in all versions."}, {"id": 68628, "score": 12, "vote": 0, "content": "<p>You can do this using <code>__import__</code> and <code>chdir</code>:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">def import_file(full_path_to_module):\n    try:\n        import os\n        module_dir, module_file = os.path.split(full_path_to_module)\n        module_name, module_ext = os.path.splitext(module_file)\n        save_cwd = os.getcwd()\n        os.chdir(module_dir)\n        module_obj = __import__(module_name)\n        module_obj.__file__ = full_path_to_module\n        globals()[module_name] = module_obj\n        os.chdir(save_cwd)\n    except Exception as e:\n        raise ImportError(e)\n    return module_obj\n\n\nimport_file('/home/somebody/somemodule.py')\n</code></pre>\n", "abstract": "You can do this using __import__ and chdir:"}, {"id": 58974141, "score": 12, "vote": 0, "content": "<p>If we have scripts in the same project but in different directory means, we can solve this problem by the following method.</p>\n<p>In this situation <code>utils.py</code> is in <code>src/main/util/</code></p>\n<pre><code class=\"python\">import sys\nsys.path.append('./')\n\nimport src.main.util.utils\n#or\nfrom src.main.util.utils import json_converter # json_converter is example method\n</code></pre>\n", "abstract": "If we have scripts in the same project but in different directory means, we can solve this problem by the following method. In this situation utils.py is in src/main/util/"}, {"id": 67672, "score": 9, "vote": 0, "content": "<p>I believe you can use <a href=\"https://docs.python.org/2/library/imp.html#imp.find_module\" rel=\"noreferrer\"><code>imp.find_module()</code></a> and <a href=\"https://docs.python.org/2/library/imp.html#imp.load_module\" rel=\"noreferrer\"><code>imp.load_module()</code></a> to load the specified module.  You'll need to split the module name off of the path, i.e. if you wanted to load <code>/home/mypath/mymodule.py</code> you'd need to do:</p>\n<pre><code class=\"python\">imp.find_module('mymodule', '/home/mypath/')\n</code></pre>\n<p>...but that should get the job done.</p>\n", "abstract": "I believe you can use imp.find_module() and imp.load_module() to load the specified module.  You'll need to split the module name off of the path, i.e. if you wanted to load /home/mypath/mymodule.py you'd need to do: ...but that should get the job done."}, {"id": 25827116, "score": 8, "vote": 0, "content": "<p>You can use the <code>pkgutil</code> module (specifically the <a href=\"https://docs.python.org/3/library/pkgutil.html#pkgutil.walk_packages\" rel=\"noreferrer\"><code>walk_packages</code></a> method) to get a list of the packages in the current directory. From there it's trivial to use the <code>importlib</code> machinery to import the modules you want:</p>\n<pre><code class=\"python\">import pkgutil\nimport importlib\n\npackages = pkgutil.walk_packages(path='.')\nfor importer, name, is_package in packages:\n    mod = importlib.import_module(name)\n    # do whatever you want with module now, it's been imported!\n</code></pre>\n", "abstract": "You can use the pkgutil module (specifically the walk_packages method) to get a list of the packages in the current directory. From there it's trivial to use the importlib machinery to import the modules you want:"}, {"id": 53651717, "score": 7, "vote": 0, "content": "<p>Create Python module <em>test.py</em>:</p>\n<pre><code class=\"python\">import sys\nsys.path.append(\"&lt;project-path&gt;/lib/\")\nfrom tes1 import Client1\nfrom tes2 import Client2\nimport tes3\n</code></pre>\n<p>Create Python module <em>test_check.py</em>:</p>\n<pre><code class=\"python\">from test import Client1\nfrom test import Client2\nfrom test import test3\n</code></pre>\n<p>We can import the imported module from module.</p>\n", "abstract": "Create Python module test.py: Create Python module test_check.py: We can import the imported module from module."}, {"id": 58943466, "score": 7, "vote": 0, "content": "<p>There's a <a href=\"https://pypi.org/project/thesmuggler/\" rel=\"noreferrer\">package</a> that's dedicated to this specifically:</p>\n<pre><code class=\"python\">from thesmuggler import smuggle\n\n# \u00c0 la `import weapons`\nweapons = smuggle('weapons.py')\n\n# \u00c0 la `from contraband import drugs, alcohol`\ndrugs, alcohol = smuggle('drugs', 'alcohol', source='contraband.py')\n\n# \u00c0 la `from contraband import drugs as dope, alcohol as booze`\ndope, booze = smuggle('drugs', 'alcohol', source='contraband.py')\n</code></pre>\n<p>It's tested across Python versions (Jython and PyPy too), but it might be overkill depending on the size of your project.</p>\n", "abstract": "There's a package that's dedicated to this specifically: It's tested across Python versions (Jython and PyPy too), but it might be overkill depending on the size of your project."}, {"id": 29589414, "score": 5, "vote": 0, "content": "<p>This area of Python 3.4 seems to be extremely tortuous to understand! However with a bit of hacking using the code from Chris Calloway as a start I managed to get something working. Here's the basic function.</p>\n<pre><code class=\"python\">def import_module_from_file(full_path_to_module):\n    \"\"\"\n    Import a module given the full path/filename of the .py file\n\n    Python 3.4\n\n    \"\"\"\n\n    module = None\n\n    try:\n\n        # Get module name and path from full path\n        module_dir, module_file = os.path.split(full_path_to_module)\n        module_name, module_ext = os.path.splitext(module_file)\n\n        # Get module \"spec\" from filename\n        spec = importlib.util.spec_from_file_location(module_name,full_path_to_module)\n\n        module = spec.loader.load_module()\n\n    except Exception as ec:\n        # Simple error printing\n        # Insert \"sophisticated\" stuff here\n        print(ec)\n\n    finally:\n        return module\n</code></pre>\n<p>This appears to use non-deprecated modules from Python 3.4. I don't pretend to understand why, but it seems to work from within a program. I found Chris' solution worked on the command line but not from inside a program.</p>\n", "abstract": "This area of Python 3.4 seems to be extremely tortuous to understand! However with a bit of hacking using the code from Chris Calloway as a start I managed to get something working. Here's the basic function. This appears to use non-deprecated modules from Python 3.4. I don't pretend to understand why, but it seems to work from within a program. I found Chris' solution worked on the command line but not from inside a program."}, {"id": 68361215, "score": 5, "vote": 0, "content": "<p>To add to <a href=\"https://stackoverflow.com/questions/67631/how-to-import-a-module-given-the-full-path/67692#67692\">Sebastian Rittau</a>'s answer:\nAt least for <a href=\"https://en.wikipedia.org/wiki/CPython\" rel=\"nofollow noreferrer\">CPython</a>, there's <a href=\"https://docs.python.org/3/library/pydoc.html\" rel=\"nofollow noreferrer\">pydoc</a>, and, while not officially declared, importing files is what it does:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">from pydoc import importfile\nmodule = importfile('/path/to/module.py')\n</code></pre>\n<p><strong>PS.</strong> For the sake of completeness, there's a reference to the current implementation at the moment of writing: <a href=\"https://github.com/python/cpython/blob/9c3eaf88dc5d5bed80cc45936de06b7b3162bc6d/Lib/pydoc.py#L392\" rel=\"nofollow noreferrer\">pydoc.py</a>, and I'm pleased to say that in the vein of <a href=\"https://xkcd.com/1987/\" rel=\"nofollow noreferrer\">xkcd 1987</a> it uses neither of the implementations mentioned in <a href=\"https://bugs.python.org/issue21436\" rel=\"nofollow noreferrer\">issue 21436</a> -- at least, not verbatim.</p>\n", "abstract": "To add to Sebastian Rittau's answer:\nAt least for CPython, there's pydoc, and, while not officially declared, importing files is what it does: PS. For the sake of completeness, there's a reference to the current implementation at the moment of writing: pydoc.py, and I'm pleased to say that in the vein of xkcd 1987 it uses neither of the implementations mentioned in issue 21436 -- at least, not verbatim."}, {"id": 6284270, "score": 4, "vote": 0, "content": "<p>I made a package that uses <code>imp</code> for you. I call it <code>import_file</code> and this is how it's used:</p>\n<pre><code class=\"python\">&gt;&gt;&gt;from import_file import import_file\n&gt;&gt;&gt;mylib = import_file('c:\\\\mylib.py')\n&gt;&gt;&gt;another = import_file('relative_subdir/another.py')\n</code></pre>\n<p>You can get it at:</p>\n<p><a href=\"http://pypi.python.org/pypi/import_file\" rel=\"nofollow\">http://pypi.python.org/pypi/import_file</a></p>\n<p>or at</p>\n<p><a href=\"http://code.google.com/p/import-file/\" rel=\"nofollow\">http://code.google.com/p/import-file/</a></p>\n", "abstract": "I made a package that uses imp for you. I call it import_file and this is how it's used: You can get it at: http://pypi.python.org/pypi/import_file or at http://code.google.com/p/import-file/"}, {"id": 32905959, "score": 4, "vote": 0, "content": "<p>To import a module from a given filename, you can temporarily extend the path, and restore the system path in the finally block <a href=\"http://effbot.org/zone/import-string.htm\" rel=\"nofollow\">reference:</a></p>\n<pre><code class=\"python\">filename = \"directory/module.py\"\n\ndirectory, module_name = os.path.split(filename)\nmodule_name = os.path.splitext(module_name)[0]\n\npath = list(sys.path)\nsys.path.insert(0, directory)\ntry:\n    module = __import__(module_name)\nfinally:\n    sys.path[:] = path # restore\n</code></pre>\n", "abstract": "To import a module from a given filename, you can temporarily extend the path, and restore the system path in the finally block reference:"}, {"id": 50509034, "score": 4, "vote": 0, "content": "<p>A simple solution using <code>importlib</code> instead of the <code>imp</code> package (tested for Python 2.7, although it should work for Python 3 too):</p>\n<pre class=\"lang-python prettyprint-override\"><code class=\"python\">import importlib\n\ndirname, basename = os.path.split(pyfilepath) # pyfilepath: '/my/path/mymodule.py'\nsys.path.append(dirname) # only directories should be added to PYTHONPATH\nmodule_name = os.path.splitext(basename)[0] # '/my/path/mymodule.py' --&gt; 'mymodule'\nmodule = importlib.import_module(module_name) # name space of defined module (otherwise we would literally look for \"module_name\")\n</code></pre>\n<p>Now you can directly use the namespace of the imported module, like this:</p>\n<pre><code class=\"python\">a = module.myvar\nb = module.myfunc(a)\n</code></pre>\n<p>The advantage of this solution is that <strong>we don't even need to know the actual name of the module we would like to import</strong>, in order to use it in our code. This is useful, e.g. in case the path of the module is a configurable argument.</p>\n", "abstract": "A simple solution using importlib instead of the imp package (tested for Python 2.7, although it should work for Python 3 too): Now you can directly use the namespace of the imported module, like this: The advantage of this solution is that we don't even need to know the actual name of the module we would like to import, in order to use it in our code. This is useful, e.g. in case the path of the module is a configurable argument."}, {"id": 67705, "score": 3, "vote": 0, "content": "<p><strong>Import package modules at runtime (Python recipe)</strong> </p>\n<p><a href=\"http://code.activestate.com/recipes/223972/\" rel=\"nofollow noreferrer\">http://code.activestate.com/recipes/223972/</a></p>\n<pre><code class=\"python\">###################\n##                #\n## classloader.py #\n##                #\n###################\n\nimport sys, types\n\ndef _get_mod(modulePath):\n    try:\n        aMod = sys.modules[modulePath]\n        if not isinstance(aMod, types.ModuleType):\n            raise KeyError\n    except KeyError:\n        # The last [''] is very important!\n        aMod = __import__(modulePath, globals(), locals(), [''])\n        sys.modules[modulePath] = aMod\n    return aMod\n\ndef _get_func(fullFuncName):\n    \"\"\"Retrieve a function object from a full dotted-package name.\"\"\"\n\n    # Parse out the path, module, and function\n    lastDot = fullFuncName.rfind(u\".\")\n    funcName = fullFuncName[lastDot + 1:]\n    modPath = fullFuncName[:lastDot]\n\n    aMod = _get_mod(modPath)\n    aFunc = getattr(aMod, funcName)\n\n    # Assert that the function is a *callable* attribute.\n    assert callable(aFunc), u\"%s is not callable.\" % fullFuncName\n\n    # Return a reference to the function itself,\n    # not the results of the function.\n    return aFunc\n\ndef _get_class(fullClassName, parentClass=None):\n    \"\"\"Load a module and retrieve a class (NOT an instance).\n\n    If the parentClass is supplied, className must be of parentClass\n    or a subclass of parentClass (or None is returned).\n    \"\"\"\n    aClass = _get_func(fullClassName)\n\n    # Assert that the class is a subclass of parentClass.\n    if parentClass is not None:\n        if not issubclass(aClass, parentClass):\n            raise TypeError(u\"%s is not a subclass of %s\" %\n                            (fullClassName, parentClass))\n\n    # Return a reference to the class itself, not an instantiated object.\n    return aClass\n\n\n######################\n##       Usage      ##\n######################\n\nclass StorageManager: pass\nclass StorageManagerMySQL(StorageManager): pass\n\ndef storage_object(aFullClassName, allOptions={}):\n    aStoreClass = _get_class(aFullClassName, StorageManager)\n    return aStoreClass(allOptions)\n</code></pre>\n", "abstract": "Import package modules at runtime (Python recipe)  http://code.activestate.com/recipes/223972/"}, {"id": 8721254, "score": 3, "vote": 0, "content": "<p>This should work</p>\n<pre><code class=\"python\">path = os.path.join('./path/to/folder/with/py/files', '*.py')\nfor infile in glob.glob(path):\n    basename = os.path.basename(infile)\n    basename_without_extension = basename[:-3]\n\n    # http://docs.python.org/library/imp.html?highlight=imp#module-imp\n    imp.load_source(basename_without_extension, infile)\n</code></pre>\n", "abstract": "This should work"}, {"id": 30605451, "score": 3, "vote": 0, "content": "<p>I'm not saying that it is better, but for the sake of completeness, I wanted to suggest the <a href=\"https://docs.python.org/3/library/functions.html#exec\" rel=\"nofollow noreferrer\"><code>exec</code></a> function, available in both Python\u00a02 and Python\u00a03.</p>\n<p><code>exec</code> allows you to execute arbitrary code in either the global scope, or in an internal scope, provided as a dictionary.</p>\n<p>For example, if you have a module stored in <code>\"/path/to/module</code>\" with the function <code>foo()</code>, you could run it by doing the following:</p>\n<pre><code class=\"python\">module = dict()\nwith open(\"/path/to/module\") as f:\n    exec(f.read(), module)\nmodule['foo']()\n</code></pre>\n<p>This makes it a bit more explicit that you're loading code dynamically, and grants you some additional power, such as the ability to provide custom builtins.</p>\n<p>And if having access through attributes, instead of keys is important to you, you can design a custom dict class for the globals, that provides such access, e.g.:</p>\n<pre><code class=\"python\">class MyModuleClass(dict):\n    def __getattr__(self, name):\n        return self.__getitem__(name)\n</code></pre>\n", "abstract": "I'm not saying that it is better, but for the sake of completeness, I wanted to suggest the exec function, available in both Python\u00a02 and Python\u00a03. exec allows you to execute arbitrary code in either the global scope, or in an internal scope, provided as a dictionary. For example, if you have a module stored in \"/path/to/module\" with the function foo(), you could run it by doing the following: This makes it a bit more explicit that you're loading code dynamically, and grants you some additional power, such as the ability to provide custom builtins. And if having access through attributes, instead of keys is important to you, you can design a custom dict class for the globals, that provides such access, e.g.:"}, {"id": 26995106, "score": 2, "vote": 0, "content": "<p>In Linux, adding a symbolic link in the directory your Python script is located works.</p>\n<p>I.e.:</p>\n<pre><code class=\"python\">ln -s /absolute/path/to/module/module.py /absolute/path/to/script/module.py\n</code></pre>\n<p>The Python interpreter will create <code>/absolute/path/to/script/module.pyc</code> and will update it if you change the contents of <code>/absolute/path/to/module/module.py</code>.</p>\n<p>Then include the following in file <em>mypythonscript.py</em>:</p>\n<pre><code class=\"python\">from module import *\n</code></pre>\n", "abstract": "In Linux, adding a symbolic link in the directory your Python script is located works. I.e.: The Python interpreter will create /absolute/path/to/script/module.pyc and will update it if you change the contents of /absolute/path/to/module/module.py. Then include the following in file mypythonscript.py:"}, {"id": 48191370, "score": 2, "vote": 0, "content": "<p>This will allow imports of compiled (pyd) Python modules in 3.4:</p>\n<pre><code class=\"python\">import sys\nimport importlib.machinery\n\ndef load_module(name, filename):\n    # If the Loader finds the module name in this list it will use\n    # module_name.__file__ instead so we need to delete it here\n    if name in sys.modules:\n        del sys.modules[name]\n    loader = importlib.machinery.ExtensionFileLoader(name, filename)\n    module = loader.load_module()\n    locals()[name] = module\n    globals()[name] = module\n\nload_module('something', r'C:\\Path\\To\\something.pyd')\nsomething.do_something()\n</code></pre>\n", "abstract": "This will allow imports of compiled (pyd) Python modules in 3.4:"}, {"id": 48455971, "score": 2, "vote": 0, "content": "<p>A quite simple way: suppose you want import file with relative path ../../MyLibs/pyfunc.py</p>\n<pre><code class=\"python\">libPath = '../../MyLibs'\nimport sys\nif not libPath in sys.path: sys.path.append(libPath)\nimport pyfunc as pf\n</code></pre>\n<p>But if you make it without a guard you can finally get a very long path.</p>\n", "abstract": "A quite simple way: suppose you want import file with relative path ../../MyLibs/pyfunc.py But if you make it without a guard you can finally get a very long path."}, {"id": 57843421, "score": 2, "vote": 0, "content": "<p>I have written my own global and portable import function, based on <code>importlib</code> module, for:</p>\n<ul>\n<li>Be able to import both modules as submodules and to import the content of a module to a parent module (or into a globals if has no parent module).</li>\n<li>Be able to import modules with a period characters in a file name.</li>\n<li>Be able to import modules with any extension.</li>\n<li>Be able to use a standalone name for a submodule instead of a file name without extension which is by default.</li>\n<li>Be able to define the import order based on previously imported module instead of dependent on <code>sys.path</code> or on a what ever search path storage.</li>\n</ul>\n<p>The examples directory structure:</p>\n<pre><code class=\"python\">&lt;root&gt;\n |\n +- test.py\n |\n +- testlib.py\n |\n +- /std1\n |   |\n |   +- testlib.std1.py\n |\n +- /std2\n |   |\n |   +- testlib.std2.py\n |\n +- /std3\n     |\n     +- testlib.std3.py\n</code></pre>\n<p>Inclusion dependency and order:</p>\n<pre><code class=\"python\">test.py\n  -&gt; testlib.py\n    -&gt; testlib.std1.py\n      -&gt; testlib.std2.py\n    -&gt; testlib.std3.py\n</code></pre>\n<p>Implementation:</p>\n<p>Latest changes store: <a href=\"https://sourceforge.net/p/tacklelib/tacklelib/HEAD/tree/trunk/python/tacklelib/tacklelib.py\" rel=\"nofollow noreferrer\">https://sourceforge.net/p/tacklelib/tacklelib/HEAD/tree/trunk/python/tacklelib/tacklelib.py</a></p>\n<p><strong>test.py</strong>:</p>\n<pre><code class=\"python\">import os, sys, inspect, copy\n\nSOURCE_FILE = os.path.abspath(inspect.getsourcefile(lambda:0)).replace('\\\\','/')\nSOURCE_DIR = os.path.dirname(SOURCE_FILE)\n\nprint(\"test::SOURCE_FILE: \", SOURCE_FILE)\n\n# portable import to the global space\nsys.path.append(TACKLELIB_ROOT) # TACKLELIB_ROOT - path to the library directory\nimport tacklelib as tkl\n\ntkl.tkl_init(tkl)\n\n# cleanup\ndel tkl # must be instead of `tkl = None`, otherwise the variable would be still persist\nsys.path.pop()\n\ntkl_import_module(SOURCE_DIR, 'testlib.py')\n\nprint(globals().keys())\n\ntestlib.base_test()\ntestlib.testlib_std1.std1_test()\ntestlib.testlib_std1.testlib_std2.std2_test()\n#testlib.testlib.std3.std3_test()                             # does not reachable directly ...\ngetattr(globals()['testlib'], 'testlib.std3').std3_test()     # ... but reachable through the `globals` + `getattr`\n\ntkl_import_module(SOURCE_DIR, 'testlib.py', '.')\n\nprint(globals().keys())\n\nbase_test()\ntestlib_std1.std1_test()\ntestlib_std1.testlib_std2.std2_test()\n#testlib.std3.std3_test()                                     # does not reachable directly ...\nglobals()['testlib.std3'].std3_test()                         # ... but reachable through the `globals` + `getattr`\n</code></pre>\n<p><strong>testlib.py</strong>:</p>\n<pre><code class=\"python\"># optional for 3.4.x and higher\n#import os, inspect\n#\n#SOURCE_FILE = os.path.abspath(inspect.getsourcefile(lambda:0)).replace('\\\\','/')\n#SOURCE_DIR = os.path.dirname(SOURCE_FILE)\n\nprint(\"1 testlib::SOURCE_FILE: \", SOURCE_FILE)\n\ntkl_import_module(SOURCE_DIR + '/std1', 'testlib.std1.py', 'testlib_std1')\n\n# SOURCE_DIR is restored here\nprint(\"2 testlib::SOURCE_FILE: \", SOURCE_FILE)\n\ntkl_import_module(SOURCE_DIR + '/std3', 'testlib.std3.py')\n\nprint(\"3 testlib::SOURCE_FILE: \", SOURCE_FILE)\n\ndef base_test():\n  print('base_test')\n</code></pre>\n<p><strong>testlib.std1.py</strong>:</p>\n<pre><code class=\"python\"># optional for 3.4.x and higher\n#import os, inspect\n#\n#SOURCE_FILE = os.path.abspath(inspect.getsourcefile(lambda:0)).replace('\\\\','/')\n#SOURCE_DIR = os.path.dirname(SOURCE_FILE)\n\nprint(\"testlib.std1::SOURCE_FILE: \", SOURCE_FILE)\n\ntkl_import_module(SOURCE_DIR + '/../std2', 'testlib.std2.py', 'testlib_std2')\n\ndef std1_test():\n  print('std1_test')\n</code></pre>\n<p><strong>testlib.std2.py</strong>:</p>\n<pre><code class=\"python\"># optional for 3.4.x and higher\n#import os, inspect\n#\n#SOURCE_FILE = os.path.abspath(inspect.getsourcefile(lambda:0)).replace('\\\\','/')\n#SOURCE_DIR = os.path.dirname(SOURCE_FILE)\n\nprint(\"testlib.std2::SOURCE_FILE: \", SOURCE_FILE)\n\ndef std2_test():\n  print('std2_test')\n</code></pre>\n<p><strong>testlib.std3.py</strong>:</p>\n<pre><code class=\"python\"># optional for 3.4.x and higher\n#import os, inspect\n#\n#SOURCE_FILE = os.path.abspath(inspect.getsourcefile(lambda:0)).replace('\\\\','/')\n#SOURCE_DIR = os.path.dirname(SOURCE_FILE)\n\nprint(\"testlib.std3::SOURCE_FILE: \", SOURCE_FILE)\n\ndef std3_test():\n  print('std3_test')\n</code></pre>\n<p><strong>Output</strong> (<code>3.7.4</code>):</p>\n<pre><code class=\"python\">test::SOURCE_FILE:  &lt;root&gt;/test01/test.py\nimport : &lt;root&gt;/test01/testlib.py as testlib -&gt; []\n1 testlib::SOURCE_FILE:  &lt;root&gt;/test01/testlib.py\nimport : &lt;root&gt;/test01/std1/testlib.std1.py as testlib_std1 -&gt; ['testlib']\nimport : &lt;root&gt;/test01/std1/../std2/testlib.std2.py as testlib_std2 -&gt; ['testlib', 'testlib_std1']\ntestlib.std2::SOURCE_FILE:  &lt;root&gt;/test01/std1/../std2/testlib.std2.py\n2 testlib::SOURCE_FILE:  &lt;root&gt;/test01/testlib.py\nimport : &lt;root&gt;/test01/std3/testlib.std3.py as testlib.std3 -&gt; ['testlib']\ntestlib.std3::SOURCE_FILE:  &lt;root&gt;/test01/std3/testlib.std3.py\n3 testlib::SOURCE_FILE:  &lt;root&gt;/test01/testlib.py\ndict_keys(['__name__', '__doc__', '__package__', '__loader__', '__spec__', '__annotations__', '__builtins__', '__file__', '__cached__', 'os', 'sys', 'inspect', 'copy', 'SOURCE_FILE', 'SOURCE_DIR', 'TackleGlobalImportModuleState', 'tkl_membercopy', 'tkl_merge_module', 'tkl_get_parent_imported_module_state', 'tkl_declare_global', 'tkl_import_module', 'TackleSourceModuleState', 'tkl_source_module', 'TackleLocalImportModuleState', 'testlib'])\nbase_test\nstd1_test\nstd2_test\nstd3_test\nimport : &lt;root&gt;/test01/testlib.py as . -&gt; []\n1 testlib::SOURCE_FILE:  &lt;root&gt;/test01/testlib.py\nimport : &lt;root&gt;/test01/std1/testlib.std1.py as testlib_std1 -&gt; ['testlib']\nimport : &lt;root&gt;/test01/std1/../std2/testlib.std2.py as testlib_std2 -&gt; ['testlib', 'testlib_std1']\ntestlib.std2::SOURCE_FILE:  &lt;root&gt;/test01/std1/../std2/testlib.std2.py\n2 testlib::SOURCE_FILE:  &lt;root&gt;/test01/testlib.py\nimport : &lt;root&gt;/test01/std3/testlib.std3.py as testlib.std3 -&gt; ['testlib']\ntestlib.std3::SOURCE_FILE:  &lt;root&gt;/test01/std3/testlib.std3.py\n3 testlib::SOURCE_FILE:  &lt;root&gt;/test01/testlib.py\ndict_keys(['__name__', '__doc__', '__package__', '__loader__', '__spec__', '__annotations__', '__builtins__', '__file__', '__cached__', 'os', 'sys', 'inspect', 'copy', 'SOURCE_FILE', 'SOURCE_DIR', 'TackleGlobalImportModuleState', 'tkl_membercopy', 'tkl_merge_module', 'tkl_get_parent_imported_module_state', 'tkl_declare_global', 'tkl_import_module', 'TackleSourceModuleState', 'tkl_source_module', 'TackleLocalImportModuleState', 'testlib', 'testlib_std1', 'testlib.std3', 'base_test'])\nbase_test\nstd1_test\nstd2_test\nstd3_test\n</code></pre>\n<p>Tested in Python <code>3.7.4</code>, <code>3.2.5</code>, <code>2.7.16</code></p>\n<p><strong>Pros</strong>:</p>\n<ul>\n<li>Can import both module as a submodule and can import content of a module to a parent module (or into a globals if has no parent module).</li>\n<li>Can import modules with periods in a file name.</li>\n<li>Can import any extension module from any extension module.</li>\n<li>Can use a standalone name for a submodule instead of a file name without extension which is by default (for example, <code>testlib.std.py</code> as <code>testlib</code>, <code>testlib.blabla.py</code> as <code>testlib_blabla</code> and so on).</li>\n<li>Does not depend on a <code>sys.path</code> or on a what ever search path storage.</li>\n<li>Does not require to save/restore global variables like <code>SOURCE_FILE</code> and <code>SOURCE_DIR</code> between calls to <code>tkl_import_module</code>.</li>\n<li>[for <code>3.4.x</code> and higher] Can mix the module namespaces in nested <code>tkl_import_module</code> calls (ex: <code>named-&gt;local-&gt;named</code> or <code>local-&gt;named-&gt;local</code> and so on).</li>\n<li>[for <code>3.4.x</code> and higher] Can auto export global variables/functions/classes from where being declared to all children modules imported through the <code>tkl_import_module</code> (through the <code>tkl_declare_global</code> function).</li>\n</ul>\n<p><strong>Cons</strong>:</p>\n<ul>\n<li>Does not support complete import:\n<ul>\n<li>Ignores enumerations and subclasses.</li>\n<li>Ignores builtins because each what type has to be copied exclusively.</li>\n<li>Ignore not trivially copiable classes.</li>\n<li>Avoids copying builtin modules including all packaged modules.</li>\n</ul>\n</li>\n<li>[for <code>3.3.x</code> and lower] Require to declare <code>tkl_import_module</code> in all modules which calls to <code>tkl_import_module</code> (code duplication)</li>\n</ul>\n<p><strong>Update 1,2</strong> (for <code>3.4.x</code> and higher only):</p>\n<p>In Python 3.4 and higher you can bypass the requirement to declare <code>tkl_import_module</code> in each module by declare <code>tkl_import_module</code> in a top level module and the function would inject itself to all children modules in a single call (it's a kind of self deploy import).</p>\n<p><strong>Update 3</strong>:</p>\n<p>Added function <code>tkl_source_module</code> as analog to bash <code>source</code> with support execution guard upon import (implemented through the module merge instead of import).</p>\n<p><strong>Update 4</strong>:</p>\n<p>Added function <code>tkl_declare_global</code> to auto export a module global variable to all children modules where a module global variable is not visible because is not a part of a child module.</p>\n<p><strong>Update 5</strong>:</p>\n<p>All functions has moved into the tacklelib library, see the link above.</p>\n", "abstract": "I have written my own global and portable import function, based on importlib module, for: The examples directory structure: Inclusion dependency and order: Implementation: Latest changes store: https://sourceforge.net/p/tacklelib/tacklelib/HEAD/tree/trunk/python/tacklelib/tacklelib.py test.py: testlib.py: testlib.std1.py: testlib.std2.py: testlib.std3.py: Output (3.7.4): Tested in Python 3.7.4, 3.2.5, 2.7.16 Pros: Cons: Update 1,2 (for 3.4.x and higher only): In Python 3.4 and higher you can bypass the requirement to declare tkl_import_module in each module by declare tkl_import_module in a top level module and the function would inject itself to all children modules in a single call (it's a kind of self deploy import). Update 3: Added function tkl_source_module as analog to bash source with support execution guard upon import (implemented through the module merge instead of import). Update 4: Added function tkl_declare_global to auto export a module global variable to all children modules where a module global variable is not visible because is not a part of a child module. Update 5: All functions has moved into the tacklelib library, see the link above."}, {"id": 63332270, "score": 1, "vote": 0, "content": "<p>These are my two utility functions using only pathlib. It infers the module name from the path.</p>\n<p>By default, it recursively loads all Python files from folders and replaces <strong>init</strong>.py by the parent folder name. But you can also give a Path and/or a glob to select some specific files.</p>\n<pre><code class=\"python\">from pathlib import Path\nfrom importlib.util import spec_from_file_location, module_from_spec\nfrom typing import Optional\n\n\ndef get_module_from_path(path: Path, relative_to: Optional[Path] = None):\n    if not relative_to:\n        relative_to = Path.cwd()\n\n    abs_path = path.absolute()\n    relative_path = abs_path.relative_to(relative_to.absolute())\n    if relative_path.name == \"__init__.py\":\n        relative_path = relative_path.parent\n    module_name = \".\".join(relative_path.with_suffix(\"\").parts)\n    mod = module_from_spec(spec_from_file_location(module_name, path))\n    return mod\n\n\ndef get_modules_from_folder(folder: Optional[Path] = None, glob_str: str = \"*/**/*.py\"):\n    if not folder:\n        folder = Path(\".\")\n\n    mod_list = []\n    for file_path in sorted(folder.glob(glob_str)):\n        mod_list.append(get_module_from_path(file_path))\n\n    return mod_list\n</code></pre>\n", "abstract": "These are my two utility functions using only pathlib. It infers the module name from the path. By default, it recursively loads all Python files from folders and replaces init.py by the parent folder name. But you can also give a Path and/or a glob to select some specific files."}, {"id": 52236722, "score": 0, "vote": 0, "content": "<p>This answer is a supplement to <a href=\"https://stackoverflow.com/questions/67631/how-to-import-a-module-given-the-full-path/67692#67692\">Sebastian Rittau's answer</a> responding to the comment: \"but what if you don't have the module name?\"  This is a quick and dirty way of getting the likely Python module name given a filename -- it just goes up the tree until it finds a directory without an <code>__init__.py</code> file and then turns it back into a filename.  For Python 3.4+ (uses pathlib), which makes sense since Python\u00a02 people can use \"imp\" or other ways of doing relative imports:</p>\n<pre><code class=\"python\">import pathlib\n\ndef likely_python_module(filename):\n    '''\n    Given a filename or Path, return the \"likely\" python module name.  That is, iterate\n    the parent directories until it doesn't contain an __init__.py file.\n\n    :rtype: str\n    '''\n    p = pathlib.Path(filename).resolve()\n    paths = []\n    if p.name != '__init__.py':\n        paths.append(p.stem)\n    while True:\n        p = p.parent\n        if not p:\n            break\n        if not p.is_dir():\n            break\n\n        inits = [f for f in p.iterdir() if f.name == '__init__.py']\n        if not inits:\n            break\n\n        paths.append(p.stem)\n\n    return '.'.join(reversed(paths))\n</code></pre>\n<p>There are certainly possibilities for improvement, and the optional <code>__init__.py</code> files might necessitate other changes, but if you have <code>__init__.py</code> in general, this does the trick.</p>\n", "abstract": "This answer is a supplement to Sebastian Rittau's answer responding to the comment: \"but what if you don't have the module name?\"  This is a quick and dirty way of getting the likely Python module name given a filename -- it just goes up the tree until it finds a directory without an __init__.py file and then turns it back into a filename.  For Python 3.4+ (uses pathlib), which makes sense since Python\u00a02 people can use \"imp\" or other ways of doing relative imports: There are certainly possibilities for improvement, and the optional __init__.py files might necessitate other changes, but if you have __init__.py in general, this does the trick."}, {"id": 66181002, "score": 0, "vote": 0, "content": "<p>Here's a way of loading files sort of like C, etc.</p>\n<pre><code class=\"python\">from importlib.machinery import SourceFileLoader\nimport os\n\ndef LOAD(MODULE_PATH):\n    if (MODULE_PATH[0] == \"/\"):\n        FULL_PATH = MODULE_PATH;\n    else:\n        DIR_PATH = os.path.dirname (os.path.realpath (__file__))\n        FULL_PATH = os.path.normpath (DIR_PATH + \"/\" + MODULE_PATH)\n\n    return SourceFileLoader (FULL_PATH, FULL_PATH).load_module ()\n</code></pre>\n<p>Implementations where:</p>\n<pre><code class=\"python\">Y = LOAD(\"../Z.py\")\nA = LOAD(\"./A.py\")\nD = LOAD(\"./C/D.py\")\nA_ = LOAD(\"/IMPORTS/A.py\")\n\nY.DEF();\nA.DEF();\nD.DEF();\nA_.DEF();\n</code></pre>\n<p>Where each of the files looks like this:</p>\n<pre><code class=\"python\">def DEF():\n    print(\"A\");\n</code></pre>\n", "abstract": "Here's a way of loading files sort of like C, etc. Implementations where: Where each of the files looks like this:"}, {"id": 70797815, "score": 0, "vote": 0, "content": "<p>You can use importfile from pydoc</p>\n<pre><code class=\"python\">from pydoc import importfile\nmodule = importfile('/full/path/to/module/module.py')\nname = module.myclass() # myclass is a class inside your python file\n</code></pre>\n", "abstract": "You can use importfile from pydoc"}, {"id": 27127448, "score": -1, "vote": 0, "content": "<p>The best way, I think, is from the official documentation (<a href=\"https://docs.python.org/3.2/library/imp.html#examples\" rel=\"nofollow\">29.1. imp \u2014 Access the import internals</a>):</p>\n<pre><code class=\"python\">import imp\nimport sys\n\ndef __import__(name, globals=None, locals=None, fromlist=None):\n    # Fast path: see if the module has already been imported.\n    try:\n        return sys.modules[name]\n    except KeyError:\n        pass\n\n    # If any of the following calls raises an exception,\n    # there's a problem we can't handle -- let the caller handle it.\n\n    fp, pathname, description = imp.find_module(name)\n\n    try:\n        return imp.load_module(name, fp, pathname, description)\n    finally:\n        # Since we may exit via an exception, close fp explicitly.\n        if fp:\n            fp.close()\n</code></pre>\n", "abstract": "The best way, I think, is from the official documentation (29.1. imp \u2014 Access the import internals):"}, {"id": 66499112, "score": -1, "vote": 0, "content": "<p>I find this is a simple answer:</p>\n<pre><code class=\"python\">module = dict()\n\ncode = \"\"\"\nimport json\n\ndef testhi() :\n    return json.dumps({\"key\" : \"value\"}, indent = 4 )\n\"\"\"\n\nexec(code, module)\nx = module['testhi']()\nprint(x)\n</code></pre>\n", "abstract": "I find this is a simple answer:"}, {"id": 69286913, "score": -2, "vote": 0, "content": "<p>Something special is to import a module with absolute path with Exec():\n(exec takes a code string or code object. While eval takes an expression.)</p>\n<pre><code class=\"python\">PYMODULE = 'C:\\maXbox\\mX47464\\maxbox4\\examples\\histogram15.py';\nExecstring(LoadStringJ(PYMODULE));\n</code></pre>\n<p>And then get values or object with eval():</p>\n<pre><code class=\"python\">println('get module data: '+evalStr('pyplot.hist(x)'));\n</code></pre>\n<p>Load a module with exec is like an import with wildcard namespace:</p>\n<pre><code class=\"python\">Execstring('sys.path.append(r'+'\"'+PYMODULEPATH+'\")');\nExecstring('from histogram import *'); \n</code></pre>\n", "abstract": "Something special is to import a module with absolute path with Exec():\n(exec takes a code string or code object. While eval takes an expression.) And then get values or object with eval(): Load a module with exec is like an import with wildcard namespace:"}]}, {"link": "https://stackoverflow.com/questions/11285613/selecting-multiple-columns-in-a-pandas-dataframe", "question": {"id": "11285613", "title": "Selecting multiple columns in a Pandas dataframe", "content": "<p>How do I select columns <code>a</code> and <code>b</code> from <code>df</code>, and save them into a new dataframe <code>df1</code>?</p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">index  a   b   c\n1      2   3   4\n2      3   4   5\n</code></pre>\n<p>Unsuccessful attempt:</p>\n<pre><code class=\"python\">df1 = df['a':'b']\ndf1 = df.ix[:, 'a':'b']\n</code></pre>\n", "abstract": "How do I select columns a and b from df, and save them into a new dataframe df1? Unsuccessful attempt:"}, "answers": [{"id": 11287278, "score": 2493, "vote": 0, "content": "<p>The column names (which are strings) cannot be sliced in the manner you tried.</p>\n<p>Here you have a couple of options. If you know from context which variables you want to slice out, you can just return a view of only those columns by passing a list into the <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#basics\" rel=\"noreferrer\"><code>__getitem__</code> syntax</a> (the []'s).</p>\n<pre><code class=\"python\">df1 = df[['a', 'b']]\n</code></pre>\n<p>Alternatively, if it matters to index them numerically and not by their name (say your code should automatically do this without knowing the names of the first two columns) then you can do this instead:</p>\n<pre><code class=\"python\">df1 = df.iloc[:, 0:2] # Remember that Python does not slice inclusive of the ending index.\n</code></pre>\n<p>Additionally, you should familiarize yourself with the idea of a view into a Pandas object vs. a copy of that object. The first of the above methods will return a new copy in memory of the desired sub-object (the desired slices).</p>\n<p>Sometimes, however, there are indexing conventions in Pandas that don't do this and instead give you a new variable that just refers to the same chunk of memory as the sub-object or slice in the original object. This will happen with the second way of indexing, so you can modify it with the <code>.copy()</code> method to get a regular copy. When this happens, changing what you think is the sliced object can sometimes alter the original object. Always good to be on the look out for this.</p>\n<pre><code class=\"python\">df1 = df.iloc[0, 0:2].copy() # To avoid the case where changing df1 also changes df\n</code></pre>\n<p>To use <code>iloc</code>, you need to know the column positions (or indices). As the column positions may change, instead of hard-coding indices, you can use <code>iloc</code> along with <code>get_loc</code> function of <code>columns</code> method of dataframe object to obtain column indices.</p>\n<pre><code class=\"python\">{df.columns.get_loc(c): c for idx, c in enumerate(df.columns)}\n</code></pre>\n<p>Now you can use this dictionary to access columns through names and using <code>iloc</code>.</p>\n", "abstract": "The column names (which are strings) cannot be sliced in the manner you tried. Here you have a couple of options. If you know from context which variables you want to slice out, you can just return a view of only those columns by passing a list into the __getitem__ syntax (the []'s). Alternatively, if it matters to index them numerically and not by their name (say your code should automatically do this without knowing the names of the first two columns) then you can do this instead: Additionally, you should familiarize yourself with the idea of a view into a Pandas object vs. a copy of that object. The first of the above methods will return a new copy in memory of the desired sub-object (the desired slices). Sometimes, however, there are indexing conventions in Pandas that don't do this and instead give you a new variable that just refers to the same chunk of memory as the sub-object or slice in the original object. This will happen with the second way of indexing, so you can modify it with the .copy() method to get a regular copy. When this happens, changing what you think is the sliced object can sometimes alter the original object. Always good to be on the look out for this. To use iloc, you need to know the column positions (or indices). As the column positions may change, instead of hard-coding indices, you can use iloc along with get_loc function of columns method of dataframe object to obtain column indices. Now you can use this dictionary to access columns through names and using iloc."}, {"id": 36955053, "score": 242, "vote": 0, "content": "<p>As of version 0.11.0, columns <em>can be</em> sliced in the manner you tried using the <a href=\"http://pandas-docs.github.io/pandas-docs-travis/whatsnew/v0.11.0.html#selection-choices\" rel=\"noreferrer\"><code>.loc</code></a> indexer:</p>\n<pre><code class=\"python\">df.loc[:, 'C':'E']\n</code></pre>\n<p>gets the same columns as</p>\n<pre><code class=\"python\">df[['C', 'D', 'E']] # Mind, this makes a copy.\n</code></pre>\n<p>or</p>\n<pre><code class=\"python\">df.loc[:, ['C', 'D', 'E']] # This does not make a copy (better).\n</code></pre>\n<p>and returns columns <code>C</code> through <code>E</code>.</p>\n<hr/>\n<p>A demo on a randomly generated DataFrame:</p>\n<pre><code class=\"python\">import pandas as pd\nimport numpy as np\nnp.random.seed(5)\ndf = pd.DataFrame(np.random.randint(100, size=(100, 6)),\n                  columns=list('ABCDEF'),\n                  index=['R{}'.format(i) for i in range(100)])\ndf.head()\n\nOut:\n     A   B   C   D   E   F\nR0  99  78  61  16  73   8\nR1  62  27  30  80   7  76\nR2  15  53  80  27  44  77\nR3  75  65  47  30  84  86\nR4  18   9  41  62   1  82\n</code></pre>\n<p>To get the columns from <code>C</code> to <code>E</code> (note that unlike integer slicing, <code>E</code> is included in the columns):</p>\n<pre><code class=\"python\">df.loc[:, 'C':'E']\n\nOut:\n      C   D   E\nR0   61  16  73\nR1   30  80   7\nR2   80  27  44\nR3   47  30  84\nR4   41  62   1\nR5    5  58   0\n...\n</code></pre>\n<p>The same works for selecting rows based on labels. Get the rows <code>R6</code> to <code>R10</code> from those columns:</p>\n<pre><code class=\"python\">df.loc['R6':'R10', 'C':'E']\n\nOut:\n      C   D   E\nR6   51  27  31\nR7   83  19  18\nR8   11  67  65\nR9   78  27  29\nR10   7  16  94\n</code></pre>\n<p><code>.loc</code> also accepts a Boolean array so you can select the columns whose corresponding entry in the array is <code>True</code>. For example, <code>df.columns.isin(list('BCD'))</code> returns <code>array([False,  True,  True,  True, False, False], dtype=bool)</code> - True if the column name is in the list <code>['B', 'C', 'D']</code>; False, otherwise.</p>\n<pre><code class=\"python\">df.loc[:, df.columns.isin(list('BCD'))]\n\nOut:\n      B   C   D\nR0   78  61  16\nR1   27  30  80\nR2   53  80  27\nR3   65  47  30\nR4    9  41  62\nR5   78   5  58\n...\n</code></pre>\n", "abstract": "As of version 0.11.0, columns can be sliced in the manner you tried using the .loc indexer: gets the same columns as or and returns columns C through E. A demo on a randomly generated DataFrame: To get the columns from C to E (note that unlike integer slicing, E is included in the columns): The same works for selecting rows based on labels. Get the rows R6 to R10 from those columns: .loc also accepts a Boolean array so you can select the columns whose corresponding entry in the array is True. For example, df.columns.isin(list('BCD')) returns array([False,  True,  True,  True, False, False], dtype=bool) - True if the column name is in the list ['B', 'C', 'D']; False, otherwise."}, {"id": 13165753, "score": 139, "vote": 0, "content": "<p>Assuming your column names (<code>df.columns</code>) are <code>['index','a','b','c']</code>, then the data you want is in the\nthird and fourth columns. If you don't know their names when your script runs, you can do this</p>\n<pre><code class=\"python\">newdf = df[df.columns[2:4]] # Remember, Python is zero-offset! The \"third\" entry is at slot two.\n</code></pre>\n<p>As EMS points out in <a href=\"https://stackoverflow.com/questions/11285613/selecting-multiple-columns-in-a-pandas-dataframe/11287278#11287278\">his answer</a>, <code>df.ix</code> slices columns a bit more concisely, but the <code>.columns</code> slicing interface might be more natural, because it uses the vanilla one-dimensional Python list indexing/slicing syntax.</p>\n<p><em><strong>Warning</strong></em>: <code>'index'</code> is a bad name for a <code>DataFrame</code> column. That same label is also used for the real <code>df.index</code> attribute, an <code>Index</code> array. So your column is returned by <code>df['index']</code> and the real DataFrame index is returned by <code>df.index</code>. An <code>Index</code> is a special kind of <code>Series</code> optimized for lookup of its elements' values. For df.index it's for looking up rows by their label. That <code>df.columns</code> attribute is also a <code>pd.Index</code> array, for looking up columns by their labels.</p>\n", "abstract": "Assuming your column names (df.columns) are ['index','a','b','c'], then the data you want is in the\nthird and fourth columns. If you don't know their names when your script runs, you can do this As EMS points out in his answer, df.ix slices columns a bit more concisely, but the .columns slicing interface might be more natural, because it uses the vanilla one-dimensional Python list indexing/slicing syntax. Warning: 'index' is a bad name for a DataFrame column. That same label is also used for the real df.index attribute, an Index array. So your column is returned by df['index'] and the real DataFrame index is returned by df.index. An Index is a special kind of Series optimized for lookup of its elements' values. For df.index it's for looking up rows by their label. That df.columns attribute is also a pd.Index array, for looking up columns by their labels."}, {"id": 35203149, "score": 94, "vote": 0, "content": "<p>In the latest version of Pandas there is an easy way to do exactly this. Column names (which are strings) <strong>can</strong> be sliced in whatever manner you like.</p>\n<pre><code class=\"python\">columns = ['b', 'c']\ndf1 = pd.DataFrame(df, columns=columns)\n</code></pre>\n", "abstract": "In the latest version of Pandas there is an easy way to do exactly this. Column names (which are strings) can be sliced in whatever manner you like."}, {"id": 11385335, "score": 77, "vote": 0, "content": "<pre><code class=\"python\">In [39]: df\nOut[39]: \n   index  a  b  c\n0      1  2  3  4\n1      2  3  4  5\n\nIn [40]: df1 = df[['b', 'c']]\n\nIn [41]: df1\nOut[41]: \n   b  c\n0  3  4\n1  4  5\n</code></pre>\n", "abstract": ""}, {"id": 53415454, "score": 52, "vote": 0, "content": "<p>With Pandas,</p>\n<p>wit column names</p>\n<pre><code class=\"python\">dataframe[['column1','column2']]\n</code></pre>\n<p>to select by iloc and specific columns with index number:</p>\n<pre><code class=\"python\">dataframe.iloc[:,[1,2]]\n</code></pre>\n<p>with loc column names can be used like</p>\n<pre><code class=\"python\">dataframe.loc[:,['column1','column2']]\n</code></pre>\n", "abstract": "With Pandas, wit column names to select by iloc and specific columns with index number: with loc column names can be used like"}, {"id": 61335275, "score": 33, "vote": 0, "content": "<p>You can use the <code>pandas.DataFrame.filter</code> method to either filter or reorder columns like this:</p>\n<pre><code class=\"python\">df1 = df.filter(['a', 'b'])\n</code></pre>\n<p>This is also very useful when you are chaining methods.</p>\n", "abstract": "You can use the pandas.DataFrame.filter method to either filter or reorder columns like this: This is also very useful when you are chaining methods."}, {"id": 25643178, "score": 27, "vote": 0, "content": "<p>You could provide a list of columns to be dropped and return back the DataFrame with only the columns needed using the <code>drop()</code> function on a Pandas DataFrame.</p>\n<p>Just saying</p>\n<pre><code class=\"python\">colsToDrop = ['a']\ndf.drop(colsToDrop, axis=1)\n</code></pre>\n<p>would return a DataFrame with just the columns <code>b</code> and <code>c</code>.</p>\n<p>The <code>drop</code> method is documented <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.drop.html\" rel=\"noreferrer\">here</a>.</p>\n", "abstract": "You could provide a list of columns to be dropped and return back the DataFrame with only the columns needed using the drop() function on a Pandas DataFrame. Just saying would return a DataFrame with just the columns b and c. The drop method is documented here."}, {"id": 43734680, "score": 25, "vote": 0, "content": "<p>I found this method to be very useful:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\"># iloc[row slicing, column slicing]\nsurveys_df.iloc [0:3, 1:4]\n</code></pre>\n<p>More details can be found <a href=\"http://www.datacarpentry.org/python-ecology-lesson/02-index-slice-subset/\" rel=\"nofollow noreferrer\">here</a>.</p>\n", "abstract": "I found this method to be very useful: More details can be found here."}, {"id": 51864208, "score": 25, "vote": 0, "content": "<p>Starting with 0.21.0, using <code>.loc</code> or <code>[]</code> with a list with one or more missing labels is deprecated in favor of <code>.reindex</code>. So, the answer to your question is:</p>\n<pre><code class=\"python\">df1 = df.reindex(columns=['b','c'])\n</code></pre>\n<p>In prior versions, using <code>.loc[list-of-labels]</code> would work as long as at least one of the keys was found (otherwise it would raise a <code>KeyError</code>). This behavior is deprecated and now shows a warning message. The recommended alternative is to use <code>.reindex()</code>.</p>\n<p>Read more at <a href=\"https://pandas.pydata.org/pandas-docs/stable/indexing.html#reindexing\" rel=\"nofollow noreferrer\">Indexing and Selecting Data</a>.</p>\n", "abstract": "Starting with 0.21.0, using .loc or [] with a list with one or more missing labels is deprecated in favor of .reindex. So, the answer to your question is: In prior versions, using .loc[list-of-labels] would work as long as at least one of the keys was found (otherwise it would raise a KeyError). This behavior is deprecated and now shows a warning message. The recommended alternative is to use .reindex(). Read more at Indexing and Selecting Data."}, {"id": 54777265, "score": 14, "vote": 0, "content": "<p>You can use Pandas.</p>\n<p>I create the DataFrame:</p>\n<pre><code class=\"python\">import pandas as pd\ndf = pd.DataFrame([[1, 2,5], [5,4, 5], [7,7, 8], [7,6,9]],\n                  index=['Jane', 'Peter','Alex','Ann'],\n                  columns=['Test_1', 'Test_2', 'Test_3'])\n</code></pre>\n<p>The DataFrame:</p>\n<pre><code class=\"python\">       Test_1  Test_2  Test_3\nJane        1       2       5\nPeter       5       4       5\nAlex        7       7       8\nAnn         7       6       9\n</code></pre>\n<p>To select one or more columns by name:</p>\n<pre><code class=\"python\">df[['Test_1', 'Test_3']]\n\n       Test_1  Test_3\nJane        1       5\nPeter       5       5\nAlex        7       8\nAnn         7       9\n</code></pre>\n<p>You can also use:</p>\n<pre><code class=\"python\">df.Test_2\n</code></pre>\n<p>And you get column <code>Test_2</code>:</p>\n<pre><code class=\"python\">Jane     2\nPeter    4\nAlex     7\nAnn      6\n</code></pre>\n<p>You can also select columns and rows from these rows using <strong><code>.loc()</code></strong>. This is called <strong>\"slicing\"</strong>. Notice that I take from column <code>Test_1</code> to <code>Test_3</code>:</p>\n<pre><code class=\"python\">df.loc[:, 'Test_1':'Test_3']\n</code></pre>\n<p>The \"Slice\" is:</p>\n<pre><code class=\"python\">       Test_1  Test_2  Test_3\nJane        1       2       5\nPeter       5       4       5\nAlex        7       7       8\nAnn         7       6       9\n</code></pre>\n<p>And if you just want <code>Peter</code> and <code>Ann</code> from columns <code>Test_1</code> and <code>Test_3</code>:</p>\n<pre><code class=\"python\">df.loc[['Peter', 'Ann'], ['Test_1', 'Test_3']]\n</code></pre>\n<p>You get:</p>\n<pre><code class=\"python\">       Test_1  Test_3\nPeter       5       5\nAnn         7       9\n</code></pre>\n", "abstract": "You can use Pandas. I create the DataFrame: The DataFrame: To select one or more columns by name: You can also use: And you get column Test_2: You can also select columns and rows from these rows using .loc(). This is called \"slicing\". Notice that I take from column Test_1 to Test_3: The \"Slice\" is: And if you just want Peter and Ann from columns Test_1 and Test_3: You get:"}, {"id": 48073336, "score": 10, "vote": 0, "content": "<p>If you want to get one element by row index and column name, you can do it just like <code>df['b'][0]</code>. It is as simple as you can imagine.</p>\n<p>Or you can use <code>df.ix[0,'b']</code> - mixed usage of index and label.</p>\n<p><strong>Note:</strong> Since v0.20, <code>ix</code> has been deprecated in favour of <code>loc</code> / <code>iloc</code>.</p>\n", "abstract": "If you want to get one element by row index and column name, you can do it just like df['b'][0]. It is as simple as you can imagine. Or you can use df.ix[0,'b'] - mixed usage of index and label. Note: Since v0.20, ix has been deprecated in favour of loc / iloc."}, {"id": 61886334, "score": 9, "vote": 0, "content": "<pre class=\"lang-py prettyprint-override\"><code class=\"python\">df[['a', 'b']]  # Select all rows of 'a' and 'b'column \ndf.loc[0:10, ['a', 'b']]  # Index 0 to 10 select column 'a' and 'b'\ndf.loc[0:10, 'a':'b']  # Index 0 to 10 select column 'a' to 'b'\ndf.iloc[0:10, 3:5]  # Index 0 to 10 and column 3 to 5\ndf.iloc[3, 3:5]  # Index 3 of column 3 to 5\n</code></pre>\n", "abstract": ""}, {"id": 63220032, "score": 9, "vote": 0, "content": "<p>Try to use <code>pandas.DataFrame.get</code> (see <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.get.html\" rel=\"noreferrer\">the documentation</a>):</p>\n<pre><code class=\"python\">import pandas as pd\nimport numpy as np\n\ndates = pd.date_range('20200102', periods=6)\ndf = pd.DataFrame(np.random.randn(6, 4), index=dates, columns=list('ABCD'))\ndf.get(['A', 'C'])\n</code></pre>\n", "abstract": "Try to use pandas.DataFrame.get (see the documentation):"}, {"id": 52816036, "score": 7, "vote": 0, "content": "<p>One different and easy approach: iterating rows</p>\n<h3>Using iterows</h3>\n<pre><code class=\"python\"> df1 = pd.DataFrame() # Creating an empty dataframe\n for index,i in df.iterrows():\n    df1.loc[index, 'A'] = df.loc[index, 'A']\n    df1.loc[index, 'B'] = df.loc[index, 'B']\n    df1.head()\n</code></pre>\n", "abstract": "One different and easy approach: iterating rows"}, {"id": 51460267, "score": 6, "vote": 0, "content": "<p>The different approaches discussed in the previous answers are based on the assumption that either the user knows column indices to drop or subset on, or the user wishes to subset a dataframe using a range of columns (for instance between 'C' : 'E').</p>\n<p><strong>pandas.DataFrame.drop()</strong> is certainly an option to subset data based on a list of columns defined by user (though you have to be cautious that you always use copy of dataframe and <em>inplace</em> parameters should not be set to <em>True</em>!!)</p>\n<p>Another option is to use <strong>pandas.columns.difference()</strong>, which does a set difference on column names, and returns an index type of array containing desired columns. Following is the solution:</p>\n<pre><code class=\"python\">df = pd.DataFrame([[2,3,4], [3,4,5]], columns=['a','b','c'], index=[1,2])\ncolumns_for_differencing = ['a']\ndf1 = df.copy()[df.columns.difference(columns_for_differencing)]\nprint(df1)\n</code></pre>\n<p>The output would be:</p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">    b   c\n1   3   4\n2   4   5\n</code></pre>\n", "abstract": "The different approaches discussed in the previous answers are based on the assumption that either the user knows column indices to drop or subset on, or the user wishes to subset a dataframe using a range of columns (for instance between 'C' : 'E'). pandas.DataFrame.drop() is certainly an option to subset data based on a list of columns defined by user (though you have to be cautious that you always use copy of dataframe and inplace parameters should not be set to True!!) Another option is to use pandas.columns.difference(), which does a set difference on column names, and returns an index type of array containing desired columns. Following is the solution: The output would be:"}, {"id": 54414470, "score": 5, "vote": 0, "content": "<p>You can also use <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.pop.html\" rel=\"nofollow noreferrer\">df.pop()</a>:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; df = pd.DataFrame([('falcon', 'bird',    389.0),\n...                    ('parrot', 'bird',     24.0),\n...                    ('lion',   'mammal',   80.5),\n...                    ('monkey', 'mammal', np.nan)],\n...                   columns=('name', 'class', 'max_speed'))\n&gt;&gt;&gt; df\n     name   class  max_speed\n0  falcon    bird      389.0\n1  parrot    bird       24.0\n2    lion  mammal       80.5\n3  monkey  mammal\n\n&gt;&gt;&gt; df.pop('class')\n0      bird\n1      bird\n2    mammal\n3    mammal\nName: class, dtype: object\n\n&gt;&gt;&gt; df\n     name  max_speed\n0  falcon      389.0\n1  parrot       24.0\n2    lion       80.5\n3  monkey        NaN\n</code></pre>\n<p>Please use <code>df.pop(c)</code>.</p>\n", "abstract": "You can also use df.pop(): Please use df.pop(c)."}, {"id": 56316674, "score": 4, "vote": 0, "content": "<p>I've seen several answers on that, but one remained unclear to me. How would you select those columns of interest?</p>\n<p>The answer to that is that if you have them gathered in a list, you can just reference the columns using the list.</p>\n<h3>Example</h3>\n<pre><code class=\"python\">print(extracted_features.shape)\nprint(extracted_features)\n\n(63,)\n['f000004' 'f000005' 'f000006' 'f000014' 'f000039' 'f000040' 'f000043'\n 'f000047' 'f000048' 'f000049' 'f000050' 'f000051' 'f000052' 'f000053'\n 'f000054' 'f000055' 'f000056' 'f000057' 'f000058' 'f000059' 'f000060'\n 'f000061' 'f000062' 'f000063' 'f000064' 'f000065' 'f000066' 'f000067'\n 'f000068' 'f000069' 'f000070' 'f000071' 'f000072' 'f000073' 'f000074'\n 'f000075' 'f000076' 'f000077' 'f000078' 'f000079' 'f000080' 'f000081'\n 'f000082' 'f000083' 'f000084' 'f000085' 'f000086' 'f000087' 'f000088'\n 'f000089' 'f000090' 'f000091' 'f000092' 'f000093' 'f000094' 'f000095'\n 'f000096' 'f000097' 'f000098' 'f000099' 'f000100' 'f000101' 'f000103']\n</code></pre>\n<p>I have the following list/NumPy array <code>extracted_features</code>, specifying 63 columns. The original dataset has 103 columns, and I would like to extract exactly those, then I would use</p>\n<pre><code class=\"python\">dataset[extracted_features]\n</code></pre>\n<p>And you will end up with this</p>\n<p><a href=\"https://i.stack.imgur.com/3jLjo.png\" rel=\"nofollow noreferrer\"><img alt=\"Enter image description here\" src=\"https://i.stack.imgur.com/3jLjo.png\"/></a></p>\n<p>This something you would use quite often in <a href=\"https://en.wikipedia.org/wiki/Machine_learning\" rel=\"nofollow noreferrer\">machine learning</a> (more specifically, in feature selection). I would like to discuss other ways too, but I think that has already been covered by other Stack Overflower users.</p>\n", "abstract": "I've seen several answers on that, but one remained unclear to me. How would you select those columns of interest? The answer to that is that if you have them gathered in a list, you can just reference the columns using the list. I have the following list/NumPy array extracted_features, specifying 63 columns. The original dataset has 103 columns, and I would like to extract exactly those, then I would use And you will end up with this  This something you would use quite often in machine learning (more specifically, in feature selection). I would like to discuss other ways too, but I think that has already been covered by other Stack Overflower users."}, {"id": 64303084, "score": 4, "vote": 0, "content": "<p>To select multiple columns, extract and view them thereafter: <code>df</code> is the previously named data frame. Then create a new data frame <code>df1</code>, and select the columns A to D which you want to extract and view.</p>\n<pre><code class=\"python\">df1 = pd.DataFrame(data_frame, columns=['Column A', 'Column B', 'Column C', 'Column D'])\ndf1\n</code></pre>\n<p>All required columns will show up!</p>\n", "abstract": "To select multiple columns, extract and view them thereafter: df is the previously named data frame. Then create a new data frame df1, and select the columns A to D which you want to extract and view. All required columns will show up!"}, {"id": 67381126, "score": 3, "vote": 0, "content": "<p>To exclude some columns you can <a href=\"https://pandas.pydata.org/docs/reference/api/pandas.Index.drop.html\" rel=\"nofollow noreferrer\">drop</a> them in the column index. For example:</p>\n<pre><code class=\"python\">   A   B    C     D\n0  1  10  100  1000\n1  2  20  200  2000\n</code></pre>\n<p>Select all except two:</p>\n<pre><code class=\"python\">df[df.columns.drop(['B', 'D'])]\n</code></pre>\n<p>Output:</p>\n<pre><code class=\"python\">   A    C\n0  1  100\n1  2  200\n</code></pre>\n<p>You can also use the method <a href=\"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.truncate.html\" rel=\"nofollow noreferrer\">truncate</a> to select middle columns:</p>\n<pre><code class=\"python\">df.truncate(before='B', after='C', axis=1)\n</code></pre>\n<p>Output:</p>\n<pre><code class=\"python\">    B    C\n0  10  100\n1  20  200\n</code></pre>\n", "abstract": "To exclude some columns you can drop them in the column index. For example: Select all except two: Output: You can also use the method truncate to select middle columns: Output:"}, {"id": 67361217, "score": 1, "vote": 0, "content": "<pre><code class=\"python\">def get_slize(dataframe, start_row, end_row, start_col, end_col):\n    assert len(dataframe) &gt; end_row and start_row &gt;= 0\n    assert len(dataframe.columns) &gt; end_col and start_col &gt;= 0\n    list_of_indexes = list(dataframe.columns)[start_col:end_col]\n    ans = dataframe.iloc[start_row:end_row][list_of_indexes]\n    return ans\n</code></pre>\n<p>Just use this function</p>\n", "abstract": "Just use this function"}, {"id": 72494910, "score": -1, "vote": 0, "content": "<p><strong>I think this is the easiest way to reach your goal.</strong></p>\n<blockquote>\n<p><code>import pandas as pd </code></p>\n<pre><code class=\"python\">cols = ['a', 'b']\n\ndf1 = pd.DataFrame(df, columns=cols)\n\ndf1 = df.iloc[:, 0:2]\n</code></pre>\n</blockquote>\n", "abstract": "I think this is the easiest way to reach your goal. import pandas as pd "}]}, {"link": "https://stackoverflow.com/questions/582336/how-do-i-profile-a-python-script", "question": {"id": "582336", "title": "How do I profile a Python script?", "content": "<p><a href=\"http://en.wikipedia.org/wiki/Project_Euler\" rel=\"noreferrer\">Project Euler</a> and other coding contests often have a maximum time to run or people boast of how fast their particular solution runs. With Python, sometimes the approaches are somewhat kludgey - i.e., adding timing code to <code>__main__</code>.</p>\n<p>What is a good way to profile how long a Python program takes to run?</p>\n", "abstract": "Project Euler and other coding contests often have a maximum time to run or people boast of how fast their particular solution runs. With Python, sometimes the approaches are somewhat kludgey - i.e., adding timing code to __main__. What is a good way to profile how long a Python program takes to run?"}, "answers": [{"id": 582337, "score": 1648, "vote": 0, "content": "<p>Python includes a profiler called <a href=\"https://docs.python.org/3/library/profile.html#module-cProfile\" rel=\"noreferrer\">cProfile</a>. It not only gives the total running time, but also times each function separately, and tells you how many times each function was called, making it easy to determine where you should make optimizations.</p>\n<p>You can call it from within your code, or from the interpreter, like this:</p>\n<pre><code class=\"python\">import cProfile\ncProfile.run('foo()')\n</code></pre>\n<p>Even more usefully, you can invoke the cProfile when running a script:</p>\n<pre><code class=\"python\">python -m cProfile myscript.py\n</code></pre>\n<p>To make it even easier, I made a little batch file called 'profile.bat':</p>\n<pre><code class=\"python\">python -m cProfile %1\n</code></pre>\n<p>So all I have to do is run:</p>\n<pre><code class=\"python\">profile euler048.py\n</code></pre>\n<p>And I get this:</p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">1007 function calls in 0.061 CPU seconds\n\nOrdered by: standard name\nncalls  tottime  percall  cumtime  percall filename:lineno(function)\n    1    0.000    0.000    0.061    0.061 &lt;string&gt;:1(&lt;module&gt;)\n 1000    0.051    0.000    0.051    0.000 euler048.py:2(&lt;lambda&gt;)\n    1    0.005    0.005    0.061    0.061 euler048.py:2(&lt;module&gt;)\n    1    0.000    0.000    0.061    0.061 {execfile}\n    1    0.002    0.002    0.053    0.053 {map}\n    1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler objects}\n    1    0.000    0.000    0.000    0.000 {range}\n    1    0.003    0.003    0.003    0.003 {sum}\n</code></pre>\n<p>EDIT: Updated link to a good video resource from PyCon 2013 titled \n<a href=\"https://web.archive.org/web/20170318204046/http://lanyrd.com/2013/pycon/scdywg/\" rel=\"noreferrer\"><strong><em>Python Profiling</em></strong></a><br/>\n<a href=\"https://www.youtube.com/watch?v=QJwVYlDzAXs\" rel=\"noreferrer\">Also via YouTube</a>.</p>\n", "abstract": "Python includes a profiler called cProfile. It not only gives the total running time, but also times each function separately, and tells you how many times each function was called, making it easy to determine where you should make optimizations. You can call it from within your code, or from the interpreter, like this: Even more usefully, you can invoke the cProfile when running a script: To make it even easier, I made a little batch file called 'profile.bat': So all I have to do is run: And I get this: EDIT: Updated link to a good video resource from PyCon 2013 titled \nPython Profiling\nAlso via YouTube."}, {"id": 11822995, "score": 505, "vote": 0, "content": "<p>A while ago I made <a href=\"http://pycallgraph.slowchop.com/\" rel=\"noreferrer\"><code>pycallgraph</code></a> which generates a visualisation from your Python code. <strong>Edit:</strong> I've updated the example to work with 3.3, the latest release as of this writing.</p>\n<p>After a <code>pip install pycallgraph</code> and installing <a href=\"http://www.graphviz.org/\" rel=\"noreferrer\">GraphViz</a> you can run it from the command line:</p>\n<pre><code class=\"python\">pycallgraph graphviz -- ./mypythonscript.py\n</code></pre>\n<p>Or, you can profile particular parts of your code:</p>\n<pre><code class=\"python\">from pycallgraph import PyCallGraph\nfrom pycallgraph.output import GraphvizOutput\n\nwith PyCallGraph(output=GraphvizOutput()):\n    code_to_profile()\n</code></pre>\n<p>Either of these will generate a <code>pycallgraph.png</code> file similar to the image below:</p>\n<p><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/aiNEA.png\"/></p>\n", "abstract": "A while ago I made pycallgraph which generates a visualisation from your Python code. Edit: I've updated the example to work with 3.3, the latest release as of this writing. After a pip install pycallgraph and installing GraphViz you can run it from the command line: Or, you can profile particular parts of your code: Either of these will generate a pycallgraph.png file similar to the image below: "}, {"id": 1922945, "score": 228, "vote": 0, "content": "<p>It's worth pointing out that using the profiler only works (by default) on the main thread, and you won't get any information from other threads if you use them.  This can be a bit of a gotcha as it is completely unmentioned in the <a href=\"http://docs.python.org/library/profile.html\" rel=\"noreferrer\">profiler documentation</a>.</p>\n<p>If you also want to profile threads, you'll want to look at the <a href=\"http://docs.python.org/library/threading.html#threading.setprofile\" rel=\"noreferrer\" title=\"threading.setprofile() function\"><code>threading.setprofile()</code> function</a> in the docs.</p>\n<p>You could also create your own <code>threading.Thread</code> subclass to do it:</p>\n<pre><code class=\"python\">class ProfiledThread(threading.Thread):\n    # Overrides threading.Thread.run()\n    def run(self):\n        profiler = cProfile.Profile()\n        try:\n            return profiler.runcall(threading.Thread.run, self)\n        finally:\n            profiler.dump_stats('myprofile-%d.profile' % (self.ident,))\n</code></pre>\n<p>and use that <code>ProfiledThread</code> class instead of the standard one.  It might give you more flexibility, but I'm not sure it's worth it, especially if you are using third-party code which wouldn't use your class.</p>\n", "abstract": "It's worth pointing out that using the profiler only works (by default) on the main thread, and you won't get any information from other threads if you use them.  This can be a bit of a gotcha as it is completely unmentioned in the profiler documentation. If you also want to profile threads, you'll want to look at the threading.setprofile() function in the docs. You could also create your own threading.Thread subclass to do it: and use that ProfiledThread class instead of the standard one.  It might give you more flexibility, but I'm not sure it's worth it, especially if you are using third-party code which wouldn't use your class."}, {"id": 7693928, "score": 177, "vote": 0, "content": "<p>The python wiki is a great page for profiling resources:\n<a href=\"http://wiki.python.org/moin/PythonSpeed/PerformanceTips#Profiling_Code\" rel=\"noreferrer\">http://wiki.python.org/moin/PythonSpeed/PerformanceTips#Profiling_Code</a></p>\n<p>as is the python docs:\n<a href=\"http://docs.python.org/library/profile.html\" rel=\"noreferrer\">http://docs.python.org/library/profile.html</a></p>\n<p>as shown by Chris Lawlor cProfile is a great tool and can easily be used to print to the screen:</p>\n<pre><code class=\"python\">python -m cProfile -s time mine.py &lt;args&gt;\n</code></pre>\n<p>or to file:</p>\n<pre><code class=\"python\">python -m cProfile -o output.file mine.py &lt;args&gt;\n</code></pre>\n<p>PS&gt; If you are using Ubuntu, make sure to install python-profile</p>\n<pre><code class=\"python\">apt-get install python-profiler \n</code></pre>\n<p>If you output to file you can get nice visualizations using the following tools</p>\n<p>PyCallGraph : a tool to create call graph images <br/>\n  install:<br/></p>\n<pre><code class=\"python\"> pip install pycallgraph\n</code></pre>\n<p>run:</p>\n<pre><code class=\"python\"> pycallgraph mine.py args\n</code></pre>\n<p>view:</p>\n<pre><code class=\"python\"> gimp pycallgraph.png\n</code></pre>\n<p><em>You can use whatever you like to view the png file, I used gimp</em><br/>\nUnfortunately I often get </p>\n<p>dot: graph is too large for cairo-renderer bitmaps. Scaling by 0.257079 to fit</p>\n<p>which makes my images unusably small.  So I generally create svg files:</p>\n<pre><code class=\"python\">pycallgraph -f svg -o pycallgraph.svg mine.py &lt;args&gt;\n</code></pre>\n<p>PS&gt; make sure to install graphviz (which provides the dot program):</p>\n<pre><code class=\"python\">pip install graphviz\n</code></pre>\n<p>Alternative Graphing using gprof2dot via @maxy / @quodlibetor :</p>\n<pre><code class=\"python\">pip install gprof2dot\npython -m cProfile -o profile.pstats mine.py\ngprof2dot -f pstats profile.pstats | dot -Tsvg -o mine.svg\n</code></pre>\n", "abstract": "The python wiki is a great page for profiling resources:\nhttp://wiki.python.org/moin/PythonSpeed/PerformanceTips#Profiling_Code as is the python docs:\nhttp://docs.python.org/library/profile.html as shown by Chris Lawlor cProfile is a great tool and can easily be used to print to the screen: or to file: PS> If you are using Ubuntu, make sure to install python-profile If you output to file you can get nice visualizations using the following tools PyCallGraph : a tool to create call graph images \n  install: run: view: You can use whatever you like to view the png file, I used gimp\nUnfortunately I often get  dot: graph is too large for cairo-renderer bitmaps. Scaling by 0.257079 to fit which makes my images unusably small.  So I generally create svg files: PS> make sure to install graphviz (which provides the dot program): Alternative Graphing using gprof2dot via @maxy / @quodlibetor :"}, {"id": 13830132, "score": 158, "vote": 0, "content": "<p>@Maxy's comment on <a href=\"https://stackoverflow.com/a/7693928/25616\">this answer</a> helped me out enough that I think it deserves its own answer: I already had cProfile-generated .pstats files and I didn't want to re-run things with pycallgraph, so I used <a href=\"https://github.com/jrfonseca/gprof2dot\" rel=\"noreferrer\">gprof2dot</a>, and got pretty svgs:</p>\n<pre><code class=\"python\">$ sudo apt-get install graphviz\n$ git clone https://github.com/jrfonseca/gprof2dot\n$ ln -s \"$PWD\"/gprof2dot/gprof2dot.py ~/bin\n$ cd $PROJECT_DIR\n$ gprof2dot.py -f pstats profile.pstats | dot -Tsvg -o callgraph.svg\n</code></pre>\n<p>and BLAM!</p>\n<p>It uses dot (the same thing that pycallgraph uses) so output looks similar. I get the impression that gprof2dot loses less information though:</p>\n<p><a href=\"https://i.stack.imgur.com/JjSvt.png\" rel=\"noreferrer\"><img alt=\"gprof2dot example output\" src=\"https://i.stack.imgur.com/JjSvt.png\"/></a></p>\n", "abstract": "@Maxy's comment on this answer helped me out enough that I think it deserves its own answer: I already had cProfile-generated .pstats files and I didn't want to re-run things with pycallgraph, so I used gprof2dot, and got pretty svgs: and BLAM! It uses dot (the same thing that pycallgraph uses) so output looks similar. I get the impression that gprof2dot loses less information though: "}, {"id": 49173782, "score": 138, "vote": 0, "content": "<p><strong>Simplest</strong> and <strong>quickest</strong> way to find where all the time is going.</p>\n<pre><code class=\"python\">1. pip install snakeviz\n\n2. python -m cProfile -o temp.dat &lt;PROGRAM&gt;.py\n\n3. snakeviz temp.dat\n</code></pre>\n<p>Draws a pie chart in a browser. Biggest piece is the problem function. Very simple.</p>\n", "abstract": "Simplest and quickest way to find where all the time is going. Draws a pie chart in a browser. Biggest piece is the problem function. Very simple."}, {"id": 37431235, "score": 103, "vote": 0, "content": "<p>I ran into a handy tool called <a href=\"https://jiffyclub.github.io/snakeviz/\">SnakeViz</a> when researching this topic. SnakeViz is a web-based profiling visualization tool. It is very easy to install and use. The usual way I use it is to generate a stat file with <code>%prun</code> and then do analysis in SnakeViz.</p>\n<p>The main viz technique used is <strong>Sunburst chart</strong> as shown below, in which the hierarchy of function calls is arranged as layers of arcs and time info encoded in their angular widths.</p>\n<p>The best thing is you can interact with the chart. For example, to zoom in one can click on an arc, and the arc and its descendants will be enlarged as a new sunburst to display more details.</p>\n<p><a href=\"https://i.stack.imgur.com/kCmSY.png\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/kCmSY.png\"/></a></p>\n", "abstract": "I ran into a handy tool called SnakeViz when researching this topic. SnakeViz is a web-based profiling visualization tool. It is very easy to install and use. The usual way I use it is to generate a stat file with %prun and then do analysis in SnakeViz. The main viz technique used is Sunburst chart as shown below, in which the hierarchy of function calls is arranged as layers of arcs and time info encoded in their angular widths. The best thing is you can interact with the chart. For example, to zoom in one can click on an arc, and the arc and its descendants will be enlarged as a new sunburst to display more details. "}, {"id": 37157132, "score": 94, "vote": 0, "content": "<p><a href=\"https://docs.python.org/2/library/profile.html\" rel=\"noreferrer\"><code>cProfile</code></a> is great for profiling, while <a href=\"https://kcachegrind.github.io/html/Home.html\" rel=\"noreferrer\"><code>kcachegrind</code></a> is great for visualizing the results. The <a href=\"https://pypi.python.org/pypi/pyprof2calltree\" rel=\"noreferrer\"><code>pyprof2calltree</code></a> in between handles the file conversion.</p>\n<pre><code class=\"python\">python -m cProfile -o script.profile script.py\npyprof2calltree -i script.profile -o script.calltree\nkcachegrind script.calltree\n</code></pre>\n<p>Required system packages:</p>\n<ul>\n<li><code>kcachegrind</code> (Linux), <code>qcachegrind</code> (MacOs)</li>\n</ul>\n<p>Setup on Ubuntu:</p>\n<pre><code class=\"python\">apt-get install kcachegrind \npip install pyprof2calltree\n</code></pre>\n<p>The result:</p>\n<p><a href=\"https://i.stack.imgur.com/1TFZe.png\" rel=\"noreferrer\"><img alt=\"Screenshot of the result\" src=\"https://i.stack.imgur.com/1TFZe.png\"/></a></p>\n", "abstract": "cProfile is great for profiling, while kcachegrind is great for visualizing the results. The pyprof2calltree in between handles the file conversion. Required system packages: Setup on Ubuntu: The result: "}, {"id": 51683473, "score": 61, "vote": 0, "content": "<p>I recently created <a href=\"https://github.com/nschloe/tuna\" rel=\"noreferrer\">tuna</a> for visualizing Python runtime and import profiles; this may be helpful here.</p>\n<p><a href=\"https://i.stack.imgur.com/ZpP6M.gif\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/ZpP6M.gif\"/></a></p>\n<p>Install with</p>\n<pre><code class=\"python\">pip install tuna\n</code></pre>\n<p>Create a runtime profile</p>\n<pre><code class=\"python\">python3 -m cProfile -o program.prof yourfile.py\n</code></pre>\n<p>or an import profile (Python 3.7+ required)</p>\n<pre><code class=\"python\">python3 -X importprofile yourfile.py 2&gt; import.log\n</code></pre>\n<p>Then just run tuna on the file</p>\n<pre><code class=\"python\">tuna program.prof\n</code></pre>\n", "abstract": "I recently created tuna for visualizing Python runtime and import profiles; this may be helpful here.  Install with Create a runtime profile or an import profile (Python 3.7+ required) Then just run tuna on the file"}, {"id": 28660109, "score": 43, "vote": 0, "content": "<p>Also worth mentioning is the GUI cProfile dump viewer <a href=\"http://www.vrplumber.com/programming/runsnakerun/\">RunSnakeRun</a>.  It allows you to sort and select, thereby zooming in on the relevant parts of the program.  The sizes of the rectangles in the picture is proportional to the time taken.  If you mouse over a rectangle it highlights that call in the table and everywhere on the map.  When you double-click on a rectangle it zooms in on that portion.  It will show you who calls that portion and what that portion calls.</p>\n<p>The descriptive information is very helpful.  It shows you the code for that bit which can be helpful when you are dealing with built-in library calls.  It tells you what file and what line to find the code.</p>\n<p>Also want to point at that the OP said 'profiling' but it appears he meant 'timing'.  Keep in mind programs will run slower when profiled.</p>\n<p><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/2GahD.png\"/></p>\n", "abstract": "Also worth mentioning is the GUI cProfile dump viewer RunSnakeRun.  It allows you to sort and select, thereby zooming in on the relevant parts of the program.  The sizes of the rectangles in the picture is proportional to the time taken.  If you mouse over a rectangle it highlights that call in the table and everywhere on the map.  When you double-click on a rectangle it zooms in on that portion.  It will show you who calls that portion and what that portion calls. The descriptive information is very helpful.  It shows you the code for that bit which can be helpful when you are dealing with built-in library calls.  It tells you what file and what line to find the code. Also want to point at that the OP said 'profiling' but it appears he meant 'timing'.  Keep in mind programs will run slower when profiled. "}, {"id": 28808860, "score": 39, "vote": 0, "content": "<h1>pprofile</h1>\n<p><code>line_profiler</code> (already presented here) also inspired  <a href=\"https://github.com/vpelletier/pprofile\" rel=\"noreferrer\"><code>pprofile</code></a>, which is described as:</p>\n<blockquote>\n<p>Line-granularity, thread-aware deterministic and statistic pure-python\n  profiler</p>\n</blockquote>\n<p>It provides line-granularity as <code>line_profiler</code>, is pure Python, can be used as a standalone command or a module, and can even generate callgrind-format files that can be easily analyzed with <code>[k|q]cachegrind</code>.</p>\n<h1>vprof</h1>\n<p>There is also <a href=\"https://github.com/nvdv/vprof\" rel=\"noreferrer\">vprof</a>, a Python package described as:</p>\n<blockquote>\n<p>[...] providing rich and interactive visualizations for various Python program characteristics such as running time and memory usage.</p>\n</blockquote>\n<p><a href=\"https://i.stack.imgur.com/uafO3.png\" rel=\"noreferrer\"><img alt=\"heatmap\" src=\"https://i.stack.imgur.com/uafO3.png\"/></a></p>\n", "abstract": "line_profiler (already presented here) also inspired  pprofile, which is described as: Line-granularity, thread-aware deterministic and statistic pure-python\n  profiler It provides line-granularity as line_profiler, is pure Python, can be used as a standalone command or a module, and can even generate callgrind-format files that can be easily analyzed with [k|q]cachegrind. There is also vprof, a Python package described as: [...] providing rich and interactive visualizations for various Python program characteristics such as running time and memory usage. "}, {"id": 7838845, "score": 37, "vote": 0, "content": "<p>A nice profiling module is the line_profiler (called using the script kernprof.py).  It can be downloaded <a href=\"http://packages.python.org/line_profiler/\" rel=\"noreferrer\">here</a>.</p>\n<p>My understanding is that cProfile only gives information about total time spent in each function.  So individual lines of code are not timed.  This is an issue in scientific computing since often one single line can take a lot of time.  Also, as I remember, cProfile didn't catch the time I was spending in say numpy.dot.</p>\n", "abstract": "A nice profiling module is the line_profiler (called using the script kernprof.py).  It can be downloaded here. My understanding is that cProfile only gives information about total time spent in each function.  So individual lines of code are not timed.  This is an issue in scientific computing since often one single line can take a lot of time.  Also, as I remember, cProfile didn't catch the time I was spending in say numpy.dot."}, {"id": 57401266, "score": 24, "vote": 0, "content": "<p>The terminal-only (and simplest) solution, in case all those fancy UI's fail to install or to run:<br/>\nignore <code>cProfile</code> completely and replace it with <code>pyinstrument</code>, that will collect and display the tree of calls right after execution.</p>\n<p>Install:  </p>\n<pre><code class=\"python\">$ pip install pyinstrument\n</code></pre>\n<p>Profile and display result:  </p>\n<pre><code class=\"python\">$ python -m pyinstrument ./prog.py\n</code></pre>\n<p>Works with python2 and 3.</p>\n<p>[EDIT]\nThe documentation of the API, for profiling only a part of the code, can be found <a href=\"https://github.com/joerick/pyinstrument#profile-a-specific-chunk-of-code\" rel=\"noreferrer\">here</a>.</p>\n", "abstract": "The terminal-only (and simplest) solution, in case all those fancy UI's fail to install or to run:\nignore cProfile completely and replace it with pyinstrument, that will collect and display the tree of calls right after execution. Install:   Profile and display result:   Works with python2 and 3. [EDIT]\nThe documentation of the API, for profiling only a part of the code, can be found here."}, {"id": 32139774, "score": 20, "vote": 0, "content": "<p>There's a lot of great answers but they either use command line or some external program for profiling and/or sorting the results.</p>\n<p>I really missed some way I could use in my IDE (eclipse-PyDev) without touching the command line or installing anything. So here it is.</p>\n<h1>Profiling without command line</h1>\n<pre><code class=\"python\">def count():\n    from math import sqrt\n    for x in range(10**5):\n        sqrt(x)\n\nif __name__ == '__main__':\n    import cProfile, pstats\n    cProfile.run(\"count()\", \"{}.profile\".format(__file__))\n    s = pstats.Stats(\"{}.profile\".format(__file__))\n    s.strip_dirs()\n    s.sort_stats(\"time\").print_stats(10)\n</code></pre>\n<p>See <a href=\"https://docs.python.org/3.4/library/profile.html\" rel=\"noreferrer\">docs</a> or other answers for more info.</p>\n", "abstract": "There's a lot of great answers but they either use command line or some external program for profiling and/or sorting the results. I really missed some way I could use in my IDE (eclipse-PyDev) without touching the command line or installing anything. So here it is. See docs or other answers for more info."}, {"id": 60668506, "score": 14, "vote": 0, "content": "<p>With a statistical profiler like <a href=\"https://github.com/P403n1x87/austin\" rel=\"nofollow noreferrer\">austin</a>, no instrumentation is required, meaning that you can get profiling data out of a Python application simply with</p>\n<pre><code class=\"python\">austin python3 my_script.py\n</code></pre>\n<p>The raw output isn't very useful, but you can pipe that to <a href=\"https://github.com/brendangregg/FlameGraph/blob/master/flamegraph.pl\" rel=\"nofollow noreferrer\">flamegraph.pl</a>\nto get a flame graph representation of that data that gives you a breakdown of where the time (measured in microseconds of real time) is being spent.</p>\n<pre><code class=\"python\">austin python3 my_script.py | flamegraph.pl &gt; my_script_profile.svg\n</code></pre>\n<p>Alternatively, you can also use the web application <a href=\"http://speedscope.app/\" rel=\"nofollow noreferrer\">Speedscope.app</a> for quick visualisation of the collected samples. If you have <a href=\"https://github.com/google/pprof\" rel=\"nofollow noreferrer\">pprof</a> installed, you can also get <a href=\"https://github.com/P403n1x87/austin-python\" rel=\"nofollow noreferrer\">austin-python</a> (with e.g. <code>pipx install austin-python</code>) and use the <code>austin2pprof</code> to covert to the pprof format.</p>\n<p>However, if you have VS Code installed you could use the <a href=\"https://marketplace.visualstudio.com/items?itemName=p403n1x87.austin-vscode\" rel=\"nofollow noreferrer\">Austin extension</a> for a more interactive experience, with source code heat maps, top functions and collected call stacks</p>\n<p><img alt=\"Austin VS Code extension\" src=\"https://github.com/P403n1x87/austin-vscode/raw/main/art/demo.gif\"/></p>\n<p>If you rather use the terminal, you can also use the <a href=\"https://github.com/p403n1x87/austin-tui\" rel=\"nofollow noreferrer\">TUI</a>, that also has a live graph mode:</p>\n<p><img alt=\"Austin TUI graph mode\" src=\"https://github.com/P403n1x87/austin-tui/raw/master/art/austin-tui-flamegraph.gif\"/></p>\n", "abstract": "With a statistical profiler like austin, no instrumentation is required, meaning that you can get profiling data out of a Python application simply with The raw output isn't very useful, but you can pipe that to flamegraph.pl\nto get a flame graph representation of that data that gives you a breakdown of where the time (measured in microseconds of real time) is being spent. Alternatively, you can also use the web application Speedscope.app for quick visualisation of the collected samples. If you have pprof installed, you can also get austin-python (with e.g. pipx install austin-python) and use the austin2pprof to covert to the pprof format. However, if you have VS Code installed you could use the Austin extension for a more interactive experience, with source code heat maps, top functions and collected call stacks  If you rather use the terminal, you can also use the TUI, that also has a live graph mode: "}, {"id": 8065384, "score": 13, "vote": 0, "content": "<p>Following Joe Shaw's answer about multi-threaded code not to work as expected, I figured that the <code>runcall</code> method in cProfile is merely doing <code>self.enable()</code> and <code>self.disable()</code> calls around the profiled function call, so you can simply do that yourself and have whatever code you want in-between with minimal interference with existing code.</p>\n", "abstract": "Following Joe Shaw's answer about multi-threaded code not to work as expected, I figured that the runcall method in cProfile is merely doing self.enable() and self.disable() calls around the profiled function call, so you can simply do that yourself and have whatever code you want in-between with minimal interference with existing code."}, {"id": 583452, "score": 10, "vote": 0, "content": "<p>In Virtaal's <a href=\"https://github.com/translate/virtaal/blob/master/devsupport/profiling.py\" rel=\"nofollow noreferrer\">source</a> there's a very useful class and decorator that can make profiling (even for specific methods/functions) very easy. The output can then be viewed very comfortably in KCacheGrind.</p>\n", "abstract": "In Virtaal's source there's a very useful class and decorator that can make profiling (even for specific methods/functions) very easy. The output can then be viewed very comfortably in KCacheGrind."}, {"id": 62005284, "score": 10, "vote": 0, "content": "<p>For getting quick profile stats on an IPython notebook.\nOne can embed <strong>line_profiler</strong> and <strong>memory_profiler</strong> straight into their notebooks.</p>\n<p>Another useful package is <strong>Pympler</strong>. It is a powerful profiling package that's capable to track classes,objects,functions,memory leaks etc. Examples below, Docs attached.</p>\n<h2>Get it!</h2>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">!pip install line_profiler\n!pip install memory_profiler\n!pip install pympler\n</code></pre>\n<h2>Load it!</h2>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">%load_ext line_profiler\n%load_ext memory_profiler\n</code></pre>\n<h2>Use it!</h2>\n<hr/>\n<h1>%time</h1>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">%time print('Outputs CPU time,Wall Clock time') \n#CPU times: user 2 \u00b5s, sys: 0 ns, total: 2 \u00b5s Wall time: 5.96 \u00b5s\n</code></pre>\n<p>Gives:</p>\n<ul>\n<li>CPU times: CPU level execution time</li>\n<li>sys times: system level execution time</li>\n<li>total: CPU time + system time</li>\n<li>Wall time: Wall Clock Time</li>\n</ul>\n<hr/>\n<h1>%timeit</h1>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">%timeit -r 7 -n 1000 print('Outputs execution time of the snippet') \n#1000 loops, best of 7: 7.46 ns per loop\n</code></pre>\n<ul>\n<li>Gives best time out of given number of runs(r) in looping (n) times.</li>\n<li>Outputs details on system caching:\n<ul>\n<li>When code snippets are executed multiple times, system caches a few opearations and doesn't execute them again that may hamper the accuracy of the profile reports.</li>\n</ul>\n</li>\n</ul>\n<hr/>\n<h1>%prun</h1>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">%prun -s cumulative 'Code to profile' \n</code></pre>\n<p>Gives:</p>\n<ul>\n<li>number of function calls(ncalls)</li>\n<li>has entries per function call(distinct)</li>\n<li>time taken per call(percall)</li>\n<li>time elapsed till that function call(cumtime)</li>\n<li>name of the func/module called etc...</li>\n</ul>\n<p><a href=\"https://i.stack.imgur.com/1IkgA.png\" rel=\"noreferrer\"><img alt=\"Cumulative profile\" src=\"https://i.stack.imgur.com/1IkgA.png\"/></a></p>\n<hr/>\n<h1>%memit</h1>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">%memit 'Code to profile'\n#peak memory: 199.45 MiB, increment: 0.00 MiB\n</code></pre>\n<p>Gives:</p>\n<ul>\n<li>Memory usage</li>\n</ul>\n<hr/>\n<h1>%lprun</h1>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">#Example function\ndef fun():\n  for i in range(10):\n    print(i)\n\n#Usage: %lprun &lt;name_of_the_function&gt; function\n%lprun -f fun fun()\n</code></pre>\n<p>Gives:</p>\n<ul>\n<li>Line wise stats</li>\n</ul>\n<p><a href=\"https://i.stack.imgur.com/rusPA.png\" rel=\"noreferrer\"><img alt=\"LineProfile\" src=\"https://i.stack.imgur.com/rusPA.png\"/></a></p>\n<hr/>\n<h1>sys.getsizeof</h1>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">sys.getsizeof('code to profile')\n# 64 bytes\n</code></pre>\n<p>Returns the size of an object in bytes.</p>\n<hr/>\n<h1>asizeof() from pympler</h1>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">from pympler import asizeof\nobj = [1,2,(\"hey\",\"ha\"),3]\nprint(asizeof.asizeof(obj,stats=4))\n\n</code></pre>\n<p>pympler.asizeof can be used to investigate how much memory certain Python objects consume.\nIn contrast to sys.getsizeof, asizeof sizes objects recursively</p>\n<p><a href=\"https://i.stack.imgur.com/8jxQX.png\" rel=\"noreferrer\"><img alt=\"pympler.asizeof\" src=\"https://i.stack.imgur.com/8jxQX.png\"/></a></p>\n<hr/>\n<h1>tracker from pympler</h1>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">from pympler import tracker\ntr = tracker.SummaryTracker()\ndef fun():\n  li = [1,2,3]\n  di = {\"ha\":\"haha\",\"duh\":\"Umm\"}\nfun()\ntr.print_diff()\n</code></pre>\n<p>Tracks the lifetime of a function.</p>\n<p><a href=\"https://i.stack.imgur.com/SrRj9.png\" rel=\"noreferrer\"><img alt=\"tracker output\" src=\"https://i.stack.imgur.com/SrRj9.png\"/></a></p>\n<p>Pympler package consists of a huge number of high utility functions to profile code. All of which cannot be covered here. See the documentation attached for verbose profile implementations.</p>\n<h3>Pympler <a href=\"https://readthedocs.org/projects/pympler/downloads/pdf/latest/\" rel=\"noreferrer\">doc</a></h3>\n", "abstract": "For getting quick profile stats on an IPython notebook.\nOne can embed line_profiler and memory_profiler straight into their notebooks. Another useful package is Pympler. It is a powerful profiling package that's capable to track classes,objects,functions,memory leaks etc. Examples below, Docs attached. Gives: Gives:  Gives: Gives:  Returns the size of an object in bytes. pympler.asizeof can be used to investigate how much memory certain Python objects consume.\nIn contrast to sys.getsizeof, asizeof sizes objects recursively  Tracks the lifetime of a function.  Pympler package consists of a huge number of high utility functions to profile code. All of which cannot be covered here. See the documentation attached for verbose profile implementations."}, {"id": 57895940, "score": 9, "vote": 0, "content": "<p>If you want to make a cumulative profiler,\nmeaning to run the function several times in a row and watch the sum of the results.</p>\n<p>you can use this <code>cumulative_profiler</code> decorator:</p>\n<p>it's python &gt;= 3.6 specific, but you can remove <code>nonlocal</code> for it work on older versions.</p>\n<pre><code class=\"python\">import cProfile, pstats\n\nclass _ProfileFunc:\n    def __init__(self, func, sort_stats_by):\n        self.func =  func\n        self.profile_runs = []\n        self.sort_stats_by = sort_stats_by\n\n    def __call__(self, *args, **kwargs):\n        pr = cProfile.Profile()\n        pr.enable()  # this is the profiling section\n        retval = self.func(*args, **kwargs)\n        pr.disable()\n\n        self.profile_runs.append(pr)\n        ps = pstats.Stats(*self.profile_runs).sort_stats(self.sort_stats_by)\n        return retval, ps\n\ndef cumulative_profiler(amount_of_times, sort_stats_by='time'):\n    def real_decorator(function):\n        def wrapper(*args, **kwargs):\n            nonlocal function, amount_of_times, sort_stats_by  # for python 2.x remove this row\n\n            profiled_func = _ProfileFunc(function, sort_stats_by)\n            for i in range(amount_of_times):\n                retval, ps = profiled_func(*args, **kwargs)\n            ps.print_stats()\n            return retval  # returns the results of the function\n        return wrapper\n\n    if callable(amount_of_times):  # incase you don't want to specify the amount of times\n        func = amount_of_times  # amount_of_times is the function in here\n        amount_of_times = 5  # the default amount\n        return real_decorator(func)\n    return real_decorator\n</code></pre>\n<p><strong>Example</strong></p>\n<p>profiling the function <code>baz</code> </p>\n<pre><code class=\"python\">import time\n\n@cumulative_profiler\ndef baz():\n    time.sleep(1)\n    time.sleep(2)\n    return 1\n\nbaz()\n</code></pre>\n<p><code>baz</code> ran 5 times and printed this:</p>\n<pre><code class=\"python\">         20 function calls in 15.003 seconds\n\n   Ordered by: internal time\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n       10   15.003    1.500   15.003    1.500 {built-in method time.sleep}\n        5    0.000    0.000   15.003    3.001 &lt;ipython-input-9-c89afe010372&gt;:3(baz)\n        5    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n</code></pre>\n<p>specifying the amount of times</p>\n<pre><code class=\"python\">@cumulative_profiler(3)\ndef baz():\n    ...\n</code></pre>\n", "abstract": "If you want to make a cumulative profiler,\nmeaning to run the function several times in a row and watch the sum of the results. you can use this cumulative_profiler decorator: it's python >= 3.6 specific, but you can remove nonlocal for it work on older versions. Example profiling the function baz  baz ran 5 times and printed this: specifying the amount of times"}, {"id": 67976968, "score": 9, "vote": 0, "content": "<p>Recently I created a plugin for PyCharm with which you can easily analyse and visualise the results of <code>line_profiler</code> in the PyCharm editor.</p>\n<p><code>line_profiler</code> has been mentioned in other answers as well and is a great tool to analyse exactly how much time is spent by the python interpreter in certain lines.</p>\n<p>The PyCharm plugin I've created can be found here:\n<a href=\"https://plugins.jetbrains.com/plugin/16536-line-profiler\" rel=\"noreferrer\">https://plugins.jetbrains.com/plugin/16536-line-profiler</a></p>\n<p>It needs a helper package in your python environment called <code>line-profiler-pycharm</code> which can be installed with pip or by the plugin itself.</p>\n<p>After installing the plugin in PyCharm:</p>\n<ol>\n<li>Decorate any function you want to profile with the <code>line_profiler_pycharm.profile</code> decorator</li>\n<li>Run with the 'Profile Lines' runner</li>\n</ol>\n<p>Screenshot of results:\n<a href=\"https://i.stack.imgur.com/nj0LP.png\" rel=\"noreferrer\"><img alt=\"Line Profiler Pycharm results\" src=\"https://i.stack.imgur.com/nj0LP.png\"/></a></p>\n", "abstract": "Recently I created a plugin for PyCharm with which you can easily analyse and visualise the results of line_profiler in the PyCharm editor. line_profiler has been mentioned in other answers as well and is a great tool to analyse exactly how much time is spent by the python interpreter in certain lines. The PyCharm plugin I've created can be found here:\nhttps://plugins.jetbrains.com/plugin/16536-line-profiler It needs a helper package in your python environment called line-profiler-pycharm which can be installed with pip or by the plugin itself. After installing the plugin in PyCharm: Screenshot of results:\n"}, {"id": 29344687, "score": 8, "vote": 0, "content": "<p>cProfile is great for quick profiling but most of the time it was ending for me with the errors. Function runctx solves this problem by initializing correctly the environment and variables, hope it can be useful for someone:</p>\n<pre><code class=\"python\">import cProfile\ncProfile.runctx('foo()', None, locals())\n</code></pre>\n", "abstract": "cProfile is great for quick profiling but most of the time it was ending for me with the errors. Function runctx solves this problem by initializing correctly the environment and variables, hope it can be useful for someone:"}, {"id": 57114079, "score": 8, "vote": 0, "content": "<p><strong>gprof2dot_magic</strong></p>\n<p>Magic function for <code>gprof2dot</code> to profile any Python statement as a DOT graph in JupyterLab or Jupyter Notebook.</p>\n<p><a href=\"https://i.stack.imgur.com/IE4Py.gif\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/IE4Py.gif\"/></a></p>\n<p>GitHub repo: <a href=\"https://github.com/mattijn/gprof2dot_magic\" rel=\"noreferrer\">https://github.com/mattijn/gprof2dot_magic</a></p>\n<p><strong>installation</strong></p>\n<p>Make sure you've the Python package <code>gprof2dot_magic</code>.</p>\n<pre><code class=\"python\">pip install gprof2dot_magic\n</code></pre>\n<p>Its dependencies <code>gprof2dot</code> and <code>graphviz</code> will be installed as well</p>\n<p><strong>usage</strong></p>\n<p>To enable the magic function, first load the <code>gprof2dot_magic</code> module</p>\n<pre><code class=\"python\">%load_ext gprof2dot_magic\n</code></pre>\n<p>and then profile any line statement as a DOT graph as such:</p>\n<pre><code class=\"python\">%gprof2dot print('hello world')\n</code></pre>\n<p><a href=\"https://i.stack.imgur.com/fiGeD.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/fiGeD.png\"/></a></p>\n", "abstract": "gprof2dot_magic Magic function for gprof2dot to profile any Python statement as a DOT graph in JupyterLab or Jupyter Notebook.  GitHub repo: https://github.com/mattijn/gprof2dot_magic installation Make sure you've the Python package gprof2dot_magic. Its dependencies gprof2dot and graphviz will be installed as well usage To enable the magic function, first load the gprof2dot_magic module and then profile any line statement as a DOT graph as such: "}, {"id": 21885286, "score": 7, "vote": 0, "content": "<p>My way is to use yappi (<a href=\"https://github.com/sumerc/yappi\" rel=\"nofollow noreferrer\">https://github.com/sumerc/yappi</a>). It's especially useful combined with an RPC server where (even just for debugging) you register method to start, stop and print profiling information, e.g. in this way: </p>\n<pre><code class=\"python\">@staticmethod\ndef startProfiler():\n    yappi.start()\n\n@staticmethod\ndef stopProfiler():\n    yappi.stop()\n\n@staticmethod\ndef printProfiler():\n    stats = yappi.get_stats(yappi.SORTTYPE_TTOT, yappi.SORTORDER_DESC, 20)\n    statPrint = '\\n'\n    namesArr = [len(str(stat[0])) for stat in stats.func_stats]\n    log.debug(\"namesArr %s\", str(namesArr))\n    maxNameLen = max(namesArr)\n    log.debug(\"maxNameLen: %s\", maxNameLen)\n\n    for stat in stats.func_stats:\n        nameAppendSpaces = [' ' for i in range(maxNameLen - len(stat[0]))]\n        log.debug('nameAppendSpaces: %s', nameAppendSpaces)\n        blankSpace = ''\n        for space in nameAppendSpaces:\n            blankSpace += space\n\n        log.debug(\"adding spaces: %s\", len(nameAppendSpaces))\n        statPrint = statPrint + str(stat[0]) + blankSpace + \" \" + str(stat[1]).ljust(8) + \"\\t\" + str(\n            round(stat[2], 2)).ljust(8 - len(str(stat[2]))) + \"\\t\" + str(round(stat[3], 2)) + \"\\n\"\n\n    log.log(1000, \"\\nname\" + ''.ljust(maxNameLen - 4) + \" ncall \\tttot \\ttsub\")\n    log.log(1000, statPrint)\n</code></pre>\n<p>Then when your program work you can start profiler at any time by calling the <code>startProfiler</code> RPC method and dump profiling information to a log file by calling <code>printProfiler</code> (or modify the rpc method to return it to the caller) and get such output:</p>\n<pre><code class=\"python\">2014-02-19 16:32:24,128-|SVR-MAIN  |-(Thread-3   )-Level 1000: \nname                                                                                                                                      ncall     ttot    tsub\n2014-02-19 16:32:24,128-|SVR-MAIN  |-(Thread-3   )-Level 1000: \nC:\\Python27\\lib\\sched.py.run:80                                                                                                           22        0.11    0.05\nM:\\02_documents\\_repos\\09_aheadRepos\\apps\\ahdModbusSrv\\pyAheadRpcSrv\\xmlRpc.py.iterFnc:293                                                22        0.11    0.0\nM:\\02_documents\\_repos\\09_aheadRepos\\apps\\ahdModbusSrv\\serverMain.py.makeIteration:515                                                    22        0.11    0.0\nM:\\02_documents\\_repos\\09_aheadRepos\\apps\\ahdModbusSrv\\pyAheadRpcSrv\\PicklingXMLRPC.py._dispatch:66                                       1         0.0     0.0\nC:\\Python27\\lib\\BaseHTTPServer.py.date_time_string:464                                                                                    1         0.0     0.0\nc:\\users\\zasiec~1\\appdata\\local\\temp\\easy_install-hwcsr1\\psutil-1.1.2-py2.7-win32.egg.tmp\\psutil\\_psmswindows.py._get_raw_meminfo:243     4         0.0     0.0\nC:\\Python27\\lib\\SimpleXMLRPCServer.py.decode_request_content:537                                                                          1         0.0     0.0\nc:\\users\\zasiec~1\\appdata\\local\\temp\\easy_install-hwcsr1\\psutil-1.1.2-py2.7-win32.egg.tmp\\psutil\\_psmswindows.py.get_system_cpu_times:148 4         0.0     0.0\n&lt;string&gt;.__new__:8                                                                                                                        220       0.0     0.0\nC:\\Python27\\lib\\socket.py.close:276                                                                                                       4         0.0     0.0\nC:\\Python27\\lib\\threading.py.__init__:558                                                                                                 1         0.0     0.0\n&lt;string&gt;.__new__:8                                                                                                                        4         0.0     0.0\nC:\\Python27\\lib\\threading.py.notify:372                                                                                                   1         0.0     0.0\nC:\\Python27\\lib\\rfc822.py.getheader:285                                                                                                   4         0.0     0.0\nC:\\Python27\\lib\\BaseHTTPServer.py.handle_one_request:301                                                                                  1         0.0     0.0\nC:\\Python27\\lib\\xmlrpclib.py.end:816                                                                                                      3         0.0     0.0\nC:\\Python27\\lib\\SimpleXMLRPCServer.py.do_POST:467                                                                                         1         0.0     0.0\nC:\\Python27\\lib\\SimpleXMLRPCServer.py.is_rpc_path_valid:460                                                                               1         0.0     0.0\nC:\\Python27\\lib\\SocketServer.py.close_request:475                                                                                         1         0.0     0.0\nc:\\users\\zasiec~1\\appdata\\local\\temp\\easy_install-hwcsr1\\psutil-1.1.2-py2.7-win32.egg.tmp\\psutil\\__init__.py.cpu_times:1066               4         0.0     0.0 \n</code></pre>\n<p>It may not be very useful for short scripts but helps to optimize server-type processes especially given the <code>printProfiler</code> method can be called multiple times over time to profile and compare e.g. different program usage scenarios. </p>\n<p>In newer versions of yappi, the following code will work:</p>\n<pre><code class=\"python\">@staticmethod\ndef printProfile():\n    yappi.get_func_stats().print_all()\n</code></pre>\n", "abstract": "My way is to use yappi (https://github.com/sumerc/yappi). It's especially useful combined with an RPC server where (even just for debugging) you register method to start, stop and print profiling information, e.g. in this way:  Then when your program work you can start profiler at any time by calling the startProfiler RPC method and dump profiling information to a log file by calling printProfiler (or modify the rpc method to return it to the caller) and get such output: It may not be very useful for short scripts but helps to optimize server-type processes especially given the printProfiler method can be called multiple times over time to profile and compare e.g. different program usage scenarios.  In newer versions of yappi, the following code will work:"}, {"id": 29183471, "score": 5, "vote": 0, "content": "<p>To add on to <a href=\"https://stackoverflow.com/a/582337/1070617\">https://stackoverflow.com/a/582337/1070617</a>,</p>\n<p>I wrote this module that allows you to use cProfile and view its output easily. More here: <a href=\"https://github.com/ymichael/cprofilev\" rel=\"nofollow noreferrer\">https://github.com/ymichael/cprofilev</a></p>\n<pre><code class=\"python\">$ python -m cprofilev /your/python/program\n# Go to http://localhost:4000 to view collected statistics.\n</code></pre>\n<p>Also see: <a href=\"http://ymichael.com/2014/03/08/profiling-python-with-cprofile.html\" rel=\"nofollow noreferrer\">http://ymichael.com/2014/03/08/profiling-python-with-cprofile.html</a> on how to make sense of the collected statistics.</p>\n", "abstract": "To add on to https://stackoverflow.com/a/582337/1070617, I wrote this module that allows you to use cProfile and view its output easily. More here: https://github.com/ymichael/cprofilev Also see: http://ymichael.com/2014/03/08/profiling-python-with-cprofile.html on how to make sense of the collected statistics."}, {"id": 29931325, "score": 5, "vote": 0, "content": "<p>A new tool to handle profiling in Python is PyVmMonitor: <a href=\"http://www.pyvmmonitor.com/\" rel=\"noreferrer\">http://www.pyvmmonitor.com/</a></p>\n<p>It has some unique features such as</p>\n<ul>\n<li>Attach profiler to a running (CPython) program</li>\n<li>On demand profiling with Yappi integration</li>\n<li>Profile on a different machine</li>\n<li>Multiple processes support (multiprocessing, django...)</li>\n<li>Live sampling/CPU view (with time range selection)</li>\n<li>Deterministic profiling through cProfile/profile integration</li>\n<li>Analyze existing PStats results</li>\n<li>Open DOT files</li>\n<li>Programatic API access</li>\n<li>Group samples by method or line</li>\n<li>PyDev integration</li>\n<li>PyCharm integration</li>\n</ul>\n<p>Note: it's commercial, but free for open source.</p>\n", "abstract": "A new tool to handle profiling in Python is PyVmMonitor: http://www.pyvmmonitor.com/ It has some unique features such as Note: it's commercial, but free for open source."}, {"id": 43504738, "score": 5, "vote": 0, "content": "<p>It would depend on what you want to see out of profiling. Simple time \nmetrics can be given by (bash). </p>\n<pre><code class=\"python\">time python python_prog.py\n</code></pre>\n<p>Even '/usr/bin/time' can output detailed metrics by using '--verbose' flag.</p>\n<p>To check time metrics given by each function and to better understand how much time is spent on functions, you can use the inbuilt cProfile in python. </p>\n<p>Going into more detailed metrics like performance, time is not the only metric. You can worry about memory, threads etc.<br/>\nProfiling options:<br/>\n1. <strong>line_profiler</strong> is another profiler used commonly to find out timing metrics line-by-line.<br/>\n2. <strong>memory_profiler</strong> is a tool to profile memory usage.<br/>\n3. <strong>heapy (from project Guppy)</strong> Profile how objects in the heap are used. </p>\n<p>These are some of the common ones I tend to use. But if you want to find out more, try reading this <a href=\"http://shop.oreilly.com/product/0636920028963.do\" rel=\"noreferrer\">book</a>\nIt is a pretty good book on starting out with performance in mind. You can move onto advanced topics on using Cython and JIT(Just-in-time) compiled python. </p>\n", "abstract": "It would depend on what you want to see out of profiling. Simple time \nmetrics can be given by (bash).  Even '/usr/bin/time' can output detailed metrics by using '--verbose' flag. To check time metrics given by each function and to better understand how much time is spent on functions, you can use the inbuilt cProfile in python.  Going into more detailed metrics like performance, time is not the only metric. You can worry about memory, threads etc.\nProfiling options:\n1. line_profiler is another profiler used commonly to find out timing metrics line-by-line.\n2. memory_profiler is a tool to profile memory usage.\n3. heapy (from project Guppy) Profile how objects in the heap are used.  These are some of the common ones I tend to use. But if you want to find out more, try reading this book\nIt is a pretty good book on starting out with performance in mind. You can move onto advanced topics on using Cython and JIT(Just-in-time) compiled python. "}, {"id": 60187913, "score": 5, "vote": 0, "content": "<p>I just developed my own profiler inspired from pypref_time:</p>\n<p><a href=\"https://github.com/modaresimr/auto_profiler\" rel=\"nofollow noreferrer\">https://github.com/modaresimr/auto_profiler</a></p>\n<h1>Update Version 2</h1>\n<h2>Install:</h2>\n<pre><code class=\"python\">pip install auto_profiler\n</code></pre>\n<h2>Quick Start:</h2>\n<pre><code class=\"python\">from auto_profiler import Profiler\n\nwith Profiler():\n    your_function()\n</code></pre>\n<h2>Using in Jupyter, let you have realtime view of elapsed times</h2>\n<p><a href=\"https://i.stack.imgur.com/tyd1d.gif\" rel=\"nofollow noreferrer\"><img alt=\"Real Time view of auto profiler in jupyter\" src=\"https://i.stack.imgur.com/tyd1d.gif\"/></a></p>\n<h1>Update Version 1</h1>\n<p>By adding a decorator it will show a tree of time-consuming functions</p>\n<p><code>@Profiler(depth=4)</code></p>\n<pre><code class=\"python\">Install by: pip install auto_profiler\n</code></pre>\n<h1>Example</h1>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">import time # line number 1\nimport random\n\nfrom auto_profiler import Profiler, Tree\n\ndef f1():\n    mysleep(.6+random.random())\n\ndef mysleep(t):\n    time.sleep(t)\n\ndef fact(i):\n    f1()\n    if(i==1):\n        return 1\n    return i*fact(i-1)\n\ndef main():\n    for i in range(5):\n        f1()\n\n    fact(3)\n\n\nwith Profiler(depth=4):\n    main()\n\n</code></pre>\n<h2>Example Output</h2>\n<pre><code class=\"python\">\nTime   [Hits * PerHit] Function name [Called from] [function location]\n-----------------------------------------------------------------------\n8.974s [1 * 8.974]  main  [auto-profiler/profiler.py:267]  [/test/t2.py:30]\n\u251c\u2500\u2500 5.954s [5 * 1.191]  f1  [/test/t2.py:34]  [/test/t2.py:14]\n\u2502   \u2514\u2500\u2500 5.954s [5 * 1.191]  mysleep  [/test/t2.py:15]  [/test/t2.py:17]\n\u2502       \u2514\u2500\u2500 5.954s [5 * 1.191]  &lt;time.sleep&gt;\n|\n|\n|   # The rest is for the example recursive function call fact\n\u2514\u2500\u2500 3.020s [1 * 3.020]  fact  [/test/t2.py:36]  [/test/t2.py:20]\n    \u251c\u2500\u2500 0.849s [1 * 0.849]  f1  [/test/t2.py:21]  [/test/t2.py:14]\n    \u2502   \u2514\u2500\u2500 0.849s [1 * 0.849]  mysleep  [/test/t2.py:15]  [/test/t2.py:17]\n    \u2502       \u2514\u2500\u2500 0.849s [1 * 0.849]  &lt;time.sleep&gt;\n    \u2514\u2500\u2500 2.171s [1 * 2.171]  fact  [/test/t2.py:24]  [/test/t2.py:20]\n        \u251c\u2500\u2500 1.552s [1 * 1.552]  f1  [/test/t2.py:21]  [/test/t2.py:14]\n        \u2502   \u2514\u2500\u2500 1.552s [1 * 1.552]  mysleep  [/test/t2.py:15]  [/test/t2.py:17]\n        \u2514\u2500\u2500 0.619s [1 * 0.619]  fact  [/test/t2.py:24]  [/test/t2.py:20]\n            \u2514\u2500\u2500 0.619s [1 * 0.619]  f1  [/test/t2.py:21]  [/test/t2.py:14]\n</code></pre>\n", "abstract": "I just developed my own profiler inspired from pypref_time: https://github.com/modaresimr/auto_profiler  By adding a decorator it will show a tree of time-consuming functions @Profiler(depth=4)"}, {"id": 12874474, "score": 3, "vote": 0, "content": "<blockquote>\n<p>Ever want to know what the hell that python script is doing? Enter the\n  Inspect Shell. Inspect Shell lets you print/alter globals and run\n  functions without interrupting the running script. Now with\n  auto-complete and command history (only on linux).</p>\n<p>Inspect Shell is not a pdb-style debugger.</p>\n</blockquote>\n<p><a href=\"https://github.com/amoffat/Inspect-Shell\" rel=\"nofollow\">https://github.com/amoffat/Inspect-Shell</a></p>\n<p>You could use that (and your wristwatch).</p>\n", "abstract": "Ever want to know what the hell that python script is doing? Enter the\n  Inspect Shell. Inspect Shell lets you print/alter globals and run\n  functions without interrupting the running script. Now with\n  auto-complete and command history (only on linux). Inspect Shell is not a pdb-style debugger. https://github.com/amoffat/Inspect-Shell You could use that (and your wristwatch)."}, {"id": 35351674, "score": 3, "vote": 0, "content": "<p>There's also a statistical profiler called <a href=\"https://pypi.python.org/pypi/statprof/\" rel=\"nofollow noreferrer\"><code>statprof</code></a>. It's a sampling profiler, so it adds minimal overhead to your code and gives line-based (not just function-based) timings. It's more suited to soft real-time applications like games, but may be have less precision than cProfile.</p>\n<p>The <a href=\"https://pypi.python.org/pypi/statprof/\" rel=\"nofollow noreferrer\">version in pypi</a> is a bit old, so can install it with <code>pip</code> by specifying <a href=\"https://github.com/bos/statprof.py\" rel=\"nofollow noreferrer\">the git repository</a>:</p>\n<pre><code class=\"python\">pip install git+git://github.com/bos/statprof.py@1a33eba91899afe17a8b752c6dfdec6f05dd0c01\n</code></pre>\n<p>You can run it like this:</p>\n<pre><code class=\"python\">import statprof\n\nwith statprof.profile():\n    my_questionable_function()\n</code></pre>\n<p>See also <a href=\"https://stackoverflow.com/a/10333592/320036\">https://stackoverflow.com/a/10333592/320036</a></p>\n", "abstract": "There's also a statistical profiler called statprof. It's a sampling profiler, so it adds minimal overhead to your code and gives line-based (not just function-based) timings. It's more suited to soft real-time applications like games, but may be have less precision than cProfile. The version in pypi is a bit old, so can install it with pip by specifying the git repository: You can run it like this: See also https://stackoverflow.com/a/10333592/320036"}, {"id": 70665196, "score": 2, "vote": 0, "content": "<p>I found cprofiler and other ressources to be more for optimization purpose rather than debugging.</p>\n<p>I made my own testing module instead for simple python scripts speed testing. (In my case 1K+ lines py file was tested using ScriptProfilerPy and speedup the code by 10x in minutes afterwards.</p>\n<p>The module ScriptProfilerPy() will run your code adding timestamp to it.\nI put the module here:\n<a href=\"https://github.com/Lucas-BLP/ScriptProfilerPy\" rel=\"nofollow noreferrer\">https://github.com/Lucas-BLP/ScriptProfilerPy</a></p>\n<p>Use:</p>\n<pre><code class=\"python\">from speed_testpy import ScriptProfilerPy\n\nScriptProfilerPy(\"path_to_your_script_to_test.py\").Profiler()\n</code></pre>\n<p>output:\n<a href=\"https://i.stack.imgur.com/RkRZD.png\" rel=\"nofollow noreferrer\"><img alt=\"Output of the code after testing\" src=\"https://i.stack.imgur.com/RkRZD.png\"/></a></p>\n", "abstract": "I found cprofiler and other ressources to be more for optimization purpose rather than debugging. I made my own testing module instead for simple python scripts speed testing. (In my case 1K+ lines py file was tested using ScriptProfilerPy and speedup the code by 10x in minutes afterwards. The module ScriptProfilerPy() will run your code adding timestamp to it.\nI put the module here:\nhttps://github.com/Lucas-BLP/ScriptProfilerPy Use: output:\n"}, {"id": 72914390, "score": 1, "vote": 0, "content": "<p>I find this function is quick and easy to use if you do not want a command line option.</p>\n<p>To use just add @profile above each function to be profiled.</p>\n<pre><code class=\"python\">def profile(fnc):\n    \"\"\"\n    Profiles any function in following class just by adding @profile above function\n    \"\"\"\n    import cProfile, pstats, io\n    def inner (*args, **kwargs):\n        pr = cProfile.Profile()\n        pr.enable()\n        retval = fnc (*args, **kwargs)\n        pr.disable()\n        s = io.StringIO()\n        sortby = 'cumulative'   #Ordered\n        ps = pstats.Stats(pr,stream=s).strip_dirs().sort_stats(sortby)\n        n=10                    #reduced the list to be monitored\n        ps.print_stats(n)\n        #ps.dump_stats(\"profile.prof\")\n        print(s.getvalue())\n        return retval\n    return inner \n</code></pre>\n<p>output for each function looks like this</p>\n<pre><code class=\"python\">   Ordered by: cumulative time\n   List reduced from 38 to 10 due to restriction &lt;10&gt;\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n        1    0.000    0.000    0.002    0.002 3151212474.py:37(get_pdf_page_count)\n        1    0.000    0.000    0.002    0.002 fitz.py:3604(__init__)\n        1    0.001    0.001    0.001    0.001 {built-in method fitz._fitz.new_Document}\n        1    0.000    0.000    0.000    0.000 fitz.py:5207(__del__)\n        1    0.000    0.000    0.000    0.000 {built-in method fitz._fitz.delete_Document}\n        1    0.000    0.000    0.000    0.000 fitz.py:4816(init_doc)\n        1    0.000    0.000    0.000    0.000 fitz.py:5197(_reset_page_refs)\n        1    0.000    0.000    0.000    0.000 fitz.py:4821(&lt;listcomp&gt;)\n       11    0.000    0.000    0.000    0.000 fitz.py:4054(_getMetadata)\n        1    0.000    0.000    0.000    0.000 weakref.py:241(values)\n</code></pre>\n", "abstract": "I find this function is quick and easy to use if you do not want a command line option. To use just add @profile above each function to be profiled. output for each function looks like this"}, {"id": 41999525, "score": 0, "vote": 0, "content": "<p>When i'm not root on the server, I use \n<a href=\"https://people.gnome.org/~johan/lsprofcalltree.py\" rel=\"nofollow noreferrer\">lsprofcalltree.py</a> and run my program like this:</p>\n<pre><code class=\"python\">python lsprofcalltree.py -o callgrind.1 test.py\n</code></pre>\n<p>Then I can open the report with any callgrind-compatible software, like <a href=\"https://sourceforge.net/projects/qcachegrindwin/\" rel=\"nofollow noreferrer\">qcachegrind</a></p>\n", "abstract": "When i'm not root on the server, I use \nlsprofcalltree.py and run my program like this: Then I can open the report with any callgrind-compatible software, like qcachegrind"}]}, {"link": "https://stackoverflow.com/questions/4015417/why-do-python-classes-inherit-object", "question": {"id": "4015417", "title": "Why do Python classes inherit object?", "content": "<p>Why does the following class declaration inherit from <code>object</code>?</p>\n<pre><code class=\"python\">class MyClass(object):\n    ...\n</code></pre>\n", "abstract": "Why does the following class declaration inherit from object?"}, "answers": [{"id": 45062077, "score": 1138, "vote": 0, "content": "<blockquote>\n<h3>Is there any reason for a class declaration to inherit from <code>object</code>?</h3>\n</blockquote>\n<p>In Python 3, apart from compatibility between Python 2 and 3, <em>no reason</em>. In Python 2, <em>many reasons</em>. </p>\n<hr/>\n<h3>Python 2.x story:</h3>\n<p>In Python 2.x (from 2.2 onwards) there's two styles of classes depending on the presence or absence of <code>object</code> as a base-class:</p>\n<ol>\n<li><p><strong>\"classic\" style</strong> classes: they don't have <code>object</code> as a base class:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; class ClassicSpam:      # no base class\n...     pass\n&gt;&gt;&gt; ClassicSpam.__bases__\n()\n</code></pre></li>\n<li><p><strong>\"new\" style</strong> classes: they have, directly <em>or indirectly</em> (e.g inherit from a <a href=\"https://docs.python.org/3/library/stdtypes.html\" rel=\"noreferrer\">built-in type</a>), <code>object</code> as a base class:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; class NewSpam(object):           # directly inherit from object\n...    pass\n&gt;&gt;&gt; NewSpam.__bases__\n(&lt;type 'object'&gt;,)\n&gt;&gt;&gt; class IntSpam(int):              # indirectly inherit from object...\n...    pass\n&gt;&gt;&gt; IntSpam.__bases__\n(&lt;type 'int'&gt;,) \n&gt;&gt;&gt; IntSpam.__bases__[0].__bases__   # ... because int inherits from object  \n(&lt;type 'object'&gt;,)\n</code></pre></li>\n</ol>\n<p>Without a doubt, when writing a class you'll <em>always</em> want to go for new-style classes. The perks of doing so are numerous, to list some of them:</p>\n<ul>\n<li><p><a href=\"https://docs.python.org/3/howto/descriptor.html\" rel=\"noreferrer\">Support for descriptors</a>. Specifically, the following constructs are made possible with descriptors: </p>\n<ol>\n<li><a href=\"https://docs.python.org/3/library/functions.html#classmethod\" rel=\"noreferrer\"><code>classmethod</code></a>: A method that receives the class as an implicit argument instead of the instance.</li>\n<li><a href=\"https://docs.python.org/3/library/functions.html#staticmethod\" rel=\"noreferrer\"><code>staticmethod</code></a>: A method that does not receive the implicit argument <code>self</code> as a first argument.</li>\n<li>properties with <a href=\"https://docs.python.org/3/library/functions.html#property\" rel=\"noreferrer\"><code>property</code></a>: Create functions for managing the getting, setting and deleting of an attribute. </li>\n<li><a href=\"https://docs.python.org/3/reference/datamodel.html#slots\" rel=\"noreferrer\"><code>__slots__</code></a>: Saves memory consumptions of a class and also results in faster attribute access. Of course, it does <a href=\"https://docs.python.org/3/reference/datamodel.html#notes-on-using-slots\" rel=\"noreferrer\">impose limitations</a>.</li>\n</ol></li>\n<li><p>The <a href=\"https://docs.python.org/3/reference/datamodel.html#object.__new__\" rel=\"noreferrer\"><code>__new__</code></a> static method: lets you customize how new class instances are created. </p></li>\n<li><p><a href=\"https://www.python.org/download/releases/2.3/mro/\" rel=\"noreferrer\">Method resolution order (MRO)</a>: in what order the base classes of a class will be searched when trying to resolve which method to call. </p></li>\n<li><p>Related to MRO, <a href=\"https://docs.python.org/3/library/functions.html#super\" rel=\"noreferrer\"><code>super</code> calls</a>. Also see, <a href=\"https://rhettinger.wordpress.com/2011/05/26/super-considered-super/\" rel=\"noreferrer\"><code>super()</code> considered super.</a></p></li>\n</ul>\n<p>If you don't inherit from <code>object</code>, forget these. A more exhaustive description of the previous bullet points along with other perks of \"new\" style classes can be found <a href=\"https://www.python.org/download/releases/2.2.3/descrintro/\" rel=\"noreferrer\">here</a>.</p>\n<p>One of the downsides of new-style classes is that the class itself is more memory demanding. Unless you're creating many class objects, though, I doubt this would be an issue and it's a negative sinking in a sea of positives.</p>\n<hr/>\n<h3>Python 3.x story:</h3>\n<p>In Python 3, things are simplified. Only new-style classes exist (referred to plainly as classes) so, the only difference in adding <code>object</code> is requiring you to type in 8 more characters. This:</p>\n<pre><code class=\"python\">class ClassicSpam:\n    pass\n</code></pre>\n<p>is completely equivalent (apart from their name :-) to this:</p>\n<pre><code class=\"python\">class NewSpam(object):\n     pass\n</code></pre>\n<p>and to this:</p>\n<pre><code class=\"python\">class Spam():\n    pass\n</code></pre>\n<p>All have <code>object</code> in their <code>__bases__</code>.</p>\n<pre><code class=\"python\">&gt;&gt;&gt; [object in cls.__bases__ for cls in {Spam, NewSpam, ClassicSpam}]\n[True, True, True]\n</code></pre>\n<hr/>\n<h2>So, what should you do?</h2>\n<p><strong>In Python 2:</strong> <em>always inherit from <code>object</code> explicitly</em>. Get the perks.</p>\n<p><strong>In Python 3:</strong> inherit from <code>object</code> if you are writing code that tries to be Python agnostic, that is, it needs to work both in Python 2 and in Python 3. Otherwise don't, it really makes no difference since Python inserts it for you behind the scenes.</p>\n", "abstract": "In Python 3, apart from compatibility between Python 2 and 3, no reason. In Python 2, many reasons.  In Python 2.x (from 2.2 onwards) there's two styles of classes depending on the presence or absence of object as a base-class: \"classic\" style classes: they don't have object as a base class: \"new\" style classes: they have, directly or indirectly (e.g inherit from a built-in type), object as a base class: Without a doubt, when writing a class you'll always want to go for new-style classes. The perks of doing so are numerous, to list some of them: Support for descriptors. Specifically, the following constructs are made possible with descriptors:  The __new__ static method: lets you customize how new class instances are created.  Method resolution order (MRO): in what order the base classes of a class will be searched when trying to resolve which method to call.  Related to MRO, super calls. Also see, super() considered super. If you don't inherit from object, forget these. A more exhaustive description of the previous bullet points along with other perks of \"new\" style classes can be found here. One of the downsides of new-style classes is that the class itself is more memory demanding. Unless you're creating many class objects, though, I doubt this would be an issue and it's a negative sinking in a sea of positives. In Python 3, things are simplified. Only new-style classes exist (referred to plainly as classes) so, the only difference in adding object is requiring you to type in 8 more characters. This: is completely equivalent (apart from their name :-) to this: and to this: All have object in their __bases__. In Python 2: always inherit from object explicitly. Get the perks. In Python 3: inherit from object if you are writing code that tries to be Python agnostic, that is, it needs to work both in Python 2 and in Python 3. Otherwise don't, it really makes no difference since Python inserts it for you behind the scenes."}, {"id": 9448136, "score": 589, "vote": 0, "content": "<p><strong>Python 3</strong></p>\n<ul>\n<li><code>class MyClass(object):</code> = New-style class</li>\n<li><code>class MyClass:</code> = New-style class (implicitly inherits from <code>object</code>)</li>\n</ul>\n<p><strong>Python 2</strong></p>\n<ul>\n<li><code>class MyClass(object):</code> = New-style class</li>\n<li><code>class MyClass:</code> = <em>OLD-STYLE CLASS</em></li>\n</ul>\n<hr/>\n<p><strong>Explanation</strong>:</p>\n<p>When defining base classes in Python 3.x, you\u2019re allowed to drop the <code>object</code> from the definition. However, this can open the door for a seriously hard to track problem\u2026</p>\n<p>Python introduced new-style classes back in Python 2.2, and by now old-style classes are really quite old. Discussion of old-style classes is <a href=\"http://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes\" rel=\"noreferrer\">buried in the 2.x docs</a>, and non-existent in the 3.x docs.</p>\n<p>The problem is, <strong>the syntax for old-style classes in Python 2.x is the same as the alternative syntax for new-style classes in Python 3.x</strong>. Python 2.x is still very widely used (e.g. GAE, Web2Py), and any code (or coder) unwittingly bringing 3.x-style class definitions into 2.x code is going to end up with some seriously outdated base objects. And because old-style classes aren\u2019t on anyone\u2019s radar, they likely won\u2019t know what hit them.</p>\n<p>So just spell it out the long way and save some 2.x developer the tears.</p>\n", "abstract": "Python 3 Python 2 Explanation: When defining base classes in Python 3.x, you\u2019re allowed to drop the object from the definition. However, this can open the door for a seriously hard to track problem\u2026 Python introduced new-style classes back in Python 2.2, and by now old-style classes are really quite old. Discussion of old-style classes is buried in the 2.x docs, and non-existent in the 3.x docs. The problem is, the syntax for old-style classes in Python 2.x is the same as the alternative syntax for new-style classes in Python 3.x. Python 2.x is still very widely used (e.g. GAE, Web2Py), and any code (or coder) unwittingly bringing 3.x-style class definitions into 2.x code is going to end up with some seriously outdated base objects. And because old-style classes aren\u2019t on anyone\u2019s radar, they likely won\u2019t know what hit them. So just spell it out the long way and save some 2.x developer the tears."}, {"id": 4015466, "score": 408, "vote": 0, "content": "<p>Yes, this is a 'new style' object. It was a feature introduced in python2.2.</p>\n<p>New style objects have a different object model to classic objects, and some things won't work properly with old style objects, for instance, <code>super()</code>, <code>@property</code> and descriptors. See <a href=\"http://docs.python.org/release/2.2.3/whatsnew/sect-rellinks.html\" rel=\"noreferrer\">this article</a> for a good description of what a new style class is.</p>\n<p>SO link for a description of the differences: <a href=\"https://stackoverflow.com/questions/54867/old-style-and-new-style-classes-in-python\">What is the difference between old style and new style classes in Python?</a></p>\n", "abstract": "Yes, this is a 'new style' object. It was a feature introduced in python2.2. New style objects have a different object model to classic objects, and some things won't work properly with old style objects, for instance, super(), @property and descriptors. See this article for a good description of what a new style class is. SO link for a description of the differences: What is the difference between old style and new style classes in Python?"}, {"id": 26733360, "score": 37, "vote": 0, "content": "<p>History from <a href=\"http://learnpythonthehardway.org/book/ex42.html\" rel=\"noreferrer\">Learn Python the Hard Way</a>:</p>\n<blockquote>\n<p>Python's original rendition of a class was broken in many serious\n  ways. By the time this fault was recognized it was already too late,\n  and they had to support it. In order to fix the problem, they needed\n  some \"new class\" style so that the \"old classes\" would keep working\n  but you can use the new more correct version.</p>\n<p>They decided that they would use a word \"object\", lowercased, to be\n  the \"class\" that you inherit from to make a class. It is confusing,\n  but a class inherits from the class named \"object\" to make a class but\n  it's not an object really its a class, but don't forget to inherit\n  from object.</p>\n</blockquote>\n<p>Also just to let you know what the difference between new-style classes and old-style classes is, it's that new-style classes always inherit from  <code>object</code> class or from another class that inherited from <code>object</code>:</p>\n<pre><code class=\"python\">class NewStyle(object):\n    pass\n</code></pre>\n<p>Another example is:</p>\n<pre><code class=\"python\">class AnotherExampleOfNewStyle(NewStyle):\n    pass\n</code></pre>\n<p>While an old-style base class looks like this:</p>\n<pre><code class=\"python\">class OldStyle():\n    pass\n</code></pre>\n<p>And an old-style child class looks like this:</p>\n<pre><code class=\"python\">class OldStyleSubclass(OldStyle):\n    pass\n</code></pre>\n<p>You can see that an Old Style base class doesn't inherit from any other class, however, Old Style classes can, of course, inherit from one another. Inheriting from object guarantees that certain functionality is available in every Python class. New style classes were introduced in Python 2.2 </p>\n", "abstract": "History from Learn Python the Hard Way: Python's original rendition of a class was broken in many serious\n  ways. By the time this fault was recognized it was already too late,\n  and they had to support it. In order to fix the problem, they needed\n  some \"new class\" style so that the \"old classes\" would keep working\n  but you can use the new more correct version. They decided that they would use a word \"object\", lowercased, to be\n  the \"class\" that you inherit from to make a class. It is confusing,\n  but a class inherits from the class named \"object\" to make a class but\n  it's not an object really its a class, but don't forget to inherit\n  from object. Also just to let you know what the difference between new-style classes and old-style classes is, it's that new-style classes always inherit from  object class or from another class that inherited from object: Another example is: While an old-style base class looks like this: And an old-style child class looks like this: You can see that an Old Style base class doesn't inherit from any other class, however, Old Style classes can, of course, inherit from one another. Inheriting from object guarantees that certain functionality is available in every Python class. New style classes were introduced in Python 2.2 "}, {"id": 4015465, "score": 34, "vote": 0, "content": "<p>Yes, it's <a href=\"http://www.python.org/doc/newstyle/\" rel=\"noreferrer\">historical</a>. Without it, it creates an old-style class.</p>\n<p>If you use <code>type()</code> on an old-style object, you just get \"instance\". On a new-style object you get its class.</p>\n", "abstract": "Yes, it's historical. Without it, it creates an old-style class. If you use type() on an old-style object, you just get \"instance\". On a new-style object you get its class."}, {"id": 40146254, "score": 8, "vote": 0, "content": "<p>The syntax of the class creation statement:</p>\n<pre><code class=\"python\">class &lt;ClassName&gt;(superclass):\n    #code follows\n</code></pre>\n<p>In the absence of any other superclasses that you specifically want to inherit from, the <code>superclass</code> should always be <em><code>object</code></em>, which is the root of all classes in Python.</p>\n<p><em><code>object</code></em> is technically the root of \"new-style\" classes in Python. But the new-style classes today are as good as being the only style of classes.</p>\n<p>But, if you don't explicitly use the word <code>object</code> when creating classes, then as others mentioned, Python 3.x implicitly inherits from the <code>object</code> superclass. But I guess explicit is always better than implicit (hell)</p>\n<p><a href=\"https://newcircle.com/bookshelf/python_fundamentals_tutorial/oop\" rel=\"noreferrer\">Reference</a></p>\n", "abstract": "The syntax of the class creation statement: In the absence of any other superclasses that you specifically want to inherit from, the superclass should always be object, which is the root of all classes in Python. object is technically the root of \"new-style\" classes in Python. But the new-style classes today are as good as being the only style of classes. But, if you don't explicitly use the word object when creating classes, then as others mentioned, Python 3.x implicitly inherits from the object superclass. But I guess explicit is always better than implicit (hell) Reference"}]}, {"link": "https://stackoverflow.com/questions/931092/reverse-a-string-in-python", "question": {"id": "931092", "title": "Reverse a string in Python", "content": "<p>There is no built in <code>reverse</code> function for Python's <code>str</code> object. What is the best way of implementing this method?</p>\n<p>If supplying a very concise answer, please elaborate on its efficiency. For example, whether the <code>str</code> object is converted to a different object, etc. </p>\n", "abstract": "There is no built in reverse function for Python's str object. What is the best way of implementing this method? If supplying a very concise answer, please elaborate on its efficiency. For example, whether the str object is converted to a different object, etc. "}, "answers": [{"id": 931095, "score": 2994, "vote": 0, "content": "<p>Using <a href=\"https://stackoverflow.com/questions/509211/understanding-slicing\">slicing</a>:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; 'hello world'[::-1]\n'dlrow olleh'\n</code></pre>\n<hr/>\n<p>Slice notation takes the form <code>[start:stop:step]</code>. In this case, we omit the <code>start</code> and <code>stop</code> positions since we want the whole string. We also use <code>step = -1</code>, which means, \"repeatedly step from right to left by 1 character\".</p>\n", "abstract": "Using slicing: Slice notation takes the form [start:stop:step]. In this case, we omit the start and stop positions since we want the whole string. We also use step = -1, which means, \"repeatedly step from right to left by 1 character\"."}, {"id": 931099, "score": 302, "vote": 0, "content": "<p>@Paolo's <code>s[::-1]</code> is fastest; a slower approach (maybe more readable, but that's debatable) is <code>''.join(reversed(s))</code>.</p>\n", "abstract": "@Paolo's s[::-1] is fastest; a slower approach (maybe more readable, but that's debatable) is ''.join(reversed(s))."}, {"id": 27843760, "score": 295, "vote": 0, "content": "<blockquote>\n<h1>What is the best way of implementing a reverse function for strings?</h1>\n</blockquote>\n<p>My own experience with this question is academic. However, if you're a pro looking for the quick answer, use a slice that steps by <code>-1</code>:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; 'a string'[::-1]\n'gnirts a'\n</code></pre>\n<p>or more readably (but slower due to the method name lookups and the fact that join forms a list when given an iterator), <code>str.join</code>:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; ''.join(reversed('a string'))\n'gnirts a'\n</code></pre>\n<p>or for readability and reusability, put the slice in a function</p>\n<pre><code class=\"python\">def reversed_string(a_string):\n    return a_string[::-1]\n</code></pre>\n<p>and then:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; reversed_string('a_string')\n'gnirts_a'\n</code></pre>\n<h2>Longer explanation</h2>\n<p>If you're interested in the academic exposition, please keep reading.</p>\n<blockquote>\n<p>There is no built-in reverse function in Python's str object. </p>\n</blockquote>\n<p>Here is a couple of things about Python's strings you should know:</p>\n<ol>\n<li><p>In Python, <strong>strings are immutable</strong>. Changing a string does not modify the string. It creates a new one.</p></li>\n<li><p>Strings are sliceable. Slicing a string gives you a new string from one point in the string, backwards or forwards, to another point, by given increments. They take slice notation or a slice object in a subscript:</p>\n<pre><code class=\"python\">string[subscript]\n</code></pre></li>\n</ol>\n<p>The subscript creates a slice by including a colon within the braces:</p>\n<pre><code class=\"python\">    string[start:stop:step]\n</code></pre>\n<p>To create a slice outside of the braces, you'll need to create a slice object:</p>\n<pre><code class=\"python\">    slice_obj = slice(start, stop, step)\n    string[slice_obj]\n</code></pre>\n<h2>A readable approach:</h2>\n<p>While <code>''.join(reversed('foo'))</code> is readable, it requires calling a string method, <code>str.join</code>, on another called function, which can be rather relatively slow. Let's put this in a function - we'll come back to it:</p>\n<pre><code class=\"python\">def reverse_string_readable_answer(string):\n    return ''.join(reversed(string))\n</code></pre>\n<h2>Most performant approach:</h2>\n<p>Much faster is using a reverse slice:</p>\n<pre><code class=\"python\">'foo'[::-1]\n</code></pre>\n<p>But how can we make this more readable and understandable to someone less familiar with slices or the intent of the original author? Let's create a slice object outside of the subscript notation, give it a descriptive name, and pass it to the subscript notation.</p>\n<pre><code class=\"python\">start = stop = None\nstep = -1\nreverse_slice = slice(start, stop, step)\n'foo'[reverse_slice]\n</code></pre>\n<h2>Implement as Function</h2>\n<p>To actually implement this as a function, I think it is semantically clear enough to simply use a descriptive name:</p>\n<pre><code class=\"python\">def reversed_string(a_string):\n    return a_string[::-1]\n</code></pre>\n<p>And usage is simply:</p>\n<pre><code class=\"python\">reversed_string('foo')\n</code></pre>\n<h2>What your teacher probably wants:</h2>\n<p>If you have an instructor, they probably want you to start with an empty string, and build up a new string from the old one. You can do this with pure syntax and literals using a while loop:</p>\n<pre><code class=\"python\">def reverse_a_string_slowly(a_string):\n    new_string = ''\n    index = len(a_string)\n    while index:\n        index -= 1                    # index = index - 1\n        new_string += a_string[index] # new_string = new_string + character\n    return new_string\n</code></pre>\n<p>This is theoretically bad because, remember, <strong>strings are immutable</strong> - so every time where it looks like you're appending a character onto your <code>new_string</code>, it's theoretically creating a new string every time! However, CPython knows how to optimize this in certain cases, of which this trivial case is one.</p>\n<h2>Best Practice</h2>\n<p>Theoretically better is to collect your substrings in a list, and join them later:</p>\n<pre><code class=\"python\">def reverse_a_string_more_slowly(a_string):\n    new_strings = []\n    index = len(a_string)\n    while index:\n        index -= 1                       \n        new_strings.append(a_string[index])\n    return ''.join(new_strings)\n</code></pre>\n<p>However, as we will see in the timings below for CPython, this actually takes longer, because CPython can optimize the string concatenation.</p>\n<h2>Timings</h2>\n<p>Here are the timings:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; a_string = 'amanaplanacanalpanama' * 10\n&gt;&gt;&gt; min(timeit.repeat(lambda: reverse_string_readable_answer(a_string)))\n10.38789987564087\n&gt;&gt;&gt; min(timeit.repeat(lambda: reversed_string(a_string)))\n0.6622700691223145\n&gt;&gt;&gt; min(timeit.repeat(lambda: reverse_a_string_slowly(a_string)))\n25.756799936294556\n&gt;&gt;&gt; min(timeit.repeat(lambda: reverse_a_string_more_slowly(a_string)))\n38.73570013046265\n</code></pre>\n<p>CPython optimizes string concatenation, whereas other implementations <a href=\"https://www.python.org/dev/peps/pep-0008/#programming-recommendations\" rel=\"noreferrer\">may not</a>:</p>\n<blockquote>\n<p>... do not rely on CPython's efficient implementation of in-place string concatenation for statements in the form  a += b  or  a = a + b  . This optimization is fragile even in CPython (it only works for some types) and isn't present at all in implementations that don't use refcounting. In performance sensitive parts of the library, the  ''.join()   form should be used instead. This will ensure that concatenation occurs in linear time across various implementations. </p>\n</blockquote>\n", "abstract": "My own experience with this question is academic. However, if you're a pro looking for the quick answer, use a slice that steps by -1: or more readably (but slower due to the method name lookups and the fact that join forms a list when given an iterator), str.join: or for readability and reusability, put the slice in a function and then: If you're interested in the academic exposition, please keep reading. There is no built-in reverse function in Python's str object.  Here is a couple of things about Python's strings you should know: In Python, strings are immutable. Changing a string does not modify the string. It creates a new one. Strings are sliceable. Slicing a string gives you a new string from one point in the string, backwards or forwards, to another point, by given increments. They take slice notation or a slice object in a subscript: The subscript creates a slice by including a colon within the braces: To create a slice outside of the braces, you'll need to create a slice object: While ''.join(reversed('foo')) is readable, it requires calling a string method, str.join, on another called function, which can be rather relatively slow. Let's put this in a function - we'll come back to it: Much faster is using a reverse slice: But how can we make this more readable and understandable to someone less familiar with slices or the intent of the original author? Let's create a slice object outside of the subscript notation, give it a descriptive name, and pass it to the subscript notation. To actually implement this as a function, I think it is semantically clear enough to simply use a descriptive name: And usage is simply: If you have an instructor, they probably want you to start with an empty string, and build up a new string from the old one. You can do this with pure syntax and literals using a while loop: This is theoretically bad because, remember, strings are immutable - so every time where it looks like you're appending a character onto your new_string, it's theoretically creating a new string every time! However, CPython knows how to optimize this in certain cases, of which this trivial case is one. Theoretically better is to collect your substrings in a list, and join them later: However, as we will see in the timings below for CPython, this actually takes longer, because CPython can optimize the string concatenation. Here are the timings: CPython optimizes string concatenation, whereas other implementations may not: ... do not rely on CPython's efficient implementation of in-place string concatenation for statements in the form  a += b  or  a = a + b  . This optimization is fragile even in CPython (it only works for some types) and isn't present at all in implementations that don't use refcounting. In performance sensitive parts of the library, the  ''.join()   form should be used instead. This will ensure that concatenation occurs in linear time across various implementations. "}, {"id": 33457266, "score": 47, "vote": 0, "content": "<h2>Quick Answer (TL;DR)</h2>\n<h3>Example</h3>\n<pre><code class=\"python\">### example01 -------------------\nmystring  =   'coup_ate_grouping'\nbackwards =   mystring[::-1]\nprint(backwards)\n\n### ... or even ...\nmystring  =   'coup_ate_grouping'[::-1]\nprint(mystring)\n\n### result01 -------------------\n'''\ngnipuorg_eta_puoc\n'''\n</code></pre>\n<h2>Detailed Answer</h2>\n<h3>Background</h3>\n<p>This answer is provided to address the following concern from @odigity:</p>\n<blockquote>\n<p>Wow. I was horrified at first by the solution Paolo proposed, but that\ntook a back seat to the horror I felt upon reading the first\ncomment: \"That's very pythonic. Good job!\" I'm so disturbed that such\na bright community thinks using such cryptic methods for something so\nbasic is a good idea. Why isn't it just s.reverse()?</p>\n</blockquote>\n<h3>Problem</h3>\n<ul>\n<li><strong>Context</strong>\n<ul>\n<li>Python 2.x</li>\n<li>Python 3.x</li>\n</ul>\n</li>\n<li><strong>Scenario:</strong>\n<ul>\n<li>Developer wants to transform a string</li>\n<li>Transformation is to reverse order of all the characters</li>\n</ul>\n</li>\n</ul>\n<h3>Solution</h3>\n<ul>\n<li>example01 produces the desired result, using <a href=\"https://docs.python.org/2/whatsnew/2.3.html?highlight=extended%20slice#extended-slices\" rel=\"noreferrer\">extended slice notation</a>.</li>\n</ul>\n<h3>Pitfalls</h3>\n<ul>\n<li>Developer might expect something like <code>string.reverse()</code></li>\n<li>The native idiomatic (aka \"<a href=\"https://stackoverflow.com/a/25011492/42223\">pythonic</a>\") solution may not be readable to newer developers</li>\n<li>Developer may be tempted to implement his or her own version of <code>string.reverse()</code> to avoid slice notation.</li>\n<li>The output of slice notation may be counter-intuitive in some cases:\n<ul>\n<li>see e.g., example02\n<ul>\n<li><code>print 'coup_ate_grouping'[-4:]    ## =&gt; 'ping'</code></li>\n<li>compared to</li>\n<li><code>print 'coup_ate_grouping'[-4:-1]  ## =&gt; 'pin'</code></li>\n<li>compared to</li>\n<li><code>print 'coup_ate_grouping'[-1]  ## =&gt; 'g'</code></li>\n</ul>\n</li>\n<li>the different outcomes of indexing on <code>[-1]</code> may throw some developers off</li>\n</ul>\n</li>\n</ul>\n<h3>Rationale</h3>\n<p>Python has a special circumstance to be aware of: a string is an <a href=\"https://docs.python.org/2/glossary.html#term-iterable\" rel=\"noreferrer\">iterable</a> type.</p>\n<p>One rationale for excluding a <code>string.reverse()</code> method is to give python developers incentive to leverage the power of this special circumstance.</p>\n<p>In simplified terms, this simply means each individual character in a string can be easily operated on as a part of a sequential arrangement of elements, just like arrays in other programming languages.</p>\n<p>To understand how this works, reviewing example02 can provide a good overview.</p>\n<h3>Example02</h3>\n<pre><code class=\"python\">### example02 -------------------\n## start (with positive integers)\nprint 'coup_ate_grouping'[0]  ## =&gt; 'c'\nprint 'coup_ate_grouping'[1]  ## =&gt; 'o' \nprint 'coup_ate_grouping'[2]  ## =&gt; 'u' \n\n## start (with negative integers)\nprint 'coup_ate_grouping'[-1]  ## =&gt; 'g'\nprint 'coup_ate_grouping'[-2]  ## =&gt; 'n' \nprint 'coup_ate_grouping'[-3]  ## =&gt; 'i' \n\n## start:end \nprint 'coup_ate_grouping'[0:4]    ## =&gt; 'coup'    \nprint 'coup_ate_grouping'[4:8]    ## =&gt; '_ate'    \nprint 'coup_ate_grouping'[8:12]   ## =&gt; '_gro'    \n\n## start:end \nprint 'coup_ate_grouping'[-4:]    ## =&gt; 'ping' (counter-intuitive)\nprint 'coup_ate_grouping'[-4:-1]  ## =&gt; 'pin'\nprint 'coup_ate_grouping'[-4:-2]  ## =&gt; 'pi'\nprint 'coup_ate_grouping'[-4:-3]  ## =&gt; 'p'\nprint 'coup_ate_grouping'[-4:-4]  ## =&gt; ''\nprint 'coup_ate_grouping'[0:-1]   ## =&gt; 'coup_ate_groupin'\nprint 'coup_ate_grouping'[0:]     ## =&gt; 'coup_ate_grouping' (counter-intuitive)\n\n## start:end:step (or start:end:stride)\nprint 'coup_ate_grouping'[-1::1]  ## =&gt; 'g'   \nprint 'coup_ate_grouping'[-1::-1] ## =&gt; 'gnipuorg_eta_puoc'\n\n## combinations\nprint 'coup_ate_grouping'[-1::-1][-4:] ## =&gt; 'puoc'\n</code></pre>\n<h3>Conclusion</h3>\n<p>The <a href=\"https://en.wikipedia.org/wiki/Cognitive_load\" rel=\"noreferrer\">cognitive load</a> associated with understanding how slice notation works in python may indeed be too much for some adopters and developers who do not wish to invest much time in learning the language.</p>\n<p>Nevertheless, once the basic principles are understood, the power of this approach over fixed string manipulation methods can be quite favorable.</p>\n<p>For those who think otherwise, there are alternate approaches, such as lambda functions, iterators, or simple one-off function declarations.</p>\n<p>If desired, a developer can implement her own string.reverse() method, however it is good to understand the rationale behind this aspect of python.</p>\n<h3>See also</h3>\n<ul>\n<li><a href=\"https://stackoverflow.com/a/6238928/42223\">alternate simple approach</a></li>\n<li><a href=\"https://stackoverflow.com/a/766291/42223\">alternate simple approach</a></li>\n<li><a href=\"https://stackoverflow.com/questions/509211/explain-pythons-slice-notation\">alternate explanation of slice notation</a></li>\n</ul>\n", "abstract": "This answer is provided to address the following concern from @odigity: Wow. I was horrified at first by the solution Paolo proposed, but that\ntook a back seat to the horror I felt upon reading the first\ncomment: \"That's very pythonic. Good job!\" I'm so disturbed that such\na bright community thinks using such cryptic methods for something so\nbasic is a good idea. Why isn't it just s.reverse()? Python has a special circumstance to be aware of: a string is an iterable type. One rationale for excluding a string.reverse() method is to give python developers incentive to leverage the power of this special circumstance. In simplified terms, this simply means each individual character in a string can be easily operated on as a part of a sequential arrangement of elements, just like arrays in other programming languages. To understand how this works, reviewing example02 can provide a good overview. The cognitive load associated with understanding how slice notation works in python may indeed be too much for some adopters and developers who do not wish to invest much time in learning the language. Nevertheless, once the basic principles are understood, the power of this approach over fixed string manipulation methods can be quite favorable. For those who think otherwise, there are alternate approaches, such as lambda functions, iterators, or simple one-off function declarations. If desired, a developer can implement her own string.reverse() method, however it is good to understand the rationale behind this aspect of python."}, {"id": 56282726, "score": 41, "vote": 0, "content": "<p>This answer is a bit longer and contains 3 sections: <strong>Benchmarks</strong> of existing solutions, <strong>why most solutions here are wrong</strong>, <strong>my solution</strong>.</p>\n<p>The existing answers are only correct if Unicode Modifiers / grapheme clusters are ignored. I'll deal with that later, but first have a look at the speed of some reversal algorithms:</p>\n<p><a href=\"https://i.stack.imgur.com/JiAue.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/JiAue.png\"/></a></p>\n<pre><code class=\"python\">list_comprehension  : min:   0.6\u03bcs, mean:   0.6\u03bcs, max:    2.2\u03bcs\nreverse_func        : min:   1.9\u03bcs, mean:   2.0\u03bcs, max:    7.9\u03bcs\nreverse_reduce      : min:   5.7\u03bcs, mean:   5.9\u03bcs, max:   10.2\u03bcs\nreverse_loop        : min:   3.0\u03bcs, mean:   3.1\u03bcs, max:    6.8\u03bcs\n</code></pre>\n<p><a href=\"https://i.stack.imgur.com/ZxVY0.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/ZxVY0.png\"/></a></p>\n<pre><code class=\"python\">list_comprehension  : min:   4.2\u03bcs, mean:   4.5\u03bcs, max:   31.7\u03bcs\nreverse_func        : min:  75.4\u03bcs, mean:  76.6\u03bcs, max:  109.5\u03bcs\nreverse_reduce      : min: 749.2\u03bcs, mean: 882.4\u03bcs, max: 2310.4\u03bcs\nreverse_loop        : min: 469.7\u03bcs, mean: 577.2\u03bcs, max: 1227.6\u03bcs\n</code></pre>\n<p>You can see that the time for the list comprehension (<code>reversed = string[::-1]</code>) is in all cases by far the lowest (even after fixing my typo).</p>\n<h2>String Reversal</h2>\n<p>If you really want to reverse a string in the common sense, it is WAY more complicated. For example, take the following string (<a href=\"https://emojipedia.org/white-left-pointing-backhand-index-type-5/\" rel=\"noreferrer\">brown finger pointing left</a>, <a href=\"https://emojipedia.org/white-up-pointing-backhand-index/\" rel=\"noreferrer\">yellow finger pointing up</a>). Those are two graphemes, but 3 unicode code points. The additional one is a <a href=\"https://emojipedia.org/modifiers/\" rel=\"noreferrer\">skin modifier</a>.</p>\n<pre><code class=\"python\">example = \"\ud83d\udc48\ud83c\udffe\ud83d\udc46\"\n</code></pre>\n<p>But if you reverse it with any of the given methods, you get <a href=\"https://emojipedia.org/white-up-pointing-backhand-index-type-5/\" rel=\"noreferrer\">brown finger pointing up</a>, <a href=\"https://emojipedia.org/white-left-pointing-backhand-index/\" rel=\"noreferrer\">yellow finger pointing left</a>. The reason for this is that the \"brown\" color modifier is still in the middle and gets applied to whatever is before it. So we have</p>\n<ul>\n<li>U: finger pointing up</li>\n<li>M: brown modifier</li>\n<li>L: finger pointing left</li>\n</ul>\n<p>and</p>\n<pre><code class=\"python\">original: LMU                    \ud83d\udc48\ud83c\udffe\ud83d\udc46\nreversed: UML (above solutions)  \u261d\ud83c\udffe\ud83d\udc48\nreversed: ULM (correct reversal) \ud83d\udc46\ud83d\udc48\ud83c\udffe\n</code></pre>\n<p><a href=\"http://unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries\" rel=\"noreferrer\">Unicode Grapheme Clusters</a> are a bit more complicated than just modifier code points. Luckily, there is a library for handling <a href=\"https://grapheme.readthedocs.io/en/latest/grapheme.html\" rel=\"noreferrer\">graphemes</a>:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; import grapheme\n&gt;&gt;&gt; g = grapheme.graphemes(\"\ud83d\udc48\ud83c\udffe\ud83d\udc46\")\n&gt;&gt;&gt; list(g)\n['\ud83d\udc48\ud83c\udffe', '\ud83d\udc46']\n</code></pre>\n<p>and hence the correct answer would be</p>\n<pre><code class=\"python\">def reverse_graphemes(string):\n    g = list(grapheme.graphemes(string))\n    return ''.join(g[::-1])\n</code></pre>\n<p>which also is by far the slowest:</p>\n<pre><code class=\"python\">list_comprehension  : min:    0.5\u03bcs, mean:    0.5\u03bcs, max:    2.1\u03bcs\nreverse_func        : min:   68.9\u03bcs, mean:   70.3\u03bcs, max:  111.4\u03bcs\nreverse_reduce      : min:  742.7\u03bcs, mean:  810.1\u03bcs, max: 1821.9\u03bcs\nreverse_loop        : min:  513.7\u03bcs, mean:  552.6\u03bcs, max: 1125.8\u03bcs\nreverse_graphemes   : min: 3882.4\u03bcs, mean: 4130.9\u03bcs, max: 6416.2\u03bcs\n</code></pre>\n<h2>The Code</h2>\n<pre><code class=\"python\">#!/usr/bin/env python\n\nimport numpy as np\nimport random\nimport timeit\nfrom functools import reduce\nrandom.seed(0)\n\n\ndef main():\n    longstring = ''.join(random.choices(\"ABCDEFGHIJKLM\", k=2000))\n    functions = [(list_comprehension, 'list_comprehension', longstring),\n                 (reverse_func, 'reverse_func', longstring),\n                 (reverse_reduce, 'reverse_reduce', longstring),\n                 (reverse_loop, 'reverse_loop', longstring)\n                 ]\n    duration_list = {}\n    for func, name, params in functions:\n        durations = timeit.repeat(lambda: func(params), repeat=100, number=3)\n        duration_list[name] = list(np.array(durations) * 1000)\n        print('{func:&lt;20}: '\n              'min: {min:5.1f}\u03bcs, mean: {mean:5.1f}\u03bcs, max: {max:6.1f}\u03bcs'\n              .format(func=name,\n                      min=min(durations) * 10**6,\n                      mean=np.mean(durations) * 10**6,\n                      max=max(durations) * 10**6,\n                      ))\n        create_boxplot('Reversing a string of length {}'.format(len(longstring)),\n                       duration_list)\n\n\ndef list_comprehension(string):\n    return string[::-1]\n\n\ndef reverse_func(string):\n    return ''.join(reversed(string))\n\n\ndef reverse_reduce(string):\n    return reduce(lambda x, y: y + x, string)\n\n\ndef reverse_loop(string):\n    reversed_str = \"\"\n    for i in string:\n        reversed_str = i + reversed_str\n    return reversed_str\n\n\ndef create_boxplot(title, duration_list, showfliers=False):\n    import seaborn as sns\n    import matplotlib.pyplot as plt\n    import operator\n    plt.figure(num=None, figsize=(8, 4), dpi=300,\n               facecolor='w', edgecolor='k')\n    sns.set(style=\"whitegrid\")\n    sorted_keys, sorted_vals = zip(*sorted(duration_list.items(),\n                                           key=operator.itemgetter(1)))\n    flierprops = dict(markerfacecolor='0.75', markersize=1,\n                      linestyle='none')\n    ax = sns.boxplot(data=sorted_vals, width=.3, orient='h',\n                     flierprops=flierprops,\n                     showfliers=showfliers)\n    ax.set(xlabel=\"Time in ms\", ylabel=\"\")\n    plt.yticks(plt.yticks()[0], sorted_keys)\n    ax.set_title(title)\n    plt.tight_layout()\n    plt.savefig(\"output-string.png\")\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n", "abstract": "This answer is a bit longer and contains 3 sections: Benchmarks of existing solutions, why most solutions here are wrong, my solution. The existing answers are only correct if Unicode Modifiers / grapheme clusters are ignored. I'll deal with that later, but first have a look at the speed of some reversal algorithms:   You can see that the time for the list comprehension (reversed = string[::-1]) is in all cases by far the lowest (even after fixing my typo). If you really want to reverse a string in the common sense, it is WAY more complicated. For example, take the following string (brown finger pointing left, yellow finger pointing up). Those are two graphemes, but 3 unicode code points. The additional one is a skin modifier. But if you reverse it with any of the given methods, you get brown finger pointing up, yellow finger pointing left. The reason for this is that the \"brown\" color modifier is still in the middle and gets applied to whatever is before it. So we have and Unicode Grapheme Clusters are a bit more complicated than just modifier code points. Luckily, there is a library for handling graphemes: and hence the correct answer would be which also is by far the slowest:"}, {"id": 50439944, "score": 15, "vote": 0, "content": "<h3>1. using slice notation</h3>\n<pre><code class=\"python\">def rev_string(s): \n    return s[::-1]\n</code></pre>\n<h3>2. using reversed() function</h3>\n<pre><code class=\"python\">def rev_string(s): \n    return ''.join(reversed(s))\n</code></pre>\n<h3>3. using recursion</h3>\n<pre><code class=\"python\">def rev_string(s): \n    if len(s) == 1:\n        return s\n\n    return s[-1] + rev_string(s[:-1])\n</code></pre>\n", "abstract": ""}, {"id": 36350837, "score": 14, "vote": 0, "content": "<p>A lesser perplexing way to look at it would be:</p>\n<pre><code class=\"python\">string = 'happy'\nprint(string)\n</code></pre>\n<blockquote>\n<p>'happy'</p>\n</blockquote>\n<pre><code class=\"python\">string_reversed = string[-1::-1]\nprint(string_reversed)\n</code></pre>\n<blockquote>\n<p>'yppah'</p>\n</blockquote>\n<p>In English [-1::-1] reads as:</p>\n<blockquote>\n<p>\"Starting at -1,  go all the way,  taking steps of -1\"</p>\n</blockquote>\n", "abstract": "A lesser perplexing way to look at it would be: 'happy' 'yppah' In English [-1::-1] reads as: \"Starting at -1,  go all the way,  taking steps of -1\""}, {"id": 27401625, "score": 11, "vote": 0, "content": "<p>Reverse a string in python without using reversed() or [::-1]</p>\n<pre><code class=\"python\">def reverse(test):\n    n = len(test)\n    x=\"\"\n    for i in range(n-1,-1,-1):\n        x += test[i]\n    return x\n</code></pre>\n", "abstract": "Reverse a string in python without using reversed() or [::-1]"}, {"id": 52497483, "score": 6, "vote": 0, "content": "<p>This is also an interesting way:</p>\n<pre><code class=\"python\">def reverse_words_1(s):\n    rev = ''\n    for i in range(len(s)):\n        j = ~i  # equivalent to j = -(i + 1)\n        rev += s[j]\n    return rev\n</code></pre>\n<p>or similar:</p>\n<pre><code class=\"python\">def reverse_words_2(s):\n    rev = ''\n    for i in reversed(range(len(s)):\n        rev += s[i]\n    return rev\n</code></pre>\n<p>Another more 'exotic' way using bytearray which supports .reverse()</p>\n<pre><code class=\"python\">b = bytearray('Reverse this!', 'UTF-8')\nb.reverse()\nb.decode('UTF-8')`\n</code></pre>\n<p>will produce:</p>\n<pre><code class=\"python\">'!siht esreveR'\n</code></pre>\n", "abstract": "This is also an interesting way: or similar: Another more 'exotic' way using bytearray which supports .reverse() will produce:"}, {"id": 31064900, "score": 5, "vote": 0, "content": "<pre><code class=\"python\">def reverse(input):\n    return reduce(lambda x,y : y+x, input)\n</code></pre>\n", "abstract": ""}, {"id": 30035731, "score": 3, "vote": 0, "content": "<p>Here is a no fancy one:</p>\n<pre><code class=\"python\">def reverse(text):\n    r_text = ''\n    index = len(text) - 1\n\n    while index &gt;= 0:\n        r_text += text[index] #string canbe concatenated\n        index -= 1\n\n    return r_text\n\nprint reverse(\"hello, world!\")\n</code></pre>\n", "abstract": "Here is a no fancy one:"}, {"id": 53965773, "score": 2, "vote": 0, "content": "<pre><code class=\"python\">original = \"string\"\n\nrev_index = original[::-1]\nrev_func = list(reversed(list(original))) #nsfw\n\nprint(original)\nprint(rev_index)\nprint(''.join(rev_func))\n</code></pre>\n", "abstract": ""}, {"id": 62241392, "score": 2, "vote": 0, "content": "<p><strong>To solve this in programing way for interview</strong></p>\n<pre><code class=\"python\">def reverse_a_string(string: str) -&gt; str:\n    \"\"\"\n    This method is used to reverse a string.\n    Args:\n        string: a string to reverse\n\n    Returns: a reversed string\n    \"\"\"\n    if type(string) != str:\n        raise TypeError(\"{0} This not a string, Please provide a string!\".format(type(string)))\n    string_place_holder = \"\"\n    start = 0\n    end = len(string) - 1\n    if end &gt;= 1:\n        while start &lt;= end:\n            string_place_holder = string_place_holder + string[end]\n            end -= 1\n        return string_place_holder\n    else:\n        return string\n\n\na = \"hello world\"\nrev = reverse_a_string(a)\nprint(rev)\n</code></pre>\n<p><strong>Output:</strong></p>\n<pre><code class=\"python\">dlrow olleh\n</code></pre>\n", "abstract": "To solve this in programing way for interview Output:"}, {"id": 70438734, "score": 2, "vote": 0, "content": "<h1>There are multiple ways to reverse a string in Python</h1>\n<h3>Slicing Method</h3>\n<pre><code class=\"python\">string = \"python\"\nrev_string = string[::-1]\nprint(rev_string)\n</code></pre>\n<h3>using reversed function</h3>\n<pre><code class=\"python\">string = \"python\"\nrev= reversed(string) \nrev_string = \"\".join(rev) \nprint(rev_string)\n</code></pre>\n<h3>Using Recursion</h3>\n<pre><code class=\"python\">string = \"python\"\ndef reverse(string):\n  if len(string)==0:\n    return string\n  else:\n    return reverse(string[1:])+string[0]\nprint(reverse(string))\n</code></pre>\n<h3>Using for Loop</h3>\n<pre><code class=\"python\">string = \"python\"\nrev_string =\"\"\nfor s in string:\n  rev_string = s+ rev_string\nprint(rev_string)\n</code></pre>\n<h3>Using while Loop</h3>\n<pre><code class=\"python\">string = \"python\"\nrev_str =\"\"\nlength = len(string)-1\nwhile length &gt;=0:\n  rev_str += string[length]\n  length -= 1\nprint(rev_str)\n</code></pre>\n", "abstract": ""}, {"id": 48240756, "score": 1, "vote": 0, "content": "<p>Recursive method:</p>\n<pre><code class=\"python\">def reverse(s): return s[0] if len(s)==1 else s[len(s)-1] + reverse(s[0:len(s)-1])\n</code></pre>\n<p>example:</p>\n<pre><code class=\"python\">print(reverse(\"Hello!\"))    #!olleH\n</code></pre>\n", "abstract": "Recursive method: example:"}, {"id": 49865858, "score": 1, "vote": 0, "content": "<p>Here is how we can reverse a string using for loop:</p>\n<pre><code class=\"python\">string = \"hello,world\"\nfor i in range(-1,-len(string)-1,-1):\n    print (string[i], end=(\" \"))\n</code></pre>\n", "abstract": "Here is how we can reverse a string using for loop:"}, {"id": 53711501, "score": 1, "vote": 0, "content": "<pre><code class=\"python\">def reverse_string(string):\n    length = len(string)\n    temp = ''\n    for i in range(length):\n        temp += string[length - i - 1]\n    return temp\n\nprint(reverse_string('foo')) #prints \"oof\"\n</code></pre>\n<p>This works by looping through a string and assigning its values in reverse order to another string.</p>\n", "abstract": "This works by looping through a string and assigning its values in reverse order to another string."}, {"id": 62731790, "score": 1, "vote": 0, "content": "<pre><code class=\"python\"> a=input()\n print(a[::-1])\n</code></pre>\n<p>The above code recieves the input from the user and prints an output that is equal to the reverse of the input by adding [::-1].</p>\n<p><strong>OUTPUT:</strong></p>\n<pre><code class=\"python\">&gt;&gt;&gt; Happy \n&gt;&gt;&gt; yppaH\n</code></pre>\n<p>But when it comes to the case of sentences, view the code output below:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; Have a happy day\n&gt;&gt;&gt; yad yppah a evaH\n</code></pre>\n<p>But if you want only the characters of the string to be reversed and not the sequence of string, try this:</p>\n<pre><code class=\"python\">a=input().split() #Splits the input on the basis of space (\" \")\nfor b in a: #declares that var (b) is any value in the list (a)\n    print(b[::-1], end=\" \") #End declares to print the character in its quotes (\" \") without a new line.\n</code></pre>\n<blockquote>\n<p>In the above code in line 2 in I said that ** variable b is any value in the list (a)** I said var a to be a list because when you use split in an input the variable of the input becomes a list. <strong>Also remember that split can't be used in the case of int(input())</strong></p>\n</blockquote>\n<p><strong>OUTPUT:</strong></p>\n<pre><code class=\"python\">&gt;&gt;&gt; Have a happy day\n&gt;&gt;&gt; evaH a yppah yad\n</code></pre>\n<blockquote>\n<p>If we don't add end(\" \") in the above <strong>code</strong> then it will print like the following:</p>\n</blockquote>\n<pre><code class=\"python\">&gt;&gt;&gt; Have a happy day\n&gt;&gt;&gt; evaH\n&gt;&gt;&gt; a\n&gt;&gt;&gt; yppah\n&gt;&gt;&gt; yad\n</code></pre>\n<blockquote>\n<p>Below is an example to understand end():</p>\n</blockquote>\n<p><strong>CODE:</strong></p>\n<pre><code class=\"python\">for i in range(1,6):\n     print(i) #Without end()\n</code></pre>\n<p><strong>OUTPUT:</strong></p>\n<pre><code class=\"python\">&gt;&gt;&gt; 1\n&gt;&gt;&gt; 2\n&gt;&gt;&gt; 3\n&gt;&gt;&gt; 4\n&gt;&gt;&gt; 5\n</code></pre>\n<blockquote>\n<p>Now code with end():</p>\n</blockquote>\n<pre><code class=\"python\">for i in range(1,6):\n    print(i, end=\" || \")\n</code></pre>\n<p><strong>OUTPUT:</strong></p>\n<pre><code class=\"python\">&gt;&gt;&gt; 1 || 2 || 3 || 4 || 5 ||\n</code></pre>\n", "abstract": "The above code recieves the input from the user and prints an output that is equal to the reverse of the input by adding [::-1]. OUTPUT: But when it comes to the case of sentences, view the code output below: But if you want only the characters of the string to be reversed and not the sequence of string, try this: In the above code in line 2 in I said that ** variable b is any value in the list (a)** I said var a to be a list because when you use split in an input the variable of the input becomes a list. Also remember that split can't be used in the case of int(input()) OUTPUT: If we don't add end(\" \") in the above code then it will print like the following: Below is an example to understand end(): CODE: OUTPUT: Now code with end(): OUTPUT:"}, {"id": 34512034, "score": 0, "vote": 0, "content": "<p>Here is one without <code>[::-1]</code> or <code>reversed</code> (for learning purposes):</p>\n<pre><code class=\"python\">def reverse(text):\n    new_string = []\n    n = len(text)\n    while (n &gt; 0):\n        new_string.append(text[n-1])\n        n -= 1\n    return ''.join(new_string)\nprint reverse(\"abcd\")\n</code></pre>\n<p>you can use <code>+=</code> to concatenate strings but <code>join()</code> is faster. </p>\n", "abstract": "Here is one without [::-1] or reversed (for learning purposes): you can use += to concatenate strings but join() is faster. "}, {"id": 56719105, "score": 0, "vote": 0, "content": "<p>There are a lot of ways to reverse a string but I also created another one just for fun. I think this approach is not that bad.</p>\n<pre><code class=\"python\">def reverse(_str):\n    list_char = list(_str) # Create a hypothetical list. because string is immutable\n\n    for i in range(len(list_char)/2): # just t(n/2) to reverse a big string\n        list_char[i], list_char[-i - 1] = list_char[-i - 1], list_char[i]\n\n    return ''.join(list_char)\n\nprint(reverse(\"Ehsan\"))\n</code></pre>\n", "abstract": "There are a lot of ways to reverse a string but I also created another one just for fun. I think this approach is not that bad."}, {"id": 69148036, "score": 0, "vote": 0, "content": "<p>Or you could do something like?</p>\n<pre><code class=\"python\">&gt;&gt;&gt; a = 'hello world'\n&gt;&gt;&gt; ''.join(a[len(a) - i - 1] for i in range(len(a)))\n'dlrow olleh'\n&gt;&gt;&gt; \n</code></pre>\n<p>With a generator expression and string indexing.</p>\n", "abstract": "Or you could do something like? With a generator expression and string indexing."}, {"id": 69877512, "score": 0, "vote": 0, "content": "<p>Interviewers don't like the <code>[::-1]</code> technique, I experienced. so I came up with this one.</p>\n<pre><code class=\"python\">_list = [12, 34, 5, 6, 7, 8, 98, 44, 25]\n\nfor count, x in enumerate(_list, start=1):\n    print(_list[len(_list) - count])\n</code></pre>\n", "abstract": "Interviewers don't like the [::-1] technique, I experienced. so I came up with this one."}, {"id": 71039840, "score": 0, "vote": 0, "content": "<p><code>my_str = \"hello</code></p>\n<p>Fast Option: <code>my_str[::-1]</code></p>\n<p>Slow Option: <code>\"\".join(reversed(my_str))</code></p>\n", "abstract": "my_str = \"hello Fast Option: my_str[::-1] Slow Option: \"\".join(reversed(my_str))"}, {"id": 35174761, "score": -5, "vote": 0, "content": "<p>Sure, in Python you can do very fancy 1-line stuff. :) <br/>\nHere's a simple, all rounder solution that could work in any programming language.</p>\n<pre><code class=\"python\">def reverse_string(phrase):\n    reversed = \"\"\n    length = len(phrase)\n    for i in range(length):\n        reversed += phrase[length-1-i]\n    return reversed\n\nphrase = raw_input(\"Provide a string: \")\nprint reverse_string(phrase)\n</code></pre>\n", "abstract": "Sure, in Python you can do very fancy 1-line stuff. :) \nHere's a simple, all rounder solution that could work in any programming language."}, {"id": 36207493, "score": -5, "vote": 0, "content": "<pre><code class=\"python\">s = 'hello'\nln = len(s)\ni = 1\nwhile True:\n    rev = s[ln-i]\n    print rev,\n    i = i + 1\n    if i == ln + 1 :\n        break\n</code></pre>\n<p><strong>OUTPUT :</strong> </p>\n<pre><code class=\"python\">o l l e h\n</code></pre>\n", "abstract": "OUTPUT : "}, {"id": 38465000, "score": -7, "vote": 0, "content": "<p>You can use the reversed function with a list comprehesive. But I don't understand why this method was eliminated in python 3, was unnecessarily. </p>\n<pre><code class=\"python\">string = [ char for char in reversed(string)]\n</code></pre>\n", "abstract": "You can use the reversed function with a list comprehesive. But I don't understand why this method was eliminated in python 3, was unnecessarily. "}]}, {"link": "https://stackoverflow.com/questions/9622163/save-plot-to-image-file-instead-of-displaying-it-using-matplotlib", "question": {"id": "9622163", "title": "Save plot to image file instead of displaying it using Matplotlib", "content": "<p>This displays the figure in a GUI:</p>\n<pre><code class=\"python\">import matplotlib.pyplot as plt\nplt.plot([1, 2, 3], [1, 4, 9])\nplt.show()\n</code></pre>\n<p>But how do I instead save the figure to a file (e.g. foo.png)?</p>\n", "abstract": "This displays the figure in a GUI: But how do I instead save the figure to a file (e.g. foo.png)?"}, "answers": [{"id": 9890599, "score": 1992, "vote": 0, "content": "<p>When using <a href=\"https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.savefig.html\" rel=\"noreferrer\"><code>matplotlib.pyplot.savefig</code></a>, the file format can be specified by the extension:</p>\n<pre><code class=\"python\">from matplotlib import pyplot as plt\n\nplt.savefig('foo.png')\nplt.savefig('foo.pdf')\n</code></pre>\n<p>That gives a rasterized or vectorized output respectively.\nIn addition, there is sometimes undesirable whitespace around the image, which can be removed with:</p>\n<pre><code class=\"python\">plt.savefig('foo.png', bbox_inches='tight')\n</code></pre>\n<p>Note that if showing the plot, <code>plt.show()</code> should follow <code>plt.savefig()</code>; otherwise, the file image will be blank.</p>\n", "abstract": "When using matplotlib.pyplot.savefig, the file format can be specified by the extension: That gives a rasterized or vectorized output respectively.\nIn addition, there is sometimes undesirable whitespace around the image, which can be removed with: Note that if showing the plot, plt.show() should follow plt.savefig(); otherwise, the file image will be blank."}, {"id": 29931148, "score": 274, "vote": 0, "content": "<p>As others have said, <code>plt.savefig()</code> or <code>fig1.savefig()</code> is indeed the way to save an image.</p>\n<p>However I've found that in certain cases <strong>the figure is always shown</strong>. (eg. with Spyder having <code>plt.ion()</code>: interactive mode = On.)  I work around this by forcing the closing of the figure window in my giant loop with <code>plt.close(figure_object)</code> (see <a href=\"https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.close.html\" rel=\"noreferrer\">documentation</a>), so I don't have a million open figures during the loop:</p>\n<pre><code class=\"python\">import matplotlib.pyplot as plt\nfig, ax = plt.subplots( nrows=1, ncols=1 )  # create figure &amp; 1 axis\nax.plot([0,1,2], [10,20,3])\nfig.savefig('path/to/save/image/to.png')   # save the figure to file\nplt.close(fig)    # close the figure window\n</code></pre>\n<p>You should be able to re-open the figure later if needed to with <code>fig.show()</code> (didn't test myself).</p>\n", "abstract": "As others have said, plt.savefig() or fig1.savefig() is indeed the way to save an image. However I've found that in certain cases the figure is always shown. (eg. with Spyder having plt.ion(): interactive mode = On.)  I work around this by forcing the closing of the figure window in my giant loop with plt.close(figure_object) (see documentation), so I don't have a million open figures during the loop: You should be able to re-open the figure later if needed to with fig.show() (didn't test myself)."}, {"id": 9888817, "score": 176, "vote": 0, "content": "<p>The solution is: </p>\n<pre><code class=\"python\">pylab.savefig('foo.png')\n</code></pre>\n", "abstract": "The solution is: "}, {"id": 34583288, "score": 111, "vote": 0, "content": "<p>Just found this link on the MatPlotLib documentation addressing exactly this issue:\n<a href=\"http://matplotlib.org/faq/howto_faq.html#generate-images-without-having-a-window-appear\" rel=\"noreferrer\">http://matplotlib.org/faq/howto_faq.html#generate-images-without-having-a-window-appear</a></p>\n<p>They say that the easiest way to prevent the figure from popping up is to use a non-interactive backend (eg. Agg), via <code>matplotib.use(&lt;backend&gt;)</code>, eg:</p>\n<pre><code class=\"python\">import matplotlib\nmatplotlib.use('Agg')\nimport matplotlib.pyplot as plt\nplt.plot([1,2,3])\nplt.savefig('myfig')\n</code></pre>\n<p>I still personally prefer using <code>plt.close( fig )</code>, since then you have the option to hide certain figures (during a loop), but still display figures for post-loop data processing. It is probably slower than choosing a non-interactive backend though - would be interesting if someone tested that.</p>\n<p><strong>UPDATE</strong>: for Spyder, you usually can't set the backend in this way (Because Spyder usually loads matplotlib early, preventing you from using <code>matplotlib.use()</code>).</p>\n<p>Instead, use <code>plt.switch_backend('Agg')</code>, or Turn off \"<em>enable support</em>\" in the Spyder prefs and run the <code>matplotlib.use('Agg')</code> command yourself.</p>\n<p>From these two hints: <a href=\"https://stackoverflow.com/questions/44086597/cant-use-matplotlib-useagg-graphs-always-show-on-the-screen\">one</a>, <a href=\"https://stackoverflow.com/questions/53617655/anaconda-on-mac-cant-set-matplotlib-backend-to-agg/53623640#53623640\">two</a></p>\n", "abstract": "Just found this link on the MatPlotLib documentation addressing exactly this issue:\nhttp://matplotlib.org/faq/howto_faq.html#generate-images-without-having-a-window-appear They say that the easiest way to prevent the figure from popping up is to use a non-interactive backend (eg. Agg), via matplotib.use(<backend>), eg: I still personally prefer using plt.close( fig ), since then you have the option to hide certain figures (during a loop), but still display figures for post-loop data processing. It is probably slower than choosing a non-interactive backend though - would be interesting if someone tested that. UPDATE: for Spyder, you usually can't set the backend in this way (Because Spyder usually loads matplotlib early, preventing you from using matplotlib.use()). Instead, use plt.switch_backend('Agg'), or Turn off \"enable support\" in the Spyder prefs and run the matplotlib.use('Agg') command yourself. From these two hints: one, two"}, {"id": 21464691, "score": 58, "vote": 0, "content": "<p>If you don't like the concept of the \"current\" figure, do:</p>\n<pre><code class=\"python\">import matplotlib.image as mpimg\n\nimg = mpimg.imread(\"src.png\")\nmpimg.imsave(\"out.png\", img)\n</code></pre>\n", "abstract": "If you don't like the concept of the \"current\" figure, do:"}, {"id": 31133453, "score": 38, "vote": 0, "content": "<pre><code class=\"python\">import datetime\nimport numpy as np\nfrom matplotlib.backends.backend_pdf import PdfPages\nimport matplotlib.pyplot as plt\n\n# Create the PdfPages object to which we will save the pages:\n# The with statement makes sure that the PdfPages object is closed properly at\n# the end of the block, even if an Exception occurs.\nwith PdfPages('multipage_pdf.pdf') as pdf:\n    plt.figure(figsize=(3, 3))\n    plt.plot(range(7), [3, 1, 4, 1, 5, 9, 2], 'r-o')\n    plt.title('Page One')\n    pdf.savefig()  # saves the current figure into a pdf page\n    plt.close()\n\n    plt.rc('text', usetex=True)\n    plt.figure(figsize=(8, 6))\n    x = np.arange(0, 5, 0.1)\n    plt.plot(x, np.sin(x), 'b-')\n    plt.title('Page Two')\n    pdf.savefig()\n    plt.close()\n\n    plt.rc('text', usetex=False)\n    fig = plt.figure(figsize=(4, 5))\n    plt.plot(x, x*x, 'ko')\n    plt.title('Page Three')\n    pdf.savefig(fig)  # or you can pass a Figure object to pdf.savefig\n    plt.close()\n\n    # We can also set the file's metadata via the PdfPages object:\n    d = pdf.infodict()\n    d['Title'] = 'Multipage PDF Example'\n    d['Author'] = u'Jouni K. Sepp\\xe4nen'\n    d['Subject'] = 'How to create a multipage pdf file and set its metadata'\n    d['Keywords'] = 'PdfPages multipage keywords author title subject'\n    d['CreationDate'] = datetime.datetime(2009, 11, 13)\n    d['ModDate'] = datetime.datetime.today()\n</code></pre>\n", "abstract": ""}, {"id": 36427934, "score": 36, "vote": 0, "content": "<p>I used the following:</p>\n<pre><code class=\"python\">import matplotlib.pyplot as plt\n\np1 = plt.plot(dates, temp, 'r-', label=\"Temperature (celsius)\")  \np2 = plt.plot(dates, psal, 'b-', label=\"Salinity (psu)\")  \nplt.legend(loc='upper center', numpoints=1, bbox_to_anchor=(0.5, -0.05),        ncol=2, fancybox=True, shadow=True)\n\nplt.savefig('data.png')  \nplt.show() \nplt.close()\n</code></pre>\n<p>I found very important to use plt.show after saving the figure, otherwise it won't work.<a href=\"https://i.stack.imgur.com/2bUFL.png\" rel=\"noreferrer\">figure exported in png</a></p>\n", "abstract": "I used the following: I found very important to use plt.show after saving the figure, otherwise it won't work.figure exported in png"}, {"id": 37460048, "score": 34, "vote": 0, "content": "<p>The other answers are correct.  However, I sometimes find that I want to open the figure <em>object</em> later.  For example, I might want to change the label sizes, add a grid, or do other processing.  In a perfect world, I would simply rerun the code generating the plot, and adapt the settings.  Alas, the world is not perfect.  Therefore, in addition to saving to PDF or PNG, I add:</p>\n<pre><code class=\"python\">with open('some_file.pkl', \"wb\") as fp:\n    pickle.dump(fig, fp, protocol=4)\n</code></pre>\n<p>Like this, I can later load the figure object and manipulate the settings as I please.</p>\n<p>I also write out the stack with the source-code and <code>locals()</code> dictionary for each function/method in the stack, so that I can later tell exactly what generated the figure.</p>\n<p>NB: Be careful, as sometimes this method generates huge files.</p>\n", "abstract": "The other answers are correct.  However, I sometimes find that I want to open the figure object later.  For example, I might want to change the label sizes, add a grid, or do other processing.  In a perfect world, I would simply rerun the code generating the plot, and adapt the settings.  Alas, the world is not perfect.  Therefore, in addition to saving to PDF or PNG, I add: Like this, I can later load the figure object and manipulate the settings as I please. I also write out the stack with the source-code and locals() dictionary for each function/method in the stack, so that I can later tell exactly what generated the figure. NB: Be careful, as sometimes this method generates huge files."}, {"id": 39987599, "score": 31, "vote": 0, "content": "<p>After using the plot() and other functions to create the content you want, you could use a clause like this to select between plotting to the screen or to file:</p>\n<pre><code class=\"python\">import matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(4, 5))       # size in inches\n# use plot(), etc. to create your plot.\n\n# Pick one of the following lines to uncomment\n# save_file = None\n# save_file = os.path.join(your_directory, your_file_name)  \n\nif save_file:\n    plt.savefig(save_file)\n    plt.close(fig)\nelse:\n    plt.show()\n</code></pre>\n", "abstract": "After using the plot() and other functions to create the content you want, you could use a clause like this to select between plotting to the screen or to file:"}, {"id": 32287336, "score": 16, "vote": 0, "content": "<p>If, like me, you use Spyder IDE, you have to disable the interactive mode with :</p>\n<p><code>plt.ioff()</code></p>\n<p>(this command is automatically launched with the scientific startup)</p>\n<p>If you want to enable it again, use :</p>\n<p><code>plt.ion()</code></p>\n", "abstract": "If, like me, you use Spyder IDE, you have to disable the interactive mode with : plt.ioff() (this command is automatically launched with the scientific startup) If you want to enable it again, use : plt.ion()"}, {"id": 46385142, "score": 14, "vote": 0, "content": "<p>You can either do: </p>\n<pre><code class=\"python\">plt.show(hold=False)\nplt.savefig('name.pdf')\n</code></pre>\n<p>and remember to let savefig finish before closing the GUI plot. This way you can see the image beforehand. </p>\n<p>Alternatively, you can look at it with <code>plt.show()</code>\nThen close the GUI and run the script again, but this time replace <code>plt.show()</code> with <code>plt.savefig()</code>. </p>\n<p>Alternatively, you can use </p>\n<pre><code class=\"python\">fig, ax = plt.figure(nrows=1, ncols=1)\nplt.plot(...)\nplt.show()\nfig.savefig('out.pdf')\n</code></pre>\n", "abstract": "You can either do:  and remember to let savefig finish before closing the GUI plot. This way you can see the image beforehand.  Alternatively, you can look at it with plt.show()\nThen close the GUI and run the script again, but this time replace plt.show() with plt.savefig().  Alternatively, you can use "}, {"id": 36245528, "score": 13, "vote": 0, "content": "<p>The Solution : </p>\n<pre><code class=\"python\">import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib\nmatplotlib.style.use('ggplot')\nts = pd.Series(np.random.randn(1000), index=pd.date_range('1/1/2000', periods=1000))\nts = ts.cumsum()\nplt.figure()\nts.plot()\nplt.savefig(\"foo.png\", bbox_inches='tight')\n</code></pre>\n<p>If you do want to display the image as well as saving the image use:</p>\n<pre><code class=\"python\">%matplotlib inline\n</code></pre>\n<p>after \n<code>import matplotlib</code></p>\n", "abstract": "The Solution :  If you do want to display the image as well as saving the image use: after \nimport matplotlib"}, {"id": 51439601, "score": 13, "vote": 0, "content": "<p>According to question <a href=\"https://stackoverflow.com/q/9012487/6329006\">Matplotlib (pyplot) savefig outputs blank image</a>.</p>\n<p>One thing should note: if you use <code>plt.show</code> and it should after <code>plt.savefig</code>, or you will give a blank image.</p>\n<p>A detailed example:</p>\n<pre><code class=\"python\">import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef draw_result(lst_iter, lst_loss, lst_acc, title):\n    plt.plot(lst_iter, lst_loss, '-b', label='loss')\n    plt.plot(lst_iter, lst_acc, '-r', label='accuracy')\n\n    plt.xlabel(\"n iteration\")\n    plt.legend(loc='upper left')\n    plt.title(title)\n    plt.savefig(title+\".png\")  # should before plt.show method\n\n    plt.show()\n\n\ndef test_draw():\n    lst_iter = range(100)\n    lst_loss = [0.01 * i + 0.01 * i ** 2 for i in xrange(100)]\n    # lst_loss = np.random.randn(1, 100).reshape((100, ))\n    lst_acc = [0.01 * i - 0.01 * i ** 2 for i in xrange(100)]\n    # lst_acc = np.random.randn(1, 100).reshape((100, ))\n    draw_result(lst_iter, lst_loss, lst_acc, \"sgd_method\")\n\n\nif __name__ == '__main__':\n    test_draw()\n</code></pre>\n<p><a href=\"https://i.stack.imgur.com/zWZls.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/zWZls.png\"/></a></p>\n", "abstract": "According to question Matplotlib (pyplot) savefig outputs blank image. One thing should note: if you use plt.show and it should after plt.savefig, or you will give a blank image. A detailed example: "}, {"id": 61725305, "score": 10, "vote": 0, "content": "<p>When using <code>matplotlib.pyplot</code>, you must first save your plot and then close it using these 2 lines:</p>\n<pre><code class=\"python\">fig.savefig('plot.png') # save the plot, place the path you want to save the figure in quotation\nplt.close(fig) # close the figure window\n</code></pre>\n", "abstract": "When using matplotlib.pyplot, you must first save your plot and then close it using these 2 lines:"}, {"id": 53355046, "score": 8, "vote": 0, "content": "<pre><code class=\"python\">import matplotlib.pyplot as plt\nplt.savefig(\"image.png\")\n</code></pre>\n<p>In Jupyter Notebook you have to remove <code>plt.show()</code> and add <code>plt.savefig()</code>, together with the rest of the plt-code in one cell.\nThe image will still show up in your notebook.</p>\n", "abstract": "In Jupyter Notebook you have to remove plt.show() and add plt.savefig(), together with the rest of the plt-code in one cell.\nThe image will still show up in your notebook."}, {"id": 57007697, "score": 6, "vote": 0, "content": "<p>Additionally to those above, I added <code>__file__</code> for the name so the picture and Python file get the same names. I also added few arguments to make It look better:</p>\n<pre><code class=\"python\"># Saves a PNG file of the current graph to the folder and updates it every time\n# (nameOfimage, dpi=(sizeOfimage),Keeps_Labels_From_Disappearing)\nplt.savefig(__file__+\".png\",dpi=(250), bbox_inches='tight')\n# Hard coded name: './test.png'\n</code></pre>\n", "abstract": "Additionally to those above, I added __file__ for the name so the picture and Python file get the same names. I also added few arguments to make It look better:"}, {"id": 68181827, "score": 6, "vote": 0, "content": "<p>Just a extra note because I can't comment on posts yet.</p>\n<p>If you are using <code>plt.savefig('myfig')</code> or something along these lines make sure to add a <code>plt.clf()</code> after your image is saved. This is because savefig does not close the plot and if you add to the plot after without a <code>plt.clf()</code> you'll be adding to the previous plot.</p>\n<p>You may not notice if your plots are similar as it will plot over the previous plot, but if you are in a loop saving your figures the plot will slowly become massive and make your script very slow.</p>\n", "abstract": "Just a extra note because I can't comment on posts yet. If you are using plt.savefig('myfig') or something along these lines make sure to add a plt.clf() after your image is saved. This is because savefig does not close the plot and if you add to the plot after without a plt.clf() you'll be adding to the previous plot. You may not notice if your plots are similar as it will plot over the previous plot, but if you are in a loop saving your figures the plot will slowly become massive and make your script very slow."}, {"id": 53775116, "score": 4, "vote": 0, "content": "<p>Given that today (was not available when this question was made) lots of people use Jupyter Notebook as python console, there is an extremely easy way to save the plots as <code>.png</code>, just call the <code>matplotlib</code>'s <code>pylab</code> class from Jupyter Notebook, plot the figure 'inline' jupyter cells, and then drag that figure/image to a local directory. Don't forget \n<code>%matplotlib inline</code> in the first line!</p>\n", "abstract": "Given that today (was not available when this question was made) lots of people use Jupyter Notebook as python console, there is an extremely easy way to save the plots as .png, just call the matplotlib's pylab class from Jupyter Notebook, plot the figure 'inline' jupyter cells, and then drag that figure/image to a local directory. Don't forget \n%matplotlib inline in the first line!"}, {"id": 59966433, "score": 3, "vote": 0, "content": "<p>As suggested before, you can either use:</p>\n<pre><code class=\"python\">import matplotlib.pyplot as plt\nplt.savefig(\"myfig.png\")\n</code></pre>\n<p>For saving whatever IPhython image that you are displaying. Or on a different note (looking from a different angle), if you ever get to work with open cv, or if you have open cv imported, you can go for:</p>\n<pre><code class=\"python\">import cv2\n\ncv2.imwrite(\"myfig.png\",image)\n</code></pre>\n<p>But this is just in case if you need to work with Open CV. Otherwise <code>plt.savefig()</code> should be sufficient.</p>\n", "abstract": "As suggested before, you can either use: For saving whatever IPhython image that you are displaying. Or on a different note (looking from a different angle), if you ever get to work with open cv, or if you have open cv imported, you can go for: But this is just in case if you need to work with Open CV. Otherwise plt.savefig() should be sufficient."}, {"id": 68684545, "score": 2, "vote": 0, "content": "<p>well, I do recommend using wrappers to render or control the plotting. examples can be mpltex (<a href=\"https://github.com/liuyxpp/mpltex\" rel=\"nofollow noreferrer\">https://github.com/liuyxpp/mpltex</a>) or prettyplotlib (<a href=\"https://github.com/olgabot/prettyplotlib\" rel=\"nofollow noreferrer\">https://github.com/olgabot/prettyplotlib</a>).</p>\n<pre><code class=\"python\">import mpltex\n\n@mpltex.acs_decorator\ndef myplot():\n  plt.figure()\n  plt.plot(x,y,'b-',lable='xxx')\n  plt.tight_layout(pad=0.5)\n  plt.savefig('xxxx')  # the figure format was controlled by the decorator, it can be either eps, or pdf or png....\n  plt.close()\n</code></pre>\n<p>I basically use this decorator a lot for publishing academic papers in various journals at American Chemical Society, American Physics Society, Opticcal Society American, Elsivier and so on.</p>\n<p>An example can be found as following image (<a href=\"https://github.com/MarkMa1990/gradientDescent\" rel=\"nofollow noreferrer\">https://github.com/MarkMa1990/gradientDescent</a>):\n<a href=\"https://i.stack.imgur.com/T2zV8.png\" rel=\"nofollow noreferrer\"><img alt=\"an example of gradient descent\" src=\"https://i.stack.imgur.com/T2zV8.png\"/></a></p>\n", "abstract": "well, I do recommend using wrappers to render or control the plotting. examples can be mpltex (https://github.com/liuyxpp/mpltex) or prettyplotlib (https://github.com/olgabot/prettyplotlib). I basically use this decorator a lot for publishing academic papers in various journals at American Chemical Society, American Physics Society, Opticcal Society American, Elsivier and so on. An example can be found as following image (https://github.com/MarkMa1990/gradientDescent):\n"}, {"id": 57576314, "score": 1, "vote": 0, "content": "<p>You can do it like this:</p>\n<pre><code class=\"python\">def plotAFig():\n  plt.figure()\n  plt.plot(x,y,'b-')\n  plt.savefig(\"figurename.png\")\n  plt.close()\n</code></pre>\n", "abstract": "You can do it like this:"}, {"id": 56759334, "score": 0, "vote": 0, "content": "<p>You can save your image with any extension(png, jpg,etc.) and with the resolution you want. Here's a function to save your figure. </p>\n<pre><code class=\"python\">import os\n\ndef save_fig(fig_id, tight_layout=True, fig_extension=\"png\", resolution=300):\n    path = os.path.join(IMAGES_PATH, fig_id + \".\" + fig_extension)\n    print(\"Saving figure\", fig_id)\n    if tight_layout:\n        plt.tight_layout()\n    plt.savefig(path, format=fig_extension, dpi=resolution)\n</code></pre>\n<p>'fig_id' is the name by which you want to save your figure. Hope it helps:)</p>\n", "abstract": "You can save your image with any extension(png, jpg,etc.) and with the resolution you want. Here's a function to save your figure.  'fig_id' is the name by which you want to save your figure. Hope it helps:)"}, {"id": 68080238, "score": 0, "vote": 0, "content": "<p>Nothing was working for me. The problem is that the saved imaged was very small and I could not find how the hell make it bigger.</p>\n<p>This seems to make it bigger, but still not full screen.</p>\n<p><a href=\"https://matplotlib.org/stable/api/figure_api.html#matplotlib.figure.Figure.set_size_inches\" rel=\"nofollow noreferrer\">https://matplotlib.org/stable/api/figure_api.html#matplotlib.figure.Figure.set_size_inches</a></p>\n<p>fig.set_size_inches((w, h))</p>\n<p>Hope that helps somebody.</p>\n", "abstract": "Nothing was working for me. The problem is that the saved imaged was very small and I could not find how the hell make it bigger. This seems to make it bigger, but still not full screen. https://matplotlib.org/stable/api/figure_api.html#matplotlib.figure.Figure.set_size_inches fig.set_size_inches((w, h)) Hope that helps somebody."}, {"id": 70992607, "score": 0, "vote": 0, "content": "<p>using 'agg' due to no gui on server.\nDebugging on ubuntu 21.10 with gui and VSC.\nIn debug, trying to both display a plot and then saving  to file for web UI.</p>\n<p>Found out that saving before showing is required, otherwise saved plot is blank. I suppose that showing will clear the plot for some reason. Do this:</p>\n<pre><code class=\"python\">plt.savefig(imagePath) \nplt.show()\nplt.close(fig)\n</code></pre>\n<p>Instead of this:</p>\n<pre><code class=\"python\">plt.show()\nplt.savefig(imagePath) \nplt.close(fig)\n</code></pre>\n", "abstract": "using 'agg' due to no gui on server.\nDebugging on ubuntu 21.10 with gui and VSC.\nIn debug, trying to both display a plot and then saving  to file for web UI. Found out that saving before showing is required, otherwise saved plot is blank. I suppose that showing will clear the plot for some reason. Do this: Instead of this:"}]}, {"link": "https://stackoverflow.com/questions/7225900/how-can-i-install-packages-using-pip-according-to-the-requirements-txt-file-from", "question": {"id": "7225900", "title": "How can I install packages using pip according to the requirements.txt file from a local directory?", "content": "<p>Here is the problem:</p>\n<p>I have a <em>requirements.txt</em> file that looks like:</p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">BeautifulSoup==3.2.0\nDjango==1.3\nFabric==1.2.0\nJinja2==2.5.5\nPyYAML==3.09\nPygments==1.4\nSQLAlchemy==0.7.1\nSouth==0.7.3\namqplib==0.6.1\nanyjson==0.3\n...\n</code></pre>\n<p>I have a local archive directory containing all the packages + others.</p>\n<p>I have created a new <a href=\"http://pypi.python.org/pypi/virtualenv\" rel=\"noreferrer\">virtualenv</a> with</p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">bin/virtualenv testing\n</code></pre>\n<p>Upon activating it, I tried to install the packages according to <em>requirements.txt</em> from the local archive directory.</p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">source bin/activate\npip install -r /path/to/requirements.txt -f file:///path/to/archive/\n</code></pre>\n<p>I got some output that seems to indicate that the installation is fine:</p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">Downloading/unpacking Fabric==1.2.0 (from -r ../testing/requirements.txt (line 3))\n  Running setup.py egg_info for package Fabric\n    warning: no previously-included files matching '*' found under directory 'docs/_build'\n    warning: no files found matching 'fabfile.py'\nDownloading/unpacking South==0.7.3 (from -r ../testing/requirements.txt (line 8))\n  Running setup.py egg_info for package South\n....\n</code></pre>\n<p>But a later check revealed that none of the packages are installed properly. I cannot import the packages, and none are found in the site-packages directory of my virtualenv. So what went wrong?</p>\n", "abstract": "Here is the problem: I have a requirements.txt file that looks like: I have a local archive directory containing all the packages + others. I have created a new virtualenv with Upon activating it, I tried to install the packages according to requirements.txt from the local archive directory. I got some output that seems to indicate that the installation is fine: But a later check revealed that none of the packages are installed properly. I cannot import the packages, and none are found in the site-packages directory of my virtualenv. So what went wrong?"}, "answers": [{"id": 15593865, "score": 1925, "vote": 0, "content": "<p>This works for everyone:</p>\n<pre><code class=\"python\">pip install -r /path/to/requirements.txt\n</code></pre>\n<p><strong>Explanation:</strong></p>\n<blockquote>\n<p>-r, --requirement &lt; filename &gt;</p>\n</blockquote>\n<p>Install from the given requirements file. This option can be used multiple times.</p>\n", "abstract": "This works for everyone: Explanation: -r, --requirement < filename > Install from the given requirements file. This option can be used multiple times."}, {"id": 10429168, "score": 1076, "vote": 0, "content": "<p>This works for me:</p>\n<pre><code class=\"python\">$ pip install -r requirements.txt --no-index --find-links file:///tmp/packages\n</code></pre>\n<p><code>--no-index</code> - Ignore package index (only looking at <code>--find-links</code> URLs instead).</p>\n<p><code>-f, --find-links &lt;URL&gt;</code> - If a URL or path to an HTML file, then parse for links to archives.</p>\n<p>If a local path or <code>file://</code> URL that's a directory, then look for archives in the directory listing.</p>\n", "abstract": "This works for me: --no-index - Ignore package index (only looking at --find-links URLs instead). -f, --find-links <URL> - If a URL or path to an HTML file, then parse for links to archives. If a local path or file:// URL that's a directory, then look for archives in the directory listing."}, {"id": 22046133, "score": 180, "vote": 0, "content": "<p>For virtualenv to install all files in the <em>requirements.txt</em> file.</p>\n<ol>\n<li>cd to the directory where <em>requirements.txt</em> is located</li>\n<li>activate your virtualenv</li>\n<li>run:  <code>pip install -r requirements.txt</code> in your shell</li>\n</ol>\n", "abstract": "For virtualenv to install all files in the requirements.txt file."}, {"id": 34969495, "score": 76, "vote": 0, "content": "<p>I had a similar problem. I tried this:</p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">    pip install -U -r requirements.txt\n</code></pre>\n<p><em>(-U = update if it had already installed)</em></p>\n<p>But the problem continued. I realized that some of generic libraries for development were missed.</p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">    sudo apt-get install libtiff5-dev libjpeg8-dev zlib1g-dev liblcms2-dev libwebp-dev tcl8.6-dev tk8.6-dev python-tk\n</code></pre>\n<p>I don't know if this would help you.</p>\n", "abstract": "I had a similar problem. I tried this: (-U = update if it had already installed) But the problem continued. I realized that some of generic libraries for development were missed. I don't know if this would help you."}, {"id": 39537053, "score": 51, "vote": 0, "content": "<p>Use:</p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">pip install -r requirements.txt\n</code></pre>\n<p>For further details, please check the help option:</p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">pip install --help\n</code></pre>\n<p>We can find the option '-r' -</p>\n<blockquote>\n<p>-r, --requirement     Install from the given requirements file. This option can be\nused multiple times.</p>\n</blockquote>\n<p>Further information on some commonly used pip install options (this is the help option on the pip install command):</p>\n<p><a href=\"https://i.stack.imgur.com/NWTio.png\" rel=\"noreferrer\"><img alt=\"Enter image description here\" src=\"https://i.stack.imgur.com/NWTio.png\"/></a></p>\n<p>Also the above is the complete set of options. Please use <code>pip install --help</code> for the complete list of options.</p>\n", "abstract": "Use: For further details, please check the help option: We can find the option '-r' - -r, --requirement     Install from the given requirements file. This option can be\nused multiple times. Further information on some commonly used pip install options (this is the help option on the pip install command):  Also the above is the complete set of options. Please use pip install --help for the complete list of options."}, {"id": 53717709, "score": 32, "vote": 0, "content": "<p><strong>Short answer</strong></p>\n<pre><code class=\"python\">pip install -r /path/to/requirements.txt\n</code></pre>\n<p>or in another form:</p>\n<pre><code class=\"python\">python -m pip install -r /path/to/requirements.txt\n</code></pre>\n<p><strong>Explanation</strong></p>\n<p>Here, <code>-r</code> is short form of <code>--requirement</code> and it asks the <code>pip</code> to install from the given <code>requirements</code> file.</p>\n<p><code>pip</code> will start installation only after checking the availability of all listed items in the <code>requirements</code> file and it won't start installation even if one <code>requirement</code> is unavailable.</p>\n<p>One workaround to install the available packages is installing listed packages one by one. Use the following command for that. A red color warning will be shown to notify you about the unavailable packages.</p>\n<pre><code class=\"python\">cat requirements.txt | xargs -n 1 pip install\n</code></pre>\n<p>To ignore comments (lines starting with a <code>#</code>) and blank lines, use:</p>\n<pre><code class=\"python\">cat requirements.txt | cut -f1 -d\"#\" | sed '/^\\s*$/d' | xargs -n 1 pip install\n</code></pre>\n", "abstract": "Short answer or in another form: Explanation Here, -r is short form of --requirement and it asks the pip to install from the given requirements file. pip will start installation only after checking the availability of all listed items in the requirements file and it won't start installation even if one requirement is unavailable. One workaround to install the available packages is installing listed packages one by one. Use the following command for that. A red color warning will be shown to notify you about the unavailable packages. To ignore comments (lines starting with a #) and blank lines, use:"}, {"id": 58472778, "score": 29, "vote": 0, "content": "<p>First of all, create a virtual environment.</p>\n<p>In Python 3.6</p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">virtualenv --python=/usr/bin/python3.6 &lt;path/to/new/virtualenv/&gt;\n</code></pre>\n<p>In Python 2.7</p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">virtualenv --python=/usr/bin/python2.7 &lt;path/to/new/virtualenv/&gt;\n</code></pre>\n<p>Then activate the environment and install all the packages available in the <em>requirement.txt</em> file.</p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">source &lt;path/to/new/virtualenv&gt;/bin/activate\npip install -r &lt;path/to/requirement.txt&gt;\n</code></pre>\n", "abstract": "First of all, create a virtual environment. In Python 3.6 In Python 2.7 Then activate the environment and install all the packages available in the requirement.txt file."}, {"id": 32709817, "score": 24, "vote": 0, "content": "<p>Often, you will want a fast install from local archives, without probing PyPI.</p>\n<p>First, download the archives that fulfill your requirements:</p>\n<pre><code class=\"python\">$ pip install --download &lt;DIR&gt; -r requirements.txt\n</code></pre>\n<p>Then, install using <code>\u2013find-links</code> and <code>\u2013no-index</code>:</p>\n<pre><code class=\"python\">$ pip install --no-index --find-links=[file://]&lt;DIR&gt; -r requirements.txt\n</code></pre>\n", "abstract": "Often, you will want a fast install from local archives, without probing PyPI. First, download the archives that fulfill your requirements: Then, install using \u2013find-links and \u2013no-index:"}, {"id": 54405453, "score": 23, "vote": 0, "content": "<p>Try this:</p>\n<pre><code class=\"python\">python -m pip install -r requirements.txt\n</code></pre>\n", "abstract": "Try this:"}, {"id": 42982245, "score": 16, "vote": 0, "content": "<p>I work with a lot of systems that have been mucked by developers \"following directions they found on the Internet\". It is extremely common that your <code>pip</code> and your <code>python</code> are not looking at the same paths/site-packages. For this reason, when I encounter oddness I start by doing this:</p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">$ python -c 'import sys; print(sys.path)'\n['', '/usr/lib/python2.7', '/usr/lib/python2.7/plat-x86_64-linux-gnu',\n'/usr/lib/python2.7/lib-tk', '/usr/lib/python2.7/lib-old',\n'/usr/lib/python2.7/lib-dynload', '/usr/local/lib/python2.7/dist-packages',\n'/usr/lib/python2.7/dist-packages']\n\n$ pip --version\npip 9.0.1 from /usr/local/lib/python2.7/dist-packages (python 2.7)\n</code></pre>\n<p>That is a <em>happy system</em>.</p>\n<p>Below is an <em>unhappy system</em>. (Or at least it's a blissfully ignorant system that causes others to be unhappy.)</p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">$ pip --version\npip 9.0.1 from /usr/local/lib/python3.6/site-packages (python 3.6)\n\n$ python -c 'import sys; print(sys.path)'\n['', '/usr/local/Cellar/python/2.7.13/Frameworks/Python.framework/Versions/2.7/lib/python27.zip',\n'/usr/local/Cellar/python/2.7.13/Frameworks/Python.framework/Versions/2.7/lib/python2.7',\n'/usr/local/Cellar/python/2.7.13/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-darwin',\n'/usr/local/Cellar/python/2.7.13/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac',\n'/usr/local/Cellar/python/2.7.13/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/lib-scriptpackages',\n'/usr/local/Cellar/python/2.7.13/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk',\n'/usr/local/Cellar/python/2.7.13/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old',\n'/usr/local/Cellar/python/2.7.13/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload',\n'/usr/local/lib/python2.7/site-packages']\n\n$ which pip pip2 pip3\n/usr/local/bin/pip\n/usr/local/bin/pip3\n</code></pre>\n<p>It is <em>unhappy</em> because <code>pip</code> is (python3.6 and) using <code>/usr/local/lib/python3.6/site-packages</code> while <code>python</code> is (python2.7 and) using <code>/usr/local/lib/python2.7/site-packages</code></p>\n<p>When I want to make sure I'm installing requirements to the <em>right</em> python, I do this:</p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">$ which -a python python2 python3\n/usr/local/bin/python\n/usr/bin/python\n/usr/local/bin/python2\n/usr/local/bin/python3\n\n$ /usr/bin/python -m pip install -r requirements.txt\n</code></pre>\n<p>You've heard, \"If it ain't broke, don't try to fix it.\" The DevOps version of that is, \"If you didn't break it and you can work around it, don't try to fix it.\"</p>\n", "abstract": "I work with a lot of systems that have been mucked by developers \"following directions they found on the Internet\". It is extremely common that your pip and your python are not looking at the same paths/site-packages. For this reason, when I encounter oddness I start by doing this: That is a happy system. Below is an unhappy system. (Or at least it's a blissfully ignorant system that causes others to be unhappy.) It is unhappy because pip is (python3.6 and) using /usr/local/lib/python3.6/site-packages while python is (python2.7 and) using /usr/local/lib/python2.7/site-packages When I want to make sure I'm installing requirements to the right python, I do this: You've heard, \"If it ain't broke, don't try to fix it.\" The DevOps version of that is, \"If you didn't break it and you can work around it, don't try to fix it.\""}, {"id": 47218206, "score": 14, "vote": 0, "content": "<p><strong>Installing requirements.txt file inside virtual env with Python\u00a03:</strong></p>\n<p>I had the same issue. I was trying to install the <em>requirements.txt</em> file inside a virtual environment. I found the solution.</p>\n<p>Initially, I created my virtualenv in this way:</p>\n<pre><code class=\"python\">virtualenv -p python3 myenv\n</code></pre>\n<p>Activate the environment using:</p>\n<pre><code class=\"python\">source myenv/bin/activate\n</code></pre>\n<p>Now I installed the <em>requirements.txt</em> file using:</p>\n<pre><code class=\"python\">pip3 install -r requirements.txt\n</code></pre>\n<p>Installation was successful and I was able to import the modules.</p>\n", "abstract": "Installing requirements.txt file inside virtual env with Python\u00a03: I had the same issue. I was trying to install the requirements.txt file inside a virtual environment. I found the solution. Initially, I created my virtualenv in this way: Activate the environment using: Now I installed the requirements.txt file using: Installation was successful and I was able to import the modules."}, {"id": 70371208, "score": 9, "vote": 0, "content": "<ul>\n<li>Create virtual environment <code>python3 -m venv virtual-env</code> (For windows use python instead of python3)</li>\n<li>Activate your virtual environment <code>source virtual-env/bin/activate</code></li>\n<li>Now install requirements <code>pip install -r requirements.txt</code></li>\n</ul>\n", "abstract": ""}, {"id": 58179065, "score": 8, "vote": 0, "content": "<pre><code class=\"python\">pip install --user -r requirements.txt \n</code></pre>\n<p>OR</p>\n<pre><code class=\"python\">pip3 install --user -r requirements.txt \n</code></pre>\n", "abstract": "OR"}, {"id": 70923701, "score": 6, "vote": 0, "content": "<p>Use <code>pip3 install -r requirements.txt </code> But make sure the requirements.txt file has been pulled from origin and not added to <code>.gitignore</code></p>\n", "abstract": "Use pip3 install -r requirements.txt  But make sure the requirements.txt file has been pulled from origin and not added to .gitignore"}, {"id": 71100030, "score": 6, "vote": 0, "content": "<p>In Windows, this can lead to less format-related path issues, if you have</p>\n<blockquote>\n<p>c:\\folder\\subfolder\\requirements.txt</p>\n</blockquote>\n<pre><code class=\"python\">cd c:\\folder\\subfolder \npip install -r requirements.txt\n</code></pre>\n", "abstract": "In Windows, this can lead to less format-related path issues, if you have c:\\folder\\subfolder\\requirements.txt"}, {"id": 68917356, "score": -3, "vote": 0, "content": "<p>I have solved with running the below command:</p>\n<pre><code class=\"python\">py -m pip install ./requirements.txt\n</code></pre>\n<p>the above command will install all dependencies and libraries for the Django project.</p>\n", "abstract": "I have solved with running the below command: the above command will install all dependencies and libraries for the Django project."}]}, {"link": "https://stackoverflow.com/questions/7943751/what-is-the-python-3-equivalent-of-python-m-simplehttpserver", "question": {"id": "7943751", "title": "What is the Python 3 equivalent of &quot;python -m SimpleHTTPServer&quot;", "content": "<p>What is the Python 3 equivalent of <code>python -m SimpleHTTPServer</code>?</p>\n", "abstract": "What is the Python 3 equivalent of python -m SimpleHTTPServer?"}, "answers": [{"id": 7943768, "score": 2212, "vote": 0, "content": "<p>From <a href=\"https://docs.python.org/2/library/simplehttpserver.html\" rel=\"noreferrer\">the docs</a>:</p>\n<blockquote>\n<p>The <code>SimpleHTTPServer</code> module has been merged into <code>http.server</code> in Python 3.0. The 2to3 tool will automatically adapt imports when converting your sources to 3.0.</p>\n</blockquote>\n<p>So, your command is <code>python -m http.server</code>, or depending on your installation, it can be:</p>\n<pre><code class=\"python\">python3 -m http.server\n</code></pre>\n", "abstract": "From the docs: The SimpleHTTPServer module has been merged into http.server in Python 3.0. The 2to3 tool will automatically adapt imports when converting your sources to 3.0. So, your command is python -m http.server, or depending on your installation, it can be:"}, {"id": 7943764, "score": 348, "vote": 0, "content": "<p>The equivalent is:</p>\n<pre><code class=\"python\">python3 -m http.server\n</code></pre>\n", "abstract": "The equivalent is:"}, {"id": 17351445, "score": 161, "vote": 0, "content": "<p>Using 2to3 utility.</p>\n<pre><code class=\"python\">$ cat try.py\nimport SimpleHTTPServer\n\n$ 2to3 try.py\nRefactoringTool: Skipping implicit fixer: buffer\nRefactoringTool: Skipping implicit fixer: idioms\nRefactoringTool: Skipping implicit fixer: set_literal\nRefactoringTool: Skipping implicit fixer: ws_comma\nRefactoringTool: Refactored try.py\n--- try.py  (original)\n+++ try.py  (refactored)\n@@ -1 +1 @@\n-import SimpleHTTPServer\n+import http.server\nRefactoringTool: Files that need to be modified:\nRefactoringTool: try.py\n</code></pre>\n<p>Like many *nix utils, <code>2to3</code> accepts <code>stdin</code> if the argument passed is <code>-</code>. Therefore, you can test without creating any files like so:</p>\n<pre><code class=\"python\">$ 2to3 - &lt;&lt;&lt; \"import SimpleHTTPServer\"\n</code></pre>\n", "abstract": "Using 2to3 utility. Like many *nix utils, 2to3 accepts stdin if the argument passed is -. Therefore, you can test without creating any files like so:"}, {"id": 44266673, "score": 120, "vote": 0, "content": "<p>In addition to Petr's answer, if you want to bind to a specific interface instead of all the interfaces you can use <code>-b</code> or <code>--bind</code> flag.</p>\n<pre><code class=\"python\">python -m http.server 8000 --bind 127.0.0.1\n</code></pre>\n<p>The above snippet should do the trick. 8000 is the port number. 80 is used as the standard port for HTTP communications.</p>\n", "abstract": "In addition to Petr's answer, if you want to bind to a specific interface instead of all the interfaces you can use -b or --bind flag. The above snippet should do the trick. 8000 is the port number. 80 is used as the standard port for HTTP communications."}, {"id": 64166377, "score": 34, "vote": 0, "content": "<p>As everyone has mentioned <a href=\"https://docs.python.org/3/library/http.server.html#module-http.server\" rel=\"noreferrer\">http.server</a> module is equivalent to <code>python -m SimpleHTTPServer</code>.\n<br/>But as a warning from <a href=\"https://docs.python.org/3/library/http.server.html#module-http.server\" rel=\"noreferrer\">https://docs.python.org/3/library/http.server.html#module-http.server</a></p>\n<blockquote>\n<p><strong>Warning</strong>: <code>http.server</code> is not recommended for production. It only implements basic security checks.</p>\n</blockquote>\n<h1>Usage</h1>\n<p>http.server can also be invoked directly using the <code>-m</code> switch of the interpreter.</p>\n<pre><code class=\"python\">python -m http.server\n</code></pre>\n<p>The above command will run a server by default on port number <code>8000</code>. You can also give the port number explicitly while running the server</p>\n<pre><code class=\"python\">python -m http.server 9000\n</code></pre>\n<p>The above command will run an HTTP server on port 9000 instead of 8000.</p>\n<blockquote>\n<p>By default, server binds itself to all interfaces. The option\n-b/--bind specifies a specific address to which it should bind. Both IPv4 and IPv6 addresses are supported. For example, the following\ncommand causes the server to bind to localhost only:</p>\n</blockquote>\n<pre><code class=\"python\">python -m http.server 8000 --bind 127.0.0.1\n</code></pre>\n<p>or</p>\n<pre><code class=\"python\">python -m http.server 8000 -b 127.0.0.1\n</code></pre>\n<p>Python 3.8 version also supports IPv6 in the bind argument.</p>\n<h2>Directory Binding</h2>\n<p>By default, server uses the current directory. The option <code>-d/--directory</code> specifies a directory to which it should serve the files. For example, the following command uses a specific directory:</p>\n<pre><code class=\"python\">python -m http.server --directory /tmp/\n</code></pre>\n<p>Directory binding is introduced in python 3.7</p>\n", "abstract": "As everyone has mentioned http.server module is equivalent to python -m SimpleHTTPServer.\nBut as a warning from https://docs.python.org/3/library/http.server.html#module-http.server Warning: http.server is not recommended for production. It only implements basic security checks. http.server can also be invoked directly using the -m switch of the interpreter. The above command will run a server by default on port number 8000. You can also give the port number explicitly while running the server The above command will run an HTTP server on port 9000 instead of 8000. By default, server binds itself to all interfaces. The option\n-b/--bind specifies a specific address to which it should bind. Both IPv4 and IPv6 addresses are supported. For example, the following\ncommand causes the server to bind to localhost only: or Python 3.8 version also supports IPv6 in the bind argument. By default, server uses the current directory. The option -d/--directory specifies a directory to which it should serve the files. For example, the following command uses a specific directory: Directory binding is introduced in python 3.7"}, {"id": 46595749, "score": 11, "vote": 0, "content": "<p>In one of my projects I run tests against Python 2 and 3. For that I wrote a small script which starts a local server independently:</p>\n<pre><code class=\"python\">$ python -m $(python -c 'import sys; print(\"http.server\" if sys.version_info[:2] &gt; (2,7) else \"SimpleHTTPServer\")')\nServing HTTP on 0.0.0.0 port 8000 ...\n</code></pre>\n<p>As an alias:</p>\n<pre><code class=\"python\">$ alias serve=\"python -m $(python -c 'import sys; print(\"http.server\" if sys.version_info[:2] &gt; (2,7) else \"SimpleHTTPServer\")')\"\n$ serve\nServing HTTP on 0.0.0.0 port 8000 ...\n</code></pre>\n<p>Please note that I control my Python version via <a href=\"https://conda.io/docs/user-guide/tasks/manage-environments.html\" rel=\"noreferrer\">conda environments</a>, because of that I can use <code>python</code> instead of <code>python3</code> for using Python 3.</p>\n", "abstract": "In one of my projects I run tests against Python 2 and 3. For that I wrote a small script which starts a local server independently: As an alias: Please note that I control my Python version via conda environments, because of that I can use python instead of python3 for using Python 3."}, {"id": 71111456, "score": 9, "vote": 0, "content": "<p>Just wanted to add what worked for me:\n<code>python3 -m http.server 8000</code> (you can use any port number here except the ones which are currently in use)</p>\n", "abstract": "Just wanted to add what worked for me:\npython3 -m http.server 8000 (you can use any port number here except the ones which are currently in use)"}]}, {"link": "https://stackoverflow.com/questions/12309269/how-do-i-write-json-data-to-a-file", "question": {"id": "12309269", "title": "How do I write JSON data to a file?", "content": "<p>How do I write JSON data stored in the dictionary <code>data</code> to a file?</p>\n<pre><code class=\"python\">f = open('data.json', 'wb')\nf.write(data)\n</code></pre>\n<p>This gives the error:</p>\n<blockquote>\n<p>TypeError: must be string or buffer, not dict</p>\n</blockquote>\n", "abstract": "How do I write JSON data stored in the dictionary data to a file? This gives the error: TypeError: must be string or buffer, not dict"}, "answers": [{"id": 12309296, "score": 2806, "vote": 0, "content": "<p><code>data</code> is a Python dictionary. It needs to be encoded as JSON before writing.</p>\n<p>Use this for maximum compatibility (Python 2 and 3):</p>\n<pre><code class=\"python\">import json\nwith open('data.json', 'w') as f:\n    json.dump(data, f)\n</code></pre>\n<p>On a modern system (i.e. Python 3 and UTF-8 support), you can write a nicer file using:</p>\n<pre><code class=\"python\">import json\nwith open('data.json', 'w', encoding='utf-8') as f:\n    json.dump(data, f, ensure_ascii=False, indent=4)\n</code></pre>\n<p>See <a href=\"https://docs.python.org/3/library/json.html\" rel=\"noreferrer\"><code>json</code></a> documentation.</p>\n", "abstract": "data is a Python dictionary. It needs to be encoded as JSON before writing. Use this for maximum compatibility (Python 2 and 3): On a modern system (i.e. Python 3 and UTF-8 support), you can write a nicer file using: See json documentation."}, {"id": 14870531, "score": 300, "vote": 0, "content": "<p>To get <strong><em>utf8</em></strong>-encoded file as opposed to <strong><em>ascii</em></strong>-encoded in the accepted answer for Python 2 use:</p>\n<pre><code class=\"python\">import io, json\nwith io.open('data.txt', 'w', encoding='utf-8') as f:\n  f.write(json.dumps(data, ensure_ascii=False))\n</code></pre>\n<p>The code is simpler in Python 3:</p>\n<pre><code class=\"python\">import json\nwith open('data.txt', 'w') as f:\n  json.dump(data, f, ensure_ascii=False)\n</code></pre>\n<p>On Windows, the <code>encoding='utf-8'</code> argument to <code>open</code> is still necessary.</p>\n<p>To avoid storing an encoded copy of the data in memory (result of <code>dumps</code>) and to output <em>utf8-encoded</em> bytestrings in both Python 2 and 3, use:</p>\n<pre><code class=\"python\">import json, codecs\nwith open('data.txt', 'wb') as f:\n    json.dump(data, codecs.getwriter('utf-8')(f), ensure_ascii=False)\n</code></pre>\n<p><em>The <code>codecs.getwriter</code> call is redundant in Python 3 but required for Python 2</em></p>\n<hr/>\n<p><strong>Readability and size:</strong></p>\n<p>The use of <code>ensure_ascii=False</code> gives better readability and smaller size:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; json.dumps({'price': '\u20ac10'})\n'{\"price\": \"\\\\u20ac10\"}'\n&gt;&gt;&gt; json.dumps({'price': '\u20ac10'}, ensure_ascii=False)\n'{\"price\": \"\u20ac10\"}'\n\n&gt;&gt;&gt; len(json.dumps({'\u0430\u0431\u0432\u0433\u0434': 1}))\n37\n&gt;&gt;&gt; len(json.dumps({'\u0430\u0431\u0432\u0433\u0434': 1}, ensure_ascii=False).encode('utf8'))\n17\n</code></pre>\n<p>Further improve readability by adding flags <code>indent=4, sort_keys=True</code> (as suggested by <a href=\"https://stackoverflow.com/a/31343739/237105\">dinos66</a>) to arguments of <code>dump</code> or <code>dumps</code>. This way you'll get a nicely indented sorted structure in the json file at the cost of a slightly larger file size.</p>\n", "abstract": "To get utf8-encoded file as opposed to ascii-encoded in the accepted answer for Python 2 use: The code is simpler in Python 3: On Windows, the encoding='utf-8' argument to open is still necessary. To avoid storing an encoded copy of the data in memory (result of dumps) and to output utf8-encoded bytestrings in both Python 2 and 3, use: The codecs.getwriter call is redundant in Python 3 but required for Python 2 Readability and size: The use of ensure_ascii=False gives better readability and smaller size: Further improve readability by adding flags indent=4, sort_keys=True (as suggested by dinos66) to arguments of dump or dumps. This way you'll get a nicely indented sorted structure in the json file at the cost of a slightly larger file size."}, {"id": 20776329, "score": 184, "vote": 0, "content": "<p>I would answer with slight modification with aforementioned answers and that is to write a prettified JSON file which human eyes can read better. For this, pass <code>sort_keys</code> as <code>True</code> and <code>indent</code> with 4 space characters and you are good to go. Also take care of ensuring that the ascii codes will not be written in your JSON file:</p>\n<pre><code class=\"python\">with open('data.txt', 'w') as out_file:\n     json.dump(json_data, out_file, sort_keys = True, indent = 4,\n               ensure_ascii = False)\n</code></pre>\n", "abstract": "I would answer with slight modification with aforementioned answers and that is to write a prettified JSON file which human eyes can read better. For this, pass sort_keys as True and indent with 4 space characters and you are good to go. Also take care of ensuring that the ascii codes will not be written in your JSON file:"}, {"id": 37795053, "score": 129, "vote": 0, "content": "<h2>Read and write JSON files with Python 2+3; works with unicode</h2>\n<pre><code class=\"python\"># -*- coding: utf-8 -*-\nimport json\n\n# Make it work for Python 2+3 and with Unicode\nimport io\ntry:\n    to_unicode = unicode\nexcept NameError:\n    to_unicode = str\n\n# Define data\ndata = {'a list': [1, 42, 3.141, 1337, 'help', u'\u20ac'],\n        'a string': 'bla',\n        'another dict': {'foo': 'bar',\n                         'key': 'value',\n                         'the answer': 42}}\n\n# Write JSON file\nwith io.open('data.json', 'w', encoding='utf8') as outfile:\n    str_ = json.dumps(data,\n                      indent=4, sort_keys=True,\n                      separators=(',', ': '), ensure_ascii=False)\n    outfile.write(to_unicode(str_))\n\n# Read JSON file\nwith open('data.json') as data_file:\n    data_loaded = json.load(data_file)\n\nprint(data == data_loaded)\n</code></pre>\n<p>Explanation of the parameters of <a href=\"https://docs.python.org/2/library/json.html#basic-usage\" rel=\"noreferrer\"><code>json.dump</code></a>:</p>\n<ul>\n<li><code>indent</code>: Use 4 spaces to indent each entry, e.g. when a new dict is started (otherwise all will be in one line),</li>\n<li><code>sort_keys</code>: sort the keys of dictionaries. This is useful if you want to compare json files with a diff tool / put them under version control.</li>\n<li><code>separators</code>: To prevent Python from adding trailing whitespaces</li>\n</ul>\n<h2>With a package</h2>\n<p>Have a look at my utility package <a href=\"https://github.com/MartinThoma/mpu\" rel=\"noreferrer\"><code>mpu</code></a> for a super simple and easy to remember one:</p>\n<pre><code class=\"python\">import mpu.io\ndata = mpu.io.read('example.json')\nmpu.io.write('example.json', data)\n</code></pre>\n<h2>Created JSON file</h2>\n<pre><code class=\"python\">{\n    \"a list\":[\n        1,\n        42,\n        3.141,\n        1337,\n        \"help\",\n        \"\u20ac\"\n    ],\n    \"a string\":\"bla\",\n    \"another dict\":{\n        \"foo\":\"bar\",\n        \"key\":\"value\",\n        \"the answer\":42\n    }\n}\n</code></pre>\n<h2>Common file endings</h2>\n<p><code>.json</code></p>\n<h2>Alternatives</h2>\n<ul>\n<li>CSV: Super simple format (<a href=\"https://stackoverflow.com/a/41585079/562769\">read &amp; write</a>)</li>\n<li>JSON: Nice for writing human-readable data; VERY commonly used (<a href=\"https://stackoverflow.com/a/37795053/562769\">read &amp; write</a>)</li>\n<li>YAML: YAML is a superset of JSON, but easier to read (<a href=\"https://stackoverflow.com/a/42054860/562769\">read &amp; write</a>, <a href=\"https://stackoverflow.com/a/1729545/562769\">comparison of JSON and YAML</a>)</li>\n<li>pickle: A Python serialization format (<a href=\"https://stackoverflow.com/a/33245595/562769\">read &amp; write</a>)</li>\n<li><a href=\"http://msgpack.org/\" rel=\"noreferrer\">MessagePack</a> (<a href=\"https://pypi.python.org/pypi/msgpack-python\" rel=\"noreferrer\">Python package</a>): More compact representation (<a href=\"https://stackoverflow.com/q/43442194/562769\">read &amp; write</a>)</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Hierarchical_Data_Format\" rel=\"noreferrer\">HDF5</a> (<a href=\"http://docs.h5py.org/en/latest/quick.html\" rel=\"noreferrer\">Python package</a>): Nice for matrices (<a href=\"https://stackoverflow.com/a/41586571/562769\">read &amp; write</a>)</li>\n<li>XML: exists too *sigh* (<a href=\"https://stackoverflow.com/a/1912483/562769\">read</a> &amp; <a href=\"https://stackoverflow.com/a/3605831/562769\">write</a>)</li>\n</ul>\n<p>For your application, the following might be important:</p>\n<ul>\n<li>Support by other programming languages</li>\n<li>Reading / writing performance</li>\n<li>Compactness (file size)</li>\n</ul>\n<p>See also: <a href=\"https://en.wikipedia.org/wiki/Comparison_of_data_serialization_formats\" rel=\"noreferrer\">Comparison of data serialization formats</a></p>\n<p>In case you are rather looking for a way to make configuration files, you might want to read my short article <a href=\"https://martin-thoma.com/configuration-files-in-python/\" rel=\"noreferrer\">Configuration files in Python</a></p>\n", "abstract": "Explanation of the parameters of json.dump: Have a look at my utility package mpu for a super simple and easy to remember one: .json For your application, the following might be important: See also: Comparison of data serialization formats In case you are rather looking for a way to make configuration files, you might want to read my short article Configuration files in Python"}, {"id": 31343739, "score": 26, "vote": 0, "content": "<p>For those of you who are trying to dump greek or other \"exotic\" languages such as me but are also having problems (unicode errors) with weird characters such as the peace symbol (\\u262E) or others which are often contained in json formated data such as Twitter's, the solution could be as follows (sort_keys is obviously optional):</p>\n<pre><code class=\"python\">import codecs, json\nwith codecs.open('data.json', 'w', 'utf8') as f:\n     f.write(json.dumps(data, sort_keys = True, ensure_ascii=False))\n</code></pre>\n", "abstract": "For those of you who are trying to dump greek or other \"exotic\" languages such as me but are also having problems (unicode errors) with weird characters such as the peace symbol (\\u262E) or others which are often contained in json formated data such as Twitter's, the solution could be as follows (sort_keys is obviously optional):"}, {"id": 34574105, "score": 13, "vote": 0, "content": "<p>I don't have enough reputation to add in comments, so I just write some of my findings of this annoying TypeError here:</p>\n<p>Basically, I think it's a bug in the <code>json.dump()</code> function in Python <strong>2</strong> only - It can't dump a Python (dictionary / list) data containing non-ASCII characters, <em>even</em> you open the file with the <code>encoding = 'utf-8'</code> parameter. (i.e. No matter what you do). But, <code>json.dumps()</code> works on both Python 2 and 3.</p>\n<p>To illustrate this, following up phihag's answer: the code in his answer breaks in Python 2 with exception <code>TypeError: must be unicode, not str</code>, if <code>data</code> contains non-ASCII characters. (Python 2.7.6, Debian):</p>\n<pre><code class=\"python\">import json\ndata = {u'\\u0430\\u0431\\u0432\\u0433\\u0434': 1} #{u'\u0430\u0431\u0432\u0433\u0434': 1}\nwith open('data.txt', 'w') as outfile:\n    json.dump(data, outfile)\n</code></pre>\n<p>It however works fine in Python 3.</p>\n", "abstract": "I don't have enough reputation to add in comments, so I just write some of my findings of this annoying TypeError here: Basically, I think it's a bug in the json.dump() function in Python 2 only - It can't dump a Python (dictionary / list) data containing non-ASCII characters, even you open the file with the encoding = 'utf-8' parameter. (i.e. No matter what you do). But, json.dumps() works on both Python 2 and 3. To illustrate this, following up phihag's answer: the code in his answer breaks in Python 2 with exception TypeError: must be unicode, not str, if data contains non-ASCII characters. (Python 2.7.6, Debian): It however works fine in Python 3."}, {"id": 34451699, "score": 11, "vote": 0, "content": "<p>Write a data in file using JSON use <strong>json.dump()</strong> or <strong>json.dumps()</strong> used.\nwrite like this to store data in file.</p>\n<pre><code class=\"python\">import json\ndata = [1,2,3,4,5]\nwith open('no.txt', 'w') as txtfile:\n    json.dump(data, txtfile)\n</code></pre>\n<p>this example in list is store to a file.</p>\n", "abstract": "Write a data in file using JSON use json.dump() or json.dumps() used.\nwrite like this to store data in file. this example in list is store to a file."}, {"id": 35708803, "score": 6, "vote": 0, "content": "<pre><code class=\"python\">json.dump(data, open('data.txt', 'wb'))\n</code></pre>\n", "abstract": ""}, {"id": 53771075, "score": 6, "vote": 0, "content": "<p>To write the JSON with indentation, \"pretty print\":</p>\n<pre><code class=\"python\">import json\n\noutfile = open('data.json')\njson.dump(data, outfile, indent=4)\n</code></pre>\n<p>Also, if you need to debug improperly formatted JSON, and want a helpful error message, use <code>import simplejson</code> library, instead of <code>import json</code> (functions should be the same)</p>\n", "abstract": "To write the JSON with indentation, \"pretty print\": Also, if you need to debug improperly formatted JSON, and want a helpful error message, use import simplejson library, instead of import json (functions should be the same)"}, {"id": 52733245, "score": 5, "vote": 0, "content": "<p>All previous answers are correct here is a very simple example:</p>\n<pre><code class=\"python\">#! /usr/bin/env python\nimport json\n\ndef write_json():\n    # create a dictionary  \n    student_data = {\"students\":[]}\n    #create a list\n    data_holder = student_data[\"students\"]\n    # just a counter\n    counter = 0\n    #loop through if you have multiple items..         \n    while counter &lt; 3:\n        data_holder.append({'id':counter})\n        data_holder.append({'room':counter})\n        counter += 1    \n    #write the file        \n    file_path='/tmp/student_data.json'\n    with open(file_path, 'w') as outfile:\n        print(\"writing file to: \",file_path)\n        # HERE IS WHERE THE MAGIC HAPPENS \n        json.dump(student_data, outfile)\n    outfile.close()     \n    print(\"done\")\n\nwrite_json()\n</code></pre>\n<p><a href=\"https://i.stack.imgur.com/1CNhG.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/1CNhG.png\"/></a></p>\n", "abstract": "All previous answers are correct here is a very simple example: "}, {"id": 44341699, "score": 3, "vote": 0, "content": "<p>if you are trying to write a pandas dataframe into a file using a json format i'd recommend this</p>\n<pre><code class=\"python\">destination='filepath'\nsaveFile = open(destination, 'w')\nsaveFile.write(df.to_json())\nsaveFile.close()\n</code></pre>\n", "abstract": "if you are trying to write a pandas dataframe into a file using a json format i'd recommend this"}, {"id": 52809653, "score": 3, "vote": 0, "content": "<p>The accepted answer is fine. However, I ran into \"is not json serializable\" error using that.</p>\n<p>Here's how I fixed it\nwith <code>open(\"file-name.json\", 'w')</code> as output:</p>\n<p><code>output.write(str(response))</code></p>\n<p>Although it is not a good fix as the json file it creates will not have double quotes, however it is great if you are looking for quick and dirty.</p>\n", "abstract": "The accepted answer is fine. However, I ran into \"is not json serializable\" error using that. Here's how I fixed it\nwith open(\"file-name.json\", 'w') as output: output.write(str(response)) Although it is not a good fix as the json file it creates will not have double quotes, however it is great if you are looking for quick and dirty."}, {"id": 53100884, "score": 3, "vote": 0, "content": "<p>The JSON data can be written to a file as follows </p>\n<pre><code class=\"python\">hist1 = [{'val_loss': [0.5139984398465246],\n'val_acc': [0.8002029867684085],\n'loss': [0.593220705309384],\n'acc': [0.7687131817929321]},\n{'val_loss': [0.46456472964199463],\n'val_acc': [0.8173602046780344],\n'loss': [0.4932038113037539],\n'acc': [0.8063946213802453]}]\n</code></pre>\n<p>Write to a file:</p>\n<pre><code class=\"python\">with open('text1.json', 'w') as f:\n     json.dump(hist1, f)\n</code></pre>\n", "abstract": "The JSON data can be written to a file as follows  Write to a file:"}, {"id": 72644658, "score": 2, "vote": 0, "content": "<p>Before write a dictionary into a file as a json, you have to turn that dict onto json string using <code>json</code> library.</p>\n<pre><code class=\"python\">import json\n\ndata = {\n    \"field1\":{\n        \"a\": 10,\n        \"b\": 20,\n    },\n    \"field2\":{\n        \"c\": 30,\n        \"d\": 40,\n    },\n}\n\njson_data = json.dumps(json_data)\n</code></pre>\n<p>And also you can add indent to json data to look prettier.</p>\n<pre><code class=\"python\">json_data = json.dumps(json_data, indent=4)\n</code></pre>\n<p>If you want to sort keys before turning into json,</p>\n<pre><code class=\"python\">json_data = json.dumps(json_data, sort_keys=True)\n</code></pre>\n<p>You can use the combination of these two also.</p>\n<p>Refer the json <a href=\"https://docs.python.org/3/library/json.html\" rel=\"nofollow noreferrer\">documentation</a> here for much more features</p>\n<p>Finally you can write into a json file</p>\n<pre><code class=\"python\">f = open('data.json', 'wb')\nf.write(json_data)\n</code></pre>\n", "abstract": "Before write a dictionary into a file as a json, you have to turn that dict onto json string using json library. And also you can add indent to json data to look prettier. If you want to sort keys before turning into json, You can use the combination of these two also. Refer the json documentation here for much more features Finally you can write into a json file"}, {"id": 69162547, "score": -1, "vote": 0, "content": "<p><em>This is just an extra hint at the usage of <code>json.dumps</code> (this is not an answer to the problem of the question, but a trick for those who have to dump numpy data types):</em></p>\n<p>If there are NumPy data types in the dictionary, <code>json.dumps()</code> needs an additional parameter, credits go to <em><a href=\"https://stackoverflow.com/a/65821617/11154841\">TypeError: Object of type 'ndarray' is not JSON serializable</a></em>, and it will also fix errors like <code>TypeError: Object of type int64 is not JSON serializable</code> and so on:</p>\n<pre><code class=\"python\">class NumpyEncoder(json.JSONEncoder):\n    \"\"\" Special json encoder for np types \"\"\"\n    def default(self, obj):\n        if isinstance(obj, (np.int_, np.intc, np.intp, np.int8,\n                            np.int16, np.int32, np.int64, np.uint8,\n                            np.uint16, np.uint32, np.uint64)):\n            return int(obj)\n        elif isinstance(obj, (np.float_, np.float16, np.float32,\n                              np.float64)):\n            return float(obj)\n        elif isinstance(obj, (np.ndarray,)):\n            return obj.tolist()\n        return json.JSONEncoder.default(self, obj)\n</code></pre>\n<p>And then run:</p>\n<pre><code class=\"python\">import json\n\n#print(json.dumps(my_data[:2], indent=4, cls=NumpyEncoder)))\nwith open(my_dir+'/my_filename.json', 'w') as f:\n    json.dumps(my_data, indent=4, cls=NumpyEncoder)))\n</code></pre>\n<p>You may also want to return a string instead of a list in case of a np.array() since arrays are printed as lists that are spread over rows which will blow up the output if you have large or many arrays. The caveat: it is more difficult to access the items from the dumped dictionary later to get them back as the original array. Yet, if you do not mind having just a string of an array, this makes the dictionary more readable. Then exchange:</p>\n<pre><code class=\"python\">        elif isinstance(obj, (np.ndarray,)):\n            return obj.tolist()\n</code></pre>\n<p>with:</p>\n<pre><code class=\"python\">        elif isinstance(obj, (np.ndarray,)):\n            return str(obj)\n</code></pre>\n<p>or just:</p>\n<pre><code class=\"python\">        else:\n            return str(obj)\n</code></pre>\n", "abstract": "This is just an extra hint at the usage of json.dumps (this is not an answer to the problem of the question, but a trick for those who have to dump numpy data types): If there are NumPy data types in the dictionary, json.dumps() needs an additional parameter, credits go to TypeError: Object of type 'ndarray' is not JSON serializable, and it will also fix errors like TypeError: Object of type int64 is not JSON serializable and so on: And then run: You may also want to return a string instead of a list in case of a np.array() since arrays are printed as lists that are spread over rows which will blow up the output if you have large or many arrays. The caveat: it is more difficult to access the items from the dumped dictionary later to get them back as the original array. Yet, if you do not mind having just a string of an array, this makes the dictionary more readable. Then exchange: with: or just:"}]}, {"link": "https://stackoverflow.com/questions/961632/convert-integer-to-string-in-python", "question": {"id": "961632", "title": "Convert integer to string in Python", "content": "<p>How do I convert an integer to a string?</p>\n<pre><code class=\"python\">42   \u27f6   \"42\"\n</code></pre>\n<hr/>\n<p><sub>For the reverse, see <a href=\"https://stackoverflow.com/questions/379906/\">How do I parse a string to a float or int?</a>. <code>float</code>s can be handled similarly, but handling the decimal points can be tricky because <a href=\"https://stackoverflow.com/questions/588004/\">floating-point values are not precise</a>. See <a href=\"https://stackoverflow.com/questions/1317558\">Converting a float to a string without rounding it</a> for more specific advice.</sub></p>\n", "abstract": "How do I convert an integer to a string? For the reverse, see How do I parse a string to a float or int?. floats can be handled similarly, but handling the decimal points can be tricky because floating-point values are not precise. See Converting a float to a string without rounding it for more specific advice."}, "answers": [{"id": 961638, "score": 2295, "vote": 0, "content": "<pre><code class=\"python\">&gt;&gt;&gt; str(42)\n'42'\n\n&gt;&gt;&gt; int('42')\n42\n</code></pre>\n<p>Links to the documentation:</p>\n<ul>\n<li><a href=\"https://docs.python.org/3/library/functions.html#int\" rel=\"noreferrer\"><code>int()</code></a></li>\n<li><a href=\"https://docs.python.org/3/library/functions.html#str\" rel=\"noreferrer\"><code>str()</code></a></li>\n</ul>\n<p><code>str(x)</code> converts any object <code>x</code> to a string by calling <code>x.<a href=\"https://docs.python.org/3/reference/datamodel.html#object.__str__\" rel=\"noreferrer\">__str__()</a></code>.</p>\n", "abstract": "Links to the documentation: str(x) converts any object x to a string by calling x.__str__()."}, {"id": 961636, "score": 147, "vote": 0, "content": "<p>Try this:</p>\n<pre><code class=\"python\">str(i)\n</code></pre>\n", "abstract": "Try this:"}, {"id": 961652, "score": 67, "vote": 0, "content": "<p>There is no typecast and no type coercion in Python. You have to convert your variable in an explicit way.</p>\n<p>To convert an object into a string you use the <code>str()</code> function. It works with any object that has a method called <code>__str__()</code> defined. In fact</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">str(a)\n</code></pre>\n<p>is equivalent to</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">a.__str__()\n</code></pre>\n<p>The same if you want to convert something to <code>int</code>, <code>float</code>, etc.</p>\n", "abstract": "There is no typecast and no type coercion in Python. You have to convert your variable in an explicit way. To convert an object into a string you use the str() function. It works with any object that has a method called __str__() defined. In fact is equivalent to The same if you want to convert something to int, float, etc."}, {"id": 961661, "score": 20, "vote": 0, "content": "<p>To manage non-integer inputs:</p>\n<pre><code class=\"python\">number = raw_input()\ntry:\n    value = int(number)\nexcept ValueError:\n    value = 0\n</code></pre>\n", "abstract": "To manage non-integer inputs:"}, {"id": 961641, "score": 17, "vote": 0, "content": "<pre><code class=\"python\">&gt;&gt;&gt; i = 5\n&gt;&gt;&gt; print \"Hello, world the number is \" + i\nTypeError: must be str, not int\n&gt;&gt;&gt; s = str(i)\n&gt;&gt;&gt; print \"Hello, world the number is \" + s\nHello, world the number is 5\n</code></pre>\n", "abstract": ""}, {"id": 56754728, "score": 14, "vote": 0, "content": "<p>For Python 3.6, you can use the <a href=\"https://www.python.org/dev/peps/pep-0498/\" rel=\"nofollow noreferrer\">f-strings</a> new feature to convert to string and it's faster compared to str() function. It is used like this:</p>\n<pre><code class=\"python\">age = 45\nstrAge = f'{age}'\n</code></pre>\n<p>Python provides the str() function for that reason.</p>\n<pre><code class=\"python\">digit = 10\nprint(type(digit)) # Will show &lt;class 'int'&gt;\nconvertedDigit = str(digit)\nprint(type(convertedDigit)) # Will show &lt;class 'str'&gt;\n</code></pre>\n<p>For a more detailed answer, you can check this article: <em><a href=\"https://www.ninjadevcorner.com/2019/06/converting-python-int-to-string-python-string-to-int.html\" rel=\"nofollow noreferrer\">Converting Python Int to String and Python String to Int</a></em></p>\n", "abstract": "For Python 3.6, you can use the f-strings new feature to convert to string and it's faster compared to str() function. It is used like this: Python provides the str() function for that reason. For a more detailed answer, you can check this article: Converting Python Int to String and Python String to Int"}, {"id": 51444152, "score": 13, "vote": 0, "content": "<p>In Python =&gt; 3.6 you can use <code>f</code> formatting:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; int_value = 10\n&gt;&gt;&gt; f'{int_value}'\n'10'\n&gt;&gt;&gt;\n</code></pre>\n", "abstract": "In Python => 3.6 you can use f formatting:"}, {"id": 30063942, "score": 8, "vote": 0, "content": "<p>The most decent way in my opinion is ``.</p>\n<pre><code class=\"python\">i = 32   --&gt;    `i` == '32'\n</code></pre>\n", "abstract": "The most decent way in my opinion is ``."}, {"id": 47751397, "score": 8, "vote": 0, "content": "<p>You can use <code>%s</code> or <code>.format</code>:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; \"%s\" % 10\n'10'\n&gt;&gt;&gt;\n</code></pre>\n<p>Or:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; '{}'.format(10)\n'10'\n&gt;&gt;&gt;\n</code></pre>\n", "abstract": "You can use %s or .format: Or:"}, {"id": 48697636, "score": 7, "vote": 0, "content": "<p>For someone who wants to convert int to string in specific digits, the below method is recommended.</p>\n<pre><code class=\"python\">month = \"{0:04d}\".format(localtime[1])\n</code></pre>\n<p>For more details, you can refer to Stack Overflow question <em><a href=\"https://stackoverflow.com/questions/134934/display-number-with-leading-zeros\">Display number with leading zeros</a></em>.</p>\n", "abstract": "For someone who wants to convert int to string in specific digits, the below method is recommended. For more details, you can refer to Stack Overflow question Display number with leading zeros."}, {"id": 56301633, "score": 5, "vote": 0, "content": "<p>With the introduction of <a href=\"https://www.python.org/dev/peps/pep-0498/\" rel=\"nofollow noreferrer\">f-strings</a> in Python 3.6, this will also work:</p>\n<pre><code class=\"python\">f'{10}' == '10'\n</code></pre>\n<p>It is actually faster than calling <code>str()</code>, at the cost of readability.</p>\n<p>In fact, it's faster than <code>%x</code> string formatting and <code>.format()</code>!</p>\n", "abstract": "With the introduction of f-strings in Python 3.6, this will also work: It is actually faster than calling str(), at the cost of readability. In fact, it's faster than %x string formatting and .format()!"}, {"id": 65207539, "score": 1, "vote": 0, "content": "<p>There are several ways to convert an integer to string in python.\nYou can use [ str(integer here) ] function, the f-string  [ f'{integer here}'], the .format()function [ '{}'.format(integer here) and even the '%s'% keyword [ '%s'% integer here]. All this method can convert an integer to string.</p>\n<p>See below example</p>\n<pre><code class=\"python\">#Examples of converting an intger to string\n\n#Using the str() function\nnumber = 1\nconvert_to_string = str(number)\nprint(type(convert_to_string)) # output (&lt;class 'str'&gt;)\n\n#Using the f-string\nnumber = 1\nconvert_to_string = f'{number}'\nprint(type(convert_to_string)) # output (&lt;class 'str'&gt;)\n\n#Using the  {}'.format() function\nnumber = 1\nconvert_to_string = '{}'.format(number)\nprint(type(convert_to_string)) # output (&lt;class 'str'&gt;)\n\n#Using the  '% s '% keyword\nnumber = 1\nconvert_to_string = '% s '% number\nprint(type(convert_to_string)) # output (&lt;class 'str'&gt;)\n\n\n</code></pre>\n", "abstract": "There are several ways to convert an integer to string in python.\nYou can use [ str(integer here) ] function, the f-string  [ f'{integer here}'], the .format()function [ '{}'.format(integer here) and even the '%s'% keyword [ '%s'% integer here]. All this method can convert an integer to string. See below example"}, {"id": 62712547, "score": 0, "vote": 0, "content": "<p>Here is a simpler solution:</p>\n<pre><code class=\"python\">one = \"1\"\nprint(int(one))\n</code></pre>\n<h3>Output console</h3>\n<pre><code class=\"python\">&gt;&gt;&gt; 1\n</code></pre>\n<p>In the above program, <strong>int()</strong> is used to convert the string representation of an integer.</p>\n<p>Note: A variable in the format of string can be converted into an integer only if the variable is completely composed of numbers.</p>\n<p>In the same way, <strong>str()</strong> is used to convert an integer to string.</p>\n<pre><code class=\"python\">number = 123567\na = []\na.append(str(number))\nprint(a) \n</code></pre>\n<p>I used a list to print the output to highlight that variable (a) is a string.</p>\n<h3>Output console</h3>\n<pre><code class=\"python\">&gt;&gt;&gt; [\"123567\"]\n</code></pre>\n<p>But to understand the difference how a list stores a string and integer, view the below code first and then the output.</p>\n<h3>Code</h3>\n<pre><code class=\"python\">a = \"This is a string and next is an integer\"\nlistone=[a, 23]\nprint(listone)\n</code></pre>\n<h3>Output console</h3>\n<pre><code class=\"python\">&gt;&gt;&gt; [\"This is a string and next is an integer\", 23]\n</code></pre>\n", "abstract": "Here is a simpler solution: In the above program, int() is used to convert the string representation of an integer. Note: A variable in the format of string can be converted into an integer only if the variable is completely composed of numbers. In the same way, str() is used to convert an integer to string. I used a list to print the output to highlight that variable (a) is a string. But to understand the difference how a list stores a string and integer, view the below code first and then the output."}]}, {"link": "https://stackoverflow.com/questions/1557571/how-do-i-get-time-of-a-python-programs-execution", "question": {"id": "1557571", "title": "How do I get time of a Python program&#39;s execution?", "content": "<p>I have a command line program in Python that takes a while to finish. I want to know the exact time it takes to finish running.</p>\n<p>I've looked at the <code>timeit</code> module, but it seems it's only for small snippets of code. I want to time the whole program.</p>\n", "abstract": "I have a command line program in Python that takes a while to finish. I want to know the exact time it takes to finish running. I've looked at the timeit module, but it seems it's only for small snippets of code. I want to time the whole program."}, "answers": [{"id": 1557584, "score": 2670, "vote": 0, "content": "<p>The simplest way in Python:</p>\n<pre><code class=\"python\">import time\nstart_time = time.time()\nmain()\nprint(\"--- %s seconds ---\" % (time.time() - start_time))\n</code></pre>\n<p>This assumes that your program takes at least a tenth of second to run.</p>\n<p>Prints:</p>\n<pre><code class=\"python\">--- 0.764891862869 seconds ---\n</code></pre>\n", "abstract": "The simplest way in Python: This assumes that your program takes at least a tenth of second to run. Prints:"}, {"id": 1557577, "score": 246, "vote": 0, "content": "<p>In Linux or Unix:</p>\n<pre><code class=\"python\">$ time python yourprogram.py\n</code></pre>\n<p>In Windows, see this StackOverflow question: <em><a href=\"https://stackoverflow.com/questions/673523\">How do I measure execution time of a command on the Windows command line?</a></em></p>\n<p>For more verbose output, </p>\n<pre><code class=\"python\">$ time -v python yourprogram.py\n    Command being timed: \"python3 yourprogram.py\"\n    User time (seconds): 0.08\n    System time (seconds): 0.02\n    Percent of CPU this job got: 98%\n    Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.10\n    Average shared text size (kbytes): 0\n    Average unshared data size (kbytes): 0\n    Average stack size (kbytes): 0\n    Average total size (kbytes): 0\n    Maximum resident set size (kbytes): 9480\n    Average resident set size (kbytes): 0\n    Major (requiring I/O) page faults: 0\n    Minor (reclaiming a frame) page faults: 1114\n    Voluntary context switches: 0\n    Involuntary context switches: 22\n    Swaps: 0\n    File system inputs: 0\n    File system outputs: 0\n    Socket messages sent: 0\n    Socket messages received: 0\n    Signals delivered: 0\n    Page size (bytes): 4096\n    Exit status: 0\n</code></pre>\n", "abstract": "In Linux or Unix: In Windows, see this StackOverflow question: How do I measure execution time of a command on the Windows command line? For more verbose output, "}, {"id": 1557906, "score": 246, "vote": 0, "content": "<p>I put this <code>timing.py</code> module into my own <code>site-packages</code> directory, and just insert <code>import timing</code> at the top of my module:</p>\n<pre><code class=\"python\">import atexit\nfrom time import clock\n\ndef secondsToStr(t):\n    return \"%d:%02d:%02d.%03d\" % \\\n        reduce(lambda ll,b : divmod(ll[0],b) + ll[1:],\n            [(t*1000,),1000,60,60])\n\nline = \"=\"*40\ndef log(s, elapsed=None):\n    print line\n    print secondsToStr(clock()), '-', s\n    if elapsed:\n        print \"Elapsed time:\", elapsed\n    print line\n    print\n\ndef endlog():\n    end = clock()\n    elapsed = end-start\n    log(\"End Program\", secondsToStr(elapsed))\n\ndef now():\n    return secondsToStr(clock())\n\nstart = clock()\natexit.register(endlog)\nlog(\"Start Program\")\n</code></pre>\n<p>I can also call <code>timing.log</code> from within my program if there are significant stages within the program I want to show.  But just including <code>import timing</code> will print the start and end times, and overall elapsed time.  (Forgive my obscure <code>secondsToStr</code> function, it just formats a floating point number of seconds to hh:mm:ss.sss form.)</p>\n<p>Note: A Python 3 version of the above code can be found <a href=\"https://stackoverflow.com/a/12344609/6009280\">here</a> or <a href=\"http://pastebin.com/rSqrkLPE\" rel=\"noreferrer\">here</a>.</p>\n", "abstract": "I put this timing.py module into my own site-packages directory, and just insert import timing at the top of my module: I can also call timing.log from within my program if there are significant stages within the program I want to show.  But just including import timing will print the start and end times, and overall elapsed time.  (Forgive my obscure secondsToStr function, it just formats a floating point number of seconds to hh:mm:ss.sss form.) Note: A Python 3 version of the above code can be found here or here."}, {"id": 26099345, "score": 127, "vote": 0, "content": "<p>I like the output the <code>datetime</code> module provides, where time delta objects show days, hours, minutes, etc. as necessary in a human-readable way.</p>\n<p>For example:</p>\n<pre><code class=\"python\">from datetime import datetime\nstart_time = datetime.now()\n# do your work here\nend_time = datetime.now()\nprint('Duration: {}'.format(end_time - start_time))\n</code></pre>\n<p>Sample output e.g.</p>\n<pre><code class=\"python\">Duration: 0:00:08.309267\n</code></pre>\n<p>or</p>\n<pre><code class=\"python\">Duration: 1 day, 1:51:24.269711\n</code></pre>\n<p>As J.F. Sebastian mentioned, this approach might encounter some tricky cases with local time, so it's safer to use:</p>\n<pre><code class=\"python\">import time\nfrom datetime import timedelta\nstart_time = time.monotonic()\nend_time = time.monotonic()\nprint(timedelta(seconds=end_time - start_time))\n</code></pre>\n", "abstract": "I like the output the datetime module provides, where time delta objects show days, hours, minutes, etc. as necessary in a human-readable way. For example: Sample output e.g. or As J.F. Sebastian mentioned, this approach might encounter some tricky cases with local time, so it's safer to use:"}, {"id": 1557805, "score": 111, "vote": 0, "content": "<pre class=\"lang-py prettyprint-override\"><code class=\"python\">import time\n\nstart_time = time.clock()\nmain()\nprint(time.clock() - start_time, \"seconds\")\n</code></pre>\n<p><code>time.clock()</code> returns the processor time, which allows us to calculate only the time used by this process (on Unix anyway). The documentation says \"in any case, this is the function to use for benchmarking Python or timing algorithms\"</p>\n", "abstract": "time.clock() returns the processor time, which allows us to calculate only the time used by this process (on Unix anyway). The documentation says \"in any case, this is the function to use for benchmarking Python or timing algorithms\""}, {"id": 12344609, "score": 80, "vote": 0, "content": "<p>I really like <a href=\"https://stackoverflow.com/a/1557906/7851470\">Paul McGuire's answer</a>, but I use Python 3. So for those who are interested: here's a modification of his answer that works with Python 3 on *nix (I imagine, under Windows, that <code>clock()</code> should be used instead of <code>time()</code>):</p>\n<pre><code class=\"python\">#python3\nimport atexit\nfrom time import time, strftime, localtime\nfrom datetime import timedelta\n\ndef secondsToStr(elapsed=None):\n    if elapsed is None:\n        return strftime(\"%Y-%m-%d %H:%M:%S\", localtime())\n    else:\n        return str(timedelta(seconds=elapsed))\n\ndef log(s, elapsed=None):\n    line = \"=\"*40\n    print(line)\n    print(secondsToStr(), '-', s)\n    if elapsed:\n        print(\"Elapsed time:\", elapsed)\n    print(line)\n    print()\n\ndef endlog():\n    end = time()\n    elapsed = end-start\n    log(\"End Program\", secondsToStr(elapsed))\n\nstart = time()\natexit.register(endlog)\nlog(\"Start Program\")\n</code></pre>\n<p>If you find this useful, you should still up-vote his answer instead of this one, as he did most of the work ;).</p>\n", "abstract": "I really like Paul McGuire's answer, but I use Python 3. So for those who are interested: here's a modification of his answer that works with Python 3 on *nix (I imagine, under Windows, that clock() should be used instead of time()): If you find this useful, you should still up-vote his answer instead of this one, as he did most of the work ;)."}, {"id": 20874769, "score": 76, "vote": 0, "content": "<p>You can use the Python profiler cProfile to measure <a href=\"http://en.wikipedia.org/wiki/CPU_time\" rel=\"noreferrer\">CPU time</a> and additionally how much time is spent inside each function and how many times each function is called. This is very useful if you want to improve performance of your script without knowing where to start. <a href=\"https://stackoverflow.com/a/582337/2073469\">This answer</a> to another Stack\u00a0Overflow question is pretty good. It's always good to have a look in <a href=\"http://docs.python.org/2/library/profile.html\" rel=\"noreferrer\">the documentation</a> too.</p>\n<p>Here's an example how to profile a script using cProfile from a command line:</p>\n<pre><code class=\"python\">$ python -m cProfile euler048.py\n\n1007 function calls in 0.061 CPU seconds\n\nOrdered by: standard name\nncalls  tottime  percall  cumtime  percall filename:lineno(function)\n    1    0.000    0.000    0.061    0.061 &lt;string&gt;:1(&lt;module&gt;)\n 1000    0.051    0.000    0.051    0.000 euler048.py:2(&lt;lambda&gt;)\n    1    0.005    0.005    0.061    0.061 euler048.py:2(&lt;module&gt;)\n    1    0.000    0.000    0.061    0.061 {execfile}\n    1    0.002    0.002    0.053    0.053 {map}\n    1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler objects}\n    1    0.000    0.000    0.000    0.000 {range}\n    1    0.003    0.003    0.003    0.003 {sum}\n</code></pre>\n", "abstract": "You can use the Python profiler cProfile to measure CPU time and additionally how much time is spent inside each function and how many times each function is called. This is very useful if you want to improve performance of your script without knowing where to start. This answer to another Stack\u00a0Overflow question is pretty good. It's always good to have a look in the documentation too. Here's an example how to profile a script using cProfile from a command line:"}, {"id": 46286529, "score": 49, "vote": 0, "content": "<p>Just use the <code>timeit</code> module. It works with both Python 2 and Python 3.</p>\n<pre><code class=\"python\">import timeit\n\nstart = timeit.default_timer()\n\n# All the program statements\nstop = timeit.default_timer()\nexecution_time = stop - start\n\nprint(\"Program Executed in \"+str(execution_time)) # It returns time in seconds\n</code></pre>\n<p>It returns in seconds and you can have your execution time. It is simple, but you should write these in thew main function which starts program execution. If you want to get the execution time even when you get an error then take your parameter \"Start\" to it and calculate there like:</p>\n<pre><code class=\"python\">def sample_function(start,**kwargs):\n     try:\n         # Your statements\n     except:\n         # except statements run when your statements raise an exception\n         stop = timeit.default_timer()\n         execution_time = stop - start\n         print(\"Program executed in \" + str(execution_time))\n</code></pre>\n", "abstract": "Just use the timeit module. It works with both Python 2 and Python 3. It returns in seconds and you can have your execution time. It is simple, but you should write these in thew main function which starts program execution. If you want to get the execution time even when you get an error then take your parameter \"Start\" to it and calculate there like:"}, {"id": 37289957, "score": 38, "vote": 0, "content": "<p><strong>time.clock()</strong></p>\n<blockquote>\n<p>Deprecated since version 3.3: The behavior of this function depends\n  on the platform: use <strong><em>perf_counter()</em></strong> or <strong><em>process_time()</em></strong> instead,\n  depending on your requirements, to have a well-defined behavior.</p>\n</blockquote>\n<p><strong>time.perf_counter()</strong></p>\n<blockquote>\n<p>Return the value (in fractional seconds) of a performance counter,\n  i.e. a clock with the highest available resolution to measure a short\n  duration. It <strong><em>does</em></strong> include time elapsed during sleep and is\n  system-wide.</p>\n</blockquote>\n<p><strong>time.process_time()</strong></p>\n<blockquote>\n<p>Return the value (in fractional seconds) of the sum of the system and\n  user CPU time of the current process. It <strong><em>does not</em></strong> include time elapsed\n  during sleep.</p>\n</blockquote>\n<pre><code class=\"python\">start = time.process_time()\n... do something\nelapsed = (time.process_time() - start)\n</code></pre>\n", "abstract": "time.clock() Deprecated since version 3.3: The behavior of this function depends\n  on the platform: use perf_counter() or process_time() instead,\n  depending on your requirements, to have a well-defined behavior. time.perf_counter() Return the value (in fractional seconds) of a performance counter,\n  i.e. a clock with the highest available resolution to measure a short\n  duration. It does include time elapsed during sleep and is\n  system-wide. time.process_time() Return the value (in fractional seconds) of the sum of the system and\n  user CPU time of the current process. It does not include time elapsed\n  during sleep."}, {"id": 68054319, "score": 27, "vote": 0, "content": "<p><code>time.clock</code> has been deprecated in Python 3.3 and will be removed from Python 3.8: use <code>time.perf_counter</code> or <code>time.process_time</code> instead</p>\n<pre><code class=\"python\">import time\nstart_time = time.perf_counter ()\nfor x in range(1, 100):\n    print(x)\nend_time = time.perf_counter ()\nprint(end_time - start_time, \"seconds\")\n</code></pre>\n", "abstract": "time.clock has been deprecated in Python 3.3 and will be removed from Python 3.8: use time.perf_counter or time.process_time instead"}, {"id": 51573362, "score": 25, "vote": 0, "content": "<h3>For the data folks using <a href=\"https://en.wikipedia.org/wiki/IPython#Project_Jupyter\" rel=\"noreferrer\">Jupyter Notebook</a></h3>\n<p>In a cell, you can use Jupyter's <code>%%time</code> magic command to measure the execution time:</p>\n<pre><code class=\"python\">%%time\n[ x**2 for x in range(10000)]\n</code></pre>\n<h3>Output</h3>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">CPU times: user 4.54 ms, sys: 0 ns, total: 4.54 ms\nWall time: 4.12 ms\n</code></pre>\n<p>This will only capture the execution time of a particular cell. If you'd like to capture the execution time of the whole notebook (i.e. program), you can create a new notebook in the same directory and in the new notebook execute all cells:</p>\n<p><em>Suppose the notebook above is called <code>example_notebook.ipynb</code>. In a new notebook within the same directory:</em></p>\n<pre><code class=\"python\"># Convert your notebook to a .py script:\n!jupyter nbconvert --to script example_notebook.ipynb\n\n# Run the example_notebook with -t flag for time\n%run -t example_notebook\n</code></pre>\n<h3>Output</h3>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">IPython CPU timings (estimated):\n  User   :       0.00 s.\n  System :       0.00 s.\nWall time:       0.00 s.\n</code></pre>\n", "abstract": "In a cell, you can use Jupyter's %%time magic command to measure the execution time: This will only capture the execution time of a particular cell. If you'd like to capture the execution time of the whole notebook (i.e. program), you can create a new notebook in the same directory and in the new notebook execute all cells: Suppose the notebook above is called example_notebook.ipynb. In a new notebook within the same directory:"}, {"id": 38154549, "score": 20, "vote": 0, "content": "<p>The following snippet prints elapsed time in a nice human readable <code>&lt;HH:MM:SS&gt;</code> format.</p>\n<pre><code class=\"python\">import time\nfrom datetime import timedelta\n\nstart_time = time.time()\n\n#\n# Perform lots of computations.\n#\n\nelapsed_time_secs = time.time() - start_time\n\nmsg = \"Execution took: %s secs (Wall clock time)\" % timedelta(seconds=round(elapsed_time_secs))\n\nprint(msg)    \n</code></pre>\n", "abstract": "The following snippet prints elapsed time in a nice human readable <HH:MM:SS> format."}, {"id": 60648093, "score": 17, "vote": 0, "content": "<p>Similar to the response from @rogeriopvl I added a slight modification to convert to hour minute seconds using the same library for long running jobs.</p>\n<pre><code class=\"python\">import time\nstart_time = time.time()\nmain()\nseconds = time.time() - start_time\nprint('Time Taken:', time.strftime(\"%H:%M:%S\",time.gmtime(seconds)))\n</code></pre>\n<p>Sample Output</p>\n<pre><code class=\"python\">Time Taken: 00:00:08\n</code></pre>\n", "abstract": "Similar to the response from @rogeriopvl I added a slight modification to convert to hour minute seconds using the same library for long running jobs. Sample Output"}, {"id": 64589191, "score": 16, "vote": 0, "content": "<p>For functions, I suggest using this simple decorator I created.</p>\n<pre><code class=\"python\">def timeit(method):\n    def timed(*args, **kwargs):\n        ts = time.time()\n        result = method(*args, **kwargs)\n        te = time.time()\n        if 'log_time' in kwargs:\n            name = kwargs.get('log_name', method.__name__.upper())\n            kwargs['log_time'][name] = int((te - ts) * 1000)\n        else:\n            print('%r  %2.22f ms' % (method.__name__, (te - ts) * 1000))\n        return result\n    return timed\n\n@timeit\ndef foo():\n    do_some_work()\n\n# foo()\n# 'foo'  0.000953 ms\n</code></pre>\n", "abstract": "For functions, I suggest using this simple decorator I created."}, {"id": 36444633, "score": 12, "vote": 0, "content": "<pre><code class=\"python\">from time import time\nstart_time = time()\n...\nend_time = time()\ntime_taken = end_time - start_time # time_taken is in seconds\nhours, rest = divmod(time_taken,3600)\nminutes, seconds = divmod(rest, 60)\n</code></pre>\n", "abstract": ""}, {"id": 28827752, "score": 10, "vote": 0, "content": "<blockquote>\n<p>I've looked at the timeit module, but it seems it's only for small snippets of code. I want to time the whole program.</p>\n</blockquote>\n<pre><code class=\"python\">$ python -mtimeit -n1 -r1 -t -s \"from your_module import main\" \"main()\"\n</code></pre>\n<p>It runs <code>your_module.main()</code> function one time and print the elapsed time using <code>time.time()</code> function as a timer.</p>\n<p>To emulate <code>/usr/bin/time</code> in Python see <a href=\"https://stackoverflow.com/a/28521323/4279\">Python subprocess with /usr/bin/time: how to capture timing info but ignore all other output?</a>.</p>\n<p>To measure CPU time (e.g., don't include time during <code>time.sleep()</code>) for each function, you could use <code>profile</code> module (<code>cProfile</code> on Python 2):</p>\n<pre><code class=\"python\">$ python3 -mprofile your_module.py\n</code></pre>\n<p>You could pass <code>-p</code> to <code>timeit</code> command above if you want to use the same timer as <code>profile</code> module uses.</p>\n<p>See <a href=\"https://stackoverflow.com/q/582336/4279\">How can you profile a Python script?</a></p>\n", "abstract": "I've looked at the timeit module, but it seems it's only for small snippets of code. I want to time the whole program. It runs your_module.main() function one time and print the elapsed time using time.time() function as a timer. To emulate /usr/bin/time in Python see Python subprocess with /usr/bin/time: how to capture timing info but ignore all other output?. To measure CPU time (e.g., don't include time during time.sleep()) for each function, you could use profile module (cProfile on Python 2): You could pass -p to timeit command above if you want to use the same timer as profile module uses. See How can you profile a Python script?"}, {"id": 59230656, "score": 10, "vote": 0, "content": "<p>I was having the same problem in many places, so I created a convenience package <code>horology</code>. You can install it with <code>pip install horology</code> and then do it in the elegant way:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">from horology import Timing\n\nwith Timing(name='Important calculations: '):\n    prepare()\n    do_your_stuff()\n    finish_sth()\n</code></pre>\n<p>will output:</p>\n<pre><code class=\"python\">Important calculations: 12.43 ms\n</code></pre>\n<p>Or even simpler (if you have one function):</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">from horology import timed\n\n@timed\ndef main():\n    ...\n</code></pre>\n<p>will output:</p>\n<pre><code class=\"python\">main: 7.12 h\n</code></pre>\n<p>It takes care of units and rounding. It works with python 3.6 or newer.</p>\n", "abstract": "I was having the same problem in many places, so I created a convenience package horology. You can install it with pip install horology and then do it in the elegant way: will output: Or even simpler (if you have one function): will output: It takes care of units and rounding. It works with python 3.6 or newer."}, {"id": 28218696, "score": 9, "vote": 0, "content": "<p>I liked <a href=\"https://stackoverflow.com/questions/1557571/how-do-i-get-time-of-a-python-programs-execution/1557906#1557906\">Paul McGuire's answer</a> too and came up with a context manager form which suited my needs more.</p>\n<pre><code class=\"python\">import datetime as dt\nimport timeit\n\nclass TimingManager(object):\n    \"\"\"Context Manager used with the statement 'with' to time some execution.\n\n    Example:\n\n    with TimingManager() as t:\n       # Code to time\n    \"\"\"\n\n    clock = timeit.default_timer\n\n    def __enter__(self):\n        \"\"\"\n        \"\"\"\n        self.start = self.clock()\n        self.log('\\n=&gt; Start Timing: {}')\n\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        \"\"\"\n        \"\"\"\n        self.endlog()\n\n        return False\n\n    def log(self, s, elapsed=None):\n        \"\"\"Log current time and elapsed time if present.\n        :param s: Text to display, use '{}' to format the text with\n            the current time.\n        :param elapsed: Elapsed time to display. Dafault: None, no display.\n        \"\"\"\n        print s.format(self._secondsToStr(self.clock()))\n\n        if(elapsed is not None):\n            print 'Elapsed time: {}\\n'.format(elapsed)\n\n    def endlog(self):\n        \"\"\"Log time for the end of execution with elapsed time.\n        \"\"\"\n        self.log('=&gt; End Timing: {}', self.now())\n\n    def now(self):\n        \"\"\"Return current elapsed time as hh:mm:ss string.\n        :return: String.\n        \"\"\"\n        return str(dt.timedelta(seconds = self.clock() - self.start))\n\n    def _secondsToStr(self, sec):\n        \"\"\"Convert timestamp to h:mm:ss string.\n        :param sec: Timestamp.\n        \"\"\"\n        return str(dt.datetime.fromtimestamp(sec))\n</code></pre>\n", "abstract": "I liked Paul McGuire's answer too and came up with a context manager form which suited my needs more."}, {"id": 30352928, "score": 9, "vote": 0, "content": "<p>In <a href=\"http://en.wikipedia.org/wiki/IPython\" rel=\"nofollow noreferrer\">IPython</a>, \"timeit\" any script: </p>\n<pre><code class=\"python\">def foo():\n    %run bar.py\ntimeit foo()\n</code></pre>\n", "abstract": "In IPython, \"timeit\" any script: "}, {"id": 51719549, "score": 9, "vote": 0, "content": "<p>I used a very simple function to time a part of code execution:</p>\n<pre class=\"lang-python prettyprint-override\"><code class=\"python\">import time\ndef timing():\n    start_time = time.time()\n    return lambda x: print(\"[{:.2f}s] {}\".format(time.time() - start_time, x))\n</code></pre>\n<p>And to use it, just call it before the code to measure to retrieve function timing, and then call the function after the code with comments. The time will appear in front of the comments. For example:</p>\n<pre class=\"lang-python prettyprint-override\"><code class=\"python\">t = timing()\ntrain = pd.read_csv('train.csv',\n                        dtype={\n                            'id': str,\n                            'vendor_id': str,\n                            'pickup_datetime': str,\n                            'dropoff_datetime': str,\n                            'passenger_count': int,\n                            'pickup_longitude': np.float64,\n                            'pickup_latitude': np.float64,\n                            'dropoff_longitude': np.float64,\n                            'dropoff_latitude': np.float64,\n                            'store_and_fwd_flag': str,\n                            'trip_duration': int,\n                        },\n                        parse_dates = ['pickup_datetime', 'dropoff_datetime'],\n                   )\nt(\"Loaded {} rows data from 'train'\".format(len(train)))\n</code></pre>\n<p>Then the output will look like this:</p>\n<pre><code class=\"python\">[9.35s] Loaded 1458644 rows data from 'train'\n</code></pre>\n", "abstract": "I used a very simple function to time a part of code execution: And to use it, just call it before the code to measure to retrieve function timing, and then call the function after the code with comments. The time will appear in front of the comments. For example: Then the output will look like this:"}, {"id": 61672199, "score": 8, "vote": 0, "content": "<p>I tried and found time difference using the following scripts.</p>\n<pre><code class=\"python\">import time\n\nstart_time = time.perf_counter()\n[main code here]\nprint (time.perf_counter() - start_time, \"seconds\")\n</code></pre>\n", "abstract": "I tried and found time difference using the following scripts."}, {"id": 49526932, "score": 7, "vote": 0, "content": "<p>Use <a href=\"https://pypi.python.org/pypi/line_profiler/\" rel=\"nofollow noreferrer\">line_profiler</a>.</p>\n<p>line_profiler will profile the time individual lines of code take to execute. The profiler is implemented in C via <a href=\"http://en.wikipedia.org/wiki/Cython\" rel=\"nofollow noreferrer\">Cython</a> in order to reduce the overhead of profiling.</p>\n<pre><code class=\"python\">from line_profiler import LineProfiler\nimport random\n\ndef do_stuff(numbers):\n    s = sum(numbers)\n    l = [numbers[i]/43 for i in range(len(numbers))]\n    m = ['hello'+str(numbers[i]) for i in range(len(numbers))]\n\nnumbers = [random.randint(1,100) for i in range(1000)]\nlp = LineProfiler()\nlp_wrapper = lp(do_stuff)\nlp_wrapper(numbers)\nlp.print_stats()\n</code></pre>\n<p>The results will be:</p>\n<pre><code class=\"python\">Timer unit: 1e-06 s\n\nTotal time: 0.000649 s\nFile: &lt;ipython-input-2-2e060b054fea&gt;\nFunction: do_stuff at line 4\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n     4                                           def do_stuff(numbers):\n     5         1           10     10.0      1.5      s = sum(numbers)\n     6         1          186    186.0     28.7      l = [numbers[i]/43 for i in range(len(numbers))]\n     7         1          453    453.0     69.8      m = ['hello'+str(numbers[i]) for i in range(len(numbers))]\n</code></pre>\n", "abstract": "Use line_profiler. line_profiler will profile the time individual lines of code take to execute. The profiler is implemented in C via Cython in order to reduce the overhead of profiling. The results will be:"}, {"id": 47320472, "score": 6, "vote": 0, "content": "<p>Timeit is a class in Python used to calculate the execution time of small blocks of code.</p>\n<p>Default_timer is a method in this class which is used to measure the wall clock timing, not CPU execution time. Thus other process execution might interfere with this. Thus it is useful for small blocks of code.</p>\n<p>A sample of the code is as follows:</p>\n<pre><code class=\"python\">from timeit import default_timer as timer\n\nstart= timer()\n\n# Some logic\n\nend = timer()\n\nprint(\"Time taken:\", end-start)\n</code></pre>\n", "abstract": "Timeit is a class in Python used to calculate the execution time of small blocks of code. Default_timer is a method in this class which is used to measure the wall clock timing, not CPU execution time. Thus other process execution might interfere with this. Thus it is useful for small blocks of code. A sample of the code is as follows:"}, {"id": 54720145, "score": 6, "vote": 0, "content": "<p>You do this simply in Python. There is no need to make it complicated.</p>\n<pre class=\"lang-python prettyprint-override\"><code class=\"python\">import time\n\nstart = time.localtime()\nend = time.localtime()\n\"\"\"Total execution time in minutes$ \"\"\"\nprint(end.tm_min - start.tm_min)\n\"\"\"Total execution time in seconds$ \"\"\"\nprint(end.tm_sec - start.tm_sec)\n</code></pre>\n", "abstract": "You do this simply in Python. There is no need to make it complicated."}, {"id": 60385819, "score": 6, "vote": 0, "content": "<p>Later answer, but I use the built-in <a href=\"https://docs.python.org/3/library/timeit.html\" rel=\"nofollow noreferrer\"><code>timeit</code></a>:</p>\n<pre><code class=\"python\">import timeit\ncode_to_test = \"\"\"\na = range(100000)\nb = []\nfor i in a:\n    b.append(i*2)\n\"\"\"\nelapsed_time = timeit.timeit(code_to_test, number=500)\nprint(elapsed_time)\n# 10.159821493085474\n</code></pre>\n<hr/>\n<ul>\n<li>Wrap all your code, including any imports you may have, inside <code>code_to_test</code>.</li>\n<li><code>number</code> argument specifies the amount of times the code should repeat.</li>\n<li><a href=\"https://trinket.io/python3/df5da37220\" rel=\"nofollow noreferrer\">Demo</a></li>\n</ul>\n", "abstract": "Later answer, but I use the built-in timeit:"}, {"id": 61248246, "score": 6, "vote": 0, "content": "<p>First, install <a href=\"https://humanfriendly.readthedocs.io/en/latest/\" rel=\"noreferrer\">humanfriendly</a> package by opening Command Prompt (CMD) as administrator and type there -\n<code>pip install humanfriendly</code></p>\n<p>Code:</p>\n<pre><code class=\"python\">from humanfriendly import format_timespan\nimport time\nbegin_time = time.time()\n# Put your code here\nend_time = time.time() - begin_time\nprint(\"Total execution time: \", format_timespan(end_time))\n</code></pre>\n<p>Output:</p>\n<p><a href=\"https://i.stack.imgur.com/VPJNE.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/VPJNE.png\"/></a></p>\n", "abstract": "First, install humanfriendly package by opening Command Prompt (CMD) as administrator and type there -\npip install humanfriendly Code: Output: "}, {"id": 26468682, "score": 5, "vote": 0, "content": "<p>There is a <code>timeit</code> module which can be used to time the execution times of Python code.</p>\n<p>It has detailed documentation and examples in Python documentation, <em><a href=\"https://docs.python.org/2/library/timeit.html\" rel=\"nofollow noreferrer\">26.6. timeit \u2014 Measure execution time of small code snippets</a></em>.</p>\n", "abstract": "There is a timeit module which can be used to time the execution times of Python code. It has detailed documentation and examples in Python documentation, 26.6. timeit \u2014 Measure execution time of small code snippets."}, {"id": 65022660, "score": 4, "vote": 0, "content": "<p>Following <a href=\"https://stackoverflow.com/a/26099345/10815638\">this answer</a> created a simple but convenient instrument.</p>\n<pre><code class=\"python\">import time\nfrom datetime import timedelta\n\ndef start_time_measure(message=None):\n    if message:\n        print(message)\n    return time.monotonic()\n\ndef end_time_measure(start_time, print_prefix=None):\n    end_time = time.monotonic()\n    if print_prefix:\n        print(print_prefix + str(timedelta(seconds=end_time - start_time)))\n    return end_time\n</code></pre>\n<p>Usage:</p>\n<pre><code class=\"python\">total_start_time = start_time_measure()    \nstart_time = start_time_measure('Doing something...')\n# Do something\nend_time_measure(start_time, 'Done in: ')\nstart_time = start_time_measure('Doing something else...')\n# Do something else\nend_time_measure(start_time, 'Done in: ')\nend_time_measure(total_start_time, 'Total time: ')\n</code></pre>\n<p>The output:</p>\n<pre><code class=\"python\">Doing something...\nDone in: 0:00:01.218000\nDoing something else...\nDone in: 0:00:01.313000\nTotal time: 0:00:02.672000\n</code></pre>\n", "abstract": "Following this answer created a simple but convenient instrument. Usage: The output:"}, {"id": 29503779, "score": 3, "vote": 0, "content": "<p>This is <a href=\"https://stackoverflow.com/questions/1557571/how-do-i-get-time-of-a-python-programs-execution/1557906#1557906\">Paul McGuire's answer</a> that works for me. Just in case someone was having trouble running that one.</p>\n<pre><code class=\"python\">import atexit\nfrom time import clock\n\ndef reduce(function, iterable, initializer=None):\n    it = iter(iterable)\n    if initializer is None:\n        value = next(it)\n    else:\n        value = initializer\n    for element in it:\n        value = function(value, element)\n    return value\n\ndef secondsToStr(t):\n    return \"%d:%02d:%02d.%03d\" % \\\n        reduce(lambda ll,b : divmod(ll[0],b) + ll[1:],\n            [(t*1000,),1000,60,60])\n\nline = \"=\"*40\ndef log(s, elapsed=None):\n    print (line)\n    print (secondsToStr(clock()), '-', s)\n    if elapsed:\n        print (\"Elapsed time:\", elapsed)\n    print (line)\n\ndef endlog():\n    end = clock()\n    elapsed = end-start\n    log(\"End Program\", secondsToStr(elapsed))\n\ndef now():\n    return secondsToStr(clock())\n\ndef main():\n    start = clock()\n    atexit.register(endlog)\n    log(\"Start Program\")\n</code></pre>\n<p>Call <code>timing.main()</code> from your program after importing the file.</p>\n", "abstract": "This is Paul McGuire's answer that works for me. Just in case someone was having trouble running that one. Call timing.main() from your program after importing the file."}, {"id": 45419540, "score": 3, "vote": 0, "content": "<p>The time of a Python program's execution measure could be inconsistent depending on:</p>\n<ul>\n<li>Same program can be evaluated using different algorithms</li>\n<li>Running time varies between algorithms</li>\n<li>Running time varies between implementations</li>\n<li>Running time varies between computers</li>\n<li>Running time is not predictable based on small inputs</li>\n</ul>\n<p>This is because the most effective way is using the \"Order of Growth\" and learn the <a href=\"https://en.wikipedia.org/wiki/Big_O_notation\" rel=\"nofollow noreferrer\">Big \"O\" notation</a> to do it properly.</p>\n<p>Anyway, you can try to evaluate the performance of any Python program in specific machine counting steps per second using this simple algorithm:\n<em>adapt this to the program you want to evaluate</em></p>\n<pre><code class=\"python\">import time\n\nnow = time.time()\nfuture = now + 10\nstep = 4 # Why 4 steps? Because until here already four operations executed\nwhile time.time() &lt; future:\n    step += 3 # Why 3 again? Because a while loop executes one comparison and one plus equal statement\nstep += 4 # Why 3 more? Because one comparison starting while when time is over plus the final assignment of step + 1 and print statement\nprint(str(int(step / 10)) + \" steps per second\")\n</code></pre>\n", "abstract": "The time of a Python program's execution measure could be inconsistent depending on: This is because the most effective way is using the \"Order of Growth\" and learn the Big \"O\" notation to do it properly. Anyway, you can try to evaluate the performance of any Python program in specific machine counting steps per second using this simple algorithm:\nadapt this to the program you want to evaluate"}, {"id": 56702382, "score": 3, "vote": 0, "content": "<p>This is the simplest way to get the elapsed time for the program:</p>\n<p>Write the following code at the end of your program.</p>\n<pre><code class=\"python\">import time\nprint(time.clock())\n</code></pre>\n", "abstract": "This is the simplest way to get the elapsed time for the program: Write the following code at the end of your program."}, {"id": 72153367, "score": 2, "vote": 0, "content": "<p>I use tic and toc from ttictoc.</p>\n<pre><code class=\"python\">pip install ttictoc\n</code></pre>\n<p>Then you can use in your script:</p>\n<pre><code class=\"python\">from ttictoc import tic,toc\ntic()\n\n# foo()\n\nprint(toc())\n</code></pre>\n", "abstract": "I use tic and toc from ttictoc. Then you can use in your script:"}, {"id": 44590262, "score": 1, "vote": 0, "content": "<p>To use <a href=\"https://stackoverflow.com/a/26099345/3215152\">metakermit's updated answer</a> for Python\u00a02.7, you will require the <a href=\"https://pypi.python.org/pypi/monotonic\" rel=\"nofollow noreferrer\">monotonic</a> package.</p>\n<p>The code would then be as follows:</p>\n<pre><code class=\"python\">from datetime import timedelta\nfrom monotonic import monotonic\n\nstart_time = monotonic()\nend_time = monotonic()\nprint(timedelta(seconds=end_time - start_time))\n</code></pre>\n", "abstract": "To use metakermit's updated answer for Python\u00a02.7, you will require the monotonic package. The code would then be as follows:"}, {"id": 53861032, "score": 1, "vote": 0, "content": "<p>If you want to measure time in microseconds, then you can use the following version, based completely on the answers of <a href=\"https://stackoverflow.com/a/1557906/359487\">Paul McGuire</a> and <a href=\"https://stackoverflow.com/a/12344609/359487\">Nicojo</a> - it's Python\u00a03 code. I've also added some colour to it:</p>\n<pre><code class=\"python\">import atexit\nfrom time import time\nfrom datetime import timedelta, datetime\n\n\ndef seconds_to_str(elapsed=None):\n    if elapsed is None:\n        return datetime.now().strftime(\"%Y-%m-%d %H:%M:%S.%f\")\n    else:\n        return str(timedelta(seconds=elapsed))\n\n\ndef log(txt, elapsed=None):\n    colour_cyan = '\\033[36m'\n    colour_reset = '\\033[0;0;39m'\n    colour_red = '\\033[31m'\n    print('\\n ' + colour_cyan + '  [TIMING]&gt; [' + seconds_to_str() + '] ----&gt; ' + txt + '\\n' + colour_reset)\n    if elapsed:\n        print(\"\\n \" + colour_red + \" [TIMING]&gt; Elapsed time ==&gt; \" + elapsed + \"\\n\" + colour_reset)\n\n\ndef end_log():\n    end = time()\n    elapsed = end-start\n    log(\"End Program\", seconds_to_str(elapsed))\n\n\nstart = time()\natexit.register(end_log)\nlog(\"Start Program\")\n</code></pre>\n<p>log() =&gt; function that prints out the timing information.</p>\n<p>txt ==&gt; first argument to log, and its string to mark timing.</p>\n<p>atexit ==&gt; Python module to register functions that you can call when the program exits.</p>\n", "abstract": "If you want to measure time in microseconds, then you can use the following version, based completely on the answers of Paul McGuire and Nicojo - it's Python\u00a03 code. I've also added some colour to it: log() => function that prints out the timing information. txt ==> first argument to log, and its string to mark timing. atexit ==> Python module to register functions that you can call when the program exits."}, {"id": 72328775, "score": 0, "vote": 0, "content": "<p>By default, Linux or Unix system (tested on macOS) comes with the <code>time</code> command on the terminal that you can use to run the Python script and get the <code>real</code>, <code>user</code>, <code>sys</code> time information for the execution of the running script.</p>\n<p>However, the default output isn't very clear (at least for me), and the default <code>time</code> command doesn't even take any options as arguments to format the output. That's because <a href=\"https://forums.fedoraforum.org/showthread.php?318154-time-command-doesn-t-accept-any-options-is-this-my-fault&amp;s=5201e66f0e9a17076319d66a2d0a4769&amp;p=1807548#post1807548\" rel=\"nofollow noreferrer\">there are two versions</a> of <code>time</code> - one is built into bash that provides just the minimal version and another one is located on <code>/usr/bin/time</code>.</p>\n<p>The <code>/usr/bin/time</code> command accepts additional arguments like <code>-al</code>, <code>-h</code>, <code>-p</code>, and <code>-o</code>. My favorite is <code>-p</code> which shows the output in a new line like the following:</p>\n<pre class=\"lang-sh prettyprint-override\"><code class=\"python\">real 2.18\nuser 17.92\nsys 2.71\n</code></pre>\n", "abstract": "By default, Linux or Unix system (tested on macOS) comes with the time command on the terminal that you can use to run the Python script and get the real, user, sys time information for the execution of the running script. However, the default output isn't very clear (at least for me), and the default time command doesn't even take any options as arguments to format the output. That's because there are two versions of time - one is built into bash that provides just the minimal version and another one is located on /usr/bin/time. The /usr/bin/time command accepts additional arguments like -al, -h, -p, and -o. My favorite is -p which shows the output in a new line like the following:"}, {"id": 73958773, "score": 0, "vote": 0, "content": "<p>The problem I encountered while finding the running time of two different methods for finding all the prime numbers &lt;= a number. when a user input was taken in the program.</p>\n<p><strong>WRONG APPROACH</strong></p>\n<pre><code class=\"python\">#Sample input for a number 20 \n#Sample output [2, 3, 5, 7, 11, 13, 17, 19]\n#Total Running time = 0.634 seconds\n\nimport time\n\nstart_time = time.time()\n\n#Method 1 to find all the prime numbers &lt;= a Number\n\n# Function to check whether a number is prime or not.\ndef prime_no(num):\nif num&lt;2:\n    return False\nelse:\n    for i in range(2, num//2+1):\n        if num % i == 0:\n            return False\n    return True\n\n#To print all the values &lt;= n\ndef Prime_under_num(n):\n    a = [2]\n    if n &lt;2:\n        print(\"None\")\n    elif n==2:\n        print(2)\n    else:\n\"Neglecting all even numbers as even numbers won't be prime in order to reduce the time complexity.\"\n        for i in range(3, n+1, 2):   \n            if prime_no(i):\n                a.append(i)\n        print(a)\n\n\n\"When Method 1 is only used outputs of running time for different inputs\"\n#Total Running time = 2.73761 seconds #n = 100\n#Total Running time = 3.14781 seconds #n = 1000\n#Total Running time = 8.69278 seconds #n = 10000\n#Total Running time = 18.73701 seconds #n = 100000\n\n#Method 2 to find all the prime numbers &lt;= a Number\n\ndef Prime_under_num(n):\n    a = [2]\n    if n &lt;2:\n        print(\"None\")\n    elif n==2:\n        print(2)\n    else:\n        for i in range(3, n+1, 2):   \n            if n%i ==0:\n                pass\n            else:\n                a.append(i)\n        print(a)\n\n\"When Method 2 is only used outputs of running time for different inputs\"\n# Total Running time = 2.75935 seconds #n = 100\n# Total Running time = 2.86332 seconds #n = 1000\n# Total Running time = 4.59884 seconds #n = 10000\n# Total Running time = 8.55057 seconds #n = 100000\n\nif __name__ == \"__main__\" :\n    n = int(input())\n    Prime_under_num(n)\n    print(\"Total Running time = {:.5f} seconds\".format(time.time() - start_time))\n</code></pre>\n<p>The different running time obtained for all the above cases are wrong. <em><strong>For problems where we are taking an input, we have to start the time only after taking the input.</strong></em> Here the time taken by the user to type the input is also calculated along with the running time.</p>\n<p><strong>CORRECT APPROACH</strong></p>\n<p>We have to remove the <strong>start_time = time.time()</strong> from the begining and add it in the main block.</p>\n<pre><code class=\"python\">if __name__ == \"__main__\" :\n    n = int(input())\n    start_time = time.time()\n    Prime_under_num(n)\n    print(\"Total Running time = {:.3f} seconds\".format(time.time() - start_time))\n</code></pre>\n<p>Thus the output for the each of the two methods when used alone will be as follows:-</p>\n<pre><code class=\"python\"># Method 1\n\n# Total Running time = 0.00159 seconds #n = 100\n# Total Running time = 0.00506 seconds #n = 1000\n# Total Running time = 0.22987 seconds #n = 10000\n# Total Running time = 18.55819 seconds #n = 100000\n\n# Method 2\n\n# Total Running time = 0.00011 seconds #n = 100\n# Total Running time = 0.00118 seconds #n = 1000\n# Total Running time = 0.00302 seconds #n = 10000\n# Total Running time = 0.01450 seconds #n = 100000\n</code></pre>\n<p>Now we can see there is a significant difference in total running time when compared with WRONG APPROACH. Even though the method 2 is performing better than method 1 in the both approach first approach(WRONG APPROACH) is wrong.</p>\n", "abstract": "The problem I encountered while finding the running time of two different methods for finding all the prime numbers <= a number. when a user input was taken in the program. WRONG APPROACH The different running time obtained for all the above cases are wrong. For problems where we are taking an input, we have to start the time only after taking the input. Here the time taken by the user to type the input is also calculated along with the running time. CORRECT APPROACH We have to remove the start_time = time.time() from the begining and add it in the main block. Thus the output for the each of the two methods when used alone will be as follows:- Now we can see there is a significant difference in total running time when compared with WRONG APPROACH. Even though the method 2 is performing better than method 1 in the both approach first approach(WRONG APPROACH) is wrong."}, {"id": 68939390, "score": -2, "vote": 0, "content": "<p>I define the following Python decorator:</p>\n<pre><code class=\"python\">def profile(fct):\n  def wrapper(*args, **kw):\n    start_time = time.time()\n    ret = fct(*args, **kw)\n    print(\"{} {} {} return {} in {} seconds\".format(args[0].__class__.__name__,\n                                                    args[0].__class__.__module__,\n                                                    fct.__name__,\n                                                    ret,\n                                                    time.time() - start_time))\n    return ret\n  return wrapper\n</code></pre>\n<p>and use it on functions or class/methods:</p>\n<pre><code class=\"python\">@profile\ndef main()\n   ...\n</code></pre>\n", "abstract": "I define the following Python decorator: and use it on functions or class/methods:"}]}, {"link": "https://stackoverflow.com/questions/3394835/use-of-args-and-kwargs", "question": {"id": "3394835", "title": "Use of *args and **kwargs", "content": "<p>So I have difficulty with the concept of <code>*args</code> and <code>**kwargs</code>.</p>\n<p>So far I have learned that:</p>\n<ul>\n<li><code>*args</code> = list of arguments - as positional arguments</li>\n<li><code>**kwargs</code> = dictionary - whose keys become separate keyword arguments and the values become values of these arguments.</li>\n</ul>\n<p>I don't understand what programming task this would be helpful for. </p>\n<p>Maybe:</p>\n<p>I think to enter lists and dictionaries as arguments of a function AND at the same time as a wildcard, so I can pass ANY argument?</p>\n<p>Is there a simple example to explain how <code>*args</code> and <code>**kwargs</code> are used?</p>\n<p>Also the tutorial I found used just the \"*\" and a variable name. </p>\n<p>Are <code>*args</code> and <code>**kwargs</code> just placeholders or do you use exactly <code>*args</code> and <code>**kwargs</code> in the code?</p>\n", "abstract": "So I have difficulty with the concept of *args and **kwargs. So far I have learned that: I don't understand what programming task this would be helpful for.  Maybe: I think to enter lists and dictionaries as arguments of a function AND at the same time as a wildcard, so I can pass ANY argument? Is there a simple example to explain how *args and **kwargs are used? Also the tutorial I found used just the \"*\" and a variable name.  Are *args and **kwargs just placeholders or do you use exactly *args and **kwargs in the code?"}, "answers": [{"id": 3394898, "score": 1763, "vote": 0, "content": "<p><a href=\"http://docs.python.org/tutorial/controlflow.html#arbitrary-argument-lists\" rel=\"noreferrer\">The syntax is the <code>*</code> and <code>**</code></a>.  The names <code>*args</code> and <code>**kwargs</code> are only by convention but there's no hard requirement to use them.</p>\n<p>You would use <code>*args</code> when you're not sure how many arguments might be passed to your function, i.e. it allows you pass an arbitrary number of arguments to your function.  For example:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; def print_everything(*args):\n        for count, thing in enumerate(args):\n...         print( '{0}. {1}'.format(count, thing))\n...\n&gt;&gt;&gt; print_everything('apple', 'banana', 'cabbage')\n0. apple\n1. banana\n2. cabbage\n</code></pre>\n<p>Similarly, <code>**kwargs</code> allows you to handle named arguments that you have not defined in advance:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; def table_things(**kwargs):\n...     for name, value in kwargs.items():\n...         print( '{0} = {1}'.format(name, value))\n...\n&gt;&gt;&gt; table_things(apple = 'fruit', cabbage = 'vegetable')\ncabbage = vegetable\napple = fruit\n</code></pre>\n<p>You can use these along with named arguments too.  The explicit arguments get values first and then everything else is passed to <code>*args</code> and <code>**kwargs</code>.  The named arguments come first in the list.  For example:</p>\n<pre><code class=\"python\">def table_things(titlestring, **kwargs)\n</code></pre>\n<p>You can also use both in the same function definition but <code>*args</code> must occur before <code>**kwargs</code>.</p>\n<p>You can also use the <code>*</code> and <code>**</code> syntax when calling a function.  For example:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; def print_three_things(a, b, c):\n...     print( 'a = {0}, b = {1}, c = {2}'.format(a,b,c))\n...\n&gt;&gt;&gt; mylist = ['aardvark', 'baboon', 'cat']\n&gt;&gt;&gt; print_three_things(*mylist)\na = aardvark, b = baboon, c = cat\n</code></pre>\n<p>As you can see in this case it takes the list (or tuple) of items and unpacks it. By this it matches them to the arguments in the function.  Of course, you could have a <code>*</code> both in the function definition and in the function call.</p>\n", "abstract": "The syntax is the * and **.  The names *args and **kwargs are only by convention but there's no hard requirement to use them. You would use *args when you're not sure how many arguments might be passed to your function, i.e. it allows you pass an arbitrary number of arguments to your function.  For example: Similarly, **kwargs allows you to handle named arguments that you have not defined in advance: You can use these along with named arguments too.  The explicit arguments get values first and then everything else is passed to *args and **kwargs.  The named arguments come first in the list.  For example: You can also use both in the same function definition but *args must occur before **kwargs. You can also use the * and ** syntax when calling a function.  For example: As you can see in this case it takes the list (or tuple) of items and unpacks it. By this it matches them to the arguments in the function.  Of course, you could have a * both in the function definition and in the function call."}, {"id": 3394902, "score": 505, "vote": 0, "content": "<p>One place where the use of <code>*args</code> and <code>**kwargs</code> is quite useful is for subclassing.</p>\n<pre><code class=\"python\">class Foo(object):\n    def __init__(self, value1, value2):\n        # do something with the values\n        print value1, value2\n\nclass MyFoo(Foo):\n    def __init__(self, *args, **kwargs):\n        # do something else, don't care about the args\n        print 'myfoo'\n        super(MyFoo, self).__init__(*args, **kwargs)\n</code></pre>\n<p>This way you can extend the behaviour of the Foo class, without having to know too much about Foo. This can be quite convenient if you are programming to an API which might change. MyFoo just passes all arguments to the Foo class.</p>\n", "abstract": "One place where the use of *args and **kwargs is quite useful is for subclassing. This way you can extend the behaviour of the Foo class, without having to know too much about Foo. This can be quite convenient if you are programming to an API which might change. MyFoo just passes all arguments to the Foo class."}, {"id": 3394924, "score": 337, "vote": 0, "content": "<p>Here's an example that uses 3 different types of parameters.</p>\n<pre><code class=\"python\">def func(required_arg, *args, **kwargs):\n    # required_arg is a positional-only parameter.\n    print required_arg\n\n    # args is a tuple of positional arguments,\n    # because the parameter name has * prepended.\n    if args: # If args is not empty.\n        print args\n\n    # kwargs is a dictionary of keyword arguments,\n    # because the parameter name has ** prepended.\n    if kwargs: # If kwargs is not empty.\n        print kwargs\n\n&gt;&gt;&gt; func()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: func() takes at least 1 argument (0 given)\n\n&gt;&gt;&gt; func(\"required argument\")\nrequired argument\n\n&gt;&gt;&gt; func(\"required argument\", 1, 2, '3')\nrequired argument\n(1, 2, '3')\n\n&gt;&gt;&gt; func(\"required argument\", 1, 2, '3', keyword1=4, keyword2=\"foo\")\nrequired argument\n(1, 2, '3')\n{'keyword2': 'foo', 'keyword1': 4}\n</code></pre>\n", "abstract": "Here's an example that uses 3 different types of parameters."}, {"id": 3396700, "score": 74, "vote": 0, "content": "<p>Here's one of my favorite places to use the <code>**</code> syntax as in Dave Webb's final example:</p>\n<pre><code class=\"python\">mynum = 1000\nmystr = 'Hello World!'\nprint(\"{mystr} New-style formatting is {mynum}x more fun!\".format(**locals()))\n</code></pre>\n<p>I'm not sure if it's terribly fast when compared to just using the names themselves, but it's a lot easier to type!</p>\n", "abstract": "Here's one of my favorite places to use the ** syntax as in Dave Webb's final example: I'm not sure if it's terribly fast when compared to just using the names themselves, but it's a lot easier to type!"}, {"id": 3394911, "score": 49, "vote": 0, "content": "<p>One case where *args and **kwargs are useful is when writing wrapper functions (such as decorators) that need to be able accept arbitrary arguments to pass through to the function being wrapped.  For example, a simple decorator that prints the arguments and return value of the function being wrapped:</p>\n<pre><code class=\"python\">def mydecorator( f ):\n   @functools.wraps( f )\n   def wrapper( *args, **kwargs ):\n      print \"Calling f\", args, kwargs\n      v = f( *args, **kwargs )\n      print \"f returned\", v\n      return v\n   return wrapper\n</code></pre>\n", "abstract": "One case where *args and **kwargs are useful is when writing wrapper functions (such as decorators) that need to be able accept arbitrary arguments to pass through to the function being wrapped.  For example, a simple decorator that prints the arguments and return value of the function being wrapped:"}, {"id": 3394908, "score": 42, "vote": 0, "content": "<p>*args and **kwargs are special-magic features of Python.\nThink of a function that could have an unknown number of arguments. For example, for whatever reasons, you want to have function that sums an unknown number of numbers (and you don't want to use the built-in sum function). So you write this function:</p>\n<pre><code class=\"python\">def sumFunction(*args):\n  result = 0\n  for x in args:\n    result += x\n  return result\n</code></pre>\n<p>and use it like: sumFunction(3,4,6,3,6,8,9).</p>\n<p>**kwargs has a diffrent function. With **kwargs you can give arbitrary keyword arguments to a function and you can access them as a dictonary.</p>\n<pre><code class=\"python\">def someFunction(**kwargs):\n  if 'text' in kwargs:\n    print kwargs['text']\n</code></pre>\n<p>Calling someFunction(text=\"foo\") will print foo.</p>\n", "abstract": "*args and **kwargs are special-magic features of Python.\nThink of a function that could have an unknown number of arguments. For example, for whatever reasons, you want to have function that sums an unknown number of numbers (and you don't want to use the built-in sum function). So you write this function: and use it like: sumFunction(3,4,6,3,6,8,9). **kwargs has a diffrent function. With **kwargs you can give arbitrary keyword arguments to a function and you can access them as a dictonary. Calling someFunction(text=\"foo\") will print foo."}, {"id": 3394909, "score": 20, "vote": 0, "content": "<p>Just imagine you have a function but you don't want to restrict the number of parameter it takes.\nExample:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; import operator\n&gt;&gt;&gt; def multiply(*args):\n...  return reduce(operator.mul, args)\n</code></pre>\n<p>Then you use this function like:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; multiply(1,2,3)\n6\n\nor\n\n&gt;&gt;&gt; numbers = [1,2,3]\n&gt;&gt;&gt; multiply(*numbers)\n6\n</code></pre>\n", "abstract": "Just imagine you have a function but you don't want to restrict the number of parameter it takes.\nExample: Then you use this function like:"}, {"id": 3394869, "score": 18, "vote": 0, "content": "<p>The names <code>*args</code> and <code>**kwargs</code> or <code>**kw</code> are purely by convention. It makes it easier for us to read each other's code</p>\n<p>One place it is handy is when using the struct module</p>\n<p><code>struct.unpack()</code> returns a tuple whereas <code>struct.pack()</code> uses a variable number of arguments. When manipulating data it is convenient to be able to pass a tuple to <code>struck.pack()</code> eg.</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">tuple_of_data = struct.unpack(format_str, data)\n# ... manipulate the data\nnew_data = struct.pack(format_str, *tuple_of_data)\n</code></pre>\n<p>without this ability you would be forced to write</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">new_data = struct.pack(format_str, tuple_of_data[0], tuple_of_data[1], tuple_of_data[2],...)\n</code></pre>\n<p>which also means the if the format_str changes and the size of the tuple changes, I'll have to go back and edit that really long line</p>\n", "abstract": "The names *args and **kwargs or **kw are purely by convention. It makes it easier for us to read each other's code One place it is handy is when using the struct module struct.unpack() returns a tuple whereas struct.pack() uses a variable number of arguments. When manipulating data it is convenient to be able to pass a tuple to struck.pack() eg. without this ability you would be forced to write which also means the if the format_str changes and the size of the tuple changes, I'll have to go back and edit that really long line"}, {"id": 4149082, "score": 10, "vote": 0, "content": "<p>Note that *args/**kwargs is part of function-calling syntax, and not really an operator. This has a particular side effect that I ran into, which is that you can't use *args expansion with the print statement, since print is not a function.</p>\n<p>This seems reasonable:</p>\n<pre><code class=\"python\">def myprint(*args):\n    print *args\n</code></pre>\n<p>Unfortunately it doesn't compile (syntax error).</p>\n<p>This compiles:</p>\n<pre><code class=\"python\">def myprint(*args):\n    print args\n</code></pre>\n<p>But prints the arguments as a tuple, which isn't what we want.</p>\n<p>This is the solution I settled on:</p>\n<pre><code class=\"python\">def myprint(*args):\n    for arg in args:\n        print arg,\n    print\n</code></pre>\n", "abstract": "Note that *args/**kwargs is part of function-calling syntax, and not really an operator. This has a particular side effect that I ran into, which is that you can't use *args expansion with the print statement, since print is not a function. This seems reasonable: Unfortunately it doesn't compile (syntax error). This compiles: But prints the arguments as a tuple, which isn't what we want. This is the solution I settled on:"}, {"id": 3394918, "score": 8, "vote": 0, "content": "<p>These parameters are typically used for proxy functions, so the proxy can pass any input parameter to the target function.</p>\n<pre><code class=\"python\">def foo(bar=2, baz=5):\n    print bar, baz\n\ndef proxy(x, *args, **kwargs): # reqire parameter x and accept any number of additional arguments\n    print x\n    foo(*args, **kwargs) # applies the \"non-x\" parameter to foo\n\nproxy(23, 5, baz='foo') # calls foo with bar=5 and baz=foo\nproxy(6)# calls foo with its default arguments\nproxy(7, bar='asdas') # calls foo with bar='asdas' and leave baz default argument\n</code></pre>\n<p>But since these parameters hide the actual parameter names, it is better to avoid them.</p>\n", "abstract": "These parameters are typically used for proxy functions, so the proxy can pass any input parameter to the target function. But since these parameters hide the actual parameter names, it is better to avoid them."}, {"id": 3394916, "score": 3, "vote": 0, "content": "<p>You can have a look at python docs (docs.python.org in the FAQ), but more specifically for a good explanation <a href=\"https://web.archive.org/web/20101017032628/http://pypatterns.net/post/2009/10/the-mysterious-miss-args-and-mister-kwargs\" rel=\"nofollow noreferrer\">the mysterious miss args and mister kwargs (courtesy of archive.org)</a> (the original, dead link is <a href=\"https://web.archive.org/web/20101017032628/http://pypatterns.net/post/2009/10/the-mysterious-miss-args-and-mister-kwargs\" rel=\"nofollow noreferrer\">here</a>).</p>\n<p>In a nutshell, both are used when optional parameters to a function or method are used. \nAs Dave says, *args is used when you don't know how many arguments may be passed, and **kwargs when you want to handle parameters specified by name and value as in:</p>\n<pre><code class=\"python\">myfunction(myarg=1)\n</code></pre>\n", "abstract": "You can have a look at python docs (docs.python.org in the FAQ), but more specifically for a good explanation the mysterious miss args and mister kwargs (courtesy of archive.org) (the original, dead link is here). In a nutshell, both are used when optional parameters to a function or method are used. \nAs Dave says, *args is used when you don't know how many arguments may be passed, and **kwargs when you want to handle parameters specified by name and value as in:"}]}, {"link": "https://stackoverflow.com/questions/230751/how-can-i-flush-the-output-of-the-print-function", "question": {"id": "230751", "title": "How can I flush the output of the print function?", "content": "<p>How do I force Python's <code>print</code> function to flush the buffered output to the screen?</p>\n", "abstract": "How do I force Python's print function to flush the buffered output to the screen?"}, "answers": [{"id": 230774, "score": 1787, "vote": 0, "content": "<p>In Python 3, <a href=\"https://docs.python.org/library/functions.html#print\" rel=\"noreferrer\"><code>print</code></a> can take an optional <code>flush</code> argument:</p>\n<pre><code class=\"python\">print(\"Hello, World!\", flush=True)\n</code></pre>\n<p>In Python 2, after calling <code>print</code>, do:</p>\n<pre><code class=\"python\">import sys\nsys.stdout.flush()\n</code></pre>\n<p>By default, <a href=\"https://docs.python.org/2/reference/simple_stmts.html#the-print-statement\" rel=\"noreferrer\"><code>print</code></a> prints to <a href=\"https://docs.python.org/2/library/sys.html#sys.stdout\" rel=\"noreferrer\"><code>sys.stdout</code></a> (see the documentation for more about <a href=\"https://docs.python.org/2/library/stdtypes.html#file-objects\" rel=\"noreferrer\">file objects</a>).</p>\n", "abstract": "In Python 3, print can take an optional flush argument: In Python 2, after calling print, do: By default, print prints to sys.stdout (see the documentation for more about file objects)."}, {"id": 230780, "score": 415, "vote": 0, "content": "<p>Running <code>python -h</code>, I see a <em>command line option</em>:</p>\n<blockquote>\n<p>-u     : unbuffered binary stdout and stderr; also PYTHONUNBUFFERED=x\nsee man page for details on internal buffering relating to '-u'</p>\n</blockquote>\n<p>Here is the <a href=\"http://docs.python.org/using/cmdline.html#cmdoption-u\" rel=\"noreferrer\">relevant documentation</a>.</p>\n", "abstract": "Running python -h, I see a command line option: -u     : unbuffered binary stdout and stderr; also PYTHONUNBUFFERED=x\nsee man page for details on internal buffering relating to '-u' Here is the relevant documentation."}, {"id": 23142556, "score": 339, "vote": 0, "content": "<p>Since Python 3.3, you can force the normal <code>print()</code> function to flush without the need to use <code>sys.stdout.flush()</code>; just set the \"flush\" keyword argument to true.  From <a href=\"https://docs.python.org/3.3/library/functions.html#print\">the documentation</a>:</p>\n<blockquote>\n<p><strong>print(*objects, sep=' ', end='\\n', file=sys.stdout, flush=False)</strong></p>\n<p>Print objects to the stream file, separated by sep and followed by end. sep, end and file, if present, must be given as keyword arguments.</p>\n<p>All non-keyword arguments are converted to strings like str() does and written to the stream, separated by sep and followed by end. Both sep and end must be strings; they can also be None, which means to use the default values. If no objects are given, print() will just write end.</p>\n<p>The file argument must be an object with a write(string) method; if it is not present or None, sys.stdout will be used. <strong>Whether output is buffered is usually determined by file, but if the flush keyword argument is true, the stream is forcibly flushed.</strong></p>\n</blockquote>\n", "abstract": "Since Python 3.3, you can force the normal print() function to flush without the need to use sys.stdout.flush(); just set the \"flush\" keyword argument to true.  From the documentation: print(*objects, sep=' ', end='\\n', file=sys.stdout, flush=False) Print objects to the stream file, separated by sep and followed by end. sep, end and file, if present, must be given as keyword arguments. All non-keyword arguments are converted to strings like str() does and written to the stream, separated by sep and followed by end. Both sep and end must be strings; they can also be None, which means to use the default values. If no objects are given, print() will just write end. The file argument must be an object with a write(string) method; if it is not present or None, sys.stdout will be used. Whether output is buffered is usually determined by file, but if the flush keyword argument is true, the stream is forcibly flushed."}, {"id": 35467658, "score": 257, "vote": 0, "content": "<blockquote>\n<h1>How to flush output of Python print?</h1>\n</blockquote>\n<p>I suggest five ways of doing this:</p>\n<ul>\n<li>In Python 3, call <code>print(..., flush=True)</code> (the flush argument is not available in Python 2's print function, and there is no analogue for the print statement).</li>\n<li>Call <code>file.flush()</code> on the output file (we can wrap python 2's print function to do this), for example, <code>sys.stdout</code></li>\n<li>apply this to every print function call in the module with a partial function,<br/>\n<code>print = partial(print, flush=True)</code> applied to the module global.</li>\n<li>apply this to the process with a flag (<code>-u</code>) passed to the interpreter command</li>\n<li>apply this to every python process in your environment with <code>PYTHONUNBUFFERED=TRUE</code> (and unset the variable to undo this).</li>\n</ul>\n<h2>Python 3.3+</h2>\n<p>Using Python 3.3 or higher, you can just provide <code>flush=True</code> as a keyword argument to the <code>print</code> function:</p>\n<pre><code class=\"python\">print('foo', flush=True) \n</code></pre>\n<h2>Python 2 (or &lt; 3.3)</h2>\n<p>They did not backport the <code>flush</code> argument to Python 2.7 So if you're using Python 2 (or less than 3.3), and want code that's compatible with both 2 and 3, may I suggest the following compatibility code. (Note the <code>__future__</code> import must be at/very \"near the <a href=\"https://docs.python.org/2/reference/simple_stmts.html#future-statements\" rel=\"noreferrer\">top of your module</a>\"):</p>\n<pre><code class=\"python\">from __future__ import print_function\nimport sys\n\nif sys.version_info[:2] &lt; (3, 3):\n    old_print = print\n    def print(*args, **kwargs):\n        flush = kwargs.pop('flush', False)\n        old_print(*args, **kwargs)\n        if flush:\n            file = kwargs.get('file', sys.stdout)\n            # Why might file=None? IDK, but it works for print(i, file=None)\n            file.flush() if file is not None else sys.stdout.flush()\n</code></pre>\n<p>The above compatibility code will cover most uses, but for a much more thorough treatment, <a href=\"https://bitbucket.org/gutworth/six/src/3deee854df8a5f1cc04dd721c18dee2128584f8c/six.py?at=default#six.py-721\" rel=\"noreferrer\">see the <code>six</code> module</a>.</p>\n<p>Alternatively, you can just call <code>file.flush()</code> after printing, for example, with the print statement in Python 2:</p>\n<pre><code class=\"python\">import sys\nprint 'delayed output'\nsys.stdout.flush()\n</code></pre>\n<h2>Changing the default in one module to <code>flush=True</code></h2>\n<p>You can change the default for the print function by using functools.partial on the global scope of a module:</p>\n<pre><code class=\"python\">import functools\nprint = functools.partial(print, flush=True)\n</code></pre>\n<p>if you look at our new partial function, at least in Python 3:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; print = functools.partial(print, flush=True)\n&gt;&gt;&gt; print\nfunctools.partial(&lt;built-in function print&gt;, flush=True)\n</code></pre>\n<p>We can see it works just like normal:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; print('foo')\nfoo\n</code></pre>\n<p>And we can actually override the new default:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; print('foo', flush=False)\nfoo\n</code></pre>\n<p>Note again, this only changes the current global scope, because the print name on the current global scope will overshadow the builtin <code>print</code> function (or unreference the compatibility function, if using one in Python 2, in that current global scope).</p>\n<p>If you want to do this inside a function instead of on a module's global scope, you should give it a different name, e.g.:</p>\n<pre><code class=\"python\">def foo():\n    printf = functools.partial(print, flush=True)\n    printf('print stuff like this')\n</code></pre>\n<p>If you declare it a global in a function, you're changing it on the module's global namespace, so you should just put it in the global namespace, unless that specific behavior is exactly what you want.</p>\n<h2>Changing the default for the process</h2>\n<p>I think the best option here is to use the <code>-u</code> flag to get unbuffered output.</p>\n<pre><code class=\"python\">$ python -u script.py\n</code></pre>\n<p>or</p>\n<pre><code class=\"python\">$ python -um package.module\n</code></pre>\n<p>From the <a href=\"https://docs.python.org/2/using/cmdline.html#cmdoption-u\" rel=\"noreferrer\">docs</a>:</p>\n<blockquote>\n<p>Force stdin, stdout and stderr to be totally unbuffered. On systems where it matters, also put stdin, stdout and stderr in binary mode.</p>\n<p>Note that there is internal buffering in file.readlines() and File Objects (for line in sys.stdin) which is not influenced by this option. To work around this, you will want to use file.readline() inside a while 1: loop.</p>\n</blockquote>\n<h2>Changing the default for the shell operating environment</h2>\n<p>You can get this behavior for all python processes in the environment or environments that inherit from the environment if you set the environment variable to a nonempty string:</p>\n<p>e.g., in Linux or OSX:</p>\n<pre><code class=\"python\">$ export PYTHONUNBUFFERED=TRUE\n</code></pre>\n<p>or Windows:</p>\n<pre><code class=\"python\">C:\\SET PYTHONUNBUFFERED=TRUE\n</code></pre>\n<p>from the <a href=\"https://docs.python.org/2/using/cmdline.html#envvar-PYTHONUNBUFFERED\" rel=\"noreferrer\">docs</a>:</p>\n<blockquote>\n<p><strong>PYTHONUNBUFFERED</strong></p>\n<p>If this is set to a non-empty string it is equivalent to specifying the -u option.</p>\n</blockquote>\n<hr/>\n<h2>Addendum</h2>\n<p>Here's the help on the print function from Python 2.7.12 - note that there is <em>no</em> <code>flush</code> argument:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; from __future__ import print_function\n&gt;&gt;&gt; help(print)\nprint(...)\n    print(value, ..., sep=' ', end='\\n', file=sys.stdout)\n    \n    Prints the values to a stream, or to sys.stdout by default.\n    Optional keyword arguments:\n    file: a file-like object (stream); defaults to the current sys.stdout.\n    sep:  string inserted between values, default a space.\n    end:  string appended after the last value, default a newline.\n</code></pre>\n", "abstract": "I suggest five ways of doing this: Using Python 3.3 or higher, you can just provide flush=True as a keyword argument to the print function: They did not backport the flush argument to Python 2.7 So if you're using Python 2 (or less than 3.3), and want code that's compatible with both 2 and 3, may I suggest the following compatibility code. (Note the __future__ import must be at/very \"near the top of your module\"): The above compatibility code will cover most uses, but for a much more thorough treatment, see the six module. Alternatively, you can just call file.flush() after printing, for example, with the print statement in Python 2: You can change the default for the print function by using functools.partial on the global scope of a module: if you look at our new partial function, at least in Python 3: We can see it works just like normal: And we can actually override the new default: Note again, this only changes the current global scope, because the print name on the current global scope will overshadow the builtin print function (or unreference the compatibility function, if using one in Python 2, in that current global scope). If you want to do this inside a function instead of on a module's global scope, you should give it a different name, e.g.: If you declare it a global in a function, you're changing it on the module's global namespace, so you should just put it in the global namespace, unless that specific behavior is exactly what you want. I think the best option here is to use the -u flag to get unbuffered output. or From the docs: Force stdin, stdout and stderr to be totally unbuffered. On systems where it matters, also put stdin, stdout and stderr in binary mode. Note that there is internal buffering in file.readlines() and File Objects (for line in sys.stdin) which is not influenced by this option. To work around this, you will want to use file.readline() inside a while 1: loop. You can get this behavior for all python processes in the environment or environments that inherit from the environment if you set the environment variable to a nonempty string: e.g., in Linux or OSX: or Windows: from the docs: PYTHONUNBUFFERED If this is set to a non-empty string it is equivalent to specifying the -u option. Here's the help on the print function from Python 2.7.12 - note that there is no flush argument:"}, {"id": 9462099, "score": 71, "vote": 0, "content": "<p>Also, as suggested in <a href=\"http://algorithmicallyrandom.blogspot.com/2009/10/python-tips-and-tricks-flushing-stdout.html\" rel=\"nofollow noreferrer\">this blog post</a>, one can reopen <code>sys.stdout</code> in unbuffered mode:</p>\n<pre><code class=\"python\">sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)\n</code></pre>\n<p>Each <code>stdout.write</code> and <code>print</code> operation will be automatically flushed afterwards.</p>\n", "abstract": "Also, as suggested in this blog post, one can reopen sys.stdout in unbuffered mode: Each stdout.write and print operation will be automatically flushed afterwards."}, {"id": 33265549, "score": 68, "vote": 0, "content": "<p>With Python 3.x the <code>print()</code> function has been extended:</p>\n<pre><code class=\"python\">print(*objects, sep=' ', end='\\n', file=sys.stdout, flush=False)\n</code></pre>\n<p>So, you can just do:</p>\n<pre><code class=\"python\">print(\"Visiting toilet\", flush=True)\n</code></pre>\n<hr/>\n<p><a href=\"https://docs.python.org/3.3/library/functions.html?highlight=print#print\" rel=\"noreferrer\">Python Docs Entry</a></p>\n", "abstract": "With Python 3.x the print() function has been extended: So, you can just do: Python Docs Entry"}, {"id": 231216, "score": 40, "vote": 0, "content": "<p>Using the <code>-u</code> command-line switch works, but it is a little bit clumsy. It would mean that the program would potentially behave incorrectly if the user invoked the script without the <code>-u</code> option.  I usually use a custom <code>stdout</code>, like this:</p>\n<pre><code class=\"python\">class flushfile:\n  def __init__(self, f):\n    self.f = f\n\n  def write(self, x):\n    self.f.write(x)\n    self.f.flush()\n\nimport sys\nsys.stdout = flushfile(sys.stdout)\n</code></pre>\n<p>... Now all your <code>print</code> calls (which use <code>sys.stdout</code> implicitly), will be automatically <code>flush</code>ed.</p>\n", "abstract": "Using the -u command-line switch works, but it is a little bit clumsy. It would mean that the program would potentially behave incorrectly if the user invoked the script without the -u option.  I usually use a custom stdout, like this: ... Now all your print calls (which use sys.stdout implicitly), will be automatically flushed."}, {"id": 741601, "score": 20, "vote": 0, "content": "<p>Use an unbuffered file:</p>\n<pre><code class=\"python\">f = open('xyz.log', 'a', 0)\n</code></pre>\n<p><em>Or</em></p>\n<pre><code class=\"python\">sys.stdout = open('out.log', 'a', 0)\n</code></pre>\n", "abstract": "Use an unbuffered file: Or"}, {"id": 37242598, "score": 18, "vote": 0, "content": "<p>In Python 3 you can overwrite the <em>print</em> function with the default set to <code>flush = True</code></p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">def print(*objects, sep=' ', end='\\n', file=sys.stdout, flush=True):\n    __builtins__.print(*objects, sep=sep, end=end, file=file, flush=flush)\n</code></pre>\n", "abstract": "In Python 3 you can overwrite the print function with the default set to flush = True"}, {"id": 288536, "score": 16, "vote": 0, "content": "<p><a href=\"https://stackoverflow.com/questions/230751/how-can-i-flush-the-output-of-the-print-function/231216#231216\">Dan's idea</a> doesn't quite work:</p>\n<pre><code class=\"python\">#!/usr/bin/env python\nclass flushfile(file):\n    def __init__(self, f):\n        self.f = f\n    def write(self, x):\n        self.f.write(x)\n        self.f.flush()\n\nimport sys\nsys.stdout = flushfile(sys.stdout)\n\nprint \"foo\"\n</code></pre>\n<p>The result:</p>\n<pre><code class=\"python\">Traceback (most recent call last):\n  File \"./passpersist.py\", line 12, in &lt;module&gt;\n    print \"foo\"\nValueError: I/O operation on closed file\n</code></pre>\n<p>I believe the problem is that it inherits from the file class, which actually isn't necessary. According to the documentation for sys.stdout:</p>\n<blockquote>\n<p>stdout and stderr needn\u2019t be built-in\nfile objects: any object is acceptable\nas long as it has a write() method\nthat takes a string argument.</p>\n</blockquote>\n<p>so changing</p>\n<pre><code class=\"python\">class flushfile(file):\n</code></pre>\n<p>to</p>\n<pre><code class=\"python\">class flushfile(object):\n</code></pre>\n<p>makes it work just fine.</p>\n", "abstract": "Dan's idea doesn't quite work: The result: I believe the problem is that it inherits from the file class, which actually isn't necessary. According to the documentation for sys.stdout: stdout and stderr needn\u2019t be built-in\nfile objects: any object is acceptable\nas long as it has a write() method\nthat takes a string argument. so changing to makes it work just fine."}, {"id": 6055744, "score": 12, "vote": 0, "content": "<p>Here is my version, which provides writelines() and fileno(), too:</p>\n<pre><code class=\"python\">class FlushFile(object):\n    def __init__(self, fd):\n        self.fd = fd\n\n    def write(self, x):\n        ret = self.fd.write(x)\n        self.fd.flush()\n        return ret\n\n    def writelines(self, lines):\n        ret = self.writelines(lines)\n        self.fd.flush()\n        return ret\n\n    def flush(self):\n        return self.fd.flush\n\n    def close(self):\n        return self.fd.close()\n\n    def fileno(self):\n        return self.fd.fileno()\n</code></pre>\n", "abstract": "Here is my version, which provides writelines() and fileno(), too:"}, {"id": 30682091, "score": 8, "vote": 0, "content": "<p>I did it like this in Python 3.4:</p>\n<pre><code class=\"python\">'''To write to screen in real-time'''\nmessage = lambda x: print(x, flush=True, end=\"\")\nmessage('I am flushing out now...')\n</code></pre>\n", "abstract": "I did it like this in Python 3.4:"}, {"id": 58741275, "score": 4, "vote": 0, "content": "<p>I first struggled to understand how the flush option was working. I wanted to do a 'loading display' and here is the solution I found:</p>\n<pre><code class=\"python\">for i in range(100000):\n    print('{:s}\\r'.format(''), end='', flush=True)\n    print('Loading index: {:d}/100000'.format(i+1), end='')\n</code></pre>\n<p>The first line flushes the previous print and the second line prints a new updated message. I don't know if an one-line syntax exists here.</p>\n", "abstract": "I first struggled to understand how the flush option was working. I wanted to do a 'loading display' and here is the solution I found: The first line flushes the previous print and the second line prints a new updated message. I don't know if an one-line syntax exists here."}]}, {"link": "https://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv", "question": {"id": "1534210", "title": "Use different Python version with virtualenv", "content": "<p>How do I create a virtual environment for a specified version of Python?</p>\n", "abstract": "How do I create a virtual environment for a specified version of Python?"}, "answers": [{"id": 1534343, "score": 1883, "vote": 0, "content": "<p><strong>NOTE:</strong> For <strong>Python 3.3+</strong>, see The Aelfinn's <a href=\"https://stackoverflow.com/a/39713544/1450294\">answer</a> below.</p>\n<hr/>\n<p>Use the <code>--python</code> (or short <code>-p</code>) option when creating a virtualenv instance to specify the Python executable you want to use, e.g.:</p>\n<pre><code class=\"python\">virtualenv --python=\"/usr/bin/python2.6\" \"/path/to/new/virtualenv/\"\n</code></pre>\n", "abstract": "NOTE: For Python 3.3+, see The Aelfinn's answer below. Use the --python (or short -p) option when creating a virtualenv instance to specify the Python executable you want to use, e.g.:"}, {"id": 39713544, "score": 495, "vote": 0, "content": "<p>Since Python 3, the <a href=\"https://docs.python.org/3/library/venv.html\" rel=\"noreferrer\" title=\"Python 3.6.4 documentation - Creation of virtual environments\">documentation</a> suggests creating the virtual environment using:</p>\n<pre><code class=\"python\">python3 -m venv \"my_env_name\"\n</code></pre>\n<p>Please note that <code>venv</code> does not permit creating virtual environments with other versions of Python. For that, install and use the <a href=\"https://pypi.python.org/pypi/virtualenv\" rel=\"noreferrer\"><code>virtualenv</code></a> package.</p>\n<hr/>\n<h3>Obsolete information</h3>\n<p>The <a href=\"https://docs.python.org/3/library/venv.html\" rel=\"noreferrer\" title=\"Python 3.6.4 documentation - Creation of virtual environments\"><code>pyvenv</code></a> script can be used to create a virtual environment:</p>\n<pre><code class=\"python\">pyvenv \"/path/to/new/virtual/environment\"\n</code></pre>\n<p><em>Deprecated since Python 3.6.</em></p>\n", "abstract": "Since Python 3, the documentation suggests creating the virtual environment using: Please note that venv does not permit creating virtual environments with other versions of Python. For that, install and use the virtualenv package. The pyvenv script can be used to create a virtual environment: Deprecated since Python 3.6."}, {"id": 11301911, "score": 214, "vote": 0, "content": "<p>These are the steps you can follow when you are on a shared hosting environment and need to install &amp; compile Python from source and then create <code>venv</code> from your Python version. For Python 2.7.9. you would do something along these lines:</p>\n<pre><code class=\"python\">mkdir ~/src\nwget http://www.python.org/ftp/python/2.7.9/Python-2.7.9.tgz\ntar -zxvf Python-2.7.9.tgz\ncd Python-2.7.9\nmkdir ~/.localpython\n./configure --prefix=$HOME/.localpython\nmake\nmake install\n</code></pre>\n<p><strong>virtual env</strong></p>\n<pre><code class=\"python\">cd ~/src\nwget https://pypi.python.org/packages/5c/79/5dae7494b9f5ed061cff9a8ab8d6e1f02db352f3facf907d9eb614fb80e9/virtualenv-15.0.2.tar.gz#md5=0ed59863994daf1292827ffdbba80a63\ntar -zxvf virtualenv-15.0.2.tar.gz\ncd virtualenv-15.0.2/\n~/.localpython/bin/python setup.py install\nvirtualenv ve -p $HOME/.localpython/bin/python2.7\nsource ve/bin/activate   \n</code></pre>\n<p>Naturally, this can be applicable to any situation where you want to replicate the exact environment you work and deploy on. </p>\n", "abstract": "These are the steps you can follow when you are on a shared hosting environment and need to install & compile Python from source and then create venv from your Python version. For Python 2.7.9. you would do something along these lines: virtual env Naturally, this can be applicable to any situation where you want to replicate the exact environment you work and deploy on. "}, {"id": 40359624, "score": 172, "vote": 0, "content": "<p>There is an easier way, </p>\n<pre><code class=\"python\">virtualenv venv --python=python2.7\n</code></pre>\n<p>Thanks to  a comment, this only works if you have python2.7 installed at the system level (e.g. /usr/bin/python2.7).</p>\n<p>Otherwise, if you are using homebrew you can use the path to give you what you want.</p>\n<pre><code class=\"python\">virtualenv venv --python=/usr/local/bin/python\n</code></pre>\n<p>You can find the path to your python installation with </p>\n<pre><code class=\"python\">which python\n</code></pre>\n<p>This will also work with python 3. </p>\n<pre><code class=\"python\">which python3\n&gt;&gt; /usr/local/bin/python3\nvirtualenv venv --python=/usr/local/bin/python3\n</code></pre>\n<p>Ultimately condensing to:</p>\n<pre><code class=\"python\">virtualenv venv -p `which python`\nvirtualenv venv -p `which python3`\n</code></pre>\n", "abstract": "There is an easier way,  Thanks to  a comment, this only works if you have python2.7 installed at the system level (e.g. /usr/bin/python2.7). Otherwise, if you are using homebrew you can use the path to give you what you want. You can find the path to your python installation with  This will also work with python 3.  Ultimately condensing to:"}, {"id": 1674444, "score": 113, "vote": 0, "content": "<pre><code class=\"python\">virtualenv --python=/usr/bin/python2.6 &lt;path/to/myvirtualenv&gt;\n</code></pre>\n", "abstract": ""}, {"id": 6892302, "score": 83, "vote": 0, "content": "<p>Under Windows for me this works:</p>\n<pre><code class=\"python\">virtualenv --python=c:\\Python25\\python.exe envname\n</code></pre>\n<p>without the <code>python.exe</code> I got <code>WindowsError: [Error 5] Access is denied</code> \nI have Python2.7.1 installed with virtualenv 1.6.1, and I wanted python 2.5.2.</p>\n", "abstract": "Under Windows for me this works: without the python.exe I got WindowsError: [Error 5] Access is denied \nI have Python2.7.1 installed with virtualenv 1.6.1, and I wanted python 2.5.2."}, {"id": 27972633, "score": 41, "vote": 0, "content": "<p>Mac OSX 10.6.8 (Snow Leopard):</p>\n<p>1) When you do <code>pip install virtualenv</code>, the pip command is associated with one of your python versions, and <code>virtualenv</code> gets installed into that version of python.  You can do</p>\n<pre><code class=\"python\"> $ which pip   \n</code></pre>\n<p>to see what version of python that is.  If you see something like:</p>\n<pre><code class=\"python\"> $ which pip\n /usr/local/bin/pip\n</code></pre>\n<p>then do:</p>\n<pre><code class=\"python\">$ ls -al /usr/local/bin/pip\nlrwxrwxr-x  1 root  admin  65 Apr 10  2015 /usr/local/bin/pip -&gt;\n../../../Library/Frameworks/Python.framework/Versions/2.7/bin/pip\n</code></pre>\n<p>You can see the python version in the output.</p>\n<p>By default, that will be the version of python that is used for any new environment you create. However, you can specify any version of python installed on your computer to use inside a new environment with the <code>-p flag</code>:  </p>\n<pre><code class=\"python\">$ virtualenv -p python3.2 my_env  \nRunning virtualenv with interpreter /usr/local/bin/python3.2  \nNew python executable in my_env/bin/python  \nInstalling setuptools, pip...done.  \n</code></pre>\n<blockquote>\n<p><code>virtualenv my_env</code> will create a folder in the current directory which\n  will contain the Python executable files, and a copy of the pip\n  [command] which you can use to install other packages.</p>\n</blockquote>\n<p><a href=\"http://docs.python-guide.org/en/latest/dev/virtualenvs/\" rel=\"noreferrer\">http://docs.python-guide.org/en/latest/dev/virtualenvs/</a></p>\n<p><code>virtualenv</code> just copies python from a location on your computer into the newly created my_env/bin/ directory. </p>\n<p>2) The system python is in <code>/usr/bin</code>, while the various python versions I installed were, by default, installed into:</p>\n<pre><code class=\"python\"> /usr/local/bin\n</code></pre>\n<p>3) The various pythons I installed have names like <code>python2.7</code> or <code>python3.2</code>, and I can use those names rather than full paths. </p>\n<h3>========VIRTUALENVWRAPPER=========</h3>\n<p>1) I had some problems getting virtualenvwrapper to work.  This is what I ended up putting in <code>~/.bash_profile</code>:  </p>\n<pre><code class=\"python\">export WORKON_HOME=$HOME/.virtualenvs\nexport PROJECT_HOME=$HOME/django_projects  #Not very important -- mkproject command uses this\n#Added the following based on: \n#http://stackoverflow.com/questions/19665327/virtualenvwrapper-installation-snow-leopard-python\nexport VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python2.7 \n#source /usr/local/bin/virtualenvwrapper.sh\nsource /Library/Frameworks/Python.framework/Versions/2.7/bin/virtualenvwrapper.sh\n</code></pre>\n<p>2) The <code>-p option</code> works differently with virtualenvwrapper: I have to specify the full path to the python interpreter to be used in the new environment(when I do not want to use the default python version):  </p>\n<pre><code class=\"python\">$ mkvirtualenv -p /usr/local/bin/python3.2 my_env\nRunning virtualenv with interpreter /usr/local/bin/python3\nNew python executable in my_env/bin/python\nInstalling setuptools, pip...done.\nUsage: source deactivate\n\nremoves the 'bin' directory of the environment activated with 'source\nactivate' from PATH. \n</code></pre>\n<p>Unlike virtualenv, virtualenvwrapper will create the environment at the location specified by the $WORKON_HOME environment variable.  That keeps all your environments in one place.</p>\n", "abstract": "Mac OSX 10.6.8 (Snow Leopard): 1) When you do pip install virtualenv, the pip command is associated with one of your python versions, and virtualenv gets installed into that version of python.  You can do to see what version of python that is.  If you see something like: then do: You can see the python version in the output. By default, that will be the version of python that is used for any new environment you create. However, you can specify any version of python installed on your computer to use inside a new environment with the -p flag:   virtualenv my_env will create a folder in the current directory which\n  will contain the Python executable files, and a copy of the pip\n  [command] which you can use to install other packages. http://docs.python-guide.org/en/latest/dev/virtualenvs/ virtualenv just copies python from a location on your computer into the newly created my_env/bin/ directory.  2) The system python is in /usr/bin, while the various python versions I installed were, by default, installed into: 3) The various pythons I installed have names like python2.7 or python3.2, and I can use those names rather than full paths.  1) I had some problems getting virtualenvwrapper to work.  This is what I ended up putting in ~/.bash_profile:   2) The -p option works differently with virtualenvwrapper: I have to specify the full path to the python interpreter to be used in the new environment(when I do not want to use the default python version):   Unlike virtualenv, virtualenvwrapper will create the environment at the location specified by the $WORKON_HOME environment variable.  That keeps all your environments in one place."}, {"id": 58964629, "score": 33, "vote": 0, "content": "<p>[November 2019]  I needed to install a Python 3.7 environment (env) on my Python 3.8-based Arch Linux system.  Python 3.7 was no longer on the system, so I could not downgrade Python, to install a package that I needed.</p>\n<p>Furthermore, I wanted to use that package / Python 3.7 inside a virtual environment (venv).  This is how I did it.</p>\n<hr/>\n<p><strong>Download Python version source files:</strong></p>\n<p>I downloaded the Python 3.7.4 source files from</p>\n<blockquote>\n<p><a href=\"https://www.python.org/downloads/source/\" rel=\"noreferrer\">https://www.python.org/downloads/source/</a></p>\n</blockquote>\n<p>to</p>\n<p><code>/mnt/Vancouver/apps/python_versions/src/Python-3.7.4.tgz</code></p>\n<p>I then extracted that archive (source files) to</p>\n<p><code>/mnt/Vancouver/apps/python_versions/src/Python-3.7.4/</code></p>\n<hr/>\n<p><strong>Installation:</strong></p>\n<p>[Note: in my system env, not a venv.]</p>\n<pre><code class=\"python\">cd /mnt/Vancouver/apps/python_versions/src/Python-3.7.4/\ntime ./configure                 ## 17 sec\ntime make                        ## 1 min 51 sec\ntime sudo make install           ## 18 sec\ntime make clean                  ## 0.3 sec\n</code></pre>\n<hr/>\n<p><strong>Examine installed Python versions:</strong></p>\n<pre><code class=\"python\">$ which python\n/usr/bin/python\n\n$ python --version\nPython 3.8.0\n\n$ which python3.7\n/usr/local/bin/python3.7\n\n$ python    ## Python 3.8 [system / env]\nPython 3.8.0 (default, Oct 23 2019, 18:51:26) \n[GCC 9.2.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt;\n\n$ python3.7    ## newly-installed Python 3.7 package\nPython 3.7.4 (default, Nov 20 2019, 11:36:53) \n[GCC 9.2.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import sys\n&gt;&gt;&gt; print(sys.version)\n3.7.4 (default, Nov 20 2019, 11:36:53) \n[GCC 9.2.0]\n&gt;&gt;&gt;\n\n$ python3.7 --version                                                                                                 \nPython 3.7.4\n</code></pre>\n<hr/>\n<p><strong>How to create a venv for a specific Python version:</strong></p>\n<blockquote>\n<p><a href=\"https://docs.python.org/3/tutorial/venv.html\" rel=\"noreferrer\">https://docs.python.org/3/tutorial/venv.html</a></p>\n<p>12.2. CREATING VIRTUAL ENVIRONMENTS</p>\n<p>The module used to create and manage virtual environments is called <code>venv</code>. <code>venv</code> will usually install the most recent version of Python that you have available. If you have multiple versions of Python on your system, you can select a specific Python version by running python3 or whichever version you want.</p>\n<p>To create a virtual environment, decide upon a directory where you want to place it, and run the venv module as a script with the directory path:</p>\n<blockquote>\n<p><code>python3 -m venv tutorial-env</code></p>\n</blockquote>\n<p>This will create the <code>tutorial-env</code> directory if it doesn\u2019t exist, and also create directories inside it containing a copy of the Python interpreter, the standard library, and various supporting files.\n    ...</p>\n</blockquote>\n<hr/>\n<p><strong>Create Python 3.7 venv [on a Python 3.8 operating env / system]:</strong></p>\n<pre><code class=\"python\">python3.7 -m venv ~/venv/py3.7      ## create Python 3.7-based venv\nsource ~/venv/py3.7/bin/activate    ## activate that venv\ndeactivate                          ## deactivate that venv (when done, there)\n</code></pre>\n<p>Added to <code>~/.bashrc</code>:</p>\n<pre><code class=\"python\">alias p37='echo \"   [Python 3.7 venv (source ~/venv/py3.7/bin/activate)]\" &amp;&amp; source ~/venv/py3.7/bin/activate'\n</code></pre>\n<hr/>\n<p><strong>Test Python 3.7 venv:</strong></p>\n<pre><code class=\"python\">$ p37                                                                                                                 \n[Python 3.7 venv (source ~/venv/py3.7/bin/activate)]\n\n(py3.7)$ python --version\nPython 3.7.4\n\n(py3.7)$ python\nPython 3.7.4 (default, Nov 20 2019, 11:36:53) \n[GCC 9.2.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import sys\n&gt;&gt;&gt; print(sys.version)\n3.7.4 (default, Nov 20 2019, 11:36:53) \n[GCC 9.2.0] \n&gt;&gt;&gt;\n</code></pre>\n", "abstract": "[November 2019]  I needed to install a Python 3.7 environment (env) on my Python 3.8-based Arch Linux system.  Python 3.7 was no longer on the system, so I could not downgrade Python, to install a package that I needed. Furthermore, I wanted to use that package / Python 3.7 inside a virtual environment (venv).  This is how I did it. Download Python version source files: I downloaded the Python 3.7.4 source files from https://www.python.org/downloads/source/ to /mnt/Vancouver/apps/python_versions/src/Python-3.7.4.tgz I then extracted that archive (source files) to /mnt/Vancouver/apps/python_versions/src/Python-3.7.4/ Installation: [Note: in my system env, not a venv.] Examine installed Python versions: How to create a venv for a specific Python version: https://docs.python.org/3/tutorial/venv.html 12.2. CREATING VIRTUAL ENVIRONMENTS The module used to create and manage virtual environments is called venv. venv will usually install the most recent version of Python that you have available. If you have multiple versions of Python on your system, you can select a specific Python version by running python3 or whichever version you want. To create a virtual environment, decide upon a directory where you want to place it, and run the venv module as a script with the directory path: python3 -m venv tutorial-env This will create the tutorial-env directory if it doesn\u2019t exist, and also create directories inside it containing a copy of the Python interpreter, the standard library, and various supporting files.\n    ... Create Python 3.7 venv [on a Python 3.8 operating env / system]: Added to ~/.bashrc: Test Python 3.7 venv:"}, {"id": 65818356, "score": 28, "vote": 0, "content": "<p>You should have that Python version installed. If you have it then basically,</p>\n<p>With virtualenv,</p>\n<pre><code class=\"python\">virtualenv --python=python3.8 env/place/you/want/to/save/to\n</code></pre>\n<p>with venv</p>\n<pre><code class=\"python\">python3.8 -m venv env/place/you/want/to/save/to\n</code></pre>\n<p>The above examples are for python3.8, you can change it to have different versions of virtual environments given that they are installed in your computer.</p>\n", "abstract": "You should have that Python version installed. If you have it then basically, With virtualenv, with venv The above examples are for python3.8, you can change it to have different versions of virtual environments given that they are installed in your computer."}, {"id": 20834097, "score": 27, "vote": 0, "content": "<p>Suppose you currently have python 2.7 installed in your virtualenv. But want to make use of <code>python3.2</code>, You would have to update this with:</p>\n<pre><code class=\"python\">$ virtualenv --python=/usr/bin/python3.2 name_of_your_virtualenv\n</code></pre>\n<p>Then activate your <em>virtualenv</em> by:</p>\n<pre><code class=\"python\">$ source activate name_of_your_virtualenv\n</code></pre>\n<p>and then do: <code>python --version</code> in shell to check whether your version is now updated.</p>\n", "abstract": "Suppose you currently have python 2.7 installed in your virtualenv. But want to make use of python3.2, You would have to update this with: Then activate your virtualenv by: and then do: python --version in shell to check whether your version is now updated."}, {"id": 51188487, "score": 23, "vote": 0, "content": "<p>These two commands should work fine.</p>\n<p><code>virtualenv -p python2 myenv</code>  (For python2)</p>\n<p><code>virtualenv -p python3 myenv</code>  (For python3)</p>\n", "abstract": "These two commands should work fine. virtualenv -p python2 myenv  (For python2) virtualenv -p python3 myenv  (For python3)"}, {"id": 34246092, "score": 18, "vote": 0, "content": "<p>You can call <code>virtualenv</code> with python version you want. For example:</p>\n<pre><code class=\"python\">python3 -m virtualenv venv\n</code></pre>\n<p>Or alternatively directly point to your virtualenv path. e.g. for windows:</p>\n<pre><code class=\"python\">c:\\Python34\\Scripts\\virtualenv.exe venv\n</code></pre>\n<p>And by running:</p>\n<pre><code class=\"python\">venv/bin/python\n\nPython 3.5.1 (v3.5.1:37a07cee5969, Dec  5 2015, 21:12:44) \n[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt;\n</code></pre>\n<p>you can see the python version installed in virtual environment</p>\n", "abstract": "You can call virtualenv with python version you want. For example: Or alternatively directly point to your virtualenv path. e.g. for windows: And by running: you can see the python version installed in virtual environment"}, {"id": 38797664, "score": 13, "vote": 0, "content": "<p>The <code>-p</code> approach works well, but you do have to remember to use it every time.  If your goal is to switch to a newer version of Python generally, that's a pain and can also lead to mistakes.</p>\n<p>Your other option is to set an environment variable that does the same thing as <code>-p</code>. Set this via your <code>~/.bashrc</code> file or wherever you manage environment variables for your login sessions:</p>\n<pre><code class=\"python\">export VIRTUALENV_PYTHON=/path/to/desired/version\n</code></pre>\n<p>Then <code>virtualenv</code> will use that any time you don't specify <code>-p</code> on the command line.</p>\n", "abstract": "The -p approach works well, but you do have to remember to use it every time.  If your goal is to switch to a newer version of Python generally, that's a pain and can also lead to mistakes. Your other option is to set an environment variable that does the same thing as -p. Set this via your ~/.bashrc file or wherever you manage environment variables for your login sessions: Then virtualenv will use that any time you don't specify -p on the command line."}, {"id": 32363907, "score": 10, "vote": 0, "content": "<p>On the mac I use pyenv and virtualenvwrapper. I had to create a new virtualenv. You need homebrew which I'll assume you've installed if you're on a mac, but just for fun:</p>\n<pre><code class=\"python\">ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n\nbrew install pyenv\npyenv install 2.7.10\npyenv global 2.7.10\nexport PATH=/Users/{USERNAME}/.pyenv/versions/2.7.10/bin:$PATH\nmkvirtualenv -p ~/.pyenv/versions/2.7.10/bin/python  {virtual_env_name}\n</code></pre>\n<p>I also froze my requirements first so i could simply reinstall in the new virtualenv with:</p>\n<pre><code class=\"python\">pip install -r requirements.txt\n</code></pre>\n", "abstract": "On the mac I use pyenv and virtualenvwrapper. I had to create a new virtualenv. You need homebrew which I'll assume you've installed if you're on a mac, but just for fun: I also froze my requirements first so i could simply reinstall in the new virtualenv with:"}, {"id": 39574443, "score": 8, "vote": 0, "content": "<p>Even easier, by using command substitution to find python2 for you:</p>\n<p><code>virtualenv -p $(which python2) &lt;path/to/new/virtualenv/&gt;</code></p>\n<p>Or when using virtualenvwrapper : </p>\n<p><code>mkvirtualenv -p $(which python2) &lt;env_name&gt;</code></p>\n", "abstract": "Even easier, by using command substitution to find python2 for you: virtualenv -p $(which python2) <path/to/new/virtualenv/> Or when using virtualenvwrapper :  mkvirtualenv -p $(which python2) <env_name>"}, {"id": 49991729, "score": 7, "vote": 0, "content": "<p>For Mac(High Sierra), install the virtualenv on python3 and create a virtualenv for python2:</p>\n<pre><code class=\"python\"> $ python3 -m pip install virtualenv\n $ python3 -m virtualenv --python=python2 vp27\n $ source vp27/bin/activate\n (vp27)$ python --version\n Python 2.7.14\n</code></pre>\n", "abstract": "For Mac(High Sierra), install the virtualenv on python3 and create a virtualenv for python2:"}, {"id": 61775880, "score": 7, "vote": 0, "content": "<p>As already mentioned in multiple answers, using <em>virtualenv</em> is a clean solution. However a small pitfall that everyone should be aware of is that if an alias for python is set in <em>bash_aliases</em> like:</p>\n<pre><code class=\"python\">python=python3.6\n</code></pre>\n<p>this alias will also be used inside the virtual environment. So in this scenario running <code>python -V</code> inside the virtual env will always output <code>3.6</code> regardless of what interpreter is used to create the environment: </p>\n<pre><code class=\"python\">virtualenv venv --python=pythonX.X\n</code></pre>\n", "abstract": "As already mentioned in multiple answers, using virtualenv is a clean solution. However a small pitfall that everyone should be aware of is that if an alias for python is set in bash_aliases like: this alias will also be used inside the virtual environment. So in this scenario running python -V inside the virtual env will always output 3.6 regardless of what interpreter is used to create the environment: "}, {"id": 60581465, "score": 6, "vote": 0, "content": "<p>These seem a little overcomplicated for Windows. If you're on Windows running python 3.3 or later, you can use the python launcher <code>py</code> to do this much more easily. Simply install the different python version, then run:</p>\n<pre><code class=\"python\">py -[my version] -m venv env\n</code></pre>\n<p>This will create a virtual environment called <code>env</code> in your current directory, using python <code>[my version]</code>. As an example:</p>\n<pre><code class=\"python\">py -3.7 -m venv env\n./env/Scripts/activate\n</code></pre>\n<p>This creates a virtual environment called <code>env</code> using python3.7 and activates it. No paths or other complex stuff required.</p>\n", "abstract": "These seem a little overcomplicated for Windows. If you're on Windows running python 3.3 or later, you can use the python launcher py to do this much more easily. Simply install the different python version, then run: This will create a virtual environment called env in your current directory, using python [my version]. As an example: This creates a virtual environment called env using python3.7 and activates it. No paths or other complex stuff required."}, {"id": 49888889, "score": 5, "vote": 0, "content": "<p>On windows:</p>\n<pre><code class=\"python\">py -3.4x32 -m venv venv34\n</code></pre>\n<p>or </p>\n<pre><code class=\"python\">py -2.6.2 -m venv venv26\n</code></pre>\n<p>This uses the <a href=\"https://docs.python.org/3/using/windows.html#launcher\" rel=\"noreferrer\"><code>py</code> launcher</a> which will find the right python executable for you (assuming you have it installed).</p>\n", "abstract": "On windows: or  This uses the py launcher which will find the right python executable for you (assuming you have it installed)."}, {"id": 67259741, "score": 5, "vote": 0, "content": "<p>I utilized this answer for Windows</p>\n<p><a href=\"https://stackoverflow.com/a/22793687/15435022\">https://stackoverflow.com/a/22793687/15435022</a></p>\n<pre><code class=\"python\">py -3.4 -m venv c:\\path\\to\\wherever\\you\\want\\it\n</code></pre>\n", "abstract": "I utilized this answer for Windows https://stackoverflow.com/a/22793687/15435022"}, {"id": 44200822, "score": 4, "vote": 0, "content": "<h2><strong>In windows subsystem for linux:</strong></h2>\n<ol>\n<li><p>Create environment for python3:</p>\n<pre><code class=\"python\">virtualenv --python=/usr/bin/python3 env\n</code></pre></li>\n<li><p>Activate it:</p>\n<pre><code class=\"python\">source env/bin/activate\n</code></pre></li>\n</ol>\n", "abstract": "Create environment for python3: Activate it:"}, {"id": 57528233, "score": 4, "vote": 0, "content": "<p>I use <a href=\"https://github.com/pyenv/pyenv\" rel=\"nofollow noreferrer\">pyenv</a> to manage my python version.</p>\n<pre class=\"lang-sh prettyprint-override\"><code class=\"python\">pyenv install 3.7.3\npyenv local 3.7.3\n</code></pre>\n<p>Check your python version:</p>\n<pre><code class=\"python\">$ python --version\nPython 3.7.3\n</code></pre>\n<p>Create the virtual environment with <a href=\"https://docs.python.org/3/library/venv.html\" rel=\"nofollow noreferrer\">venv</a>:</p>\n<pre class=\"lang-sh prettyprint-override\"><code class=\"python\">python -m venv .\n</code></pre>\n<p>Then activate the Virtual Environment:</p>\n<pre class=\"lang-sh prettyprint-override\"><code class=\"python\">source bin/activate\n</code></pre>\n<p>Check your python version:</p>\n<pre class=\"lang-sh prettyprint-override\"><code class=\"python\">$ python --version\nPython 3.7.3\n</code></pre>\n<p><em>You may need to remove the previous virtual environment</em></p>\n<pre><code class=\"python\">rm -rf bin\n</code></pre>\n", "abstract": "I use pyenv to manage my python version. Check your python version: Create the virtual environment with venv: Then activate the Virtual Environment: Check your python version: You may need to remove the previous virtual environment"}, {"id": 65090039, "score": 4, "vote": 0, "content": "<p>End of 2020:</p>\n<p>The most seamless experience for using virtualenv (added benefit: with any possible python version) would be to use pyenv and its (bundled) pyenv-virtualenv plugin (cf <a href=\"https://realpython.com/intro-to-pyenv/#virtual-environments-and-pyenv\" rel=\"nofollow noreferrer\">https://realpython.com/intro-to-pyenv/#virtual-environments-and-pyenv</a>)</p>\n<p>Usage: <code>pyenv virtualenv &lt;python_version&gt; &lt;environment_name&gt;</code></p>\n<p>Installation:</p>\n<ul>\n<li>first check that you've got all prerequisites (depending on your OS): <a href=\"https://github.com/pyenv/pyenv/wiki/Common-build-problems#prerequisites\" rel=\"nofollow noreferrer\">https://github.com/pyenv/pyenv/wiki/Common-build-problems#prerequisites</a></li>\n<li><code>curl https://pyenv.run | bash</code></li>\n<li><code>exec $SHELL</code></li>\n</ul>\n<p>cf <a href=\"https://github.com/pyenv/pyenv-installer\" rel=\"nofollow noreferrer\">https://github.com/pyenv/pyenv-installer</a></p>\n<p>That being said, nowadays the best possible alternative instead of using <code>virtualenv</code> (and <code>pip</code>) would be <a href=\"https://github.com/python-poetry/poetry\" rel=\"nofollow noreferrer\">Poetry</a> (along with <code>pyenv</code> indicated above, to handle different python versions).</p>\n<p>Another option, because it's supported directly by the PyPA (the org behind <code>pip</code> and the PyPI) and has restarted releasing since the end of May (didn't release since late 2018 prior to that...) would be <a href=\"https://github.com/pypa/pipenv\" rel=\"nofollow noreferrer\">Pipenv</a></p>\n", "abstract": "End of 2020: The most seamless experience for using virtualenv (added benefit: with any possible python version) would be to use pyenv and its (bundled) pyenv-virtualenv plugin (cf https://realpython.com/intro-to-pyenv/#virtual-environments-and-pyenv) Usage: pyenv virtualenv <python_version> <environment_name> Installation: cf https://github.com/pyenv/pyenv-installer That being said, nowadays the best possible alternative instead of using virtualenv (and pip) would be Poetry (along with pyenv indicated above, to handle different python versions). Another option, because it's supported directly by the PyPA (the org behind pip and the PyPI) and has restarted releasing since the end of May (didn't release since late 2018 prior to that...) would be Pipenv"}, {"id": 65386168, "score": 4, "vote": 0, "content": "<p>This worked for my usage in Windows 10, where I have Python 3.7 and want to downgrade for a project in Python 3.6.6:</p>\n<p>I used \"venv\" to create a new environment called \"venv\", I downloaded from <a href=\"https://www.python.org/downloads/windows/\" rel=\"nofollow noreferrer\">https://www.python.org/downloads/windows/</a> ; install \"Download Windows x86-64 executable installer-\" ; then I used the following command line in the directory where I want to create my environment</p>\n<p><code>&gt;C:\\Users\\...\\Python\\Python36\\python.exe -m venv venv</code></p>\n<p>Finally, I activated the environnent using the command line:</p>\n<p><code>&gt;venv\\Scripts\\activate.bat</code></p>\n<p>And check the python version by calling:</p>\n<p><code>&gt;python --version</code>\nPython 3.6.6</p>\n", "abstract": "This worked for my usage in Windows 10, where I have Python 3.7 and want to downgrade for a project in Python 3.6.6: I used \"venv\" to create a new environment called \"venv\", I downloaded from https://www.python.org/downloads/windows/ ; install \"Download Windows x86-64 executable installer-\" ; then I used the following command line in the directory where I want to create my environment >C:\\Users\\...\\Python\\Python36\\python.exe -m venv venv Finally, I activated the environnent using the command line: >venv\\Scripts\\activate.bat And check the python version by calling: >python --version\nPython 3.6.6"}, {"id": 68589112, "score": 4, "vote": 0, "content": "<p>On Linux Ubuntu 21.04 (currently Python 3.9.5) I needed to get a virtualenv of Python 3.7.8. Full steps to get working:</p>\n<p>Find the Python version source you want, for example 3.7.8 is here: <a href=\"https://www.python.org/downloads/release/python-378/\" rel=\"nofollow noreferrer\">https://www.python.org/downloads/release/python-378/</a></p>\n<p>Download the Gzipped source tarball</p>\n<p>Unzip it with <code>tar zxvf Python-3.7.8.tgz</code> (amend as required with your version number if different from 3.7.8)</p>\n<p>Copy the unzipped folder to /usr/bin with: <code>sudo cp -r Python-3.7.8 /usr/bin</code></p>\n<pre><code class=\"python\">cd /usr/bin/Python-3.7.8/\n</code></pre>\n<p>Check the contents if you wanted to see what you have so far:  <code>ls</code></p>\n<pre><code class=\"python\">sudo time ./configure\nsudo time make\ntime sudo make install\ntime make clean\n</code></pre>\n<p>Check how your python is set up and reporting:</p>\n<pre><code class=\"python\">which python\npython --version\n</code></pre>\n<p>Should be all relating to your primary install (Python 3.9.5 for me)</p>\n<p>To check your new install:</p>\n<pre><code class=\"python\">which python 3.7\npython3.7 --version\n</code></pre>\n<p>Should be all relating to your 3.7.8 install</p>\n<p>If you want to run it to check, do:</p>\n<pre><code class=\"python\">python3.7\nexit()\n</code></pre>\n<p>Install venv:</p>\n<pre><code class=\"python\">sudo apt install venv\n</code></pre>\n<p>To create a venv (maybe in your repo, if so, add .venv to .gitignore):</p>\n<pre><code class=\"python\">python3.7 -m venv .venv\n</code></pre>\n<p>To activate your venv:</p>\n<pre><code class=\"python\">source .venv/bin/activate\n</code></pre>\n<p>Check your version:</p>\n<pre><code class=\"python\">python --version\n</code></pre>\n", "abstract": "On Linux Ubuntu 21.04 (currently Python 3.9.5) I needed to get a virtualenv of Python 3.7.8. Full steps to get working: Find the Python version source you want, for example 3.7.8 is here: https://www.python.org/downloads/release/python-378/ Download the Gzipped source tarball Unzip it with tar zxvf Python-3.7.8.tgz (amend as required with your version number if different from 3.7.8) Copy the unzipped folder to /usr/bin with: sudo cp -r Python-3.7.8 /usr/bin Check the contents if you wanted to see what you have so far:  ls Check how your python is set up and reporting: Should be all relating to your primary install (Python 3.9.5 for me) To check your new install: Should be all relating to your 3.7.8 install If you want to run it to check, do: Install venv: To create a venv (maybe in your repo, if so, add .venv to .gitignore): To activate your venv: Check your version:"}, {"id": 47843832, "score": 3, "vote": 0, "content": "<p><strong>Yes</strong>, the above answers are correct and works fine on Unix based systems like <strong>Linux</strong> &amp; <strong>MAC OS X</strong>.</p>\n<p>I tried to create <strong>virtualenv</strong> for <strong>Python2</strong> &amp; <strong>Python3</strong> with the following commands.</p>\n<p>Here I have used <strong>venv2</strong> &amp; <strong>venv3</strong> as their names for <strong>Python2</strong> &amp; <strong>Python3</strong> respectively.</p>\n<blockquote>\n<p>Python2 \u00bb</p>\n</blockquote>\n<pre><code class=\"python\">MacBook-Pro-2:~ admin$ virtualenv venv2 --python=`which python2`\nRunning virtualenv with interpreter /usr/local/bin/python2\nNew python executable in /Users/admin/venv2/bin/python\nInstalling setuptools, pip, wheel...done.\nMacBook-Pro-2:~ admin$ \nMacBook-Pro-2:~ admin$ ls venv2/bin/\nactivate        easy_install        pip2.7          python2.7\nactivate.csh        easy_install-2.7    python          wheel\nactivate.fish       pip         python-config\nactivate_this.py    pip2            python2\nMacBook-Pro-2:~ admin$ \n</code></pre>\n<blockquote>\n<p>Python3 \u00bb</p>\n</blockquote>\n<pre><code class=\"python\">MacBook-Pro-2:~ admin$ virtualenv venv3 --python=`which python3`\nRunning virtualenv with interpreter /usr/local/bin/python3\nUsing base prefix '/Library/Frameworks/Python.framework/Versions/3.6'\nNew python executable in /Users/admin/venv3/bin/python3\nAlso creating executable in /Users/admin/venv3/bin/python\nInstalling setuptools, pip, wheel...done.\nMacBook-Pro-2:~ admin$ \nMacBook-Pro-2:~ admin$ ls venv3/bin/\nactivate        easy_install        pip3.6          python3.6\nactivate.csh        easy_install-3.6    python          wheel\nactivate.fish       pip         python-config\nactivate_this.py    pip3            python3\nMacBook-Pro-2:~ admin$ \n</code></pre>\n<blockquote>\n<p>Checking Python installation locations</p>\n</blockquote>\n<pre><code class=\"python\">MacBook-Pro-2:~ admin$ which python2\n/usr/local/bin/python2\nMacBook-Pro-2:~ admin$ \nMacBook-Pro-2:~ admin$ which python3\n/usr/local/bin/python3\nMacBook-Pro-2:~ admin$ \n</code></pre>\n", "abstract": "Yes, the above answers are correct and works fine on Unix based systems like Linux & MAC OS X. I tried to create virtualenv for Python2 & Python3 with the following commands. Here I have used venv2 & venv3 as their names for Python2 & Python3 respectively. Python2 \u00bb Python3 \u00bb Checking Python installation locations"}, {"id": 64846602, "score": 3, "vote": 0, "content": "<p>I use Windows so I should use <code>.exe</code> on the pthon path</p>\n<pre><code class=\"python\">virtualenv -p=C:\\Python27\\python2.exe &lt;envname&gt;\n</code></pre>\n", "abstract": "I use Windows so I should use .exe on the pthon path"}, {"id": 37607811, "score": 2, "vote": 0, "content": "<p><strong>It worked for me</strong></p>\n<pre><code class=\"python\">sudo apt-get install python3-minimal\n\nvirtualenv --no-site-packages --distribute -p /usr/bin/python3 ~/.virtualenvs/py3\n</code></pre>\n", "abstract": "It worked for me"}, {"id": 51150357, "score": 2, "vote": 0, "content": "<pre><code class=\"python\">virtualenv -p python3 myenv\n</code></pre>\n<p><a href=\"http://gist.github.com/Geoyi/d9fab4f609e9f75941946be45000632b\" rel=\"nofollow noreferrer\">Link to Creating virtualenv</a></p>\n", "abstract": "Link to Creating virtualenv"}, {"id": 55512212, "score": 2, "vote": 0, "content": "<p>This was a bug with virtualenv.\nJust upgrading your pip should be the fix.</p>\n<p><code>pip install --upgrade virtualenv</code></p>\n", "abstract": "This was a bug with virtualenv.\nJust upgrading your pip should be the fix. pip install --upgrade virtualenv"}, {"id": 54846534, "score": 1, "vote": 0, "content": "<p>For Debian (debian 9) Systems in 2019, I discovered a simple solution that may solve the problem from within the virtual environment.</p>\n<p>Suppose the virtual environment were created via:</p>\n<pre><code class=\"python\">python3.7 -m venv myenv\n</code></pre>\n<p>but only has versions of <code>python2</code> and <code>python2.7</code>, and you need the recent features of python3.7. </p>\n<p>Then, simply running the command:</p>\n<pre><code class=\"python\">(myvenv) $ python3.7 -m venv --upgrade /home/username/path/to/myvenv/\n</code></pre>\n<p>will add python3.7 packages if they are already available on your system.</p>\n", "abstract": "For Debian (debian 9) Systems in 2019, I discovered a simple solution that may solve the problem from within the virtual environment. Suppose the virtual environment were created via: but only has versions of python2 and python2.7, and you need the recent features of python3.7.  Then, simply running the command: will add python3.7 packages if they are already available on your system."}, {"id": 56665285, "score": 1, "vote": 0, "content": "<p>It worked for me on windows with python 2 installation :</p>\n<ol>\n<li>Step 1: Install python 3 version . </li>\n<li>Step 2: create a env folder for\n    the virtual environment.</li>\n<li>Step 3 : c:\\Python37\\python -m venv\n    c:\\path\\to\\env.</li>\n</ol>\n<p>This is how i created Python 3 virtual environment on my existing python 2 installation.</p>\n", "abstract": "It worked for me on windows with python 2 installation : This is how i created Python 3 virtual environment on my existing python 2 installation."}, {"id": 57087622, "score": 1, "vote": 0, "content": "<p>Yes you just need to install the other version of python, and define the location of your other version of python in your command like :</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>virtualenv /home/payroll/Documents/env -p /usr/bin/python3</p>\n</blockquote>\n</blockquote>\n</blockquote>\n", "abstract": "Yes you just need to install the other version of python, and define the location of your other version of python in your command like : virtualenv /home/payroll/Documents/env -p /usr/bin/python3"}, {"id": 57863346, "score": 1, "vote": 0, "content": "<p>Here is the stepbystep how to create the Virtual environment in Visual Studio Code folder:\nI used Powershell (Administrator mode):<br/>\n 1. I create a VSCode folder - \"D:\\Code_Python_VE\" where I want to create Virtual environment.<br/>\n 2.  Next I type the command - \"pip3 install virtualenv\". (D:\\Code_Python_VE&gt; pip3 install virtualenv) \n 3. D:\\Code_Python_VE&gt; python3 -m venv project_env<br/>\n 4. D:\\Code_Python_VE&gt;project_env\\Scripts\\activate.bat<br/>\n 5. D:\\Code_Python_VE&gt; ls - This will list a new directory \"project_env\".<br/>\n 6. D:\\Code_Python_VE&gt; code . This will start Visual Studio Code. Make sure the command is (code .).<br/>\n 7. Create launch.jason with following content:</p>\n<pre><code class=\"python\">{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"type\": \"python\",\n            \"request\": \"launch\",\n            \"name\": \"Python: Current File (Integrated Terminal 1)\",\n            \"program\": \"${file}\"\n        },\n        {\n            \"name\": \"Python: Current File (Integrated Terminal 2)\",\n            \"type\": \"python\",\n            \"request\": \"launch\",\n            \"program\": \"${file}\",\n            \"console\": \"integratedTerminal\"\n        }\n    ]\n}\n</code></pre>\n<p>(Please search how to go to Debug window and Add new Configuration in VS Code).  </p>\n<ol start=\"8\">\n<li>Press F1 in Visual studio code and the command pallet will open - Select Python Interpreter and select the virtual environment project_env. </li>\n<li>Add test.py file with one statement print(\"Hello World\").</li>\n<li>Run this program.</li>\n<li>In Visual studio Code terminal -<br/>\n(project_env) d:\\Code_Python_VE&gt;python -m pip install --upgrade<br/>\nI hope this helps.</li>\n</ol>\n", "abstract": "Here is the stepbystep how to create the Virtual environment in Visual Studio Code folder:\nI used Powershell (Administrator mode):\n 1. I create a VSCode folder - \"D:\\Code_Python_VE\" where I want to create Virtual environment.\n 2.  Next I type the command - \"pip3 install virtualenv\". (D:\\Code_Python_VE> pip3 install virtualenv) \n 3. D:\\Code_Python_VE> python3 -m venv project_env\n 4. D:\\Code_Python_VE>project_env\\Scripts\\activate.bat\n 5. D:\\Code_Python_VE> ls - This will list a new directory \"project_env\".\n 6. D:\\Code_Python_VE> code . This will start Visual Studio Code. Make sure the command is (code .).\n 7. Create launch.jason with following content: (Please search how to go to Debug window and Add new Configuration in VS Code).  "}, {"id": 58496773, "score": 1, "vote": 0, "content": "<p>UBUNTU 19.04 / Global Python 3.7.</p>\n<p>This worked for me, enabling a Python 3.8 environment using the recommended venv for python 3 development.</p>\n<p>Install 3.8 and 3.8 venv module:\n<code>$ sudo apt install python3.8 python3.8-venv</code><br/>\nplus any other modules you need</p>\n<p>Create your Virtual Env using the python version you want in that env</p>\n<pre><code class=\"python\">$ /usr/bin/python3.8 -m venv python38-env\n</code></pre>\n<p>switch into your virtual env</p>\n<pre><code class=\"python\">$ source python38-env/bin/activate\n\npython -V = python 3.8\n</code></pre>\n", "abstract": "UBUNTU 19.04 / Global Python 3.7. This worked for me, enabling a Python 3.8 environment using the recommended venv for python 3 development. Install 3.8 and 3.8 venv module:\n$ sudo apt install python3.8 python3.8-venv\nplus any other modules you need Create your Virtual Env using the python version you want in that env switch into your virtual env"}, {"id": 65076532, "score": 1, "vote": 0, "content": "<p>Surprised that no one has mentioned <code>conda</code> so far. I have found this is a lot more straightforward than the other methods mentioned here. Let's say I have python 3.9 and python 2.7 and a project I am working on was python 3.5.4, I could simply create the isolated virtual env for 3.5.4 with the conda command without downloading anything else.</p>\n<p>To see a list of available python versions first, use the command</p>\n<p><code>conda search \"^python$\"</code></p>\n<p>To create the virtual environment for python version x.y.z, use the command</p>\n<p><code>conda create -n yourenvname python=x.y.z</code></p>\n<p>Activate venv with</p>\n<p><code>conda activate yourenvname</code></p>\n<p>Deactivate with</p>\n<p><code>conda deactivate</code></p>\n<p>To delete the virtual environment when done, use the command</p>\n<p><code>conda remove -n yourenvname --all</code></p>\n", "abstract": "Surprised that no one has mentioned conda so far. I have found this is a lot more straightforward than the other methods mentioned here. Let's say I have python 3.9 and python 2.7 and a project I am working on was python 3.5.4, I could simply create the isolated virtual env for 3.5.4 with the conda command without downloading anything else. To see a list of available python versions first, use the command conda search \"^python$\" To create the virtual environment for python version x.y.z, use the command conda create -n yourenvname python=x.y.z Activate venv with conda activate yourenvname Deactivate with conda deactivate To delete the virtual environment when done, use the command conda remove -n yourenvname --all"}, {"id": 73547202, "score": 1, "vote": 0, "content": "<p>Answer to this question shouldn't be that complicated...</p>\n<p>TL,DR:</p>\n<p>install as many versions of python you prefer on your system and use:</p>\n<pre><code class=\"python\">/c/path/to/any/version/of/python -m venv my_venv\n</code></pre>\n<p>============================================</p>\n<p>I use venv to install virtual environments with</p>\n<pre><code class=\"python\">python -m venv &lt;where/to/and/name_of_venv&gt;\n</code></pre>\n<p>if you try <code>which python</code> you will see which python you are referring to, when saying \"python\". for example, for me it is:</p>\n<pre><code class=\"python\">which python\n</code></pre>\n<p>result:\n/c/Program Files/Python36/python</p>\n<p>So, now you have the answer!\nyou can install any version of python on your system and have multiple of them at the same time. So, for example I installed Python3.7 in this directory: \"C:\\Program Files\\Python37\".\nSo, instead of using 'python' now I specify which python by <code>/c/Program\\ Files/Python37/python</code>:</p>\n<pre><code class=\"python\"> /c/Program\\ Files/Python37/python -m venv my_venv\n</code></pre>\n<p>(don't forget to escape the space in the path)</p>\n<p>That's it!</p>\n", "abstract": "Answer to this question shouldn't be that complicated... TL,DR: install as many versions of python you prefer on your system and use: ============================================ I use venv to install virtual environments with if you try which python you will see which python you are referring to, when saying \"python\". for example, for me it is: result:\n/c/Program Files/Python36/python So, now you have the answer!\nyou can install any version of python on your system and have multiple of them at the same time. So, for example I installed Python3.7 in this directory: \"C:\\Program Files\\Python37\".\nSo, instead of using 'python' now I specify which python by /c/Program\\ Files/Python37/python: (don't forget to escape the space in the path) That's it!"}, {"id": 72853117, "score": 0, "vote": 0, "content": "<p>sudo add-apt-repository ppa:deadsnakes/ppa</p>\n<p>sudo apt update</p>\n<p>sudo apt install python_version (ex: sudo apt install python3.8)</p>\n<p>python_version -m venv env (ex: python3.8 -m venv env)</p>\n<p>. env/bin/activate</p>\n<p>This Above steps will solve your python version for env issue.</p>\n", "abstract": "sudo add-apt-repository ppa:deadsnakes/ppa sudo apt update sudo apt install python_version (ex: sudo apt install python3.8) python_version -m venv env (ex: python3.8 -m venv env) . env/bin/activate This Above steps will solve your python version for env issue."}]}, {"link": "https://stackoverflow.com/questions/678236/how-do-i-get-the-filename-without-the-extension-from-a-path-in-python", "question": {"id": "678236", "title": "How do I get the filename without the extension from a path in Python?", "content": "<p>How do I get the filename without the extension from a path in Python?</p>\n<pre><code class=\"python\">\"/path/to/some/file.txt\"  \u2192  \"file\"\n</code></pre>\n", "abstract": "How do I get the filename without the extension from a path in Python?"}, "answers": [{"id": 678242, "score": 1661, "vote": 0, "content": "<p>Getting the name of the file without the extension:</p>\n<pre><code class=\"python\">import os\nprint(os.path.splitext(\"/path/to/some/file.txt\")[0])\n</code></pre>\n<p>Prints:</p>\n<pre><code class=\"python\">/path/to/some/file\n</code></pre>\n<p><a href=\"https://docs.python.org/3/library/os.path.html#os.path.splitext\" rel=\"noreferrer\">Documentation for <code>os.path.splitext</code></a>.</p>\n<p><em>Important Note:</em> If the filename has multiple dots, only the extension after the last one is removed. For example:</p>\n<pre><code class=\"python\">import os\nprint(os.path.splitext(\"/path/to/some/file.txt.zip.asc\")[0])\n</code></pre>\n<p>Prints:</p>\n<pre><code class=\"python\">/path/to/some/file.txt.zip\n</code></pre>\n<p>See other answers below if you need to handle that case.</p>\n", "abstract": "Getting the name of the file without the extension: Prints: Documentation for os.path.splitext. Important Note: If the filename has multiple dots, only the extension after the last one is removed. For example: Prints: See other answers below if you need to handle that case."}, {"id": 47496703, "score": 1027, "vote": 0, "content": "<p>Use <a href=\"https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.stem\" rel=\"noreferrer\"><code>.stem</code></a> from <a href=\"https://docs.python.org/library/pathlib.html\" rel=\"noreferrer\"><code>pathlib</code></a> in Python 3.4+</p>\n<pre><code class=\"python\">from pathlib import Path\n\nPath('/root/dir/sub/file.ext').stem\n</code></pre>\n<p>will return</p>\n<pre><code class=\"python\">'file'\n</code></pre>\n<p>Note that if your file has multiple extensions <code>.stem</code> will only remove the last extension. For example, <code>Path('file.tar.gz').stem</code> will return <code>'file.tar'</code>.</p>\n", "abstract": "Use .stem from pathlib in Python 3.4+ will return Note that if your file has multiple extensions .stem will only remove the last extension. For example, Path('file.tar.gz').stem will return 'file.tar'."}, {"id": 678266, "score": 737, "vote": 0, "content": "<p>You can make your own with:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; import os\n&gt;&gt;&gt; base=os.path.basename('/root/dir/sub/file.ext')\n&gt;&gt;&gt; base\n'file.ext'\n&gt;&gt;&gt; os.path.splitext(base)\n('file', '.ext')\n&gt;&gt;&gt; os.path.splitext(base)[0]\n'file'\n</code></pre>\n<p>Important note: If there is more than one <code>.</code> in the filename, only the last one is removed. For example:</p>\n<pre><code class=\"python\">/root/dir/sub/file.ext.zip -&gt; file.ext\n\n/root/dir/sub/file.ext.tar.gz -&gt; file.ext.tar\n</code></pre>\n<p>See below for other answers that address that.</p>\n", "abstract": "You can make your own with: Important note: If there is more than one . in the filename, only the last one is removed. For example: See below for other answers that address that."}, {"id": 1228618, "score": 267, "vote": 0, "content": "<pre><code class=\"python\">&gt;&gt;&gt; print(os.path.splitext(os.path.basename(\"/path/to/file/hemanth.txt\"))[0])\nhemanth\n</code></pre>\n", "abstract": ""}, {"id": 45866399, "score": 107, "vote": 0, "content": "<p>In Python 3.4+ you can use the <a href=\"https://docs.python.org/library/pathlib.html#pathlib.PurePath.stem\" rel=\"noreferrer\"><code>pathlib</code></a> solution </p>\n<pre><code class=\"python\">from pathlib import Path\n\nprint(Path(your_path).resolve().stem)\n</code></pre>\n", "abstract": "In Python 3.4+ you can use the pathlib solution "}, {"id": 51475388, "score": 85, "vote": 0, "content": "<p><a href=\"https://docs.python.org/3/library/os.path.html\" rel=\"noreferrer\">https://docs.python.org/3/library/os.path.html</a></p>\n<p>In python 3 pathlib \"The pathlib module offers high-level path objects.\"\nso,</p>\n<pre><code class=\"python\">&gt;&gt;&gt; from pathlib import Path\n\n&gt;&gt;&gt; p = Path(\"/a/b/c.txt\")\n&gt;&gt;&gt; p.with_suffix('')\nWindowsPath('/a/b/c')\n&gt;&gt;&gt; p.stem\n'c'\n</code></pre>\n", "abstract": "https://docs.python.org/3/library/os.path.html In python 3 pathlib \"The pathlib module offers high-level path objects.\"\nso,"}, {"id": 19488791, "score": 32, "vote": 0, "content": "<p>If you want to keep the path to the file and just remove the extension</p>\n<pre><code class=\"python\">&gt;&gt;&gt; file = '/root/dir/sub.exten/file.data.1.2.dat'\n&gt;&gt;&gt; print ('.').join(file.split('.')[:-1])\n/root/dir/sub.exten/file.data.1.2\n</code></pre>\n", "abstract": "If you want to keep the path to the file and just remove the extension"}, {"id": 37760212, "score": 32, "vote": 0, "content": "<p>os.path.splitext() <strong>won't</strong> work if there are multiple dots in the extension.</p>\n<p>For example, images.tar.gz</p>\n<pre><code class=\"python\">&gt;&gt;&gt; import os\n&gt;&gt;&gt; file_path = '/home/dc/images.tar.gz'\n&gt;&gt;&gt; file_name = os.path.basename(file_path)\n&gt;&gt;&gt; print os.path.splitext(file_name)[0]\nimages.tar\n</code></pre>\n<p>You can just find the index of the first dot in the basename and then slice the basename to get just the filename without extension.</p>\n<pre><code class=\"python\">&gt;&gt;&gt; import os\n&gt;&gt;&gt; file_path = '/home/dc/images.tar.gz'\n&gt;&gt;&gt; file_name = os.path.basename(file_path)\n&gt;&gt;&gt; index_of_dot = file_name.index('.')\n&gt;&gt;&gt; file_name_without_extension = file_name[:index_of_dot]\n&gt;&gt;&gt; print file_name_without_extension\nimages\n</code></pre>\n", "abstract": "os.path.splitext() won't work if there are multiple dots in the extension. For example, images.tar.gz You can just find the index of the first dot in the basename and then slice the basename to get just the filename without extension."}, {"id": 44144136, "score": 31, "vote": 0, "content": "<p>As noted by @IceAdor in a comment to @user2902201's solution, <code>rsplit</code> is the simplest solution robust to multiple periods (by limiting the number of splits to <code>maxsplit</code> of just 1 (from the end of the string)).</p>\n<p>Here it is spelt out:</p>\n<pre><code class=\"python\">file = 'my.report.txt'\nprint file.rsplit('.', maxsplit=1)[0]\n</code></pre>\n<p>my.report</p>\n", "abstract": "As noted by @IceAdor in a comment to @user2902201's solution, rsplit is the simplest solution robust to multiple periods (by limiting the number of splits to maxsplit of just 1 (from the end of the string)). Here it is spelt out: my.report"}, {"id": 58151485, "score": 24, "vote": 0, "content": "<pre><code class=\"python\">import os\nfilename, file_extension =os.path.splitext(os.path.basename('/d1/d2/example.cs'))\n</code></pre>\n<ul>\n<li><p>filename is 'example'</p>\n</li>\n<li><p>file_extension is '.cs'</p>\n</li>\n</ul>\n<p>'</p>\n", "abstract": "filename is 'example' file_extension is '.cs' '"}, {"id": 49003523, "score": 21, "vote": 0, "content": "<p>Thought I would throw in a variation to the use of the <a href=\"https://docs.python.org/3/library/os.path.html#os.path.splitext\" rel=\"noreferrer\">os.path.splitext</a> without the need to use array indexing. </p>\n<p>The function always returns a <code>(root, ext)</code> pair so it is safe to use:</p>\n<p><code>root, ext = os.path.splitext(path)</code></p>\n<p>Example:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; import os\n&gt;&gt;&gt; path = 'my_text_file.txt'\n&gt;&gt;&gt; root, ext = os.path.splitext(path)\n&gt;&gt;&gt; root\n'my_text_file'\n&gt;&gt;&gt; ext\n'.txt'\n</code></pre>\n", "abstract": "Thought I would throw in a variation to the use of the os.path.splitext without the need to use array indexing.  The function always returns a (root, ext) pair so it is safe to use: root, ext = os.path.splitext(path) Example:"}, {"id": 678247, "score": 20, "vote": 0, "content": "<blockquote>\n<p>But even when I import os, I am not able to call it path.basename. Is it possible to call it as directly as basename?</p>\n</blockquote>\n<p><code>import os</code>, and then use <code>os.path.basename</code></p>\n<p><code>import</code>ing <code>os</code> doesn't mean you can use <code>os.foo</code> without referring to <code>os</code>.</p>\n", "abstract": "But even when I import os, I am not able to call it path.basename. Is it possible to call it as directly as basename? import os, and then use os.path.basename importing os doesn't mean you can use os.foo without referring to os."}, {"id": 66174934, "score": 17, "vote": 0, "content": "<h2>Answers using Pathlib for Several Scenarios</h2>\n<p>Using Pathlib, it is trivial to get the filename when there is just one extension (or none), but it can be awkward to handle the general case of multiple extensions.</p>\n<h3>Zero or One extension</h3>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">from pathlib import Path\n\npth = Path('./thefile.tar')\n\nfn = pth.stem\n\nprint(fn)      # thefile\n\n\n# Explanation:\n# the `stem` attribute returns only the base filename, stripping\n# any leading path if present, and strips the extension after\n# the last `.`, if present.\n\n\n# Further tests\n\neg_paths = ['thefile',\n            'thefile.tar',\n            './thefile',\n            './thefile.tar',\n            '../../thefile.tar',\n            '.././thefile.tar',\n            'rel/pa.th/to/thefile',\n            '/abs/path/to/thefile.tar']\n\nfor p in eg_paths:\n    print(Path(p).stem)  # prints thefile every time\n</code></pre>\n<h3>Two or fewer extensions</h3>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">from pathlib import Path\n\npth = Path('./thefile.tar.gz')\n\nfn = pth.with_suffix('').stem\n\nprint(fn)      # thefile\n\n\n# Explanation:\n# Using the `.with_suffix('')` trick returns a Path object after\n# stripping one extension, and then we can simply use `.stem`.\n\n\n# Further tests\n\neg_paths += ['./thefile.tar.gz',\n             '/abs/pa.th/to/thefile.tar.gz']\n\nfor p in eg_paths:\n    print(Path(p).with_suffix('').stem)  # prints thefile every time\n</code></pre>\n<h3>Any number of extensions (0, 1, or more)</h3>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">from pathlib import Path\n\npth = Path('./thefile.tar.gz.bz.7zip')\n\nfn = pth.name\nif len(pth.suffixes) &gt; 0:\n    s = pth.suffixes[0]\n    fn = fn.rsplit(s)[0]\n\n# or, equivalently\n\nfn = pth.name\nfor s in pth.suffixes:\n    fn = fn.rsplit(s)[0]\n    break\n\n# or simply run the full loop\n\nfn = pth.name\nfor _ in pth.suffixes:\n    fn = fn.rsplit('.')[0]\n\n# In any case:\n\nprint(fn)     # thefile\n\n\n# Explanation\n#\n# pth.name     -&gt; 'thefile.tar.gz.bz.7zip'\n# pth.suffixes -&gt; ['.tar', '.gz', '.bz', '.7zip']\n#\n# If there may be more than two extensions, we can test for\n# that case with an if statement, or simply attempt the loop\n# and break after rsplitting on the first extension instance.\n# Alternatively, we may even run the full loop and strip one \n# extension with every pass.\n\n\n# Further tests\n\neg_paths += ['./thefile.tar.gz.bz.7zip',\n             '/abs/pa.th/to/thefile.tar.gz.bz.7zip']\n\nfor p in eg_paths:\n    pth = Path(p)\n    fn = pth.name\n    for s in pth.suffixes:\n        fn = fn.rsplit(s)[0]\n        break\n\n    print(fn)  # prints thefile every time\n</code></pre>\n<h4><em>Special case in which the first extension is known</em></h4>\n<p>For instance, if the extension could be <code>.tar</code>, <code>.tar.gz</code>, <code>.tar.gz.bz</code>, etc; you can simply <code>rsplit</code> the known extension and take the first element:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">\npth = Path('foo/bar/baz.baz/thefile.tar.gz')\n\nfn = pth.name.rsplit('.tar')[0]\n\nprint(fn)      # thefile\n</code></pre>\n", "abstract": "Using Pathlib, it is trivial to get the filename when there is just one extension (or none), but it can be awkward to handle the general case of multiple extensions. For instance, if the extension could be .tar, .tar.gz, .tar.gz.bz, etc; you can simply rsplit the known extension and take the first element:"}, {"id": 56546373, "score": 14, "vote": 0, "content": "<p>The other methods don't remove multiple extensions. Some also have problems with filenames that don't have extensions. This snippet deals with both instances and works in both Python 2 and 3. It grabs the basename from the path, splits the value on dots, and returns the first one which is the initial part of the filename.</p>\n<pre><code class=\"python\">import os\n\ndef get_filename_without_extension(file_path):\n    file_basename = os.path.basename(file_path)\n    filename_without_extension = file_basename.split('.')[0]\n    return filename_without_extension\n</code></pre>\n<p>Here's a set of examples to run:</p>\n<pre><code class=\"python\">example_paths = [\n    \"FileName\", \n    \"./FileName\",\n    \"../../FileName\",\n    \"FileName.txt\", \n    \"./FileName.txt.zip.asc\",\n    \"/path/to/some/FileName\",\n    \"/path/to/some/FileName.txt\",\n    \"/path/to/some/FileName.txt.zip.asc\"\n]\n\nfor example_path in example_paths:\n    print(get_filename_without_extension(example_path))\n</code></pre>\n<p>In every case, the value printed is:</p>\n<pre><code class=\"python\">FileName\n</code></pre>\n", "abstract": "The other methods don't remove multiple extensions. Some also have problems with filenames that don't have extensions. This snippet deals with both instances and works in both Python 2 and 3. It grabs the basename from the path, splits the value on dots, and returns the first one which is the initial part of the filename. Here's a set of examples to run: In every case, the value printed is:"}, {"id": 46811091, "score": 7, "vote": 0, "content": "<p>A multiple extension aware procedure. Works for <code>str</code> and <code>unicode</code> paths. Works in Python 2 and 3.</p>\n<pre><code class=\"python\">import os\n\ndef file_base_name(file_name):\n    if '.' in file_name:\n        separator_index = file_name.index('.')\n        base_name = file_name[:separator_index]\n        return base_name\n    else:\n        return file_name\n\ndef path_base_name(path):\n    file_name = os.path.basename(path)\n    return file_base_name(file_name)\n</code></pre>\n<p>Behavior:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; path_base_name('file')\n'file'\n&gt;&gt;&gt; path_base_name(u'file')\nu'file'\n&gt;&gt;&gt; path_base_name('file.txt')\n'file'\n&gt;&gt;&gt; path_base_name(u'file.txt')\nu'file'\n&gt;&gt;&gt; path_base_name('file.tar.gz')\n'file'\n&gt;&gt;&gt; path_base_name('file.a.b.c.d.e.f.g')\n'file'\n&gt;&gt;&gt; path_base_name('relative/path/file.ext')\n'file'\n&gt;&gt;&gt; path_base_name('/absolute/path/file.ext')\n'file'\n&gt;&gt;&gt; path_base_name('Relative\\\\Windows\\\\Path\\\\file.txt')\n'file'\n&gt;&gt;&gt; path_base_name('C:\\\\Absolute\\\\Windows\\\\Path\\\\file.txt')\n'file'\n&gt;&gt;&gt; path_base_name('/path with spaces/file.ext')\n'file'\n&gt;&gt;&gt; path_base_name('C:\\\\Windows Path With Spaces\\\\file.txt')\n'file'\n&gt;&gt;&gt; path_base_name('some/path/file name with spaces.tar.gz.zip.rar.7z')\n'file name with spaces'\n</code></pre>\n", "abstract": "A multiple extension aware procedure. Works for str and unicode paths. Works in Python 2 and 3. Behavior:"}, {"id": 41580288, "score": 6, "vote": 0, "content": "<p><code>import os</code></p>\n<pre><code class=\"python\">filename = C:\\\\Users\\\\Public\\\\Videos\\\\Sample Videos\\\\wildlife.wmv\n</code></pre>\n<p>This returns the <code>filename</code> without the <code>extension</code>(C:\\Users\\Public\\Videos\\Sample Videos\\wildlife)</p>\n<pre><code class=\"python\">temp = os.path.splitext(filename)[0]  \n</code></pre>\n<p>Now you can get just the <code>filename</code> from the temp with</p>\n<pre><code class=\"python\">os.path.basename(temp)   #this returns just the filename (wildlife)\n</code></pre>\n", "abstract": "import os This returns the filename without the extension(C:\\Users\\Public\\Videos\\Sample Videos\\wildlife) Now you can get just the filename from the temp with"}, {"id": 61311471, "score": 6, "vote": 0, "content": "<p>Very very very simpely no other modules !!! </p>\n<pre><code class=\"python\">import os\np = r\"C:\\Users\\bilal\\Documents\\face Recognition python\\imgs\\northon.jpg\"\n\n# Get the filename only from the initial file path.\nfilename = os.path.basename(p)\n\n# Use splitext() to get filename and extension separately.\n(file, ext) = os.path.splitext(filename)\n\n# Print outcome.\nprint(\"Filename without extension =\", file)\nprint(\"Extension =\", ext)\n</code></pre>\n", "abstract": "Very very very simpely no other modules !!! "}, {"id": 30507881, "score": 5, "vote": 0, "content": "<pre><code class=\"python\">import os\npath = \"a/b/c/abc.txt\"\nprint os.path.splitext(os.path.basename(path))[0]\n</code></pre>\n", "abstract": ""}, {"id": 18310208, "score": 3, "vote": 0, "content": "<p>On Windows system I used drivername prefix as well, like:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; s = 'c:\\\\temp\\\\akarmi.txt'\n&gt;&gt;&gt; print(os.path.splitext(s)[0])\nc:\\temp\\akarmi\n</code></pre>\n<p>So because I do not need drive letter or directory name, I use:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; print(os.path.splitext(os.path.basename(s))[0])\nakarmi\n</code></pre>\n", "abstract": "On Windows system I used drivername prefix as well, like: So because I do not need drive letter or directory name, I use:"}, {"id": 67906387, "score": 3, "vote": 0, "content": "<p>Improving upon @spinup answer:</p>\n<pre><code class=\"python\">fn = pth.name\nfor s in pth.suffixes:\n    fn = fn.rsplit(s)[0]\n    break\n    \nprint(fn)      # thefile \n</code></pre>\n<p>This works for filenames without extension also</p>\n", "abstract": "Improving upon @spinup answer: This works for filenames without extension also"}, {"id": 68403693, "score": 3, "vote": 0, "content": "<p>I've read the answers, and I notice that there are many good solutions.\nSo, for those who are looking to get either (name or extension), here goes another solution, using the <a href=\"https://docs.python.org/3/library/os.html\" rel=\"nofollow noreferrer\">os module</a>, both methods support files with multiple extensions.</p>\n<pre><code class=\"python\">import os\n\ndef get_file_name(path):\n    if not os.path.isdir(path):\n        return os.path.splitext(os.path.basename(path))[0].split(\".\")[0]\n\n\ndef get_file_extension(path):\n    extensions = []\n    copy_path = path\n    while True:\n        copy_path, result = os.path.splitext(copy_path)\n        if result != '':\n            extensions.append(result)\n        else:\n            break\n    extensions.reverse()\n    return \"\".join(extensions)\n</code></pre>\n<p>Note: this solution on windows does not support file names with the \"\\\" character</p>\n", "abstract": "I've read the answers, and I notice that there are many good solutions.\nSo, for those who are looking to get either (name or extension), here goes another solution, using the os module, both methods support files with multiple extensions. Note: this solution on windows does not support file names with the \"\\\" character"}, {"id": 27873728, "score": 2, "vote": 0, "content": "<p>We could do some simple <code>split</code> / <code>pop</code> magic as seen here (<a href=\"https://stackoverflow.com/a/424006/1250044\">https://stackoverflow.com/a/424006/1250044</a>), to extract the filename (respecting the windows and POSIX differences).</p>\n<pre><code class=\"python\">def getFileNameWithoutExtension(path):\n  return path.split('\\\\').pop().split('/').pop().rsplit('.', 1)[0]\n\ngetFileNameWithoutExtension('/path/to/file-0.0.1.ext')\n# =&gt; file-0.0.1\n\ngetFileNameWithoutExtension('\\\\path\\\\to\\\\file-0.0.1.ext')\n# =&gt; file-0.0.1\n</code></pre>\n", "abstract": "We could do some simple split / pop magic as seen here (https://stackoverflow.com/a/424006/1250044), to extract the filename (respecting the windows and POSIX differences)."}, {"id": 39648242, "score": 2, "vote": 0, "content": "<p>For convenience, a simple function wrapping the two methods from <a href=\"https://docs.python.org/3/library/os.path.html\" rel=\"nofollow\"><code>os.path</code></a> :</p>\n<pre><code class=\"python\">def filename(path):\n  \"\"\"Return file name without extension from path.\n\n  See https://docs.python.org/3/library/os.path.html\n  \"\"\"\n  import os.path\n  b = os.path.split(path)[1]  # path, *filename*\n  f = os.path.splitext(b)[0]  # *file*, ext\n  #print(path, b, f)\n  return f\n</code></pre>\n<p>Tested with Python 3.5.</p>\n", "abstract": "For convenience, a simple function wrapping the two methods from os.path : Tested with Python 3.5."}, {"id": 44308848, "score": 2, "vote": 0, "content": "<pre><code class=\"python\">import os\nlist = []\ndef getFileName( path ):\nfor file in os.listdir(path):\n    #print file\n    try:\n        base=os.path.basename(file)\n        splitbase=os.path.splitext(base)\n        ext = os.path.splitext(base)[1]\n        if(ext):\n            list.append(base)\n        else:\n            newpath = path+\"/\"+file\n            #print path\n            getFileName(newpath)\n    except:\n        pass\nreturn list\n\ngetFileName(\"/home/weexcel-java3/Desktop/backup\")\nprint list\n</code></pre>\n", "abstract": ""}, {"id": 46901006, "score": 2, "vote": 0, "content": "<p>the easiest way to resolve this is to </p>\n<pre><code class=\"python\">import ntpath \nprint('Base name is ',ntpath.basename('/path/to/the/file/'))\n</code></pre>\n<p>this saves you time and computation cost.</p>\n", "abstract": "the easiest way to resolve this is to  this saves you time and computation cost."}, {"id": 62333755, "score": 2, "vote": 0, "content": "<p>I didn't look very hard but I didn't see anyone who used regex for this problem.</p>\n<p>I interpreted the question as \"given a path, return the basename without the extension.\"</p>\n<p>e.g.</p>\n<p><code>\"path/to/file.json\"</code> =&gt; <code>\"file\"</code></p>\n<p><code>\"path/to/my.file.json\"</code> =&gt; <code>\"my.file\"</code></p>\n<p>In Python 2.7, where we still live without <code>pathlib</code>...</p>\n<pre><code class=\"python\">def get_file_name_prefix(file_path):\n    basename = os.path.basename(file_path)\n\n    file_name_prefix_match = re.compile(r\"^(?P&lt;file_name_pre fix&gt;.*)\\..*$\").match(basename)\n\n    if file_name_prefix_match is None:\n        return file_name\n    else:\n        return file_name_prefix_match.group(\"file_name_prefix\")\n</code></pre>\n<pre><code class=\"python\">get_file_name_prefix(\"path/to/file.json\")\n&gt;&gt; file\n\nget_file_name_prefix(\"path/to/my.file.json\")\n&gt;&gt; my.file\n\nget_file_name_prefix(\"path/to/no_extension\")\n&gt;&gt; no_extension\n</code></pre>\n", "abstract": "I didn't look very hard but I didn't see anyone who used regex for this problem. I interpreted the question as \"given a path, return the basename without the extension.\" e.g. \"path/to/file.json\" => \"file\" \"path/to/my.file.json\" => \"my.file\" In Python 2.7, where we still live without pathlib..."}, {"id": 72767690, "score": 1, "vote": 0, "content": "<p>Using <code>pathlib.Path.stem</code> is the right way to go, but here is an ugly solution that is way more efficient than the pathlib based approach.</p>\n<p>You have a filepath whose fields are separated by a forward slash <code>/</code>, slashes cannot be present in filenames, so you split the filepath by <code>/</code>, the last field is the filename.</p>\n<p>The extension is always the last element of the list created by splitting the filename by dot <code>.</code>, so if you reverse the filename and split by dot once, the reverse of the second element is the file name without extension.</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">name = path.split('/')[-1][::-1].split('.', 1)[1][::-1]\n</code></pre>\n<p>Performance:</p>\n<pre><code class=\"python\">Python 3.9.10 (tags/v3.9.10:f2f3f53, Jan 17 2022, 15:14:21) [MSC v.1929 64 bit (AMD64)]\nType 'copyright', 'credits' or 'license' for more information\nIPython 7.28.0 -- An enhanced Interactive Python. Type '?' for help.\n\nIn [1]: from pathlib import Path\n\nIn [2]: file = 'D:/ffmpeg/ffmpeg.exe'\n\nIn [3]: Path(file).stem\nOut[3]: 'ffmpeg'\n\nIn [4]: file.split('/')[-1][::-1].split('.', 1)[1][::-1]\nOut[4]: 'ffmpeg'\n\nIn [5]: %timeit Path(file).stem\n6.15 \u00b5s \u00b1 433 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n\nIn [6]: %timeit file.split('/')[-1][::-1].split('.', 1)[1][::-1]\n671 ns \u00b1 37.8 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n\nIn [7]:\n</code></pre>\n", "abstract": "Using pathlib.Path.stem is the right way to go, but here is an ugly solution that is way more efficient than the pathlib based approach. You have a filepath whose fields are separated by a forward slash /, slashes cannot be present in filenames, so you split the filepath by /, the last field is the filename. The extension is always the last element of the list created by splitting the filename by dot ., so if you reverse the filename and split by dot once, the reverse of the second element is the file name without extension. Performance:"}, {"id": 70365408, "score": 0, "vote": 0, "content": "<p>What about the following?</p>\n<pre><code class=\"python\">import pathlib\nfilename = '/path/to/dir/stem.ext.tar.gz'\npathlib.Path(filename).name[:-len(''.join(pathlib.Path(filename).suffixes))]\n# -&gt; 'stem'\n</code></pre>\n<p>or this equivalent?</p>\n<pre><code class=\"python\">pathlib.Path(filename).name[:-sum(map(len, pathlib.Path(filename).suffixes))]\n</code></pre>\n", "abstract": "What about the following? or this equivalent?"}, {"id": 69632777, "score": -1, "vote": 0, "content": "<pre class=\"lang-py prettyprint-override\"><code class=\"python\"># use pathlib. the below works with compound filetypes and normal ones\nsource_file = 'spaces.tar.gz.zip.rar.7z'\nsource_path = pathlib.Path(source_file)\nsource_path.name.replace(''.join(source_path.suffixes), '')\n&gt;&gt;&gt; 'spaces'\n</code></pre>\n<p>despite the many working implementations described above I added this ^ as it uses pathlib only and works for compound filetypes and normal ones</p>\n", "abstract": "despite the many working implementations described above I added this ^ as it uses pathlib only and works for compound filetypes and normal ones"}]}, {"link": "https://stackoverflow.com/questions/2835559/why-cant-python-parse-this-json-data", "question": {"id": "2835559", "title": "Why can&#39;t Python parse this JSON data?", "content": "<p>I have this JSON in a file:</p>\n<pre class=\"lang-json prettyprint-override\"><code class=\"python\">{\n    \"maps\": [\n        {\n            \"id\": \"blabla\",\n            \"iscategorical\": \"0\"\n        },\n        {\n            \"id\": \"blabla\",\n            \"iscategorical\": \"0\"\n        }\n    ],\n    \"masks\": [\n        \"id\": \"valore\"\n    ],\n    \"om_points\": \"value\",\n    \"parameters\": [\n        \"id\": \"valore\"\n    ]\n}\n</code></pre>\n<p>I wrote this script to print all of the JSON data:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">import json\nfrom pprint import pprint\n\nwith open('data.json') as f:\n    data = json.load(f)\n\npprint(data)\n</code></pre>\n<p>This program raises an exception, though:</p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">Traceback (most recent call last):\n  File \"&lt;pyshell#1&gt;\", line 5, in &lt;module&gt;\n    data = json.load(f)\n  File \"/usr/lib/python3.5/json/__init__.py\", line 319, in loads\n    return _default_decoder.decode(s)\n  File \"/usr/lib/python3.5/json/decoder.py\", line 339, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/usr/lib/python3.5/json/decoder.py\", line 355, in raw_decode\n    obj, end = self.scan_once(s, idx)\njson.decoder.JSONDecodeError: Expecting ',' delimiter: line 13 column 13 (char 213)\n</code></pre>\n<p>How can I parse the JSON and extract its values?</p>\n", "abstract": "I have this JSON in a file: I wrote this script to print all of the JSON data: This program raises an exception, though: How can I parse the JSON and extract its values?"}, "answers": [{"id": 2835672, "score": 2194, "vote": 0, "content": "<p>Your data is not valid <a href=\"https://www.json.org/\" rel=\"nofollow noreferrer\">JSON</a> format. You have <code>[]</code> when you should have <code>{}</code> for the <code>\"masks\"</code> and <code>\"parameters\"</code> elements:</p>\n<ul>\n<li><code>[]</code> are for JSON arrays, which are called <code>list</code> in Python</li>\n<li><code>{}</code> are for JSON objects, which are called <code>dict</code> in Python</li>\n</ul>\n<p>Here's how your JSON file should look:</p>\n<pre class=\"lang-json prettyprint-override\"><code class=\"python\">{\n    \"maps\": [\n        {\n            \"id\": \"blabla\",\n            \"iscategorical\": \"0\"\n        },\n        {\n            \"id\": \"blabla\",\n            \"iscategorical\": \"0\"\n        }\n    ],\n    \"masks\": {\n        \"id\": \"valore\"\n    },\n    \"om_points\": \"value\",\n    \"parameters\": {\n        \"id\": \"valore\"\n    }\n}\n</code></pre>\n<p>Then you can use your code:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">import json\nfrom pprint import pprint\n\nwith open('data.json') as f:\n    data = json.load(f)\n\npprint(data)\n</code></pre>\n<p>With data, you can now also find values like so:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">data[\"maps\"][0][\"id\"]\ndata[\"masks\"][\"id\"]\ndata[\"om_points\"]\n</code></pre>\n<p>Try those out and see if it starts to make sense.</p>\n", "abstract": "Your data is not valid JSON format. You have [] when you should have {} for the \"masks\" and \"parameters\" elements: Here's how your JSON file should look: Then you can use your code: With data, you can now also find values like so: Try those out and see if it starts to make sense."}, {"id": 13633860, "score": 322, "vote": 0, "content": "<p>Your <code>data.json</code> should look like this:</p>\n<pre><code class=\"python\">{\n \"maps\":[\n         {\"id\":\"blabla\",\"iscategorical\":\"0\"},\n         {\"id\":\"blabla\",\"iscategorical\":\"0\"}\n        ],\n\"masks\":\n         {\"id\":\"valore\"},\n\"om_points\":\"value\",\n\"parameters\":\n         {\"id\":\"valore\"}\n}\n</code></pre>\n<p>Your code should be:</p>\n<pre><code class=\"python\">import json\nfrom pprint import pprint\n\nwith open('data.json') as data_file:    \n    data = json.load(data_file)\npprint(data)\n</code></pre>\n<p>Note that this only works in Python 2.6 and up, as it depends upon the <a href=\"http://docs.python.org/2/reference/compound_stmts.html#the-with-statement\" rel=\"noreferrer\"><code>with</code>-statement</a>. In Python 2.5 use <code>from __future__ import with_statement</code>, in Python &lt;= 2.4, see <a href=\"https://stackoverflow.com/a/2835672/906658\">Justin Peel's answer</a>, which this answer is based upon.</p>\n<p>You can now also access single values like this:</p>\n<pre><code class=\"python\">data[\"maps\"][0][\"id\"]  # will return 'blabla'\ndata[\"masks\"][\"id\"]    # will return 'valore'\ndata[\"om_points\"]      # will return 'value'\n</code></pre>\n", "abstract": "Your data.json should look like this: Your code should be: Note that this only works in Python 2.6 and up, as it depends upon the with-statement. In Python 2.5 use from __future__ import with_statement, in Python <= 2.4, see Justin Peel's answer, which this answer is based upon. You can now also access single values like this:"}, {"id": 47148770, "score": 5, "vote": 0, "content": "<p>Here you go with modified <code>data.json</code> file:</p>\n<pre class=\"lang-json prettyprint-override\"><code class=\"python\">{\n    \"maps\": [\n        {\n            \"id\": \"blabla\",\n            \"iscategorical\": \"0\"\n        },\n        {\n            \"id\": \"blabla\",\n            \"iscategorical\": \"0\"\n        }\n    ],\n    \"masks\": [{\n        \"id\": \"valore\"\n    }],\n    \"om_points\": \"value\",\n    \"parameters\": [{\n        \"id\": \"valore\"\n    }]\n}\n</code></pre>\n<p>You can call or print data on console by using below lines:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">import json\nfrom pprint import pprint\nwith open('data.json') as data_file:\n    data_item = json.load(data_file)\npprint(data_item)\n</code></pre>\n<p>Expected output for <code>print(data_item['parameters'][0]['id'])</code>:</p>\n<pre><code class=\"python\">{'maps': [{'id': 'blabla', 'iscategorical': '0'},\n          {'id': 'blabla', 'iscategorical': '0'}],\n 'masks': [{'id': 'valore'}],\n 'om_points': 'value',\n 'parameters': [{'id': 'valore'}]}\n</code></pre>\n<p>Expected output for <code>print(data_item['parameters'][0]['id'])</code>:</p>\n<pre><code class=\"python\">valore\n</code></pre>\n", "abstract": "Here you go with modified data.json file: You can call or print data on console by using below lines: Expected output for print(data_item['parameters'][0]['id']): Expected output for print(data_item['parameters'][0]['id']):"}]}, {"link": "https://stackoverflow.com/questions/1747817/create-a-dictionary-with-comprehension", "question": {"id": "1747817", "title": "Create a dictionary with comprehension", "content": "<p>Can I use list comprehension syntax to create a dictionary?</p>\n<p>For example, by iterating over pairs of keys and values:</p>\n<pre><code class=\"python\">d = {... for k, v in zip(keys, values)}\n</code></pre>\n", "abstract": "Can I use list comprehension syntax to create a dictionary? For example, by iterating over pairs of keys and values:"}, "answers": [{"id": 1747827, "score": 2230, "vote": 0, "content": "<p>Use a <a href=\"http://www.python.org/dev/peps/pep-0274/\" rel=\"noreferrer\">dict comprehension</a> (Python 2.7 and later):</p>\n<pre><code class=\"python\">{key: value for (key, value) in iterable}\n</code></pre>\n<hr/>\n<p>Alternatively for simpler cases or earlier version of Python, use the <a href=\"https://docs.python.org/3/library/stdtypes.html#typesmapping\" rel=\"noreferrer\"><code>dict</code></a> constructor, e.g.:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">pairs = [('a', 1), ('b', 2)]\ndict(pairs)                         #=&gt; {'a': 1, 'b': 2}\ndict([(k, v+1) for k, v in pairs])  #=&gt; {'a': 2, 'b': 3}\n</code></pre>\n<p>Given separate arrays of keys and values, use the <code>dict</code> constructor with <a href=\"https://docs.python.org/3/library/functions.html#zip\" rel=\"noreferrer\"><code>zip</code></a>:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">keys = ['a', 'b']\nvalues = [1, 2]\ndict(zip(keys, values))  #=&gt; {'a': 1, 'b': 2}\n</code></pre>\n<pre><code class=\"python\">2) \"zip'ped\" from two separate iterables of keys/vals\ndict(zip(list_of_keys, list_of_values))\n</code></pre>\n", "abstract": "Use a dict comprehension (Python 2.7 and later): Alternatively for simpler cases or earlier version of Python, use the dict constructor, e.g.: Given separate arrays of keys and values, use the dict constructor with zip:"}, {"id": 1747888, "score": 277, "vote": 0, "content": "<p>In Python 3 and Python 2.7+, dictionary comprehensions look like the below:</p>\n<pre><code class=\"python\">d = {k:v for k, v in iterable}\n</code></pre>\n<p>For Python 2.6 or earlier, see <a href=\"https://stackoverflow.com/a/1747827/119775\">fortran's answer</a>.</p>\n", "abstract": "In Python 3 and Python 2.7+, dictionary comprehensions look like the below: For Python 2.6 or earlier, see fortran's answer."}, {"id": 16863042, "score": 71, "vote": 0, "content": "<p>In fact, you don't even need to iterate over the iterable if it already comprehends some kind of mapping, the dict constructor doing it graciously for you:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; ts = [(1, 2), (3, 4), (5, 6)]\n&gt;&gt;&gt; dict(ts)\n{1: 2, 3: 4, 5: 6}\n&gt;&gt;&gt; gen = ((i, i+1) for i in range(1, 6, 2))\n&gt;&gt;&gt; gen\n&lt;generator object &lt;genexpr&gt; at 0xb7201c5c&gt;\n&gt;&gt;&gt; dict(gen)\n{1: 2, 3: 4, 5: 6}\n</code></pre>\n", "abstract": "In fact, you don't even need to iterate over the iterable if it already comprehends some kind of mapping, the dict constructor doing it graciously for you:"}, {"id": 41453030, "score": 48, "vote": 0, "content": "<blockquote>\n<h1>Create a dictionary with list comprehension in Python</h1>\n<p>I like the Python list comprehension syntax.</p>\n<p>Can it be used to create dictionaries too? For example, by iterating\nover pairs of keys and values:</p>\n<pre><code class=\"python\">mydict = {(k,v) for (k,v) in blah blah blah}\n</code></pre>\n</blockquote>\n<p>You're looking for the phrase \"dict comprehension\" - it's actually:</p>\n<pre><code class=\"python\">mydict = {k: v for k, v in iterable}\n</code></pre>\n<p>Assuming <code>blah blah blah</code> is an iterable of two-tuples - you're so close. Let's create some \"blahs\" like that:</p>\n<pre><code class=\"python\">blahs = [('blah0', 'blah'), ('blah1', 'blah'), ('blah2', 'blah'), ('blah3', 'blah')]\n</code></pre>\n<h2>Dict comprehension syntax:</h2>\n<p>Now the syntax here is the mapping part. What makes this a <code>dict</code> comprehension instead of a <code>set</code> comprehension (which is what your pseudo-code approximates) is the colon, <code>:</code> like below:</p>\n<pre><code class=\"python\">mydict = {k: v for k, v in blahs}\n</code></pre>\n<p>And we see that it worked, and should retain insertion order as-of Python 3.7:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; mydict\n{'blah0': 'blah', 'blah1': 'blah', 'blah2': 'blah', 'blah3': 'blah'}\n</code></pre>\n<p>In Python 2 and up to 3.6, order was not guaranteed:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; mydict\n{'blah0': 'blah', 'blah1': 'blah', 'blah3': 'blah', 'blah2': 'blah'}\n</code></pre>\n<h2>Adding a Filter:</h2>\n<p>All comprehensions feature a mapping component and a filtering component that you can provide with arbitrary expressions.</p>\n<p>So you can add a filter part to the end:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; mydict = {k: v for k, v in blahs if not int(k[-1]) % 2}\n&gt;&gt;&gt; mydict\n{'blah0': 'blah', 'blah2': 'blah'}\n</code></pre>\n<p>Here we are just testing for if the last character is divisible by 2 to filter out data before mapping the keys and values.</p>\n", "abstract": "I like the Python list comprehension syntax. Can it be used to create dictionaries too? For example, by iterating\nover pairs of keys and values: You're looking for the phrase \"dict comprehension\" - it's actually: Assuming blah blah blah is an iterable of two-tuples - you're so close. Let's create some \"blahs\" like that: Now the syntax here is the mapping part. What makes this a dict comprehension instead of a set comprehension (which is what your pseudo-code approximates) is the colon, : like below: And we see that it worked, and should retain insertion order as-of Python 3.7: In Python 2 and up to 3.6, order was not guaranteed: All comprehensions feature a mapping component and a filtering component that you can provide with arbitrary expressions. So you can add a filter part to the end: Here we are just testing for if the last character is divisible by 2 to filter out data before mapping the keys and values."}, {"id": 33005845, "score": 44, "vote": 0, "content": "<p>In Python 2.7, it goes like:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; list1, list2 = ['a', 'b', 'c'], [1,2,3]\n&gt;&gt;&gt; dict( zip( list1, list2))\n{'a': 1, 'c': 3, 'b': 2}\n</code></pre>\n<p><strong>Zip them</strong>!</p>\n", "abstract": "In Python 2.7, it goes like: Zip them!"}, {"id": 31069124, "score": 31, "vote": 0, "content": "<p><strong>Python version &gt;= 2.7, do the below:</strong></p>\n<pre><code class=\"python\">d = {i: True for i in [1,2,3]}\n</code></pre>\n<p><strong>Python version &lt; 2.7</strong><sub><sup>(RIP, 3 July 2010 - 31 December 2019)</sup></sub><strong>, do the below:</strong></p>\n<pre><code class=\"python\">d = dict((i,True) for i in [1,2,3])\n</code></pre>\n", "abstract": "Python version >= 2.7, do the below: Python version < 2.7(RIP, 3 July 2010 - 31 December 2019), do the below:"}, {"id": 34802311, "score": 26, "vote": 0, "content": "<p>To add onto @fortran's answer, if you want to iterate over a list of keys <code>key_list</code> as well as a list of values <code>value_list</code>:</p>\n<pre><code class=\"python\">d = dict((key, value) for (key, value) in zip(key_list, value_list))\n</code></pre>\n<p>or</p>\n<pre><code class=\"python\">d = {(key, value) for (key, value) in zip(key_list, value_list)}\n</code></pre>\n", "abstract": "To add onto @fortran's answer, if you want to iterate over a list of keys key_list as well as a list of values value_list: or"}, {"id": 50547996, "score": 7, "vote": 0, "content": "<p>Just to throw in another example. Imagine you have the following list:</p>\n<pre><code class=\"python\">nums = [4,2,2,1,3]\n</code></pre>\n<p>and you want to turn it into a dict where the key is the index and value is the element in the list. You can do so with the following line of code:</p>\n<pre><code class=\"python\">{index:nums[index] for index in range(0,len(nums))}\n</code></pre>\n", "abstract": "Just to throw in another example. Imagine you have the following list: and you want to turn it into a dict where the key is the index and value is the element in the list. You can do so with the following line of code:"}, {"id": 46923579, "score": 6, "vote": 0, "content": "<p>Here is another example of dictionary creation using dict comprehension:</p>\n<p>What i am tring to do here is to create a alphabet dictionary where each pair; is the english letter and its corresponding position in english alphabet</p>\n<pre><code class=\"python\">&gt;&gt;&gt; import string\n&gt;&gt;&gt; dict1 = {value: (int(key) + 1) for key, value in \nenumerate(list(string.ascii_lowercase))}\n&gt;&gt;&gt; dict1\n{'a': 1, 'c': 3, 'b': 2, 'e': 5, 'd': 4, 'g': 7, 'f': 6, 'i': 9, 'h': 8, \n'k': 11, 'j': 10, 'm': 13, 'l': 12, 'o': 15, 'n': 14, 'q': 17, 'p': 16, 's': \n19, 'r': 18, 'u': 21, 't': 20, 'w': 23, 'v': 22, 'y': 25, 'x': 24, 'z': 26}\n&gt;&gt;&gt; \n</code></pre>\n<p>Notice the use of enumerate here to get a list of alphabets and their indexes in the list and swapping the alphabets and indices to generate the key value pair for dictionary</p>\n<p>Hope it gives a good idea of dictionary comp to you and encourages you to use it more often to make your code compact</p>\n", "abstract": "Here is another example of dictionary creation using dict comprehension: What i am tring to do here is to create a alphabet dictionary where each pair; is the english letter and its corresponding position in english alphabet Notice the use of enumerate here to get a list of alphabets and their indexes in the list and swapping the alphabets and indices to generate the key value pair for dictionary Hope it gives a good idea of dictionary comp to you and encourages you to use it more often to make your code compact"}, {"id": 55752442, "score": 6, "vote": 0, "content": "<p>This code will create dictionary using list comprehension for multiple lists with different values that can be used for <code>pd.DataFrame()</code></p>\n<pre><code class=\"python\">#Multiple lists \nmodel=['A', 'B', 'C', 'D']\nlaunched=[1983,1984,1984,1984]\ndiscontinued=[1986, 1985, 1984, 1986]\n\n#Dictionary with list comprehension\nkeys=['model','launched','discontinued']\nvals=[model, launched,discontinued]\ndata = {key:vals[n] for n, key in enumerate(keys)}\n\n#Convert dict to dataframe\ndf=pd.DataFrame(data)\ndisplay(df)\n</code></pre>\n<p><code>enumerate</code> will pass <code>n</code> to <code>vals</code> to match each <code>key</code> with its list</p>\n", "abstract": "This code will create dictionary using list comprehension for multiple lists with different values that can be used for pd.DataFrame() enumerate will pass n to vals to match each key with its list"}, {"id": 35179457, "score": 5, "vote": 0, "content": "<p>Try this,</p>\n<pre><code class=\"python\">def get_dic_from_two_lists(keys, values):\n    return { keys[i] : values[i] for i in range(len(keys)) }\n</code></pre>\n<p>Assume we have two lists <strong>country</strong> and <strong>capital</strong></p>\n<pre><code class=\"python\">country = ['India', 'Pakistan', 'China']\ncapital = ['New Delhi', 'Islamabad', 'Beijing']\n</code></pre>\n<p>Then create dictionary from the two lists:</p>\n<pre><code class=\"python\">print get_dic_from_two_lists(country, capital)\n</code></pre>\n<p>The output is like this,</p>\n<pre><code class=\"python\">{'Pakistan': 'Islamabad', 'China': 'Beijing', 'India': 'New Delhi'}\n</code></pre>\n", "abstract": "Try this, Assume we have two lists country and capital Then create dictionary from the two lists: The output is like this,"}, {"id": 70369710, "score": 3, "vote": 0, "content": "<p>Adding to @Ekhtiar <a href=\"https://stackoverflow.com/a/50547996/11671779\">answer</a>, if you want to make look up <code>dict</code> from <code>list</code>, you can use this:</p>\n<pre><code class=\"python\">names = ['a', 'b', 'd', 'f', 'c']\nnames_to_id = {v:k for k, v in enumerate(names)}\n# {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'f': 4}\n</code></pre>\n<p>Or in rare case that you want to filter duplicate, use <code>set</code> first (best in list of number):</p>\n<pre><code class=\"python\">names = ['a', 'b', 'd', 'f', 'd', 'c']\nsorted_list = list(set(names))\nsorted_list.sort()\nnames_to_id = {v:k for k, v in enumerate(sorted_list)}\n# {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'f': 4}\n\nnames = [1,2,5,5,6,2,1]\nnames_to_id = {v:k for k, v in enumerate(set(names))}\n# {1: 0, 2: 1, 5: 2, 6: 3}\n</code></pre>\n", "abstract": "Adding to @Ekhtiar answer, if you want to make look up dict from list, you can use this: Or in rare case that you want to filter duplicate, use set first (best in list of number):"}, {"id": 53466213, "score": 2, "vote": 0, "content": "<pre><code class=\"python\">&gt;&gt;&gt; {k: v**3 for (k, v) in zip(string.ascii_lowercase, range(26))}\n</code></pre>\n<p>Python supports dict comprehensions, which allow you to express the creation of dictionaries at runtime using a similarly concise syntax.</p>\n<p>A dictionary comprehension takes the form {key: value for (key, value) in iterable}. This syntax was introduced in Python 3 and backported as far as Python 2.7, so you should be able to use it regardless of which version of Python you have installed.</p>\n<p>A canonical example is taking two lists and creating a dictionary where the item at each position in the first list becomes a key and the item at the corresponding position in the second list becomes the value.</p>\n<p>The zip function used inside this comprehension returns an iterator of tuples, where each element in the tuple is taken from the same position in each of the input iterables. In the example above, the returned iterator contains the tuples (\u201ca\u201d, 1), (\u201cb\u201d, 2), etc.</p>\n<p>Output:</p>\n<pre><code class=\"python\">{'i': 512, 'e': 64, 'o': 2744, 'h': 343, 'l': 1331, 's': 5832, 'b': 1, 'w': 10648, 'c': 8, 'x': 12167, 'y': 13824, 't': 6859, 'p': 3375, 'd': 27, 'j': 729, 'a': 0, 'z': 15625, 'f': 125, 'q': 4096, 'u': 8000, 'n': 2197, 'm': 1728, 'r': 4913, 'k': 1000, 'g': 216, 'v': 9261}\n</code></pre>\n", "abstract": "Python supports dict comprehensions, which allow you to express the creation of dictionaries at runtime using a similarly concise syntax. A dictionary comprehension takes the form {key: value for (key, value) in iterable}. This syntax was introduced in Python 3 and backported as far as Python 2.7, so you should be able to use it regardless of which version of Python you have installed. A canonical example is taking two lists and creating a dictionary where the item at each position in the first list becomes a key and the item at the corresponding position in the second list becomes the value. The zip function used inside this comprehension returns an iterator of tuples, where each element in the tuple is taken from the same position in each of the input iterables. In the example above, the returned iterator contains the tuples (\u201ca\u201d, 1), (\u201cb\u201d, 2), etc. Output:"}, {"id": 63596821, "score": 1, "vote": 0, "content": "<p>Yes, it's possible. In python, Comprehension can be used in List, Set, Dictionary, etc.\nYou can write it this way</p>\n<pre><code class=\"python\">mydict = {k:v for (k,v) in blah}\n</code></pre>\n<p>Another detailed example of Dictionary Comprehension with the Conditional Statement and Loop:</p>\n<pre><code class=\"python\">parents = [father, mother]\n            \nparents = {parent:1 - P[\"mutation\"] if parent in two_genes else 0.5 if parent in one_gene else P[\"mutation\"] for parent in parents}\n</code></pre>\n", "abstract": "Yes, it's possible. In python, Comprehension can be used in List, Set, Dictionary, etc.\nYou can write it this way Another detailed example of Dictionary Comprehension with the Conditional Statement and Loop:"}, {"id": 59122336, "score": 0, "vote": 0, "content": "<p>You can create a new dict for each pair and merge it with the previous dict:</p>\n<pre><code class=\"python\">reduce(lambda p, q: {**p, **{q[0]: q[1]}}, bla bla bla, {})\n</code></pre>\n<p>Obviously this approaches requires <code>reduce</code> from <code>functools</code>.</p>\n", "abstract": "You can create a new dict for each pair and merge it with the previous dict: Obviously this approaches requires reduce from functools."}, {"id": 69693596, "score": 0, "vote": 0, "content": "<p>Assuming blah blah blah is a two-tuples list:</p>\n<p>Let's see two methods:</p>\n<pre><code class=\"python\"># method 1\n&gt;&gt;&gt; lst = [('a', 2), ('b', 4), ('c', 6)]\n&gt;&gt;&gt; dict(lst)\n{'a': 2, 'b': 4, 'c': 6}\n</code></pre>\n<pre><code class=\"python\"># method 2\n&gt;&gt;&gt; lst = [('a', 2), ('b', 4), ('c', 6)]\n&gt;&gt;&gt; d = {k:v for k, v in lst}\n&gt;&gt;&gt; d\n{'a': 2, 'b': 4, 'c': 6}\n</code></pre>\n", "abstract": "Assuming blah blah blah is a two-tuples list: Let's see two methods:"}, {"id": 71069762, "score": 0, "vote": 0, "content": "<p>this approach uses iteration over the given date using a for loop.</p>\n<pre><code class=\"python\">Syntax: {key: value for (key, value) in data}\n</code></pre>\n<p>Eg:</p>\n<pre><code class=\"python\"># create a list comprehension with country and code:\n    Country_code = [('China', 86), ('USA', 1),\n            ('Ghana', 233), ('Uk', 44)]\n\n# use iterable method to show results\n{key: value for (key, value) in Country_code}\n</code></pre>\n", "abstract": "this approach uses iteration over the given date using a for loop. Eg:"}]}, {"link": "https://stackoverflow.com/questions/44834/what-does-all-mean-in-python", "question": {"id": "44834", "title": "What does __all__ mean in Python?", "content": "<p>I see <code>__all__</code> in <code>__init__.py</code> files. What does it do?</p>\n", "abstract": "I see __all__ in __init__.py files. What does it do?"}, "answers": [{"id": 64130, "score": 1342, "vote": 0, "content": "<p>Linked to, but not explicitly mentioned here, is exactly when <code>__all__</code> is used. It is a list of strings defining what symbols in a module will be exported when <code>from &lt;module&gt; import *</code> is used on the module.</p>\n<p>For example, the following code in a <code>foo.py</code> explicitly exports the symbols <code>bar</code> and <code>baz</code>:</p>\n<pre><code class=\"python\">__all__ = ['bar', 'baz']\n\nwaz = 5\nbar = 10\ndef baz(): return 'baz'\n</code></pre>\n<p>These symbols can then be imported like so:</p>\n<pre><code class=\"python\">from foo import *\n\nprint(bar)\nprint(baz)\n\n# The following will trigger an exception, as \"waz\" is not exported by the module\nprint(waz)\n</code></pre>\n<p>If the <code>__all__</code> above is commented out, this code will then execute to completion, as the default behaviour of <code>import *</code> is to import all symbols that do not begin with an underscore, from the given namespace.</p>\n<p>Reference: <a href=\"https://docs.python.org/tutorial/modules.html#importing-from-a-package\" rel=\"noreferrer\">https://docs.python.org/tutorial/modules.html#importing-from-a-package</a></p>\n<p><strong>NOTE:</strong> <code>__all__</code> affects the <code>from &lt;module&gt; import *</code> behavior only. Members that are not mentioned in <code>__all__</code> are still accessible from outside the module and can be imported with <code>from &lt;module&gt; import &lt;member&gt;</code>.</p>\n", "abstract": "Linked to, but not explicitly mentioned here, is exactly when __all__ is used. It is a list of strings defining what symbols in a module will be exported when from <module> import * is used on the module. For example, the following code in a foo.py explicitly exports the symbols bar and baz: These symbols can then be imported like so: If the __all__ above is commented out, this code will then execute to completion, as the default behaviour of import * is to import all symbols that do not begin with an underscore, from the given namespace. Reference: https://docs.python.org/tutorial/modules.html#importing-from-a-package NOTE: __all__ affects the from <module> import * behavior only. Members that are not mentioned in __all__ are still accessible from outside the module and can be imported with from <module> import <member>."}, {"id": 44842, "score": 816, "vote": 0, "content": "<p>It's a list of public objects of that module, as interpreted by <code>import *</code>. It overrides the default of hiding everything that begins with an underscore.</p>\n", "abstract": "It's a list of public objects of that module, as interpreted by import *. It overrides the default of hiding everything that begins with an underscore."}, {"id": 35710527, "score": 498, "vote": 0, "content": "<blockquote>\n<p><strong>Explain <strong>all</strong> in Python?</strong></p>\n<p>I keep seeing the variable <code>__all__</code> set in different <code>__init__.py</code> files.</p>\n<p>What does this do?</p>\n</blockquote>\n<h2>What does <code>__all__</code> do?</h2>\n<p>It declares the semantically \"public\" names from a module. If there is a name in <code>__all__</code>, users are expected to use it, and they can have the expectation that it will not change.</p>\n<p>It also will have programmatic effects:</p>\n<h3><code>import *</code></h3>\n<p><code>__all__</code> in a module, e.g. <code>module.py</code>:</p>\n<pre><code class=\"python\">__all__ = ['foo', 'Bar']\n</code></pre>\n<p>means that when you <code>import *</code> from the module, only those names in the <code>__all__</code> are imported:</p>\n<pre><code class=\"python\">from module import *               # imports foo and Bar\n</code></pre>\n<h3>Documentation tools</h3>\n<p>Documentation and code autocompletion tools may (in fact, should) also inspect the <code>__all__</code> to determine what names to show as available from a module.</p>\n<h2><code>__init__.py</code> makes a directory a Python package</h2>\n<p>From the <a href=\"https://docs.python.org/tutorial/modules.html#packages\" rel=\"noreferrer\">docs</a>:</p>\n<blockquote>\n<p>The <code>__init__.py</code> files are required to make Python treat the directories as containing packages; this is done to prevent directories with a common name, such as string, from unintentionally hiding valid modules that occur later on the module search path.</p>\n</blockquote>\n<blockquote>\n<p>In the simplest case, <code>__init__.py</code> can just be an empty file, but it can also execute initialization code for the package or set the <code>__all__</code> variable.</p>\n</blockquote>\n<p>So the <code>__init__.py</code> can declare the <code>__all__</code> for a <em>package</em>.</p>\n<h1>Managing an API:</h1>\n<p>A package is typically made up of modules that may import one another, but that are necessarily tied together with an <code>__init__.py</code> file. That file is what makes the directory an actual Python package. For example, say you have the following files in a package:</p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">package\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 module_1.py\n\u2514\u2500\u2500 module_2.py\n</code></pre>\n<p>Let's create these files with Python so you can follow along - you could paste the following into a Python 3 shell:</p>\n<pre><code class=\"python\">from pathlib import Path\n\npackage = Path('package')\npackage.mkdir()\n\n(package / '__init__.py').write_text(\"\"\"\nfrom .module_1 import *\nfrom .module_2 import *\n\"\"\")\n\npackage_module_1 = package / 'module_1.py'\npackage_module_1.write_text(\"\"\"\n__all__ = ['foo']\nimp_detail1 = imp_detail2 = imp_detail3 = None\ndef foo(): pass\n\"\"\")\n\npackage_module_2 = package / 'module_2.py'\npackage_module_2.write_text(\"\"\"\n__all__ = ['Bar']\nimp_detail1 = imp_detail2 = imp_detail3 = None\nclass Bar: pass\n\"\"\")\n</code></pre>\n<p>And now you have presented a complete api that someone else can use when they import your package, like so:</p>\n<pre><code class=\"python\">import package\npackage.foo()\npackage.Bar()\n</code></pre>\n<p>And the package won't have all the other implementation details you used when creating your modules cluttering up the <code>package</code> namespace.</p>\n<h2><code>__all__</code> in <code>__init__.py</code></h2>\n<p>After more work, maybe you've decided that the modules are too big (like many thousands of lines?) and need to be split up. So you do the following:</p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">package\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 module_1\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 foo_implementation.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 __init__.py\n\u2514\u2500\u2500 module_2\n    \u251c\u2500\u2500 Bar_implementation.py\n    \u2514\u2500\u2500 __init__.py\n</code></pre>\n<p>First make the subpackage directories with the same names as the modules:</p>\n<pre><code class=\"python\">subpackage_1 = package / 'module_1'\nsubpackage_1.mkdir()\nsubpackage_2 = package / 'module_2'\nsubpackage_2.mkdir()\n</code></pre>\n<p>Move the implementations:</p>\n<pre><code class=\"python\">package_module_1.rename(subpackage_1 / 'foo_implementation.py')\npackage_module_2.rename(subpackage_2 / 'Bar_implementation.py')\n</code></pre>\n<p>create <code>__init__.py</code>s for the subpackages that declare the <code>__all__</code> for each:</p>\n<pre><code class=\"python\">(subpackage_1 / '__init__.py').write_text(\"\"\"\nfrom .foo_implementation import *\n__all__ = ['foo']\n\"\"\")\n(subpackage_2 / '__init__.py').write_text(\"\"\"\nfrom .Bar_implementation import *\n__all__ = ['Bar']\n\"\"\")\n</code></pre>\n<p>And now you still have the api provisioned at the package level:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; import package\n&gt;&gt;&gt; package.foo()\n&gt;&gt;&gt; package.Bar()\n&lt;package.module_2.Bar_implementation.Bar object at 0x7f0c2349d210&gt;\n</code></pre>\n<p>And you can easily add things to your API that you can manage at the subpackage level instead of the subpackage's module level. If you want to add a new name to the API, you simply update the <code>__init__.py</code>, e.g. in module_2:</p>\n<pre><code class=\"python\">from .Bar_implementation import *\nfrom .Baz_implementation import *\n__all__ = ['Bar', 'Baz']\n</code></pre>\n<p>And if you're not ready to publish <code>Baz</code> in the top level API, in your top level <code>__init__.py</code> you could have:</p>\n<pre><code class=\"python\">from .module_1 import *       # also constrained by __all__'s\nfrom .module_2 import *       # in the __init__.py's\n__all__ = ['foo', 'Bar']     # further constraining the names advertised\n</code></pre>\n<p>and if your users are aware of the availability of <code>Baz</code>, they can use it:</p>\n<pre><code class=\"python\">import package\npackage.Baz()\n</code></pre>\n<p>but if they don't know about it, other tools (like <a href=\"https://hg.python.org/cpython/file/2.7/Lib/pydoc.py#l173\" rel=\"noreferrer\">pydoc</a>) won't inform them.</p>\n<p>You can later change that when <code>Baz</code> is ready for prime time:</p>\n<pre><code class=\"python\">from .module_1 import *\nfrom .module_2 import *\n__all__ = ['foo', 'Bar', 'Baz']\n</code></pre>\n<h1>Prefixing <code>_</code> versus <code>__all__</code>:</h1>\n<p>By default, Python will export all names that do not start with an <code>_</code> when imported with <code>import *</code>. As demonstrated by the shell session here, <code>import *</code> does not bring in the <code>_us_non_public</code> name from the <code>us.py</code> module:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">$ cat us.py\nUSALLCAPS = \"all caps\"\nus_snake_case = \"snake_case\"\n_us_non_public = \"shouldn't import\"\n$ python\nPython 3.10.0 (default, Oct  4 2021, 17:55:55) [GCC 10.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; from us import *\n&gt;&gt;&gt; dir()\n['USALLCAPS', '__annotations__', '__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'us_snake_case']\n</code></pre>\n<p>You certainly <em>could</em> rely on this mechanism. Some packages in the Python standard library, in fact, <em>do</em> rely on this, but to do so, they alias their imports, for example, in <a href=\"https://hg.python.org/cpython/file/default/Lib/ctypes/__init__.py#l3\" rel=\"noreferrer\"><code>ctypes/__init__.py</code></a>:</p>\n<pre><code class=\"python\">import os as _os, sys as _sys\n</code></pre>\n<p>Using the <code>_</code> convention can be more elegant because it removes the redundancy of naming the names again. But it adds the redundancy for imports (if you have a lot of them) and it is <em>easy</em> to forget to do this consistently - and the last thing you want is to have to indefinitely support something you intended to only be an implementation detail, just because you forgot to prefix an <code>_</code> when naming a function.</p>\n<p>I personally write an <code>__all__</code> early in my development lifecycle for modules so that others who might use my code know what they should use and not use.</p>\n<p>Most packages in the standard library also use <code>__all__</code>.</p>\n<h1>When avoiding <code>__all__</code> makes sense</h1>\n<p>It makes sense to stick to the <code>_</code> prefix convention in lieu of <code>__all__</code> when:</p>\n<ul>\n<li>You're still in early development mode and have no users, and are constantly tweaking your API.</li>\n<li>Maybe you do have users, but you have unittests that cover the API, and you're still actively adding to the API and tweaking in development.</li>\n</ul>\n<h1>An <code>export</code> decorator</h1>\n<p>The downside of using <code>__all__</code> is that you have to write the names of functions and classes being exported twice - and the information is kept separate from the definitions. We <em>could</em> use a decorator to solve this problem.</p>\n<p>I got the idea for such an export decorator from David Beazley's talk on packaging. This implementation seems to work well in CPython's traditional importer. If you have a special import hook or system, I do not guarantee it, but if you adopt it, it is fairly trivial to back out - you'll just need to manually add the names back into the <code>__all__</code></p>\n<p>So in, for example, a utility library, you would define the decorator:</p>\n<pre><code class=\"python\">import sys\n\ndef export(fn):\n    mod = sys.modules[fn.__module__]\n    if hasattr(mod, '__all__'):\n        mod.__all__.append(fn.__name__)\n    else:\n        mod.__all__ = [fn.__name__]\n    return fn\n</code></pre>\n<p>and then, where you would define an <code>__all__</code>, you do this:</p>\n<pre><code class=\"python\">$ cat &gt; main.py\nfrom lib import export\n__all__ = [] # optional - we create a list if __all__ is not there.\n\n@export\ndef foo(): pass\n\n@export\ndef bar():\n    'bar'\n\ndef main():\n    print('main')\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n<p>And this works fine whether run as main or imported by another function.</p>\n<pre><code class=\"python\">$ cat &gt; run.py\nimport main\nmain.main()\n\n$ python run.py\nmain\n</code></pre>\n<p>And API provisioning with <code>import *</code> will work too:</p>\n<pre><code class=\"python\">$ cat &gt; run.py\nfrom main import *\nfoo()\nbar()\nmain() # expected to error here, not exported\n\n$ python run.py\nTraceback (most recent call last):\n  File \"run.py\", line 4, in &lt;module&gt;\n    main() # expected to error here, not exported\nNameError: name 'main' is not defined\n</code></pre>\n", "abstract": "Explain all in Python? I keep seeing the variable __all__ set in different __init__.py files. What does this do? It declares the semantically \"public\" names from a module. If there is a name in __all__, users are expected to use it, and they can have the expectation that it will not change. It also will have programmatic effects: __all__ in a module, e.g. module.py: means that when you import * from the module, only those names in the __all__ are imported: Documentation and code autocompletion tools may (in fact, should) also inspect the __all__ to determine what names to show as available from a module. From the docs: The __init__.py files are required to make Python treat the directories as containing packages; this is done to prevent directories with a common name, such as string, from unintentionally hiding valid modules that occur later on the module search path. In the simplest case, __init__.py can just be an empty file, but it can also execute initialization code for the package or set the __all__ variable. So the __init__.py can declare the __all__ for a package. A package is typically made up of modules that may import one another, but that are necessarily tied together with an __init__.py file. That file is what makes the directory an actual Python package. For example, say you have the following files in a package: Let's create these files with Python so you can follow along - you could paste the following into a Python 3 shell: And now you have presented a complete api that someone else can use when they import your package, like so: And the package won't have all the other implementation details you used when creating your modules cluttering up the package namespace. After more work, maybe you've decided that the modules are too big (like many thousands of lines?) and need to be split up. So you do the following: First make the subpackage directories with the same names as the modules: Move the implementations: create __init__.pys for the subpackages that declare the __all__ for each: And now you still have the api provisioned at the package level: And you can easily add things to your API that you can manage at the subpackage level instead of the subpackage's module level. If you want to add a new name to the API, you simply update the __init__.py, e.g. in module_2: And if you're not ready to publish Baz in the top level API, in your top level __init__.py you could have: and if your users are aware of the availability of Baz, they can use it: but if they don't know about it, other tools (like pydoc) won't inform them. You can later change that when Baz is ready for prime time: By default, Python will export all names that do not start with an _ when imported with import *. As demonstrated by the shell session here, import * does not bring in the _us_non_public name from the us.py module: You certainly could rely on this mechanism. Some packages in the Python standard library, in fact, do rely on this, but to do so, they alias their imports, for example, in ctypes/__init__.py: Using the _ convention can be more elegant because it removes the redundancy of naming the names again. But it adds the redundancy for imports (if you have a lot of them) and it is easy to forget to do this consistently - and the last thing you want is to have to indefinitely support something you intended to only be an implementation detail, just because you forgot to prefix an _ when naming a function. I personally write an __all__ early in my development lifecycle for modules so that others who might use my code know what they should use and not use. Most packages in the standard library also use __all__. It makes sense to stick to the _ prefix convention in lieu of __all__ when: The downside of using __all__ is that you have to write the names of functions and classes being exported twice - and the information is kept separate from the definitions. We could use a decorator to solve this problem. I got the idea for such an export decorator from David Beazley's talk on packaging. This implementation seems to work well in CPython's traditional importer. If you have a special import hook or system, I do not guarantee it, but if you adopt it, it is fairly trivial to back out - you'll just need to manually add the names back into the __all__ So in, for example, a utility library, you would define the decorator: and then, where you would define an __all__, you do this: And this works fine whether run as main or imported by another function. And API provisioning with import * will work too:"}, {"id": 16595377, "score": 194, "vote": 0, "content": "<p>I'm just adding this to be precise:</p>\n<p>All other answers refer to <em>modules</em>. The original question explicitely mentioned <code>__all__</code> in <code>__init__.py</code> files, so this is about python <em>packages</em>.</p>\n<p>Generally, <code>__all__</code> only comes into play when the <code>from xxx import *</code> variant of the <code>import</code> statement is used. This applies to packages as well as to modules.</p>\n<p>The behaviour for modules is explained in the other answers. The exact behaviour for packages is described <a href=\"http://docs.python.org/2/tutorial/modules.html#importing-from-a-package\">here</a> in detail.</p>\n<p>In short, <code>__all__</code> on package level does approximately the same thing as for modules, except it deals with <em>modules within the package</em>  (in contrast to specifying <em>names within the module</em>). So <code>__all__</code> specifies all modules that shall be loaded and imported into the current namespace when us use <code>from package import *</code>.</p>\n<p>The big difference is, that when you <em>omit</em> the declaration of <code>__all__</code> in a package's <code>__init__.py</code>, the statement <code>from package import *</code> will not import anything at all (with exceptions explained in the documentation, see link above). </p>\n<p>On the other hand, if you omit <code>__all__</code> in a module, the \"starred import\" will import all names (not starting with an underscore) defined in the module.</p>\n", "abstract": "I'm just adding this to be precise: All other answers refer to modules. The original question explicitely mentioned __all__ in __init__.py files, so this is about python packages. Generally, __all__ only comes into play when the from xxx import * variant of the import statement is used. This applies to packages as well as to modules. The behaviour for modules is explained in the other answers. The exact behaviour for packages is described here in detail. In short, __all__ on package level does approximately the same thing as for modules, except it deals with modules within the package  (in contrast to specifying names within the module). So __all__ specifies all modules that shall be loaded and imported into the current namespace when us use from package import *. The big difference is, that when you omit the declaration of __all__ in a package's __init__.py, the statement from package import * will not import anything at all (with exceptions explained in the documentation, see link above).  On the other hand, if you omit __all__ in a module, the \"starred import\" will import all names (not starting with an underscore) defined in the module."}, {"id": 2838800, "score": 94, "vote": 0, "content": "<p>It also changes what pydoc will show:</p>\n<p>module1.py</p>\n<pre><code class=\"python\">a = \"A\"\nb = \"B\"\nc = \"C\"\n</code></pre>\n<p>module2.py</p>\n<pre><code class=\"python\">__all__ = ['a', 'b']\n\na = \"A\"\nb = \"B\"\nc = \"C\"\n</code></pre>\n<p>$ pydoc module1</p>\n<pre>\nHelp on module module1:\n\n<b>NAME</b>\n    module1\n\n<b>FILE</b>\n    module1.py\n\n<b>DATA</b>\n    <b>a</b> = 'A'\n    <b>b</b> = 'B'\n    <b>c</b> = 'C'\n</pre>\n<p>$ pydoc module2</p>\n<pre>\nHelp on module module2:\n\n<b>NAME</b>\n    module2\n\n<b>FILE</b>\n    module2.py\n\n<b>DATA</b>\n    <b>__all__</b> = ['a', 'b']\n    <b>a</b> = 'A'\n    <b>b</b> = 'B'\n</pre>\n<p>I declare <code>__all__</code> in all my modules, as well as underscore internal details, these really help when using things you've never used before in live interpreter sessions.</p>\n", "abstract": "It also changes what pydoc will show: module1.py module2.py $ pydoc module1 $ pydoc module2 I declare __all__ in all my modules, as well as underscore internal details, these really help when using things you've never used before in live interpreter sessions."}, {"id": 36119040, "score": 84, "vote": 0, "content": "<p><code>__all__</code> customizes <code>*</code> in <a href=\"https://docs.python.org/2/tutorial/modules.html#more-on-modules\" rel=\"noreferrer\"><code>from &lt;module&gt; import *</code></a>\nand <a href=\"https://docs.python.org/2/tutorial/modules.html#importing-from-a-package\" rel=\"noreferrer\"><code>from &lt;package&gt; import *</code></a>.</p>\n<hr/>\n<p>A <a href=\"https://stackoverflow.com/a/7948504/673991\">module</a> is a <code>.py</code> file meant to be imported.</p>\n<p>A <a href=\"https://stackoverflow.com/a/7948504/673991\">package</a> is a directory with a <code>__init__.py</code> file. A package usually contains modules.</p>\n<hr/>\n<h1>MODULES</h1>\n<pre><code class=\"python\">\"\"\" cheese.py - an example module \"\"\"\n\n__all__ = ['swiss', 'cheddar']\n\nswiss = 4.99\ncheddar = 3.99\ngouda = 10.99\n</code></pre>\n<p><code>__all__</code> lets humans know the \"public\" features of a <strong>module</strong>.<sup>[<a href=\"https://stackoverflow.com/a/35710527/673991\" title=\"thanks Aaron Hall\">@AaronHall</a>]</sup>  Also, pydoc recognizes them.<sup>[<a href=\"https://stackoverflow.com/a/2838800/673991\" title=\"thanks @Longpoke\">@Longpoke</a>]</sup></p>\n<h2>from <em>module</em> import *</h2>\n<p>See how <code>swiss</code> and <code>cheddar</code> are brought into the local namespace, but not <code>gouda</code>:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; from cheese import *\n&gt;&gt;&gt; swiss, cheddar\n(4.99, 3.99)\n&gt;&gt;&gt; gouda\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'gouda' is not defined\n</code></pre>\n<p>Without <code>__all__</code>, any symbol (that doesn't start with an underscore) would have been available.</p>\n<hr/>\n<h1>Imports without <code>*</code> are not affected by <code>__all__</code></h1>\n<hr/>\n<h2>import <em>module</em></h2>\n<pre><code class=\"python\">&gt;&gt;&gt; import cheese\n&gt;&gt;&gt; cheese.swiss, cheese.cheddar, cheese.gouda\n(4.99, 3.99, 10.99)\n</code></pre>\n<h2>from <em>module</em> import <em>names</em></h2>\n<pre><code class=\"python\">&gt;&gt;&gt; from cheese import swiss, cheddar, gouda\n&gt;&gt;&gt; swiss, cheddar, gouda\n(4.99, 3.99, 10.99)\n</code></pre>\n<h2>import <em>module</em> as <em>localname</em></h2>\n<pre><code class=\"python\">&gt;&gt;&gt; import cheese as ch\n&gt;&gt;&gt; ch.swiss, ch.cheddar, ch.gouda\n(4.99, 3.99, 10.99)\n</code></pre>\n<hr/>\n<h1>PACKAGES</h1>\n<p>In the <code>__init__.py</code> file of a <strong>package</strong> <code>__all__</code> is a list of strings with the names of public modules or other objects. Those features are available to wildcard imports. As with modules, <code>__all__</code> customizes the <code>*</code> when wildcard-importing from the package.<sup>[<a href=\"https://stackoverflow.com/a/16595377/673991\" title=\"thanks @MartinStettner\">@MartinStettner</a>]</sup></p>\n<p>Here's an excerpt from the <a href=\"https://dev.mysql.com/doc/connector-python/en/\" rel=\"noreferrer\">Python MySQL Connector</a> <code>__init__.py</code>:</p>\n<pre><code class=\"python\">__all__ = [\n    'MySQLConnection', 'Connect', 'custom_error_exception',\n\n    # Some useful constants\n    'FieldType', 'FieldFlag', 'ClientFlag', 'CharacterSet', 'RefreshOption',\n    'HAVE_CEXT',\n\n    # Error handling\n    'Error', 'Warning',\n\n    ...etc...\n\n    ]\n</code></pre>\n<p>The default case, <a href=\"https://docs.python.org/tutorial/modules.html#importing-from-a-package\" rel=\"noreferrer\">asterisk with no <code>__all__</code> for a package</a>, is complicated, because the obvious behavior would be expensive: to use the file system to search for all modules in the package. Instead, in my reading of the docs, only the objects defined in <code>__init__.py</code> are imported:</p>\n<blockquote>\n<p>If <code>__all__</code> is not defined, the statement <code>from sound.effects import *</code> does <em>not</em> import all submodules from the package <code>sound.effects</code> into the current namespace; it only ensures that the package <code>sound.effects</code> has been imported (possibly running any initialization code in <code>__init__.py</code>) and then imports whatever names are defined in the package. This includes any names defined (and submodules explicitly loaded) by <code>__init__.py</code>. It also includes any submodules of the package that were explicitly loaded by previous import statements.</p>\n</blockquote>\n<hr/>\n<p>And lastly, a venerated tradition for stack overflow answers, professors, and mansplainers everywhere, is the <em>bon mot</em> of reproach for asking a question in the first place:</p>\n<blockquote>\n<p>Wildcard imports ... should be avoided, as they [confuse] readers and many automated tools.</p>\n</blockquote>\n<p><sup>[<a href=\"https://www.python.org/dev/peps/pep-0008/#imports\" rel=\"noreferrer\" title=\"see PEP 8, as noted by @ToolmakerSteve\">PEP 8</a>, @ToolmakerSteve]</sup></p>\n", "abstract": "__all__ customizes * in from <module> import *\nand from <package> import *. A module is a .py file meant to be imported. A package is a directory with a __init__.py file. A package usually contains modules. __all__ lets humans know the \"public\" features of a module.[@AaronHall]  Also, pydoc recognizes them.[@Longpoke] See how swiss and cheddar are brought into the local namespace, but not gouda: Without __all__, any symbol (that doesn't start with an underscore) would have been available. In the __init__.py file of a package __all__ is a list of strings with the names of public modules or other objects. Those features are available to wildcard imports. As with modules, __all__ customizes the * when wildcard-importing from the package.[@MartinStettner] Here's an excerpt from the Python MySQL Connector __init__.py: The default case, asterisk with no __all__ for a package, is complicated, because the obvious behavior would be expensive: to use the file system to search for all modules in the package. Instead, in my reading of the docs, only the objects defined in __init__.py are imported: If __all__ is not defined, the statement from sound.effects import * does not import all submodules from the package sound.effects into the current namespace; it only ensures that the package sound.effects has been imported (possibly running any initialization code in __init__.py) and then imports whatever names are defined in the package. This includes any names defined (and submodules explicitly loaded) by __init__.py. It also includes any submodules of the package that were explicitly loaded by previous import statements. And lastly, a venerated tradition for stack overflow answers, professors, and mansplainers everywhere, is the bon mot of reproach for asking a question in the first place: Wildcard imports ... should be avoided, as they [confuse] readers and many automated tools. [PEP 8, @ToolmakerSteve]"}, {"id": 49620866, "score": 17, "vote": 0, "content": "<h1>Short answer</h1>\n<p><code>__all__</code> affects <code>from &lt;module&gt; import *</code> statements.</p>\n<h1>Long answer</h1>\n<p>Consider this example:</p>\n<pre><code class=\"python\">foo\n\u251c\u2500\u2500 bar.py\n\u2514\u2500\u2500 __init__.py\n</code></pre>\n<p>In <code>foo/__init__.py</code>:</p>\n<ul>\n<li><p>(Implicit) If we don't define <code>__all__</code>, then <code>from foo import *</code> will only import names defined in <code>foo/__init__.py</code>.</p></li>\n<li><p>(Explicit) If we define <code>__all__ = []</code>, then <code>from foo import *</code> will import nothing.</p></li>\n<li><p>(Explicit) If we define <code>__all__ = [ &lt;name1&gt;, ... ]</code>, then <code>from foo import *</code> will only import those names.</p></li>\n</ul>\n<p>Note that in the implicit case, python won't import names starting with <code>_</code>. However, you can force importing such names using <code>__all__</code>.</p>\n<p>You can view the Python document <a href=\"https://docs.python.org/3/tutorial/modules.html#importing-from-a-package\" rel=\"noreferrer\">here</a>.</p>\n", "abstract": "__all__ affects from <module> import * statements. Consider this example: In foo/__init__.py: (Implicit) If we don't define __all__, then from foo import * will only import names defined in foo/__init__.py. (Explicit) If we define __all__ = [], then from foo import * will import nothing. (Explicit) If we define __all__ = [ <name1>, ... ], then from foo import * will only import those names. Note that in the implicit case, python won't import names starting with _. However, you can force importing such names using __all__. You can view the Python document here."}, {"id": 36853901, "score": 12, "vote": 0, "content": "<p><code>__all__</code> is used to document the public API of a Python module. Although it is optional, <code>__all__</code> should be used.</p>\n<p>Here is the relevant excerpt from <a href=\"https://docs.python.org/3/reference/simple_stmts.html#the-import-statement\" rel=\"noreferrer\">the Python language reference</a>:</p>\n<blockquote>\n<p>The public names defined by a module are determined by checking the module\u2019s namespace for a variable named <code>__all__</code>; if defined, it must be a sequence of strings which are names defined or imported by that module. The names given in <code>__all__</code> are all considered public and are required to exist. If <code>__all__</code> is not defined, the set of public names includes all names found in the module\u2019s namespace which do not begin with an underscore character ('_'). <code>__all__</code> should contain the entire public API. It is intended to avoid accidentally exporting items that are not part of the API (such as library modules which were imported and used within the module).</p>\n</blockquote>\n<p><a href=\"https://www.python.org/dev/peps/pep-0008/#public-and-internal-interfaces\" rel=\"noreferrer\">PEP 8</a> uses similar wording, although it also makes it clear that imported names are not part of the public API when <code>__all__</code> is absent:</p>\n<blockquote>\n<p>To better support introspection, modules should explicitly declare the names in their public API using the <code>__all__</code> attribute. Setting <code>__all__</code> to an empty list indicates that the module has no public API.</p>\n<p>[...]</p>\n<p>Imported names should always be considered an implementation detail. Other modules must not rely on indirect access to such imported names unless they are an explicitly documented part of the containing module's API, such as <code>os.path</code> or a package's <code>__init__</code> module that exposes functionality from submodules.</p>\n</blockquote>\n<p>Furthermore, as pointed out in other answers, <code>__all__</code> is used to enable <a href=\"https://docs.python.org/3/tutorial/modules.html#importing-from-a-package\" rel=\"noreferrer\">wildcard importing for packages</a>:</p>\n<blockquote>\n<p>The import statement uses the following convention: if a package\u2019s <code>__init__.py</code> code defines a list named <code>__all__</code>, it is taken to be the list of module names that should be imported when <code>from package import *</code> is encountered.</p>\n</blockquote>\n", "abstract": "__all__ is used to document the public API of a Python module. Although it is optional, __all__ should be used. Here is the relevant excerpt from the Python language reference: The public names defined by a module are determined by checking the module\u2019s namespace for a variable named __all__; if defined, it must be a sequence of strings which are names defined or imported by that module. The names given in __all__ are all considered public and are required to exist. If __all__ is not defined, the set of public names includes all names found in the module\u2019s namespace which do not begin with an underscore character ('_'). __all__ should contain the entire public API. It is intended to avoid accidentally exporting items that are not part of the API (such as library modules which were imported and used within the module). PEP 8 uses similar wording, although it also makes it clear that imported names are not part of the public API when __all__ is absent: To better support introspection, modules should explicitly declare the names in their public API using the __all__ attribute. Setting __all__ to an empty list indicates that the module has no public API. [...] Imported names should always be considered an implementation detail. Other modules must not rely on indirect access to such imported names unless they are an explicitly documented part of the containing module's API, such as os.path or a package's __init__ module that exposes functionality from submodules. Furthermore, as pointed out in other answers, __all__ is used to enable wildcard importing for packages: The import statement uses the following convention: if a package\u2019s __init__.py code defines a list named __all__, it is taken to be the list of module names that should be imported when from package import * is encountered."}, {"id": 54112742, "score": 10, "vote": 0, "content": "<p><code>__all__</code> affects how <code>from foo import *</code> works.</p>\n<p>Code that is inside a module body (but not in the body of a function or class) may use an asterisk (<code>*</code>) in a <code>from</code> statement:</p>\n<pre><code class=\"python\">from foo import *\n</code></pre>\n<p>The <code>*</code> requests that all attributes of module <code>foo</code> (except those beginning with underscores) be bound as global variables in the importing module. When <code>foo</code> has an attribute <code>__all__</code>, the attribute's value is the list of the names that are bound by this type of <code>from</code> statement. </p>\n<p>If <code>foo</code> is a <em>package</em> and its <code>__init__.py</code> defines a list named <code>__all__</code>, it is taken to be the list of submodule names that should be imported when <code>from foo import *</code> is encountered. If <code>__all__</code> is not defined, the statement <code>from foo import *</code> imports whatever names are defined in the package. This includes any names defined (and submodules explicitly loaded) by <code>__init__.py</code>.</p>\n<p>Note that <code>__all__</code> doesn't have to be a list. As per the documentation on the <a href=\"https://docs.python.org/3/reference/simple_stmts.html#the-import-statement\" rel=\"noreferrer\"><code>import</code> statement</a>, if defined, <code>__all__</code> must be a <em>sequence of strings</em> which are names defined or imported by the module. So you may as well use a tuple to <a href=\"https://stackoverflow.com/a/22140115/244297\">save</a> some memory and CPU cycles. Just don't forget a comma in case the module defines a single public name:</p>\n<pre><code class=\"python\">__all__ = ('some_name',)\n</code></pre>\n<p>See also <a href=\"https://stackoverflow.com/q/2386714/244297\">Why is \u201cimport *\u201d bad?</a></p>\n", "abstract": "__all__ affects how from foo import * works. Code that is inside a module body (but not in the body of a function or class) may use an asterisk (*) in a from statement: The * requests that all attributes of module foo (except those beginning with underscores) be bound as global variables in the importing module. When foo has an attribute __all__, the attribute's value is the list of the names that are bound by this type of from statement.  If foo is a package and its __init__.py defines a list named __all__, it is taken to be the list of submodule names that should be imported when from foo import * is encountered. If __all__ is not defined, the statement from foo import * imports whatever names are defined in the package. This includes any names defined (and submodules explicitly loaded) by __init__.py. Note that __all__ doesn't have to be a list. As per the documentation on the import statement, if defined, __all__ must be a sequence of strings which are names defined or imported by the module. So you may as well use a tuple to save some memory and CPU cycles. Just don't forget a comma in case the module defines a single public name: See also Why is \u201cimport *\u201d bad?"}, {"id": 56636531, "score": 3, "vote": 0, "content": "<p>This is defined in PEP8 <a href=\"https://www.python.org/dev/peps/pep-0008/#global-variable-names\" rel=\"nofollow noreferrer\">here</a>:</p>\n<blockquote>\n<p>Global Variable Names</p>\n<p>(Let's hope that these variables are meant for use inside one module only.) The conventions are about the same as those for functions.</p>\n<p>Modules that are designed for use via <code>from M import *</code> should use the <code>__all__</code> mechanism to prevent exporting globals, or use the older convention of prefixing such globals with an underscore (which you might want to do to indicate these globals are \"module non-public\").</p>\n</blockquote>\n<p>PEP8 provides coding conventions for the Python code comprising the standard library in the main Python distribution. The more you follow this, closer you are to the original intent.</p>\n", "abstract": "This is defined in PEP8 here: Global Variable Names (Let's hope that these variables are meant for use inside one module only.) The conventions are about the same as those for functions. Modules that are designed for use via from M import * should use the __all__ mechanism to prevent exporting globals, or use the older convention of prefixing such globals with an underscore (which you might want to do to indicate these globals are \"module non-public\"). PEP8 provides coding conventions for the Python code comprising the standard library in the main Python distribution. The more you follow this, closer you are to the original intent."}]}, {"link": "https://stackoverflow.com/questions/6760685/creating-a-singleton-in-python", "question": {"id": "6760685", "title": "Creating a singleton in Python", "content": "<p><em>This question is not for the discussion of whether or not the <a href=\"http://en.wikipedia.org/wiki/Singleton_pattern\" rel=\"noreferrer\">singleton design pattern</a> is desirable, is an anti-pattern, or for any religious wars, but to discuss how this pattern is best implemented in Python in such a way that is most pythonic. In this instance I define 'most pythonic' to mean that it follows the 'principle of least astonishment'</em>.</p>\n<p>I have multiple classes which would become singletons (my use-case is for a logger, but this is not important). I do not wish to clutter several classes with added gumph when I can simply inherit or decorate.</p>\n<p>Best methods:</p>\n<hr/>\n<h2>Method 1: A decorator</h2>\n<pre><code class=\"python\">def singleton(class_):\n    instances = {}\n    def getinstance(*args, **kwargs):\n        if class_ not in instances:\n            instances[class_] = class_(*args, **kwargs)\n        return instances[class_]\n    return getinstance\n\n@singleton\nclass MyClass(BaseClass):\n    pass\n</code></pre>\n<p>Pros</p>\n<ul>\n<li>Decorators are additive in a way that is often more intuitive than multiple inheritance.</li>\n</ul>\n<p>Cons</p>\n<ul>\n<li><p>While objects created using <code>MyClass()</code> would be true singleton objects, <code>MyClass</code> itself is a function, not a class, so you cannot call class methods from it. Also for</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">x = MyClass();\ny = MyClass();\nt = type(n)();\n</code></pre>\n</li>\n</ul>\n<p>then <code>x == y</code> but <code>x != t &amp;&amp; y != t</code></p>\n<hr/>\n<h2>Method 2: A base class</h2>\n<pre><code class=\"python\">class Singleton(object):\n    _instance = None\n    def __new__(class_, *args, **kwargs):\n        if not isinstance(class_._instance, class_):\n            class_._instance = object.__new__(class_, *args, **kwargs)\n        return class_._instance\n\nclass MyClass(Singleton, BaseClass):\n    pass\n</code></pre>\n<p>Pros</p>\n<ul>\n<li>It's a true class</li>\n</ul>\n<p>Cons</p>\n<ul>\n<li>Multiple inheritance - eugh! <code>__new__</code> could be overwritten during inheritance from a second base class? One has to think more than is necessary.</li>\n</ul>\n<hr/>\n<h2>Method 3: A <a href=\"https://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python\">metaclass</a></h2>\n<pre><code class=\"python\">class Singleton(type):\n    _instances = {}\n    def __call__(cls, *args, **kwargs):\n        if cls not in cls._instances:\n            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)\n        return cls._instances[cls]\n\n#Python2\nclass MyClass(BaseClass):\n    __metaclass__ = Singleton\n\n#Python3\nclass MyClass(BaseClass, metaclass=Singleton):\n    pass\n</code></pre>\n<p>Pros</p>\n<ul>\n<li>It's a true class</li>\n<li>Auto-magically covers inheritance</li>\n<li>Uses <code>__metaclass__</code> for its proper purpose (and made me aware of it)</li>\n</ul>\n<p>Cons</p>\n<ul>\n<li>Are there any?</li>\n</ul>\n<hr/>\n<h2>Method 4: decorator returning a class with the same name</h2>\n<pre><code class=\"python\">def singleton(class_):\n    class class_w(class_):\n        _instance = None\n        def __new__(class_, *args, **kwargs):\n            if class_w._instance is None:\n                class_w._instance = super(class_w,\n                                    class_).__new__(class_,\n                                                    *args,\n                                                    **kwargs)\n                class_w._instance._sealed = False\n            return class_w._instance\n        def __init__(self, *args, **kwargs):\n            if self._sealed:\n                return\n            super(class_w, self).__init__(*args, **kwargs)\n            self._sealed = True\n    class_w.__name__ = class_.__name__\n    return class_w\n\n@singleton\nclass MyClass(BaseClass):\n    pass\n</code></pre>\n<p>Pros</p>\n<ul>\n<li>It's a true class</li>\n<li>Auto-magically covers inheritance</li>\n</ul>\n<p>Cons</p>\n<ul>\n<li>Is there not an overhead for creating each new class? Here we are creating two classes for each class we wish to make a singleton. While this is fine in my case, I worry that this might not scale. Of course there is a matter of debate as to whether it aught to be too easy to scale this pattern...</li>\n<li>What is the point of the <code>_sealed</code> attribute</li>\n<li>Can't call methods of the same name on base classes using <code>super()</code> because they will recurse. This means you can't customize <code>__new__</code> and can't subclass a class that needs you to call up to <code>__init__</code>.</li>\n</ul>\n<hr/>\n<h2>Method 5: a module</h2>\n<p>a module file <code>singleton.py</code></p>\n<p>Pros</p>\n<ul>\n<li>Simple is better than complex</li>\n</ul>\n<p>Cons</p>\n<ul>\n<li>Not lazily instantiated</li>\n</ul>\n", "abstract": "This question is not for the discussion of whether or not the singleton design pattern is desirable, is an anti-pattern, or for any religious wars, but to discuss how this pattern is best implemented in Python in such a way that is most pythonic. In this instance I define 'most pythonic' to mean that it follows the 'principle of least astonishment'. I have multiple classes which would become singletons (my use-case is for a logger, but this is not important). I do not wish to clutter several classes with added gumph when I can simply inherit or decorate. Best methods: Pros Cons While objects created using MyClass() would be true singleton objects, MyClass itself is a function, not a class, so you cannot call class methods from it. Also for then x == y but x != t && y != t Pros Cons Pros Cons Pros Cons a module file singleton.py Pros Cons"}, "answers": [{"id": 6798042, "score": 1005, "vote": 0, "content": "<h2>Use a Metaclass</h2>\n<p>I would recommend <strong>Method #2</strong>, but you're better off using a <strong>metaclass</strong> than a base class. Here is a sample implementation:</p>\n<pre><code class=\"python\">class Singleton(type):\n    _instances = {}\n    def __call__(cls, *args, **kwargs):\n        if cls not in cls._instances:\n            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)\n        return cls._instances[cls]\n        \nclass Logger(object):\n    __metaclass__ = Singleton\n</code></pre>\n<p>Or in Python3</p>\n<pre><code class=\"python\">class Logger(metaclass=Singleton):\n    pass\n</code></pre>\n<p>If you want to run <code>__init__</code> every time the class is called, add</p>\n<pre><code class=\"python\">        else:\n            cls._instances[cls].__init__(*args, **kwargs)\n</code></pre>\n<p>to the <code>if</code> statement in <code>Singleton.__call__</code>.</p>\n<p>A few words about metaclasses. A metaclass is the <strong>class of a class</strong>; that is, a class is an <strong>instance of its metaclass</strong>. You find the metaclass of an object in Python with <code>type(obj)</code>. Normal new-style classes are of type <code>type</code>. <code>Logger</code> in the code above will be of type <code>class 'your_module.Singleton'</code>, just as the (only) instance of <code>Logger</code> will be of type <code>class 'your_module.Logger'</code>. When you call logger with <code>Logger()</code>, Python first asks the metaclass of <code>Logger</code>, <code>Singleton</code>, what to do, allowing instance creation to be pre-empted. This process is the same as Python asking a class what to do by calling <code>__getattr__</code> when you reference one of it's attributes by doing <code>myclass.attribute</code>.</p>\n<p>A metaclass essentially decides <strong>what the definition of a class means</strong> and how to implement that definition. See for example <a href=\"http://code.activestate.com/recipes/498149/\" rel=\"noreferrer\">http://code.activestate.com/recipes/498149/</a>, which essentially recreates C-style <code>struct</code>s in Python using metaclasses. The thread <a href=\"https://stackoverflow.com/questions/392160/what-are-your-concrete-use-cases-for-metaclasses-in-python\">What are some (concrete) use-cases for metaclasses?</a> also provides some examples, they generally seem to be related to declarative programming, especially as used in ORMs.</p>\n<p>In this situation, if you use your <strong>Method #2</strong>, and a subclass defines a <code>__new__</code> method, it will be <strong>executed every time</strong> you call <code>SubClassOfSingleton()</code> -- because it is responsible for calling the method that returns the stored instance. With a metaclass, it will <strong>only be called once</strong>, when the only instance is created. You want to <strong>customize what it means to call the class</strong>, which is decided by it's type.</p>\n<p>In general, it <strong>makes sense</strong> to use a metaclass to implement a singleton. A singleton is special because is <strong>created only once</strong>, and a metaclass is the way you customize the <strong>creation of a class</strong>. Using a metaclass gives you <strong>more control</strong> in case you need to customize the singleton class definitions in other ways.</p>\n<p>Your singletons <strong>won't need multiple inheritance</strong> (because the metaclass is not a base class), but for <strong>subclasses of the created class</strong> that use multiple inheritance, you need to make sure the singleton class is the <strong>first / leftmost</strong> one with a metaclass that redefines <code>__call__</code> This is very unlikely to be an issue. The instance dict is <strong>not in the instance's namespace</strong> so it won't accidentally overwrite it.</p>\n<p>You will also hear that the singleton pattern violates the \"Single Responsibility Principle\" -- each class should do <strong>only one thing</strong>. That way you don't have to worry about messing up one thing the code does if you need to change another, because they are separate and encapsulated. The metaclass implementation <strong>passes this test</strong>. The metaclass is responsible for <strong>enforcing the pattern</strong> and the created class and subclasses need not be <strong>aware that they are singletons</strong>. <strong>Method #1</strong> fails this test, as you noted with \"MyClass itself is a a function, not a class, so you cannot call class methods from it.\"</p>\n<h1>Python 2 and 3 Compatible Version</h1>\n<p>Writing something that works in both Python2 and 3 requires using a slightly more complicated scheme. Since metaclasses are usually subclasses of type <code>type</code>, it's possible to use one to dynamically create an intermediary base class at run time with it as its metaclass and then use <em>that</em> as the baseclass of the public <code>Singleton</code> base class. It's harder to explain than to do, as illustrated next:</p>\n<pre><code class=\"python\"># works in Python 2 &amp; 3\nclass _Singleton(type):\n    \"\"\" A metaclass that creates a Singleton base class when called. \"\"\"\n    _instances = {}\n    def __call__(cls, *args, **kwargs):\n        if cls not in cls._instances:\n            cls._instances[cls] = super(_Singleton, cls).__call__(*args, **kwargs)\n        return cls._instances[cls]\n\nclass Singleton(_Singleton('SingletonMeta', (object,), {})): pass\n\nclass Logger(Singleton):\n    pass\n</code></pre>\n<p>An ironic aspect of this approach is that it's using subclassing to implement a metaclass. One possible advantage is that, unlike with a pure metaclass, <code>isinstance(inst, Singleton)</code> will return <code>True</code>.</p>\n<h2>Corrections</h2>\n<p>On another topic, you've probably already noticed this, but the base class implementation in your original post is wrong. <code>_instances</code> needs to be <strong>referenced on the class</strong>, you need to use <code>super()</code> or you're <strong>recursing</strong>, and <code>__new__</code> is actually a static method that you have to <strong>pass the class to</strong>, not a class method, as the actual class <strong>hasn't been created</strong> yet when it is called. All of these things will be true for a metaclass implementation as well.</p>\n<pre><code class=\"python\">class Singleton(object):\n  _instances = {}\n  def __new__(class_, *args, **kwargs):\n    if class_ not in class_._instances:\n        class_._instances[class_] = super(Singleton, class_).__new__(class_, *args, **kwargs)\n    return class_._instances[class_]\n\nclass MyClass(Singleton):\n  pass\n\nc = MyClass()\n</code></pre>\n<h2>Decorator Returning A Class</h2>\n<p>I originally was writing a comment but it was too long, so I'll add this here. <strong>Method #4</strong> is better than the other decorator version, but it's more code than needed for a singleton, and it's not as clear what it does.</p>\n<p>The main problems stem from the class being it's own base class. First, isn't it weird to have a class be a subclass of a nearly identical class with the same name that exists only in its <code>__class__</code> attribute? This also means that you can't define <strong>any methods that call the method of the same name on their base class</strong> with <code>super()</code> because they will recurse. This means your class can't customize <code>__new__</code>, and can't derive from any classes that need <code>__init__</code> called on them.</p>\n<h2>When to use the singleton pattern</h2>\n<p>Your use case is <strong>one of the better examples</strong> of wanting to use a singleton. You say in one of the comments \"To me logging has always seemed a natural candidate for Singletons.\" You're <strong>absolutely right</strong>.</p>\n<p>When people say singletons are bad, the most common reason is they are <strong>implicit shared state</strong>. While with global variables and top-level module imports are <strong>explicit</strong> shared state, other objects that are passed around are generally instantiated. This is a good point, <strong>with two exceptions</strong>.</p>\n<p>The first, and one that gets mentioned in various places, is when the singletons are <strong>constant</strong>. Use of global constants, especially enums, is widely accepted, and considered sane because no matter what, <strong>none of the users can mess them up for any other user</strong>. This is equally true for a constant singleton.</p>\n<p>The second exception, which get mentioned less, is the opposite -- when the singleton is <strong>only a data sink</strong>, not a data source (directly or indirectly). This is why loggers feel like a \"natural\" use for singletons. As the various users are <strong>not changing the loggers</strong> in ways other users will care about, there is <strong>not really shared state</strong>. This negates the primary argument against the singleton pattern, and makes them a reasonable choice because of their <strong>ease of use</strong> for the task.</p>\n<p>Here is a quote from <a href=\"http://googletesting.blogspot.com/2008/08/root-cause-of-singletons.html\" rel=\"noreferrer\">http://googletesting.blogspot.com/2008/08/root-cause-of-singletons.html</a>:</p>\n<blockquote>\n<p>Now, there is one kind of Singleton which is OK. That is a singleton where all of the reachable objects are immutable. If all objects are immutable than Singleton has no global state, as everything is constant. But it is so easy to turn this kind of singleton into mutable one, it is very slippery slope. Therefore, I am against these Singletons too, not because they are bad, but because it is very easy for them to go bad. (As a side note Java enumeration are just these kind of singletons. As long as you don't put state into your enumeration you are OK, so please don't.)</p>\n<p>The other kind of Singletons, which are semi-acceptable are those which don't effect the execution of your code, They have no \"side effects\". Logging is perfect example. It is loaded with Singletons and global state. It is acceptable (as in it will not hurt you) because your application does not behave any different whether or not a given logger is enabled. The information here flows one way: From your application into the logger. Even thought loggers are global state since no information flows from loggers into your application, loggers are acceptable. You should still inject your logger if you want your test to assert that something is getting logged, but in general Loggers are not harmful despite being full of state.</p>\n</blockquote>\n", "abstract": "I would recommend Method #2, but you're better off using a metaclass than a base class. Here is a sample implementation: Or in Python3 If you want to run __init__ every time the class is called, add to the if statement in Singleton.__call__. A few words about metaclasses. A metaclass is the class of a class; that is, a class is an instance of its metaclass. You find the metaclass of an object in Python with type(obj). Normal new-style classes are of type type. Logger in the code above will be of type class 'your_module.Singleton', just as the (only) instance of Logger will be of type class 'your_module.Logger'. When you call logger with Logger(), Python first asks the metaclass of Logger, Singleton, what to do, allowing instance creation to be pre-empted. This process is the same as Python asking a class what to do by calling __getattr__ when you reference one of it's attributes by doing myclass.attribute. A metaclass essentially decides what the definition of a class means and how to implement that definition. See for example http://code.activestate.com/recipes/498149/, which essentially recreates C-style structs in Python using metaclasses. The thread What are some (concrete) use-cases for metaclasses? also provides some examples, they generally seem to be related to declarative programming, especially as used in ORMs. In this situation, if you use your Method #2, and a subclass defines a __new__ method, it will be executed every time you call SubClassOfSingleton() -- because it is responsible for calling the method that returns the stored instance. With a metaclass, it will only be called once, when the only instance is created. You want to customize what it means to call the class, which is decided by it's type. In general, it makes sense to use a metaclass to implement a singleton. A singleton is special because is created only once, and a metaclass is the way you customize the creation of a class. Using a metaclass gives you more control in case you need to customize the singleton class definitions in other ways. Your singletons won't need multiple inheritance (because the metaclass is not a base class), but for subclasses of the created class that use multiple inheritance, you need to make sure the singleton class is the first / leftmost one with a metaclass that redefines __call__ This is very unlikely to be an issue. The instance dict is not in the instance's namespace so it won't accidentally overwrite it. You will also hear that the singleton pattern violates the \"Single Responsibility Principle\" -- each class should do only one thing. That way you don't have to worry about messing up one thing the code does if you need to change another, because they are separate and encapsulated. The metaclass implementation passes this test. The metaclass is responsible for enforcing the pattern and the created class and subclasses need not be aware that they are singletons. Method #1 fails this test, as you noted with \"MyClass itself is a a function, not a class, so you cannot call class methods from it.\" Writing something that works in both Python2 and 3 requires using a slightly more complicated scheme. Since metaclasses are usually subclasses of type type, it's possible to use one to dynamically create an intermediary base class at run time with it as its metaclass and then use that as the baseclass of the public Singleton base class. It's harder to explain than to do, as illustrated next: An ironic aspect of this approach is that it's using subclassing to implement a metaclass. One possible advantage is that, unlike with a pure metaclass, isinstance(inst, Singleton) will return True. On another topic, you've probably already noticed this, but the base class implementation in your original post is wrong. _instances needs to be referenced on the class, you need to use super() or you're recursing, and __new__ is actually a static method that you have to pass the class to, not a class method, as the actual class hasn't been created yet when it is called. All of these things will be true for a metaclass implementation as well. I originally was writing a comment but it was too long, so I'll add this here. Method #4 is better than the other decorator version, but it's more code than needed for a singleton, and it's not as clear what it does. The main problems stem from the class being it's own base class. First, isn't it weird to have a class be a subclass of a nearly identical class with the same name that exists only in its __class__ attribute? This also means that you can't define any methods that call the method of the same name on their base class with super() because they will recurse. This means your class can't customize __new__, and can't derive from any classes that need __init__ called on them. Your use case is one of the better examples of wanting to use a singleton. You say in one of the comments \"To me logging has always seemed a natural candidate for Singletons.\" You're absolutely right. When people say singletons are bad, the most common reason is they are implicit shared state. While with global variables and top-level module imports are explicit shared state, other objects that are passed around are generally instantiated. This is a good point, with two exceptions. The first, and one that gets mentioned in various places, is when the singletons are constant. Use of global constants, especially enums, is widely accepted, and considered sane because no matter what, none of the users can mess them up for any other user. This is equally true for a constant singleton. The second exception, which get mentioned less, is the opposite -- when the singleton is only a data sink, not a data source (directly or indirectly). This is why loggers feel like a \"natural\" use for singletons. As the various users are not changing the loggers in ways other users will care about, there is not really shared state. This negates the primary argument against the singleton pattern, and makes them a reasonable choice because of their ease of use for the task. Here is a quote from http://googletesting.blogspot.com/2008/08/root-cause-of-singletons.html: Now, there is one kind of Singleton which is OK. That is a singleton where all of the reachable objects are immutable. If all objects are immutable than Singleton has no global state, as everything is constant. But it is so easy to turn this kind of singleton into mutable one, it is very slippery slope. Therefore, I am against these Singletons too, not because they are bad, but because it is very easy for them to go bad. (As a side note Java enumeration are just these kind of singletons. As long as you don't put state into your enumeration you are OK, so please don't.) The other kind of Singletons, which are semi-acceptable are those which don't effect the execution of your code, They have no \"side effects\". Logging is perfect example. It is loaded with Singletons and global state. It is acceptable (as in it will not hurt you) because your application does not behave any different whether or not a given logger is enabled. The information here flows one way: From your application into the logger. Even thought loggers are global state since no information flows from loggers into your application, loggers are acceptable. You should still inject your logger if you want your test to assert that something is getting logged, but in general Loggers are not harmful despite being full of state."}, {"id": 6760726, "score": 136, "vote": 0, "content": "<pre><code class=\"python\">class Foo(object):\n     pass\n\nsome_global_variable = Foo()\n</code></pre>\n<p>Modules are imported only once, everything else is overthinking. Don't use singletons and try not to use globals.</p>\n", "abstract": "Modules are imported only once, everything else is overthinking. Don't use singletons and try not to use globals."}, {"id": 6760821, "score": 87, "vote": 0, "content": "<p>Use a module. It is imported only once. Define some global variables in it - they will be singleton's 'attributes'. Add some functions - the singleton's 'methods'.</p>\n", "abstract": "Use a module. It is imported only once. Define some global variables in it - they will be singleton's 'attributes'. Add some functions - the singleton's 'methods'."}, {"id": 27412017, "score": 63, "vote": 0, "content": "<p>You probably never need a singleton in Python. Just define all your data and functions in a module and you have a de facto singleton:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">import datetime\nfile_name=None\n\ndef set_file_name(new_file_name: str):\n    global file_name\n    file_name=new_file_name\n\ndef write(message: str):\n    global file_name\n    if file_name:\n        with open(file_name, 'a+') as f:\n            f.write(\"{} {}\\n\".format(datetime.datetime.now(), message))\n    else:\n        print(\"LOG: {}\", message)\n</code></pre>\n<p>To use:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">import log\nlog.set_file_name(\"debug.log\")\nlog.write(\"System starting\")\n...\n</code></pre>\n<p>If you really absolutely have to have a singleton class then I'd go with:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">class MySingleton(object):\n    def foo(self):\n        pass\n\nmy_singleton = MySingleton()\n</code></pre>\n<p>To use:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">from mysingleton import my_singleton\nmy_singleton.foo()\n</code></pre>\n<p>where <code>mysingleton.py</code> is your filename that <code>MySingleton</code> is defined in. This works because after the first time a file is imported, Python doesn't re-execute the code.</p>\n", "abstract": "You probably never need a singleton in Python. Just define all your data and functions in a module and you have a de facto singleton: To use: If you really absolutely have to have a singleton class then I'd go with: To use: where mysingleton.py is your filename that MySingleton is defined in. This works because after the first time a file is imported, Python doesn't re-execute the code."}, {"id": 19467267, "score": 15, "vote": 0, "content": "<p>Here's a one-liner for you:</p>\n<pre><code class=\"python\">singleton = lambda c: c()\n</code></pre>\n<p>Here's how you use it:</p>\n<pre><code class=\"python\">@singleton\nclass wat(object):\n    def __init__(self): self.x = 1\n    def get_x(self): return self.x\n\nassert wat.get_x() == 1\n</code></pre>\n<p>Your object gets instantiated eagerly.  This may or may not be what you want.</p>\n", "abstract": "Here's a one-liner for you: Here's how you use it: Your object gets instantiated eagerly.  This may or may not be what you want."}, {"id": 6760842, "score": 12, "vote": 0, "content": "<p>Check out Stack Overflow question <em><a href=\"https://stackoverflow.com/questions/31875\">Is there a simple, elegant way to define singletons in Python?</a></em> with several solutions.</p>\n<p>I'd strongly recommend to watch Alex Martelli's talks on design patterns in python: <a href=\"http://www.youtube.com/watch?v=1Sbzmz1Nxvo\" rel=\"noreferrer\">part 1</a> and <a href=\"http://www.youtube.com/watch?v=tJXhtncDBu4\" rel=\"noreferrer\">part 2</a>. In particular, in part 1 he talks about singletons/shared state objects.</p>\n", "abstract": "Check out Stack Overflow question Is there a simple, elegant way to define singletons in Python? with several solutions. I'd strongly recommend to watch Alex Martelli's talks on design patterns in python: part 1 and part 2. In particular, in part 1 he talks about singletons/shared state objects."}, {"id": 57307127, "score": 9, "vote": 0, "content": "<ul>\n<li>If one wants to have multiple number of instances of the same class, but only if the args or kwargs are different, one can use the third-party python package <a href=\"https://github.com/siddheshsathe/handy-decorators\" rel=\"noreferrer\"><em>Handy Decorators</em></a> (package <code>decorators</code>).</li>\n<li>Ex.\n\n<ol>\n<li>If you have a class handling <code>serial</code> communication, and to create an instance you want to send the serial port as an argument, then with traditional approach won't work</li>\n<li>Using the above mentioned decorators, one can create multiple instances of the class if the args are different.</li>\n<li>For same args, the decorator will return the same instance which is already been created.</li>\n</ol></li>\n</ul>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">&gt;&gt;&gt; from decorators import singleton\n&gt;&gt;&gt;\n&gt;&gt;&gt; @singleton\n... class A:\n...     def __init__(self, *args, **kwargs):\n...         pass\n...\n&gt;&gt;&gt;\n&gt;&gt;&gt; a = A(name='Siddhesh')\n&gt;&gt;&gt; b = A(name='Siddhesh', lname='Sathe')\n&gt;&gt;&gt; c = A(name='Siddhesh', lname='Sathe')\n&gt;&gt;&gt; a is b  # has to be different\nFalse\n&gt;&gt;&gt; b is c  # has to be same\nTrue\n&gt;&gt;&gt;\n</code></pre>\n", "abstract": ""}, {"id": 62693309, "score": 8, "vote": 0, "content": "<p>Using a function attribute is also very simple</p>\n<pre><code class=\"python\">def f():\n    if not hasattr(f, 'value'):\n        setattr(f, 'value', singletonvalue)\n    return f.value\n</code></pre>\n", "abstract": "Using a function attribute is also very simple"}, {"id": 7489659, "score": 6, "vote": 0, "content": "<p>Here's my own implementation of singletons. All you have to do is decorate the class; to get the singleton, you then have to use the <code>Instance</code> method. Here's an example:</p>\n<pre><code class=\"python\">@Singleton\nclass Foo:\n    def __init__(self):\n        print 'Foo created'\n\nf = Foo() # Error, this isn't how you get the instance of a singleton\n\nf = Foo.Instance() # Good. Being explicit is in line with the Python Zen\ng = Foo.Instance() # Returns already created instance\n\nprint f is g # True\n</code></pre>\n<p>And here's the code:</p>\n<pre><code class=\"python\">class Singleton:\n    \"\"\"\n    A non-thread-safe helper class to ease implementing singletons.\n    This should be used as a decorator -- not a metaclass -- to the\n    class that should be a singleton.\n\n    The decorated class can define one `__init__` function that\n    takes only the `self` argument. Other than that, there are\n    no restrictions that apply to the decorated class.\n \n    To get the singleton instance, use the `Instance` method. Trying\n    to use `__call__` will result in a `TypeError` being raised.\n\n    Limitations: The decorated class cannot be inherited from.\n\n    \"\"\"\n\n    def __init__(self, decorated):\n        self._decorated = decorated\n\n    def Instance(self):\n        \"\"\"\n        Returns the singleton instance. Upon its first call, it creates a\n        new instance of the decorated class and calls its `__init__` method.\n        On all subsequent calls, the already created instance is returned.\n\n        \"\"\"\n        try:\n            return self._instance\n        except AttributeError:\n            self._instance = self._decorated()\n            return self._instance\n\n    def __call__(self):\n        raise TypeError('Singletons must be accessed through `Instance()`.')\n\n    def __instancecheck__(self, inst):\n        return isinstance(inst, self._decorated)\n</code></pre>\n", "abstract": "Here's my own implementation of singletons. All you have to do is decorate the class; to get the singleton, you then have to use the Instance method. Here's an example: And here's the code:"}, {"id": 64545504, "score": 5, "vote": 0, "content": "<p>I prefer this solution which I found very clear and straightforward.\nIt is using double check for instance, if some other thread already created it.\nAdditional thing to consider is to make sure that deserialization isn't creating any other instances.\n<a href=\"https://gist.github.com/werediver/4396488\" rel=\"noreferrer\">https://gist.github.com/werediver/4396488</a></p>\n<pre><code class=\"python\">import threading\n\n\n# Based on tornado.ioloop.IOLoop.instance() approach.\n# See https://github.com/facebook/tornado\nclass SingletonMixin(object):\n    __singleton_lock = threading.Lock()\n    __singleton_instance = None\n\n    @classmethod\n    def instance(cls):\n        if not cls.__singleton_instance:\n            with cls.__singleton_lock:\n                if not cls.__singleton_instance:\n                    cls.__singleton_instance = cls()\n        return cls.__singleton_instance\n\n\nif __name__ == '__main__':\n    class A(SingletonMixin):\n        pass\n\n    class B(SingletonMixin):\n        pass\n\n    a, a2 = A.instance(), A.instance()\n    b, b2 = B.instance(), B.instance()\n\n    assert a is a2\n    assert b is b2\n    assert a is not b\n\n    print('a:  %s\\na2: %s' % (a, a2))\n    print('b:  %s\\nb2: %s' % (b, b2))\n</code></pre>\n", "abstract": "I prefer this solution which I found very clear and straightforward.\nIt is using double check for instance, if some other thread already created it.\nAdditional thing to consider is to make sure that deserialization isn't creating any other instances.\nhttps://gist.github.com/werediver/4396488"}, {"id": 69259814, "score": 4, "vote": 0, "content": "<h2>Use a class variable (no decorator)</h2>\n<p>By overriding the <code>__new__</code> method to return the same instance of the class. A boolean to only initialize the class for the first time:</p>\n<pre><code class=\"python\">class SingletonClass:\n    _instance = None\n\n    def __new__(cls, *args, **kwargs):\n        # If no instance of class already exits\n        if cls._instance is None:\n            cls._instance = object.__new__(cls)\n            cls._instance._initialized = False\n        return cls._instance\n        \n    def __init__(self, *args, **kwargs):\n        if self._initialized:\n            return\n\n        self.attr1 = args[0]\n        # set the attribute to `True` to not initialize again\n        self._initialized = True\n</code></pre>\n", "abstract": "By overriding the __new__ method to return the same instance of the class. A boolean to only initialize the class for the first time:"}, {"id": 69830623, "score": 4, "vote": 0, "content": "<pre class=\"lang-py prettyprint-override\"><code class=\"python\">from functools import cache\n\n@cache\nclass xxx:\n   ....\n</code></pre>\n<p>Dead easy and works!</p>\n", "abstract": "Dead easy and works!"}, {"id": 17840539, "score": 3, "vote": 0, "content": "<p>Method 3 seems to be very neat, but if you want your program to run in both <a href=\"https://en.wikipedia.org/wiki/History_of_Python#Version_2.0\" rel=\"nofollow\">Python\u00a02</a> and <a href=\"https://en.wikipedia.org/wiki/History_of_Python#Version_3.0\" rel=\"nofollow\">Python\u00a03</a>, it doesn't work. Even protecting the separate variants with tests for the Python version fails, because the Python\u00a03 version gives a syntax error in Python\u00a02.</p>\n<p>Thanks to Mike Watkins: <a href=\"http://mikewatkins.ca/2008/11/29/python-2-and-3-metaclasses/\" rel=\"nofollow\">http://mikewatkins.ca/2008/11/29/python-2-and-3-metaclasses/</a>. If you want the program to work in both Python\u00a02 and Python\u00a03, you need to do something like:</p>\n<pre><code class=\"python\">class Singleton(type):\n    _instances = {}\n    def __call__(cls, *args, **kwargs):\n        if cls not in cls._instances:\n            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)\n        return cls._instances[cls]\n\nMC = Singleton('MC', (object), {})\n\nclass MyClass(MC):\n    pass    # Code for the class implementation\n</code></pre>\n<p>I presume that 'object' in the assignment needs to be replaced with the 'BaseClass', but I haven't tried that (I have tried code as illustrated).</p>\n", "abstract": "Method 3 seems to be very neat, but if you want your program to run in both Python\u00a02 and Python\u00a03, it doesn't work. Even protecting the separate variants with tests for the Python version fails, because the Python\u00a03 version gives a syntax error in Python\u00a02. Thanks to Mike Watkins: http://mikewatkins.ca/2008/11/29/python-2-and-3-metaclasses/. If you want the program to work in both Python\u00a02 and Python\u00a03, you need to do something like: I presume that 'object' in the assignment needs to be replaced with the 'BaseClass', but I haven't tried that (I have tried code as illustrated)."}, {"id": 39186313, "score": 3, "vote": 0, "content": "<p>I'll toss mine into the ring. It's a simple decorator.</p>\n<pre><code class=\"python\">from abc import ABC\n\ndef singleton(real_cls):\n\n    class SingletonFactory(ABC):\n\n        instance = None\n\n        def __new__(cls, *args, **kwargs):\n            if not cls.instance:\n                cls.instance = real_cls(*args, **kwargs)\n            return cls.instance\n\n    SingletonFactory.register(real_cls)\n    return SingletonFactory\n\n# Usage\n@singleton\nclass YourClass:\n    ...  # Your normal implementation, no special requirements.\n</code></pre>\n<p>Benefits I think it has over some of the other solutions:</p>\n<ul>\n<li>It's clear and concise (to my eye ;D).</li>\n<li>Its action is completely encapsulated. You don't need to change a single thing about the implementation of <code>YourClass</code>. This includes not needing to use a metaclass for your class (note that the metaclass above is on the factory, not the \"real\" class).</li>\n<li>It doesn't rely on monkey-patching anything.</li>\n<li>It's transparent to callers:\n\n<ul>\n<li>Callers still simply import <code>YourClass</code>, it looks like a class (because it is), and they use it normally. No need to adapt callers to a factory function.</li>\n<li>What <code>YourClass()</code> instantiates is still a true instance of the <code>YourClass</code> you implemented, not a proxy of any kind, so no chance of side effects resulting from that.</li>\n<li><code>isinstance(instance, YourClass)</code> and similar operations still work as expected (though this bit does require abc so precludes Python &lt;2.6).</li>\n</ul></li>\n</ul>\n<p>One downside does occur to me: classmethods and staticmethods of the real class are not transparently callable via the factory class hiding it. I've used this rarely enough that I've never happen to run into that need, but it would be easily rectified by using a custom metaclass on the factory that implements <code>__getattr__()</code> to delegate all-ish attribute access to the real class.</p>\n<p>A related pattern I've actually found more useful (not that I'm saying these kinds of things are required very often at all) is a \"Unique\" pattern where instantiating the class with the <em>same arguments</em> results in getting back the same instance. I.e. a \"singleton per arguments\". The above adapts to this well and becomes even more concise:</p>\n<pre><code class=\"python\">def unique(real_cls):\n\n    class UniqueFactory(ABC):\n\n        @functools.lru_cache(None)  # Handy for 3.2+, but use any memoization decorator you like\n        def __new__(cls, *args, **kwargs):\n            return real_cls(*args, **kwargs)\n\n    UniqueFactory.register(real_cls)\n    return UniqueFactory\n</code></pre>\n<p>All that said, I do agree with the general advice that if you think you need one of these things, you really should probably stop for a moment and ask yourself if you really do. 99% of the time, YAGNI.</p>\n", "abstract": "I'll toss mine into the ring. It's a simple decorator. Benefits I think it has over some of the other solutions: One downside does occur to me: classmethods and staticmethods of the real class are not transparently callable via the factory class hiding it. I've used this rarely enough that I've never happen to run into that need, but it would be easily rectified by using a custom metaclass on the factory that implements __getattr__() to delegate all-ish attribute access to the real class. A related pattern I've actually found more useful (not that I'm saying these kinds of things are required very often at all) is a \"Unique\" pattern where instantiating the class with the same arguments results in getting back the same instance. I.e. a \"singleton per arguments\". The above adapts to this well and becomes even more concise: All that said, I do agree with the general advice that if you think you need one of these things, you really should probably stop for a moment and ask yourself if you really do. 99% of the time, YAGNI."}, {"id": 63483209, "score": 3, "vote": 0, "content": "<p>I will recommend an elegant solution using metaclasses</p>\n<pre><code class=\"python\">class Singleton(type): \n    # Inherit from \"type\" in order to gain access to method __call__\n    def __init__(self, *args, **kwargs):\n        self.__instance = None # Create a variable to store the object reference\n        super().__init__(*args, **kwargs)\n\n    def __call__(self, *args, **kwargs):\n        if self.__instance is None:\n            # if the object has not already been created\n            self.__instance = super().__call__(*args, **kwargs) # Call the __init__ method of the subclass (Spam) and save the reference\n            return self.__instance\n        else:\n            # if object (Spam) reference already exists; return it\n            return self.__instance\n\nclass Spam(metaclass=Singleton):\n    def __init__(self, x):\n        print('Creating Spam')\n        self.x = x\n\n\nif __name__ == '__main__':\n    spam = Spam(100)\n    spam2 = Spam(200)\n</code></pre>\n<p>Output:</p>\n<pre><code class=\"python\">Creating Spam\n</code></pre>\n<p>As you can see from the output, only one object is instantiated</p>\n", "abstract": "I will recommend an elegant solution using metaclasses Output: As you can see from the output, only one object is instantiated"}, {"id": 6810621, "score": 2, "vote": 0, "content": "<p>Well, other than agreeing with the general Pythonic suggestion on having module-level global, how about this:</p>\n<pre><code class=\"python\">def singleton(class_):\n    class class_w(class_):\n        _instance = None\n        def __new__(class2, *args, **kwargs):\n            if class_w._instance is None:\n                class_w._instance = super(class_w, class2).__new__(class2, *args, **kwargs)\n                class_w._instance._sealed = False\n            return class_w._instance\n        def __init__(self, *args, **kwargs):\n            if self._sealed:\n                return\n            super(class_w, self).__init__(*args, **kwargs)\n            self._sealed = True\n    class_w.__name__ = class_.__name__\n    return class_w\n\n@singleton\nclass MyClass(object):\n    def __init__(self, text):\n        print text\n    @classmethod\n    def name(class_):\n        print class_.__name__\n\nx = MyClass(111)\nx.name()\ny = MyClass(222)\nprint id(x) == id(y)\n</code></pre>\n<p>Output is:</p>\n<pre><code class=\"python\">111     # the __init__ is called only on the 1st time\nMyClass # the __name__ is preserved\nTrue    # this is actually the same instance\n</code></pre>\n", "abstract": "Well, other than agreeing with the general Pythonic suggestion on having module-level global, how about this: Output is:"}, {"id": 23717235, "score": 2, "vote": 0, "content": "<p>How about this:</p>\n<pre><code class=\"python\">def singleton(cls):\n    instance=cls()\n    cls.__new__ = cls.__call__= lambda cls: instance\n    cls.__init__ = lambda self: None\n    return instance\n</code></pre>\n<p>Use it as a decorator on a class that should be a singleton. Like this:</p>\n<pre><code class=\"python\">@singleton\nclass MySingleton:\n    #....\n</code></pre>\n<p>This is similar to the <code>singleton = lambda c: c()</code> decorator in another answer. Like the other solution, the only instance has name of the class (<code>MySingleton</code>).  However, with this solution you can still \"create\" instances (actually get the only instance) from the class, by doing <code>MySingleton()</code>. It also prevents you from creating additional instances by doing <code>type(MySingleton)()</code> (that also returns the same instance).</p>\n", "abstract": "How about this: Use it as a decorator on a class that should be a singleton. Like this: This is similar to the singleton = lambda c: c() decorator in another answer. Like the other solution, the only instance has name of the class (MySingleton).  However, with this solution you can still \"create\" instances (actually get the only instance) from the class, by doing MySingleton(). It also prevents you from creating additional instances by doing type(MySingleton)() (that also returns the same instance)."}, {"id": 35534104, "score": 2, "vote": 0, "content": "<p>It is slightly similar to the answer by fab but not exactly the same.</p>\n<p>The <a href=\"https://python-patterns.guide/gang-of-four/singleton/\" rel=\"nofollow noreferrer\">singleton pattern</a> does not require that we be able to call the constructor multiple times.  As a singleton should be created once and once only, shouldn't it be seen to be created just once?  \"Spoofing\" the constructor arguably impairs legibility.</p>\n<p>So my suggestion is just this:</p>\n<pre><code class=\"python\">class Elvis():\n    def __init__(self):\n        if hasattr(self.__class__, 'instance'):\n            raise Exception()\n        self.__class__.instance = self\n        # initialisation code...\n\n    @staticmethod\n    def the():\n        if hasattr(Elvis, 'instance'):\n            return Elvis.instance\n        return Elvis()\n</code></pre>\n<p>This does not rule out the use of the constructor or the field <code>instance</code> by user code:</p>\n<pre><code class=\"python\">if Elvis() is King.instance:\n</code></pre>\n<p>... if you know for sure that <code>Elvis</code> has not yet been created, and that <code>King</code> has.</p>\n<p>But it <em>encourages</em> users to use the <code>the</code> method universally:</p>\n<pre><code class=\"python\">Elvis.the().leave(Building.the())\n</code></pre>\n<p>To make this complete you could also override <code>__delattr__()</code> to raise an Exception if an attempt is made to delete <code>instance</code>, and override <code>__del__()</code> so that it raises an Exception (unless we know the program is ending...)</p>\n<h1>Further improvements</h1>\n<hr/>\n<p>My thanks to those who have helped with comments and edits, of which more are welcome. While I use Jython, this should work more generally, and be thread-safe.</p>\n<pre><code class=\"python\">try:\n    # This is jython-specific\n    from synchronize import make_synchronized\nexcept ImportError:\n    # This should work across different python implementations\n    def make_synchronized(func):\n        import threading\n        func.__lock__ = threading.Lock()\n    \n        def synced_func(*args, **kws):\n            with func.__lock__:\n                return func(*args, **kws)\n\n        return synced_func\n\nclass Elvis(object): # NB must be subclass of object to use __new__\n    instance = None\n\n    @classmethod\n    @make_synchronized\n    def __new__(cls, *args, **kwargs):\n        if cls.instance is not None:\n            raise Exception()\n        cls.instance = object.__new__(cls, *args, **kwargs)\n        return cls.instance\n    \n    def __init__(self):\n        pass\n        # initialisation code...\n\n    @classmethod\n    @make_synchronized\n    def the(cls):\n        if cls.instance is not None:\n            return cls.instance\n        return cls()\n</code></pre>\n<p>Points of note:</p>\n<ol>\n<li>If you don't subclass from object in python2.x you will get an old-style class, which does not use <code>__new__</code></li>\n<li>When decorating <code>__new__</code> you must decorate with @classmethod or <code>__new__</code> will be an unbound instance method</li>\n<li>This could possibly be improved by way of use of a metaclass, as this would allow you to make <code>the</code> a class-level property, possibly renaming it to <code>instance</code></li>\n</ol>\n", "abstract": "It is slightly similar to the answer by fab but not exactly the same. The singleton pattern does not require that we be able to call the constructor multiple times.  As a singleton should be created once and once only, shouldn't it be seen to be created just once?  \"Spoofing\" the constructor arguably impairs legibility. So my suggestion is just this: This does not rule out the use of the constructor or the field instance by user code: ... if you know for sure that Elvis has not yet been created, and that King has. But it encourages users to use the the method universally: To make this complete you could also override __delattr__() to raise an Exception if an attempt is made to delete instance, and override __del__() so that it raises an Exception (unless we know the program is ending...) My thanks to those who have helped with comments and edits, of which more are welcome. While I use Jython, this should work more generally, and be thread-safe. Points of note:"}, {"id": 39777706, "score": 2, "vote": 0, "content": "<p>This answer is likely not what you're looking for. I wanted a singleton in the sense that only that object had its identity, for comparison to. In my case it was being used as a <a href=\"https://en.wikipedia.org/wiki/Sentinel_value\" rel=\"nofollow\">Sentinel Value</a>. To which the answer is very simple, make any object <code>mything = object()</code> and by python's nature,  only that thing will have its identity.</p>\n<pre><code class=\"python\">#!python\nMyNone = object()  # The singleton\n\nfor item in my_list:\n    if item is MyNone:  # An Example identity comparison\n        raise StopIteration\n</code></pre>\n", "abstract": "This answer is likely not what you're looking for. I wanted a singleton in the sense that only that object had its identity, for comparison to. In my case it was being used as a Sentinel Value. To which the answer is very simple, make any object mything = object() and by python's nature,  only that thing will have its identity."}, {"id": 57548242, "score": 2, "vote": 0, "content": "<p>Maybe I missunderstand the singleton pattern but my solution is this simple and pragmatic (pythonic?). This code fullfills two goals</p>\n<ol>\n<li>Make the instance of <code>Foo</code> accessiable everywhere (global).</li>\n<li>Only one instance of <code>Foo</code> can exist.</li>\n</ol>\n<p>This is the code.</p>\n<pre><code class=\"python\">#!/usr/bin/env python3\n\nclass Foo:\n    me = None\n\n    def __init__(self):\n        if Foo.me != None:\n            raise Exception('Instance of Foo still exists!')\n\n        Foo.me = self\n\n\nif __name__ == '__main__':\n    Foo()\n    Foo()\n</code></pre>\n<p>Output</p>\n<pre><code class=\"python\">Traceback (most recent call last):\n  File \"./x.py\", line 15, in &lt;module&gt;\n    Foo()\n  File \"./x.py\", line 8, in __init__\n    raise Exception('Instance of Foo still exists!')\nException: Instance of Foo still exists!\n</code></pre>\n", "abstract": "Maybe I missunderstand the singleton pattern but my solution is this simple and pragmatic (pythonic?). This code fullfills two goals This is the code. Output"}, {"id": 65183531, "score": 2, "vote": 0, "content": "<p>I also prefer decorator syntax to deriving from metaclass. My two cents:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">from typing import Callable, Dict, Set\n\n\ndef singleton(cls_: Callable) -&gt; type:\n    \"\"\" Implements a simple singleton decorator\n    \"\"\"\n    class Singleton(cls_):  # type: ignore\n        __instances: Dict[type, object] = {}\n        __initialized: Set[type] = set()\n\n        def __new__(cls, *args, **kwargs):\n            if Singleton.__instances.get(cls) is None:\n                Singleton.__instances[cls] = super().__new__(cls, *args, **kwargs)\n            return Singleton.__instances[cls]\n\n        def __init__(self, *args, **kwargs):\n            if self.__class__ not in Singleton.__initialized:\n                Singleton.__initialized.add(self.__class__)\n                super().__init__(*args, **kwargs)\n\n    return Singleton\n\n\n@singleton\nclass MyClass(...):\n    ...\n</code></pre>\n<p>This has some benefits above other decorators provided:</p>\n<ul>\n<li><code>isinstance(MyClass(), MyClass)</code> will still work (returning a function from the clausure instead of a class will make isinstance to fail)</li>\n<li><code>property</code>, <code>classmethod</code> and <code>staticmethod</code> will still work as expected</li>\n<li><code>__init__()</code> constructor is executed only once</li>\n<li>You can inherit from your decorated class (useless?) using @singleton again</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li><code>print(MyClass().__class__.__name__)</code> will return <code>Singleton</code> instead of <code>MyClass</code>. If you still need this, I recommend using a metaclass as suggested above.</li>\n</ul>\n<p>If you need a different instance based on constructor parameters this solution needs to be improved (solution provided by <a href=\"https://stackoverflow.com/users/5602664/siddhesh-suhas-sathe\">siddhesh-suhas-sathe</a> provides this).</p>\n<p>Finally, as other suggested, consider using a module in python. Modules <em>are</em> objects. You can even pass them in variables and inject them in other classes.</p>\n", "abstract": "I also prefer decorator syntax to deriving from metaclass. My two cents: This has some benefits above other decorators provided: Cons: If you need a different instance based on constructor parameters this solution needs to be improved (solution provided by siddhesh-suhas-sathe provides this). Finally, as other suggested, consider using a module in python. Modules are objects. You can even pass them in variables and inject them in other classes."}, {"id": 66509752, "score": 2, "vote": 0, "content": "<blockquote>\n<p>Pros</p>\n<p>It's a true class Auto-magically covers inheritance Uses <strong>metaclass</strong>\nfor its proper purpose (and made me aware of it) Cons</p>\n<p>Are there any?</p>\n</blockquote>\n<p>This will be problem with serialziation. If you try to deserialize object from file (pickle) it will not use <code>__call__</code> so it will create new file, you can use base class inheritance with <code>__new__</code> to prevent that.</p>\n", "abstract": "Pros It's a true class Auto-magically covers inheritance Uses metaclass\nfor its proper purpose (and made me aware of it) Cons Are there any? This will be problem with serialziation. If you try to deserialize object from file (pickle) it will not use __call__ so it will create new file, you can use base class inheritance with __new__ to prevent that."}, {"id": 68673587, "score": 2, "vote": 0, "content": "<p>I just made a simple one by accident and thought I'd share it...</p>\n<pre><code class=\"python\">class MySingleton(object):\n    def __init__(self, *, props={}):\n        self.__dict__ = props\n\nmything = MySingleton()\nmything.test = 1\nmything2 = MySingleton()\nprint(mything2.test)\nmything2.test = 5\nprint(mything.test)\n</code></pre>\n", "abstract": "I just made a simple one by accident and thought I'd share it..."}, {"id": 26858284, "score": 1, "vote": 0, "content": "<p>I can't remember where I found this solution, but I find it to be the most 'elegant' from my non-Python-expert point of view:</p>\n<pre><code class=\"python\">class SomeSingleton(dict):\n    __instance__ = None\n    def __new__(cls, *args,**kwargs):\n        if SomeSingleton.__instance__ is None:\n            SomeSingleton.__instance__ = dict.__new__(cls)\n        return SomeSingleton.__instance__\n\n    def __init__(self):\n        pass\n\n    def some_func(self,arg):\n        pass\n</code></pre>\n<p>Why do I like this?  No decorators, no meta classes, no multiple inheritance...and if you decide you don't want it to be a Singleton anymore, just delete the <code>__new__</code> method.  As I am new to Python (and OOP in general) I expect someone will set me straight about why this is a terrible approach?</p>\n", "abstract": "I can't remember where I found this solution, but I find it to be the most 'elegant' from my non-Python-expert point of view: Why do I like this?  No decorators, no meta classes, no multiple inheritance...and if you decide you don't want it to be a Singleton anymore, just delete the __new__ method.  As I am new to Python (and OOP in general) I expect someone will set me straight about why this is a terrible approach?"}, {"id": 27713039, "score": 1, "vote": 0, "content": "<p>Code based on <a href=\"https://stackoverflow.com/a/23717235/3821804\">Tolli's answer</a>.</p>\n<pre><code class=\"python\">#decorator, modyfies new_cls\ndef _singleton(new_cls):\n    instance = new_cls()                                              #2\n    def new(cls):\n        if isinstance(instance, cls):                                 #4\n            return instance\n        else:\n            raise TypeError(\"I can only return instance of {}, caller wanted {}\".format(new_cls, cls))\n    new_cls.__new__  = new                                            #3\n    new_cls.__init__ = lambda self: None                              #5\n    return new_cls\n\n\n#decorator, creates new class\ndef singleton(cls):\n    new_cls = type('singleton({})'.format(cls.__name__), (cls,), {} ) #1\n    return _singleton(new_cls)\n\n\n#metaclass\ndef meta_singleton(name, bases, attrs):\n    new_cls = type(name, bases, attrs)                                #1\n    return _singleton(new_cls)\n</code></pre>\n<p>Explanation:</p>\n<ol>\n<li><p>Create new class, inheriting from given <code>cls</code><br/>\n(it doesn't modify <code>cls</code> in case someone wants for example <code>singleton(list)</code>)</p></li>\n<li><p>Create instance. Before overriding <code>__new__</code> it's so easy.</p></li>\n<li>Now, when we have easily created instance, overrides <code>__new__</code> using method defined moment ago.  </li>\n<li><p>The function returns <code>instance</code> only when it's what the caller expects, otherwise raises <code>TypeError</code>.<br/>\nThe condition is not met when someone attempts to inherit from decorated class.</p></li>\n<li><blockquote>\n<p><strong>If <code>__new__()</code> returns an instance of <code>cls</code>, then the new instance\u2019s <code>__init__()</code> method will be invoked</strong> like <code>__init__(self[, ...])</code>, where self is the new instance and the remaining arguments are the same as were passed to <code>__new__()</code>.</p>\n</blockquote>\n<p><code>instance</code> is already initialized, so function replaces <code>__init__</code> with function doing nothing.</p></li>\n</ol>\n<p><a href=\"http://rextester.com/SWV83853\" rel=\"nofollow noreferrer\">See it working online</a></p>\n", "abstract": "Code based on Tolli's answer. Explanation: Create new class, inheriting from given cls\n(it doesn't modify cls in case someone wants for example singleton(list)) Create instance. Before overriding __new__ it's so easy. The function returns instance only when it's what the caller expects, otherwise raises TypeError.\nThe condition is not met when someone attempts to inherit from decorated class. If __new__() returns an instance of cls, then the new instance\u2019s __init__() method will be invoked like __init__(self[, ...]), where self is the new instance and the remaining arguments are the same as were passed to __new__(). instance is already initialized, so function replaces __init__ with function doing nothing. See it working online"}, {"id": 49144365, "score": 1, "vote": 0, "content": "<p>One liner (I am not proud, but it does the job):</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">import sys\n\nclass Myclass:\n  def __init__(self):\n     # do your stuff\n      vars(sys.modules[__name__])[type(self).__name__] = lambda: self # singletonify\n</code></pre>\n", "abstract": "One liner (I am not proud, but it does the job):"}, {"id": 53998434, "score": 1, "vote": 0, "content": "<p>If you don't need lazy initialization of the instance of the Singleton, then the following should be easy and thread-safe:</p>\n<pre><code class=\"python\">class A:\n    instance = None\n    # Methods and variables of the class/object A follow\nA.instance = A()\n</code></pre>\n<p>This way <code>A</code> is a singleton initialized at module import.</p>\n", "abstract": "If you don't need lazy initialization of the instance of the Singleton, then the following should be easy and thread-safe: This way A is a singleton initialized at module import."}, {"id": 58452814, "score": 1, "vote": 0, "content": "<p>After struggling with this for some time I eventually came up with the following, so that the config object would only be loaded once, when called up from separate modules.  The metaclass allows a global class instance to be stored in the builtins dict, which at present appears to be the neatest way of storing a proper program global.</p>\n<pre><code class=\"python\">import builtins\n\n# -----------------------------------------------------------------------------\n# So..... you would expect that a class would be \"global\" in scope, however\n#   when different modules use this,\n#   EACH ONE effectively has its own class namespace.  \n#   In order to get around this, we use a metaclass to intercept\n#   \"new\" and provide the \"truly global metaclass instance\" if it already exists\n\nclass MetaConfig(type):\n    def __new__(cls, name, bases, dct):\n        try:\n            class_inst = builtins.CONFIG_singleton\n\n        except AttributeError:\n            class_inst = super().__new__(cls, name, bases, dct)\n            builtins.CONFIG_singleton = class_inst\n            class_inst.do_load()\n\n        return class_inst\n\n# -----------------------------------------------------------------------------\n\nclass Config(metaclass=MetaConfig):\n\n    config_attr = None\n\n    @classmethod\n    def do_load(cls):\n        ...&lt;load-cfg-from-file&gt;...\n</code></pre>\n", "abstract": "After struggling with this for some time I eventually came up with the following, so that the config object would only be loaded once, when called up from separate modules.  The metaclass allows a global class instance to be stored in the builtins dict, which at present appears to be the neatest way of storing a proper program global."}, {"id": 66568744, "score": 1, "vote": 0, "content": "<p>You can use a <code>metaclass</code> if you want to use <code>instance</code> as a property. For example;</p>\n<pre><code class=\"python\">class SingletonMeta(type):\n    def __init__(cls, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        cls._instance = None\n        cls._locker = threading.Lock()\n\n    @property\n    def instance(self, *args, **kwargs):\n        if self._instance is None:\n            with self._locker:\n                if self._instance is None:\n                    self._instance = self(*args, **kwargs)\n        return self._instance\n\n\nclass MyClass(metaclass=SingletonMeta):\n    def __init__(self):\n        # init here\n        pass\n\n\n# get the instance\nmy_class_instance = MyClass.instance\n</code></pre>\n", "abstract": "You can use a metaclass if you want to use instance as a property. For example;"}, {"id": 72246576, "score": 1, "vote": 0, "content": "<h2>Method: override __new__ after single use</h2>\n<pre><code class=\"python\">class Singleton():\n    def __init__(self):\n        Singleton.instance = self\n        Singleton.__new__ = lambda _: Singleton.instance\n</code></pre>\n<p>Pros</p>\n<ul>\n<li>Extremely simple and concise</li>\n<li>True class, no modules needed</li>\n<li>Proper use of lambda and pythonic monkey patching</li>\n</ul>\n<p>Cons</p>\n<ul>\n<li>__new__ could be overridden again</li>\n</ul>\n", "abstract": "Pros Cons"}, {"id": 70007900, "score": 0, "vote": 0, "content": "<p>Here is simple implementation combining @agf and @(Siddhesh Suhas Sathe) solutions, where it uses metaclass and take into consideration the constructor args so you can return the same instance if you created the <code>foo</code> class with the exact same args</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">\nclass SingletonMeta(type):\n    _instances = {}\n\n    def __call__(cls, *args, **kwargs):\n        \"\"\"\n        Possible changes to the value of the `__init__` argument do not affect\n        the returned instance.\n        \"\"\"\n        cls_instances = cls._instances.get(cls) or []\n        matching_instances = list(\n            filter(\n                lambda x: x[\"args\"] == args and x[\"kwargs\"] == kwargs,\n                cls_instances,\n            )\n        )\n        if len(matching_instances) == 1:\n            return matching_instances[0][\"instance\"]\n        else:\n            instance = super().__call__(*args, **kwargs)\n            cls_instances.append({\"instance\": instance, \"args\": args, \"kwargs\": kwargs})\n            cls._instances[cls] = cls_instances\n            return instance\n\n\nclass foo(metaclass=SingletonMeta):\n    def __init__(self, param, k_param=None) -&gt; None:\n        print(\"Creating new instance\")\n        self.param = param\n        self.k_param = k_param\n        self._creation_time = time.time()\n</code></pre>\n", "abstract": "Here is simple implementation combining @agf and @(Siddhesh Suhas Sathe) solutions, where it uses metaclass and take into consideration the constructor args so you can return the same instance if you created the foo class with the exact same args"}, {"id": 70906745, "score": 0, "vote": 0, "content": "<p>I prefer to use a static method GetInstance() to create a singleton object (also not allow any other method to do that) to emphasize that I am using a singleton design pattern.</p>\n<pre><code class=\"python\">import inspect\nclass SingletonMeta(type):\n    __instances = {}\n    GET_INSTANCE = 'GetInstance' # class method ussed to create Singleton instance\n\n    def __call__(cls, *args, **kwargs):\n        caller_frame = inspect.currentframe().f_back\n\n        caller_class = caller_frame.f_locals.get('cls_ref')\n        caller_method_name = caller_frame.f_code.co_name\n        if caller_class is cls and \\\n            caller_method_name == SingletonMeta.GET_INSTANCE:\n            obj = super(SingletonMeta, cls).__call__(*args, **kwargs)\n        else:\n            raise Exception(f\"Class '{cls.__name__}' is a singleton! Use '{cls.__name__}.{SingletonMeta.GET_INSTANCE}()' to create its instance.\")\n\n        return obj\n\n    def __new__(cls, name, bases, dct):\n        def GetInstance(cls_ref):\n            if cls_ref not in cls_ref.__instances:\n                cls_ref.__instances[cls_ref] = cls_ref()\n\n            return cls_ref.__instances[cls_ref]\n       \n        return super().__new__(cls, name, bases, {**dct, GetInstance.__name__: classmethod(GetInstance)})\n#------------------------\nif __name__ == '__main__':\n    class SingletonSample1(metaclass=SingletonMeta):\n        def __init__(self):\n            self.__x = 1\n\n        @property\n        def x(self) -&gt; int:\n            return self.__x\n\n        @x.setter\n        def x(self, value):\n            self.__x = value\n\n    s1 = SingletonSample1.GetInstance()\n    s1.x = 3\n\n    try:\n        s2 = SingletonSample1()\n    Exception as error:\n        print(repr(error))\n</code></pre>\n", "abstract": "I prefer to use a static method GetInstance() to create a singleton object (also not allow any other method to do that) to emphasize that I am using a singleton design pattern."}, {"id": 71943034, "score": 0, "vote": 0, "content": "<p>I want to point out that the first method defines a dictionary for lookup, which I until today do not understand, and I see this solution spreading all over the place, so I guess everyone just copy pastes it from here.</p>\n<p>I am talking about this one:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">def singleton(class_):\n    instances = {} # &lt;-- will always only have one entry.\n    def getinstance(*args, **kwargs):\n        if class_ not in instances:\n            instances[class_] = class_(*args, **kwargs)\n        return instances[class_]\n    return getinstance\n</code></pre>\n<p>It makes sense for metaclass solutions, but with the one-off decorator solution, each time the decorator is called, a new function gets defined, as well as a new instances variable, so each \"instances\" will always only have one entry, except if you make it global. It will also not work with inheritance anyway.</p>\n<p>A similar, but simpler, and also better adjustable solution:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">def singleton(class_):\n    def wrapper(*args, **kwargs):\n        if not wrapper._instance:\n            wrapper._instance = class_(*args, **kwargs)\n        return wrapper._instance\n\n    wrapper._instance = None\n    return wrapper\n</code></pre>\n<p>adding a simple</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">    ...\n    wrapper.__wrapped__ = class_\n    return wrapper\n</code></pre>\n<p>as well also allows inheritance or mocking, by accessing <code>__wrapped__</code>, which is also not possible with the inner dict lookup.</p>\n<p>(Of course pardon me, if I simply did not understand the mystery behind the dictionary lookup. Maybe it is my fault for not understanding the particular intent behind it)</p>\n", "abstract": "I want to point out that the first method defines a dictionary for lookup, which I until today do not understand, and I see this solution spreading all over the place, so I guess everyone just copy pastes it from here. I am talking about this one: It makes sense for metaclass solutions, but with the one-off decorator solution, each time the decorator is called, a new function gets defined, as well as a new instances variable, so each \"instances\" will always only have one entry, except if you make it global. It will also not work with inheritance anyway. A similar, but simpler, and also better adjustable solution: adding a simple as well also allows inheritance or mocking, by accessing __wrapped__, which is also not possible with the inner dict lookup. (Of course pardon me, if I simply did not understand the mystery behind the dictionary lookup. Maybe it is my fault for not understanding the particular intent behind it)"}, {"id": 72439478, "score": 0, "vote": 0, "content": "<p>As @Staale mentions <a href=\"https://stackoverflow.com/questions/31875/is-there-a-simple-elegant-way-to-define-singletons/31887#31887\">here</a>, the simplest way to make a singleton in python is to use a module with global variables (as 'attributes' &amp; global functions as 'methods'). <strong>BUT I would like to add something very important to this already amazing answer: inheritance works here too!</strong></p>\n<p>All you need to do to make a 'singleton module' B.py that inherits from another 'singleton module' A.py is start B.py with the line: <code>from A import *</code>, this respects private variables (by not importing them by default).</p>\n", "abstract": "As @Staale mentions here, the simplest way to make a singleton in python is to use a module with global variables (as 'attributes' & global functions as 'methods'). BUT I would like to add something very important to this already amazing answer: inheritance works here too! All you need to do to make a 'singleton module' B.py that inherits from another 'singleton module' A.py is start B.py with the line: from A import *, this respects private variables (by not importing them by default)."}, {"id": 72849869, "score": 0, "vote": 0, "content": "<p>Few caveats I would want to highlight is,</p>\n<ol>\n<li><code>metaclass</code> approach:</li>\n</ol>\n<ul>\n<li>You can not inherit from 2 metaclasses. <a href=\"https://stackoverflow.com/q/70360775/7477462\">Check</a></li>\n<li>In case if you are using a factory pattern all of which are singleton classes then it wont work.</li>\n<li>Your parent is already inheriting from <code>ABC</code> (which is metaclass) then you can not inherit from singleton metaclass</li>\n</ul>\n<ol start=\"2\">\n<li>Decorator approach:</li>\n</ol>\n<ul>\n<li>I was using a function as factory interface which creates an instance of <code>T</code> from <code>base.__subclasses__()</code>.</li>\n<li>This will skip the singleton decorator for the subclass initialization</li>\n</ul>\n", "abstract": "Few caveats I would want to highlight is,"}, {"id": 73495847, "score": 0, "vote": 0, "content": "<p>Check this out.\nThe idea is to hash the instance key by args and kwargs.\n<a href=\"https://stackoverflow.com/a/73495782/2910384\">https://stackoverflow.com/a/73495782/2910384</a></p>\n", "abstract": "Check this out.\nThe idea is to hash the instance key by args and kwargs.\nhttps://stackoverflow.com/a/73495782/2910384"}, {"id": 73988733, "score": 0, "vote": 0, "content": "<p>M\u035f\u0332\u035fo\u035f\u0332\u035fs\u035f\u0332\u035ft\u035f\u0332\u035f \u035f\u0332\u035fr\u035f\u0332\u035fe\u035f\u0332\u035fc\u035f\u0332\u035fe\u035f\u0332\u035fn\u035f\u0332\u035ft\u035f\u0332\u035f \u035f\u0332\u035fv\u035f\u0332\u035fe\u035f\u0332\u035fr\u035f\u0332\u035fs\u035f\u0332\u035fi\u035f\u0332\u035fo\u035f\u0332\u035fn\u035f\u0332\u035fs\u035f\u0332\u035f \u035f\u0332\u035fo\u035f\u0332\u035ff\u035f\u0332\u035f \u035f\u0332\u035fp\u035f\u0332\u035fy\u035f\u0332\u035ft\u035f\u0332\u035fh\u035f\u0332\u035fo\u035f\u0332\u035fn\u035f\u0332\u035f \u035f\u0332\u035fa\u035f\u0332\u035fl\u035f\u0332\u035fr\u035f\u0332\u035fe\u035f\u0332\u035fa\u035f\u0332\u035fd\u035f\u0332\u035fy\u035f\u0332\u035f \u035f\u0332\u035fh\u035f\u0332\u035fa\u035f\u0332\u035fv\u035f\u0332\u035fe\u035f\u0332\u035f \u035f\u0332\u035ft\u035f\u0332\u035fh\u035f\u0332\u035fe\u035f\u0332\u035f \u035f\u0332\u035fd\u035f\u0332\u035fe\u035f\u0332\u035fc\u035f\u0332\u035fo\u035f\u0332\u035fr\u035f\u0332\u035fa\u035f\u0332\u035ft\u035f\u0332\u035fo\u035f\u0332\u035fr\u035f\u0332\u035f \u035f\u0332\u035ft\u035f\u0332\u035fh\u035f\u0332\u035fa\u035f\u0332\u035ft\u035f\u0332\u035f \u035f\u0332\u035fO\u035f\u0332\u035fP\u035f\u0332\u035f \u035f\u0332\u035fw\u035f\u0332\u035fa\u035f\u0332\u035fn\u035f\u0332\u035ft\u035f\u0332\u035fs, It just is not called <code>singleton</code>, since its usage is more generic and meant for functions too:</p>\n<h3>Python 3.2+</h3>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">from functools import lru_cache\n\n@lru_cache(maxsize=None)\nclass CustomClass(object):\n\n    def __init__(self, arg):\n        print(f\"CustomClass initialised with {arg}\")\n        self.arg = arg\n</code></pre>\n<p><strong>Usage</strong>:</p>\n<pre><code class=\"python\">c1 = CustomClass(\"foo\")\nc2 = CustomClass(\"foo\")\nc3 = CustomClass(\"bar\")\n\nprint(c1 == c2)\nprint(c1 == c3)\n</code></pre>\n<p><strong>Output</strong> (notice how <code>foo</code> got printed only once):</p>\n<pre><code class=\"python\">&gt;&gt;&gt; CustomClass initialised with foo\n&gt;&gt;&gt; CustomClass initialised with bar\n&gt;&gt;&gt; True\n&gt;&gt;&gt; False\n</code></pre>\n<h4>Python 3.9+</h4>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">from functools.cache\n\n@cache\nclass CustomClass(object):\n    ...\n</code></pre>\n", "abstract": "M\u035f\u0332\u035fo\u035f\u0332\u035fs\u035f\u0332\u035ft\u035f\u0332\u035f \u035f\u0332\u035fr\u035f\u0332\u035fe\u035f\u0332\u035fc\u035f\u0332\u035fe\u035f\u0332\u035fn\u035f\u0332\u035ft\u035f\u0332\u035f \u035f\u0332\u035fv\u035f\u0332\u035fe\u035f\u0332\u035fr\u035f\u0332\u035fs\u035f\u0332\u035fi\u035f\u0332\u035fo\u035f\u0332\u035fn\u035f\u0332\u035fs\u035f\u0332\u035f \u035f\u0332\u035fo\u035f\u0332\u035ff\u035f\u0332\u035f \u035f\u0332\u035fp\u035f\u0332\u035fy\u035f\u0332\u035ft\u035f\u0332\u035fh\u035f\u0332\u035fo\u035f\u0332\u035fn\u035f\u0332\u035f \u035f\u0332\u035fa\u035f\u0332\u035fl\u035f\u0332\u035fr\u035f\u0332\u035fe\u035f\u0332\u035fa\u035f\u0332\u035fd\u035f\u0332\u035fy\u035f\u0332\u035f \u035f\u0332\u035fh\u035f\u0332\u035fa\u035f\u0332\u035fv\u035f\u0332\u035fe\u035f\u0332\u035f \u035f\u0332\u035ft\u035f\u0332\u035fh\u035f\u0332\u035fe\u035f\u0332\u035f \u035f\u0332\u035fd\u035f\u0332\u035fe\u035f\u0332\u035fc\u035f\u0332\u035fo\u035f\u0332\u035fr\u035f\u0332\u035fa\u035f\u0332\u035ft\u035f\u0332\u035fo\u035f\u0332\u035fr\u035f\u0332\u035f \u035f\u0332\u035ft\u035f\u0332\u035fh\u035f\u0332\u035fa\u035f\u0332\u035ft\u035f\u0332\u035f \u035f\u0332\u035fO\u035f\u0332\u035fP\u035f\u0332\u035f \u035f\u0332\u035fw\u035f\u0332\u035fa\u035f\u0332\u035fn\u035f\u0332\u035ft\u035f\u0332\u035fs, It just is not called singleton, since its usage is more generic and meant for functions too: Usage: Output (notice how foo got printed only once):"}, {"id": 40351307, "score": -2, "vote": 0, "content": "<p>This solution causes some namespace pollution at the module level (three definitions rather than just one), but I find it easy to follow.</p>\n<p>I'd like to be able to write something like this (lazy initialization), but unfortunately classes are not available in the body of their own definitions.</p>\n<pre><code class=\"python\"># wouldn't it be nice if we could do this?\nclass Foo(object):\n    instance = None\n\n    def __new__(cls):\n        if cls.instance is None:\n            cls.instance = object()\n            cls.instance.__class__ = Foo\n        return cls.instance\n</code></pre>\n<p>Since that isn't possible, we can break out the initialization and the static instance in</p>\n<p>Eager Initialization:</p>\n<pre><code class=\"python\">import random\n\n\nclass FooMaker(object):\n    def __init__(self, *args):\n        self._count = random.random()\n        self._args = args\n\n\nclass Foo(object):\n    def __new__(self):\n        return foo_instance\n\n\nfoo_instance = FooMaker()\nfoo_instance.__class__ = Foo\n</code></pre>\n<p>Lazy initialization:</p>\n<p>Eager Initialization:</p>\n<pre><code class=\"python\">import random\n\n\nclass FooMaker(object):\n    def __init__(self, *args):\n        self._count = random.random()\n        self._args = args\n\n\nclass Foo(object):\n    def __new__(self):\n        global foo_instance\n        if foo_instance is None:\n            foo_instance = FooMaker()\n        return foo_instance\n\n\nfoo_instance = None\n</code></pre>\n", "abstract": "This solution causes some namespace pollution at the module level (three definitions rather than just one), but I find it easy to follow. I'd like to be able to write something like this (lazy initialization), but unfortunately classes are not available in the body of their own definitions. Since that isn't possible, we can break out the initialization and the static instance in Eager Initialization: Lazy initialization: Eager Initialization:"}]}, {"link": "https://stackoverflow.com/questions/4260280/if-else-in-a-list-comprehension", "question": {"id": "4260280", "title": "if/else in a list comprehension", "content": "<p>How do I replace all the <code>None</code>s with empty strings, and then call some function <code>f</code>?</p>\n<pre><code class=\"python\">[f(x) for x in xs if x is not None else '']\n</code></pre>\n", "abstract": "How do I replace all the Nones with empty strings, and then call some function f?"}, "answers": [{"id": 4260304, "score": 2470, "vote": 0, "content": "<p>You can totally do that. It's just an ordering issue:</p>\n<pre><code class=\"python\">[f(x) if x is not None else '' for x in xs]\n</code></pre>\n<p>In general,</p>\n<pre><code class=\"python\">[f(x) if condition else g(x) for x in sequence]\n</code></pre>\n<p>And, for list comprehensions with <code>if</code> conditions only,</p>\n<pre><code class=\"python\">[f(x) for x in sequence if condition]\n</code></pre>\n<p>Note that this actually uses a different language construct, a <a href=\"https://docs.python.org/3/reference/expressions.html#conditional-expressions\" rel=\"noreferrer\">conditional expression</a>, which itself is not part of the <a href=\"https://docs.python.org/3/reference/expressions.html#displays-for-lists-sets-and-dictionaries\" rel=\"noreferrer\">comprehension syntax</a>, while the <code>if</code> after the <code>for\u2026in</code> is part of list comprehensions and used to <em>filter</em> elements from the source iterable.</p>\n<hr/>\n<p>Conditional expressions can be used in all kinds of situations where you want to choose between two expression values based on some condition. This does the same as the <a href=\"https://docs.python.org/3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator\" rel=\"noreferrer\">ternary operator <code>?:</code> that exists in other languages</a>. For example:</p>\n<pre><code class=\"python\">value = 123\nprint(value, 'is', 'even' if value % 2 == 0 else 'odd')\n</code></pre>\n", "abstract": "You can totally do that. It's just an ordering issue: In general, And, for list comprehensions with if conditions only, Note that this actually uses a different language construct, a conditional expression, which itself is not part of the comprehension syntax, while the if after the for\u2026in is part of list comprehensions and used to filter elements from the source iterable. Conditional expressions can be used in all kinds of situations where you want to choose between two expression values based on some condition. This does the same as the ternary operator ?: that exists in other languages. For example:"}, {"id": 50967467, "score": 78, "vote": 0, "content": "<p>The specific problem has already been solved in previous answers, so I will address the general idea of using conditionals inside list comprehensions.</p>\n<p>Here is an example that shows how conditionals can be written inside a list comprehension:</p>\n<pre><code class=\"python\">X = [1.5, 2.3, 4.4, 5.4, 'n', 1.5, 5.1, 'a']     # Original list\n\n# Extract non-strings from X to new list\nX_non_str = [el for el in X if not isinstance(el, str)]  # When using only 'if', put 'for' in the beginning\n\n# Change all strings in X to 'b', preserve everything else as is\nX_str_changed = ['b' if isinstance(el, str) else el for el in X]  # When using 'if' and 'else', put 'for' in the end\n</code></pre>\n<p>Note that in the first list comprehension for <code>X_non_str</code>, the order is: </p>\n<blockquote>\n<p><em>expression</em> <strong>for</strong> <em>item</em> <strong>in</strong> <em>iterable</em> <strong>if</strong> <em>condition</em></p>\n</blockquote>\n<p>and in the last list comprehension for <code>X_str_changed</code>, the order is:</p>\n<blockquote>\n<p><em>expression1</em> <strong>if</strong> <em>condition</em> <strong>else</strong> <em>expression2</em> <strong>for</strong> <em>item</em> <strong>in</strong> <em>iterable</em></p>\n</blockquote>\n<p>I always find it hard to remember that <em>expression1</em> has to be before <strong>if</strong> and <em>expression2</em> has to be after <strong>else</strong>. My head wants both to be either before or after. </p>\n<p>I guess it is designed like that because it resembles normal language, e.g. \"I want to stay inside <strong>if</strong> it rains, <strong>else</strong> I want to go outside\"</p>\n<p><strong>In plain English</strong> the two types of list comprehensions mentioned above could be stated as:</p>\n<p>With only <code>if</code>:</p>\n<blockquote>\n<p><em>extract_apple</em> <strong>for</strong> <em>apple</em> <strong>in</strong> <em>apple_box</em> <strong>if</strong> <em>apple_is_ripe</em></p>\n</blockquote>\n<p>and with <code>if/else</code></p>\n<blockquote>\n<p><em>mark_apple</em> <strong>if</strong> <em>apple_is_ripe</em> <strong>else</strong> <em>leave_it_unmarked</em> <strong>for</strong> <em>apple</em> <strong>in</strong> <em>apple_box</em> </p>\n</blockquote>\n", "abstract": "The specific problem has already been solved in previous answers, so I will address the general idea of using conditionals inside list comprehensions. Here is an example that shows how conditionals can be written inside a list comprehension: Note that in the first list comprehension for X_non_str, the order is:  expression for item in iterable if condition and in the last list comprehension for X_str_changed, the order is: expression1 if condition else expression2 for item in iterable I always find it hard to remember that expression1 has to be before if and expression2 has to be after else. My head wants both to be either before or after.  I guess it is designed like that because it resembles normal language, e.g. \"I want to stay inside if it rains, else I want to go outside\" In plain English the two types of list comprehensions mentioned above could be stated as: With only if: extract_apple for apple in apple_box if apple_is_ripe and with if/else mark_apple if apple_is_ripe else leave_it_unmarked for apple in apple_box "}, {"id": 68969401, "score": 73, "vote": 0, "content": "<p>Let's use this question to review some concepts. I think it's good to first see the fundamentals so you can extrapolate to different cases.</p>\n<p>Other answers provide the specific answer to your question. I'll first give some general context and then I'll answer the question.</p>\n<h1>Fundamentals</h1>\n<p><code>if/else</code> statements in list comprehensions involve two things:</p>\n<ul>\n<li>List comprehensions</li>\n<li>Conditional expressions (Ternary operators)</li>\n</ul>\n<h2>1. List comprehensions</h2>\n<p>They <a href=\"https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions\" rel=\"noreferrer\">provide</a> a concise way to create lists.</p>\n<p>Its structure consists of: \"<em>brackets containing an expression followed by a for clause, then zero or more for or if clauses</em>\".</p>\n<h3>Case 1</h3>\n<p>Here we have no condition. Each item from the iterable is added to <code>new_list</code>.</p>\n<pre><code class=\"python\">new_list = [expression for item in iterable]\nnew_list = [x for x in range(1, 10)]\n&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre>\n<h3>Case 2</h3>\n<p>Here we have one condition.</p>\n<p><strong>Example 1</strong></p>\n<p>Condition: only <em>even</em> numbers will be added to <code>new_list</code>.</p>\n<pre><code class=\"python\">new_list = [expression for item in iterable if condition == True]\nnew_list = [x for x in range(1, 10) if x % 2 == 0]\n&gt; [2, 4, 6, 8]\n</code></pre>\n<p><strong>Example 2</strong></p>\n<p>Condition: only <em>even</em> numbers that are multiple of 3 will be added to <code>new_list</code>.</p>\n<pre><code class=\"python\">new_list = [expression for item in iterable if condition == True]\nnew_list = [x for x in range(1, 10) if x % 2 == 0 if x % 3 == 0]\n&gt; [6]\n</code></pre>\n<p>But howcome we have one condition if we use two <code>if</code> in <code>new_list</code>?</p>\n<p>The prior expression could be written as:</p>\n<pre><code class=\"python\">new_list = [x for x in range(1, 10) if x % 2 and x % 3 == 0]\n&gt; [6]\n</code></pre>\n<p>We only use one <code>if</code> statement.</p>\n<p>This is like doing:</p>\n<pre><code class=\"python\">new_list = []\nfor x in range(1, 10):\n    if x % 2 == 0 and x % 3 == 0:\n        new_list.append(x)\n&gt; [6]\n</code></pre>\n<p><strong>Example 3</strong></p>\n<p>Just for the sake of argument, you can also use <code>or</code>.</p>\n<p>Condition: <em>even</em> numbers or numbers multiple of 3 will be added to <code>new_list</code>.</p>\n<pre><code class=\"python\">new_list = [x for x in range(1, 10) if x % 2 == 0 or x % 3 == 0]\n&gt; [2, 3, 4, 6, 8, 9]\n</code></pre>\n<h3>Case 3</h3>\n<p>More than one condition:</p>\n<p>Here we need the help of conditional expressions (Ternary operators).</p>\n<h2>2.Conditional Expressions</h2>\n<p>What are conditional expressions? What the name says: a Python expression that has some condition.</p>\n<pre><code class=\"python\">&lt;Exp1&gt; if condition else &lt;Exp2&gt;\n</code></pre>\n<p>First the <code>condition</code> is evaluated. If <code>condition</code> is <code>True</code>, then <code>&lt;Exp1&gt;</code> is evaluated and returned. If <code>condition</code> is <code>False</code>, then <code>&lt;Exp2&gt;</code> is evaluated and returned.</p>\n<p>A conditional expression with more than one condition:</p>\n<pre><code class=\"python\">&lt;Exp1&gt; if condition else &lt;Exp2&gt; if condition else &lt;Exp3&gt;...    \n</code></pre>\n<p>An example from <a href=\"https://realpython.com/python-conditional-statements/\" rel=\"noreferrer\">Real Python</a>:</p>\n<pre><code class=\"python\">age = 12\ns = 'minor' if age &lt; 21 else 'adult'\n&gt; minor\n</code></pre>\n<p>The value of <code>s</code> is conditioned to <code>age</code> value.</p>\n<h2>3.List Comprehensions with Conditionals</h2>\n<p>We put list comprehensions and conditionals together like this.</p>\n<pre><code class=\"python\">new_list = [&lt;Conditional Expression&gt; for &lt;item&gt; in &lt;iterable&gt;]\n\nnew_list = [&lt;Exp1&gt; if condition else &lt;Exp2&gt; if condition else &lt;Exp3&gt; for &lt;item&gt; in &lt;iterable&gt;]\n</code></pre>\n<p>Condition: <em>even</em> numbers will be added as <code>'even'</code>, the number three will be added as <code>'number three'</code> and the rest will be added as <code>'odd'</code>.</p>\n<pre><code class=\"python\">new_list = ['even' if x % 2 == 0 else 'number three' if x == 3 else 'odd' \n             for x in range(1, 10)]\n&gt; ['odd', 'even', 'number three', 'even', 'odd', 'even', 'odd', 'even', 'odd']\n</code></pre>\n<hr/>\n<h1>The answer to the question</h1>\n<pre><code class=\"python\">[f(x) for x in xs if x is not None else '']\n</code></pre>\n<p>Here we have a problem with the structure of the list: <code>for x in xs</code> should be at the end of the expression.</p>\n<p>Correct way:</p>\n<pre><code class=\"python\">[f(x) if x is not None else '' for x in xs]\n</code></pre>\n<hr/>\n<p>Further reading:</p>\n<p><a href=\"https://stackoverflow.com/questions/394809/does-python-have-a-ternary-conditional-operator\">Does Python have a ternary conditional operator?</a></p>\n", "abstract": "Let's use this question to review some concepts. I think it's good to first see the fundamentals so you can extrapolate to different cases. Other answers provide the specific answer to your question. I'll first give some general context and then I'll answer the question. if/else statements in list comprehensions involve two things: They provide a concise way to create lists. Its structure consists of: \"brackets containing an expression followed by a for clause, then zero or more for or if clauses\". Here we have no condition. Each item from the iterable is added to new_list. Here we have one condition. Example 1 Condition: only even numbers will be added to new_list. Example 2 Condition: only even numbers that are multiple of 3 will be added to new_list. But howcome we have one condition if we use two if in new_list? The prior expression could be written as: We only use one if statement. This is like doing: Example 3 Just for the sake of argument, you can also use or. Condition: even numbers or numbers multiple of 3 will be added to new_list. More than one condition: Here we need the help of conditional expressions (Ternary operators). What are conditional expressions? What the name says: a Python expression that has some condition. First the condition is evaluated. If condition is True, then <Exp1> is evaluated and returned. If condition is False, then <Exp2> is evaluated and returned. A conditional expression with more than one condition: An example from Real Python: The value of s is conditioned to age value. We put list comprehensions and conditionals together like this. Condition: even numbers will be added as 'even', the number three will be added as 'number three' and the rest will be added as 'odd'. Here we have a problem with the structure of the list: for x in xs should be at the end of the expression. Correct way: Further reading: Does Python have a ternary conditional operator?"}, {"id": 4260313, "score": 49, "vote": 0, "content": "<p>One way:</p>\n<pre><code class=\"python\">def change(x):\n    if x is None:\n        return f(x)\n    else:\n        return ''\n\nresult = [change(x) for x in xs]\n</code></pre>\n<p>Although then you have:</p>\n<pre><code class=\"python\">result = map(change, xs)\n</code></pre>\n<p>Or you can use a lambda inline.</p>\n", "abstract": "One way: Although then you have: Or you can use a lambda inline."}, {"id": 12773088, "score": 47, "vote": 0, "content": "<p>Here is another illustrative example:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; print(\", \".join([\"ha\" if i else \"Ha\" for i in range(3)]) + \"!\")\nHa, ha, ha!\n</code></pre>\n<p>It exploits the fact that <code>if i</code> evaluates to <code>False</code> for <code>0</code> and to <code>True</code> for all other values generated by the function <code>range()</code>. Therefore the list comprehension evaluates as follows:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; [\"ha\" if i else \"Ha\" for i in range(3)]\n['Ha', 'ha', 'ha']\n</code></pre>\n", "abstract": "Here is another illustrative example: It exploits the fact that if i evaluates to False for 0 and to True for all other values generated by the function range(). Therefore the list comprehension evaluates as follows:"}, {"id": 51337559, "score": 10, "vote": 0, "content": "<p>The other solutions are great for a single <code>if</code> / <code>else</code> construct. However, ternary statements within list comprehensions are arguably difficult to read.</p>\n<p>Using a function aids readability, but such a solution is difficult to extend or adapt in a workflow where the mapping is an input. A dictionary can alleviate these concerns:</p>\n<pre><code class=\"python\">xs = [None, 'This', 'is', 'a', 'filler', 'test', 'string', None]\n\nd = {None: '', 'filler': 'manipulated'}\n\nres = [d.get(x, x) for x in xs]\n\nprint(res)\n\n['', 'This', 'is', 'a', 'manipulated', 'test', 'string', '']\n</code></pre>\n", "abstract": "The other solutions are great for a single if / else construct. However, ternary statements within list comprehensions are arguably difficult to read. Using a function aids readability, but such a solution is difficult to extend or adapt in a workflow where the mapping is an input. A dictionary can alleviate these concerns:"}, {"id": 63597004, "score": 9, "vote": 0, "content": "<pre><code class=\"python\">[f(x) if x != None else '' for x in xs]\n</code></pre>\n<p>Syntax for list comprehension:</p>\n<pre><code class=\"python\">[item if condition else item for item in items]\n[f(item) if condition else value for item in items]\n[item if condition for item in items]\n[value if condition else value1 if condition1 else value2]\n</code></pre>\n", "abstract": "Syntax for list comprehension:"}, {"id": 59128169, "score": 8, "vote": 0, "content": "<p>It has to do with how the list comprehension is performed.</p>\n<p>Keep in mind the following:</p>\n<pre><code class=\"python\">[ expression for item in list if conditional ]\n</code></pre>\n<p>Is equivalent to:</p>\n<pre><code class=\"python\">for item in list:\n    if conditional:\n        expression\n</code></pre>\n<p>Where the <code>expression</code> is in a slightly different format (think switching the subject and verb order in a sentence).</p>\n<p>Therefore, your code <code>[x+1 for x in l if x &gt;= 45]</code> does this:</p>\n<pre><code class=\"python\">for x in l:\n    if x &gt;= 45:\n        x+1\n</code></pre>\n<p>However, this code <code>[x+1 if x &gt;= 45 else x+5 for x in l]</code> does this (after rearranging the <code>expression</code>):</p>\n<pre><code class=\"python\">for x in l:\n    if x&gt;=45: x+1\n    else: x+5\n</code></pre>\n", "abstract": "It has to do with how the list comprehension is performed. Keep in mind the following: Is equivalent to: Where the expression is in a slightly different format (think switching the subject and verb order in a sentence). Therefore, your code [x+1 for x in l if x >= 45] does this: However, this code [x+1 if x >= 45 else x+5 for x in l] does this (after rearranging the expression):"}, {"id": 56758557, "score": 3, "vote": 0, "content": "<blockquote>\n<p>Make a list from items in an iterable</p>\n</blockquote>\n<p>It seems best to first generalize all the possible forms rather than giving specific answers to questions. Otherwise, the reader won't know how the answer was determined. Here are a few generalized forms I thought up before I got a headache trying to decide if a final else' clause could be used in the last form.</p>\n<pre><code class=\"python\">[expression1(item)                                        for item in iterable]\n\n[expression1(item) if conditional1                        for item in iterable]\n\n[expression1(item) if conditional1 else expression2(item) for item in iterable]\n\n[expression1(item) if conditional1 else expression2(item) for item in iterable if conditional2]\n</code></pre>\n<p>The value of <code>item</code> doesn't need to be used in any of the conditional clauses. A <code>conditional3</code> can be used as a switch to either add or not add a value to the output list.</p>\n<p>For example, to create a new list that eliminates empty strings or whitespace strings from the original list of strings:</p>\n<pre><code class=\"python\">newlist = [s for s in firstlist if s.strip()]\n</code></pre>\n", "abstract": "Make a list from items in an iterable It seems best to first generalize all the possible forms rather than giving specific answers to questions. Otherwise, the reader won't know how the answer was determined. Here are a few generalized forms I thought up before I got a headache trying to decide if a final else' clause could be used in the last form. The value of item doesn't need to be used in any of the conditional clauses. A conditional3 can be used as a switch to either add or not add a value to the output list. For example, to create a new list that eliminates empty strings or whitespace strings from the original list of strings:"}, {"id": 56031325, "score": 0, "vote": 0, "content": "<p>There isn't any need for ternary if/then/else. In my opinion your question calls for this answer:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">row = [unicode((x or '').strip()) for x in row]\n</code></pre>\n", "abstract": "There isn't any need for ternary if/then/else. In my opinion your question calls for this answer:"}, {"id": 61462430, "score": 0, "vote": 0, "content": "<p>You can combine conditional logic in a comprehension:</p>\n<pre><code class=\"python\"> ps = PorterStemmer()\n stop_words_english = stopwords.words('english')\n best = sorted(word_scores.items(), key=lambda x: x[1], reverse=True)[:10000]\n bestwords = set([w for w, s in best])\n\n\n def best_word_feats(words):\n   return dict([(word, True) for word in words if word in bestwords])\n\n # with stemmer\n def best_word_feats_stem(words):\n   return dict([(ps.stem(word), True) for word in words if word in bestwords])\n\n # with stemmer and not stopwords\n def best_word_feats_stem_stop(words):\n   return dict([(ps.stem(word), True) for word in words if word in bestwords and word not in stop_words_english])\n</code></pre>\n", "abstract": "You can combine conditional logic in a comprehension:"}, {"id": 55263177, "score": -2, "vote": 0, "content": "<pre><code class=\"python\"># coding=utf-8\n\ndef my_function_get_list():\n    my_list = [0, 1, 2, 3, 4, 5]\n\n    # You may use map() to convert each item in the list to a string, \n    # and then join them to print my_list\n\n    print(\"Affichage de my_list [{0}]\".format(', '.join(map(str, my_list))))\n\n    return my_list\n\n\nmy_result_list = [\n   (\n       number_in_my_list + 4,  # Condition is False : append number_in_my_list + 4 in my_result_list\n       number_in_my_list * 2  # Condition is True : append number_in_my_list * 2 in my_result_list\n   )\n\n   [number_in_my_list % 2 == 0]  # [Condition] If the number in my list is even\n\n   for number_in_my_list in my_function_get_list()  # For each number in my list\n]\n\nprint(\"Affichage de my_result_list [{0}]\".format(', '.join(map(str, my_result_list))))\n</code></pre>\n<p>(venv) $ python list_comp.py <br/>\nAffichage de my_list [0, 1, 2, 3, 4, 5] <br/>\nAffichage de my_result_list [0, 5, 4, 7, 8, 9]</p>\n<p>So, for you:\n<code>row = [('', unicode(x.strip()))[x is not None] for x in row]</code></p>\n", "abstract": "(venv) $ python list_comp.py \nAffichage de my_list [0, 1, 2, 3, 4, 5] \nAffichage de my_result_list [0, 5, 4, 7, 8, 9] So, for you:\nrow = [('', unicode(x.strip()))[x is not None] for x in row]"}]}, {"link": "https://stackoverflow.com/questions/1549801/what-are-the-differences-between-type-and-isinstance", "question": {"id": "1549801", "title": "What are the differences between type() and isinstance()?", "content": "<p>What are the differences between these two code snippets?</p>\n<p>Using <a href=\"https://docs.python.org/3/library/functions.html#type\" rel=\"noreferrer\"><code>type</code></a>:</p>\n<pre><code class=\"python\">import types\n\nif type(a) is types.DictType:\n    do_something()\nif type(b) in types.StringTypes:\n    do_something_else()\n</code></pre>\n<p>Using <a href=\"https://docs.python.org/3/library/functions.html#isinstance\" rel=\"noreferrer\"><code>isinstance</code></a>:</p>\n<pre><code class=\"python\">if isinstance(a, dict):\n    do_something()\nif isinstance(b, str) or isinstance(b, unicode):\n    do_something_else()\n</code></pre>\n", "abstract": "What are the differences between these two code snippets? Using type: Using isinstance:"}, "answers": [{"id": 1549854, "score": 1461, "vote": 0, "content": "<p>To summarize the contents of other (already good!) answers, <code>isinstance</code> caters for inheritance (an instance of a derived class <em>is an</em> instance of a base class, too), while checking for equality of <code>type</code> does not (it demands identity of types and rejects instances of subtypes, AKA subclasses).</p>\n<p>Normally, in Python, you want your code to support inheritance, of course (since inheritance is so handy, it would be bad to stop code using yours from using it!), so <code>isinstance</code> is less bad than checking identity of <code>type</code>s because it seamlessly supports inheritance.</p>\n<p>It's not that <code>isinstance</code> is <em>good</em>, mind you\u2014it's just <em>less bad</em> than checking equality of types.  The normal, Pythonic, preferred solution is almost invariably \"duck typing\": try using the argument <em>as if</em> it was of a certain desired type, do it in a <code>try</code>/<code>except</code> statement catching all exceptions that could arise if the argument was not in fact of that type (or any other type nicely duck-mimicking it;-), and in the <code>except</code> clause, try something else (using the argument \"as if\" it was of some other type).</p>\n<p><code>basestring</code> <strong>is</strong>, however, quite a special case\u2014a builtin type that exists <strong>only</strong> to let you use <code>isinstance</code> (both <code>str</code> and <code>unicode</code> subclass <code>basestring</code>). Strings are sequences (you could loop over them, index them, slice them, ...), but you generally want to treat them as \"scalar\" types\u2014it's somewhat incovenient (but a reasonably frequent use case) to treat all kinds of strings (and maybe other scalar types, i.e., ones you can't loop on) one way, all containers (lists, sets, dicts, ...) in another way, and <code>basestring</code> plus <code>isinstance</code> helps you do that\u2014the overall structure of this idiom is something like:</p>\n<pre><code class=\"python\">if isinstance(x, basestring)\n  return treatasscalar(x)\ntry:\n  return treatasiter(iter(x))\nexcept TypeError:\n  return treatasscalar(x)\n</code></pre>\n<p>You could say that <code>basestring</code> is an <em>Abstract Base Class</em> (\"ABC\")\u2014it offers no concrete functionality to subclasses, but rather exists as a \"marker\", mainly for use with <code>isinstance</code>. The concept is obviously a growing one in Python, since <a href=\"http://www.python.org/dev/peps/pep-3119/\" rel=\"noreferrer\">PEP 3119</a>, which introduces a generalization of it, was accepted and has been implemented starting with Python 2.6 and 3.0.</p>\n<p>The PEP makes it clear that, while ABCs can often substitute for duck typing, there is generally no big pressure to do that (see <a href=\"http://www.python.org/dev/peps/pep-3119/#abcs-vs-duck-typing\" rel=\"noreferrer\">here</a>). ABCs as implemented in recent Python versions do however offer extra goodies: <code>isinstance</code> (and <code>issubclass</code>) can now mean more than just \"[an instance of] a derived class\" (in particular, any class can be \"registered\" with an ABC so that it will show as a subclass, and its instances as instances of the ABC); and ABCs can also offer extra convenience to actual subclasses in a very natural way via Template Method design pattern applications (see <a href=\"http://en.wikipedia.org/wiki/Template_method_pattern\" rel=\"noreferrer\">here</a> and <a href=\"http://www.catonmat.net/blog/learning-python-design-patterns-through-video-lectures/\" rel=\"noreferrer\">here</a> [[part II]] for more on the TM DP, in general and specifically in Python, independent of ABCs).</p>\n<p>For the underlying mechanics of ABC support as offered in Python 2.6, see <a href=\"http://docs.python.org/library/abc.html\" rel=\"noreferrer\">here</a>; for their 3.1 version, very similar, see <a href=\"http://docs.python.org/3.1/library/abc.html\" rel=\"noreferrer\">here</a>.  In both versions, standard library module <a href=\"http://docs.python.org/3.1/library/collections.html#module-collections\" rel=\"noreferrer\">collections</a> (that's the 3.1 version\u2014for the very similar 2.6 version, see <a href=\"http://docs.python.org/library/collections.html#module-collections\" rel=\"noreferrer\">here</a>) offers several useful ABCs.</p>\n<p>For the purpose of this answer, the key thing to retain about ABCs (beyond an arguably more natural placement for TM DP functionality, compared to the classic Python alternative of mixin classes such as <a href=\"http://docs.python.org/library/userdict.html?highlight=userdict#UserDict.DictMixin\" rel=\"noreferrer\">UserDict.DictMixin</a>) is that they make <code>isinstance</code> (and <code>issubclass</code>) much more attractive and pervasive (in Python 2.6 and going forward) than they used to be (in 2.5 and before), and therefore, by contrast, make checking type equality an even worse practice in recent Python versions than it already used to be.</p>\n", "abstract": "To summarize the contents of other (already good!) answers, isinstance caters for inheritance (an instance of a derived class is an instance of a base class, too), while checking for equality of type does not (it demands identity of types and rejects instances of subtypes, AKA subclasses). Normally, in Python, you want your code to support inheritance, of course (since inheritance is so handy, it would be bad to stop code using yours from using it!), so isinstance is less bad than checking identity of types because it seamlessly supports inheritance. It's not that isinstance is good, mind you\u2014it's just less bad than checking equality of types.  The normal, Pythonic, preferred solution is almost invariably \"duck typing\": try using the argument as if it was of a certain desired type, do it in a try/except statement catching all exceptions that could arise if the argument was not in fact of that type (or any other type nicely duck-mimicking it;-), and in the except clause, try something else (using the argument \"as if\" it was of some other type). basestring is, however, quite a special case\u2014a builtin type that exists only to let you use isinstance (both str and unicode subclass basestring). Strings are sequences (you could loop over them, index them, slice them, ...), but you generally want to treat them as \"scalar\" types\u2014it's somewhat incovenient (but a reasonably frequent use case) to treat all kinds of strings (and maybe other scalar types, i.e., ones you can't loop on) one way, all containers (lists, sets, dicts, ...) in another way, and basestring plus isinstance helps you do that\u2014the overall structure of this idiom is something like: You could say that basestring is an Abstract Base Class (\"ABC\")\u2014it offers no concrete functionality to subclasses, but rather exists as a \"marker\", mainly for use with isinstance. The concept is obviously a growing one in Python, since PEP 3119, which introduces a generalization of it, was accepted and has been implemented starting with Python 2.6 and 3.0. The PEP makes it clear that, while ABCs can often substitute for duck typing, there is generally no big pressure to do that (see here). ABCs as implemented in recent Python versions do however offer extra goodies: isinstance (and issubclass) can now mean more than just \"[an instance of] a derived class\" (in particular, any class can be \"registered\" with an ABC so that it will show as a subclass, and its instances as instances of the ABC); and ABCs can also offer extra convenience to actual subclasses in a very natural way via Template Method design pattern applications (see here and here [[part II]] for more on the TM DP, in general and specifically in Python, independent of ABCs). For the underlying mechanics of ABC support as offered in Python 2.6, see here; for their 3.1 version, very similar, see here.  In both versions, standard library module collections (that's the 3.1 version\u2014for the very similar 2.6 version, see here) offers several useful ABCs. For the purpose of this answer, the key thing to retain about ABCs (beyond an arguably more natural placement for TM DP functionality, compared to the classic Python alternative of mixin classes such as UserDict.DictMixin) is that they make isinstance (and issubclass) much more attractive and pervasive (in Python 2.6 and going forward) than they used to be (in 2.5 and before), and therefore, by contrast, make checking type equality an even worse practice in recent Python versions than it already used to be."}, {"id": 1549814, "score": 419, "vote": 0, "content": "<p>Here's an example where <code>isinstance</code> achieves something that <code>type</code> cannot:</p>\n<pre><code class=\"python\">class Vehicle:\n    pass\n\nclass Truck(Vehicle):\n    pass\n</code></pre>\n<p>in this case, a truck object is a Vehicle, but you'll get this:</p>\n<pre><code class=\"python\">isinstance(Vehicle(), Vehicle)  # returns True\ntype(Vehicle()) == Vehicle      # returns True\nisinstance(Truck(), Vehicle)    # returns True\ntype(Truck()) == Vehicle        # returns False, and this probably won't be what you want.\n</code></pre>\n<p>In other words, <code>isinstance</code> is true for subclasses, too.</p>\n<p>Also see: <a href=\"https://stackoverflow.com/q/707674/1341006\">How to compare type of an object in Python?</a></p>\n", "abstract": "Here's an example where isinstance achieves something that type cannot: in this case, a truck object is a Vehicle, but you'll get this: In other words, isinstance is true for subclasses, too. Also see: How to compare type of an object in Python?"}, {"id": 28358473, "score": 123, "vote": 0, "content": "<blockquote>\n<h1>Differences between <code>isinstance()</code> and <code>type()</code> in Python?</h1>\n</blockquote>\n<p>Type-checking with </p>\n<pre><code class=\"python\">isinstance(obj, Base)\n</code></pre>\n<p>allows for instances of subclasses and multiple possible bases: </p>\n<pre><code class=\"python\">isinstance(obj, (Base1, Base2))\n</code></pre>\n<p>whereas type-checking with </p>\n<pre><code class=\"python\">type(obj) is Base\n</code></pre>\n<p>only supports the type referenced. </p>\n<hr/>\n<p>As a sidenote, <code>is</code> is likely more appropriate than</p>\n<pre><code class=\"python\">type(obj) == Base\n</code></pre>\n<p>because classes are singletons.</p>\n<h2>Avoid type-checking - use Polymorphism (duck-typing)</h2>\n<p>In Python, usually you want to allow any type for your arguments, treat it as expected, and if the object doesn't behave as expected, it will raise an appropriate error. This is known as polymorphism, also known as duck-typing.</p>\n<pre><code class=\"python\">def function_of_duck(duck):\n    duck.quack()\n    duck.swim()\n</code></pre>\n<p>If the code above works, we can presume our argument is a duck. Thus we can pass in other things are actual sub-types of duck:</p>\n<pre><code class=\"python\">function_of_duck(mallard)\n</code></pre>\n<p>or that work like a duck:</p>\n<pre><code class=\"python\">function_of_duck(object_that_quacks_and_swims_like_a_duck)\n</code></pre>\n<p>and our code still works.</p>\n<p>However, there are some cases where it is desirable to explicitly type-check.\nPerhaps you have sensible things to do with different object types. For example, the Pandas Dataframe object can be constructed from dicts <em>or</em> records. In such a case, your code needs to know what type of argument it is getting so that it can properly handle it. </p>\n<p>So, to answer the question:</p>\n<h2>Differences between <code>isinstance()</code> and <code>type()</code> in Python?</h2>\n<p>Allow me to demonstrate the difference:</p>\n<h3><code>type</code></h3>\n<p>Say you need to ensure a certain behavior if your function gets a certain kind of argument (a common use-case for constructors). If you check for type like this:</p>\n<pre><code class=\"python\">def foo(data):\n    '''accepts a dict to construct something, string support in future'''\n    if type(data) is not dict:\n        # we're only going to test for dicts for now\n        raise ValueError('only dicts are supported for now')\n</code></pre>\n<p>If we try to pass in a dict that is a subclass of <code>dict</code> (as we should be able to, if we're expecting our code to follow the principle of <a href=\"http://en.wikipedia.org/wiki/Liskov_substitution_principle\" rel=\"noreferrer\">Liskov Substitution</a>, that subtypes can be substituted for types) our code breaks!:</p>\n<pre><code class=\"python\">from collections import OrderedDict\n\nfoo(OrderedDict([('foo', 'bar'), ('fizz', 'buzz')]))\n</code></pre>\n<p>raises an error!</p>\n<pre><code class=\"python\">Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;stdin&gt;\", line 3, in foo\nValueError: argument must be a dict\n</code></pre>\n<h3><code>isinstance</code></h3>\n<p>But if we use <code>isinstance</code>, we can support Liskov Substitution!:</p>\n<pre><code class=\"python\">def foo(a_dict):\n    if not isinstance(a_dict, dict):\n        raise ValueError('argument must be a dict')\n    return a_dict\n\nfoo(OrderedDict([('foo', 'bar'), ('fizz', 'buzz')]))\n</code></pre>\n<p>returns <code>OrderedDict([('foo', 'bar'), ('fizz', 'buzz')])</code></p>\n<h2>Abstract Base Classes</h2>\n<p>In fact, we can do even better. <code>collections</code> provides Abstract Base Classes that enforce minimal protocols for various types. In our case, if we only expect the <code>Mapping</code> protocol, we can do the following, and our code becomes even more flexible:</p>\n<pre><code class=\"python\">from collections import Mapping\n\ndef foo(a_dict):\n    if not isinstance(a_dict, Mapping):\n        raise ValueError('argument must be a dict')\n    return a_dict\n</code></pre>\n<h2>Response to comment:</h2>\n<blockquote>\n<p>It should be noted that type can be used to check against multiple classes using <code>type(obj) in (A, B, C)</code></p>\n</blockquote>\n<p>Yes, you can test for equality of types, but instead of the above, use the multiple bases for control flow, unless you are specifically only allowing those types:</p>\n<pre><code class=\"python\">isinstance(obj, (A, B, C))\n</code></pre>\n<p>The difference, again, is that <code>isinstance</code> supports subclasses that can be substituted for the parent without otherwise breaking the program, a property known as Liskov substitution. </p>\n<p>Even better, though, invert your dependencies and don't check for specific types at all.</p>\n<h2>Conclusion</h2>\n<p>So since we want to support substituting subclasses, in most cases, we want to avoid type-checking with <code>type</code> and prefer type-checking with <code>isinstance</code> - unless you really need to know the precise class of an instance. </p>\n", "abstract": "Type-checking with  allows for instances of subclasses and multiple possible bases:  whereas type-checking with  only supports the type referenced.  As a sidenote, is is likely more appropriate than because classes are singletons. In Python, usually you want to allow any type for your arguments, treat it as expected, and if the object doesn't behave as expected, it will raise an appropriate error. This is known as polymorphism, also known as duck-typing. If the code above works, we can presume our argument is a duck. Thus we can pass in other things are actual sub-types of duck: or that work like a duck: and our code still works. However, there are some cases where it is desirable to explicitly type-check.\nPerhaps you have sensible things to do with different object types. For example, the Pandas Dataframe object can be constructed from dicts or records. In such a case, your code needs to know what type of argument it is getting so that it can properly handle it.  So, to answer the question: Allow me to demonstrate the difference: Say you need to ensure a certain behavior if your function gets a certain kind of argument (a common use-case for constructors). If you check for type like this: If we try to pass in a dict that is a subclass of dict (as we should be able to, if we're expecting our code to follow the principle of Liskov Substitution, that subtypes can be substituted for types) our code breaks!: raises an error! But if we use isinstance, we can support Liskov Substitution!: returns OrderedDict([('foo', 'bar'), ('fizz', 'buzz')]) In fact, we can do even better. collections provides Abstract Base Classes that enforce minimal protocols for various types. In our case, if we only expect the Mapping protocol, we can do the following, and our code becomes even more flexible: It should be noted that type can be used to check against multiple classes using type(obj) in (A, B, C) Yes, you can test for equality of types, but instead of the above, use the multiple bases for control flow, unless you are specifically only allowing those types: The difference, again, is that isinstance supports subclasses that can be substituted for the parent without otherwise breaking the program, a property known as Liskov substitution.  Even better, though, invert your dependencies and don't check for specific types at all. So since we want to support substituting subclasses, in most cases, we want to avoid type-checking with type and prefer type-checking with isinstance - unless you really need to know the precise class of an instance. "}, {"id": 1549809, "score": 70, "vote": 0, "content": "<p>The latter is preferred, because it will handle subclasses properly. In fact, your example can be written even more easily because <code>isinstance()</code>'s second parameter may be a tuple:</p>\n<pre><code class=\"python\">if isinstance(b, (str, unicode)):\n    do_something_else()\n</code></pre>\n<p>or, using the <code>basestring</code> abstract class:</p>\n<pre><code class=\"python\">if isinstance(b, basestring):\n    do_something_else()\n</code></pre>\n", "abstract": "The latter is preferred, because it will handle subclasses properly. In fact, your example can be written even more easily because isinstance()'s second parameter may be a tuple: or, using the basestring abstract class:"}, {"id": 56301716, "score": 19, "vote": 0, "content": "<p>A practical usage difference is how they handle <code>booleans</code>:</p>\n<p><code>True</code> and <code>False</code> are just keywords that mean <code>1</code> and <code>0</code> in python. Thus, </p>\n<pre><code class=\"python\">isinstance(True, int)\n</code></pre>\n<p>and</p>\n<pre><code class=\"python\">isinstance(False, int)\n</code></pre>\n<p>both return <code>True</code>. Both booleans are an instance of an integer. <code>type()</code>, however, is more clever:</p>\n<pre><code class=\"python\">type(True) == int\n</code></pre>\n<p>returns <code>False</code>.</p>\n", "abstract": "A practical usage difference is how they handle booleans: True and False are just keywords that mean 1 and 0 in python. Thus,  and both return True. Both booleans are an instance of an integer. type(), however, is more clever: returns False."}, {"id": 1549815, "score": 15, "vote": 0, "content": "<p>According to python documentation here is a statement:</p>\n<blockquote>\n<h3><a href=\"http://docs.python.org/library/types.html\" rel=\"noreferrer\">8.15. types \u2014 Names for built-in types</a></h3>\n<p>Starting in Python 2.2, built-in\n  factory functions such as <code>int()</code> and\n  <code>str()</code> are also names for the\n  corresponding types.</p>\n</blockquote>\n<p>So <a href=\"http://docs.python.org/2/library/functions.html#isinstance\" rel=\"noreferrer\"><code>isinstance()</code></a> should be preferred over <a href=\"http://docs.python.org/2/library/functions.html#type\" rel=\"noreferrer\"><code>type()</code></a>. </p>\n", "abstract": "According to python documentation here is a statement: Starting in Python 2.2, built-in\n  factory functions such as int() and\n  str() are also names for the\n  corresponding types. So isinstance() should be preferred over type(). "}, {"id": 50268231, "score": 1, "vote": 0, "content": "<p>For the real differences, we can find it in <code>code</code>, but I can't find the implement of the default behavior of the <code>isinstance()</code>. </p>\n<p>However we can get the similar one <a href=\"https://github.com/python/cpython/blob/master/Lib/_py_abc.py#L92-L147\" rel=\"nofollow noreferrer\">abc.__instancecheck__</a> according to <a href=\"https://docs.python.org/3/reference/datamodel.html#customizing-instance-and-subclass-checks\" rel=\"nofollow noreferrer\">__instancecheck__</a>.</p>\n<p>From above <code>abc.__instancecheck__</code>, after using test below:</p>\n<pre><code class=\"python\"># file tree\n# /test/__init__.py\n# /test/aaa/__init__.py\n# /test/aaa/aa.py\nclass b():\npass\n\n# /test/aaa/a.py\nimport sys\nsys.path.append('/test')\n\nfrom aaa.aa import b\nfrom aa import b as c\n\nd = b()\n\nprint(b, c, d.__class__)\nfor i in [b, c, object]:\n    print(i, '__subclasses__',  i.__subclasses__())\n    print(i, '__mro__', i.__mro__)\n    print(i, '__subclasshook__', i.__subclasshook__(d.__class__))\n    print(i, '__subclasshook__', i.__subclasshook__(type(d)))\nprint(isinstance(d, b))\nprint(isinstance(d, c))\n\n&lt;class 'aaa.aa.b'&gt; &lt;class 'aa.b'&gt; &lt;class 'aaa.aa.b'&gt;\n&lt;class 'aaa.aa.b'&gt; __subclasses__ []\n&lt;class 'aaa.aa.b'&gt; __mro__ (&lt;class 'aaa.aa.b'&gt;, &lt;class 'object'&gt;)\n&lt;class 'aaa.aa.b'&gt; __subclasshook__ NotImplemented\n&lt;class 'aaa.aa.b'&gt; __subclasshook__ NotImplemented\n&lt;class 'aa.b'&gt; __subclasses__ []\n&lt;class 'aa.b'&gt; __mro__ (&lt;class 'aa.b'&gt;, &lt;class 'object'&gt;)\n&lt;class 'aa.b'&gt; __subclasshook__ NotImplemented\n&lt;class 'aa.b'&gt; __subclasshook__ NotImplemented\n&lt;class 'object'&gt; __subclasses__ [..., &lt;class 'aaa.aa.b'&gt;, &lt;class 'aa.b'&gt;]\n&lt;class 'object'&gt; __mro__ (&lt;class 'object'&gt;,)\n&lt;class 'object'&gt; __subclasshook__ NotImplemented\n&lt;class 'object'&gt; __subclasshook__ NotImplemented\nTrue\nFalse\n</code></pre>\n<p>I get this conclusion,\nFor <code>type</code>:</p>\n<pre><code class=\"python\"># according to `abc.__instancecheck__`, they are maybe different! I have not found negative one \ntype(INSTANCE) ~= INSTANCE.__class__\ntype(CLASS) ~= CLASS.__class__\n</code></pre>\n<p>For <code>isinstance</code>:</p>\n<pre><code class=\"python\"># guess from `abc.__instancecheck__`\nreturn any(c in cls.__mro__ or c in cls.__subclasses__ or cls.__subclasshook__(c) for c in {INSTANCE.__class__, type(INSTANCE)})\n</code></pre>\n<p>BTW: better not to mix use <code>relative and absolutely import</code>, use <code>absolutely import</code> from project_dir( added by <code>sys.path</code>)</p>\n", "abstract": "For the real differences, we can find it in code, but I can't find the implement of the default behavior of the isinstance().  However we can get the similar one abc.__instancecheck__ according to __instancecheck__. From above abc.__instancecheck__, after using test below: I get this conclusion,\nFor type: For isinstance: BTW: better not to mix use relative and absolutely import, use absolutely import from project_dir( added by sys.path)"}, {"id": 72302530, "score": 0, "vote": 0, "content": "<p>The differences between type() and isinstance()</p>\n<p><code>type()</code> -&gt; returns the type of the object</p>\n<p><code>isinstance()</code> -&gt; returns a boolean</p>\n<p>Generally speaking <code>isinstance</code> is a 'more' elegant way of checking if an object is of a certain \"type\" (since you are aware of the Inheritance chain).</p>\n<p>On the other hand, if you are not aware of the inheritance chain and you need to be pick, go for <code>type(x) == ...</code></p>\n<p>Another interesting case for <code>type</code> is when you check for <code>bool</code></p>\n<pre><code class=\"python\">----Case bool----\n\nprint(type(True) == int) # False\nprint(type(False) == int) # False\nprint(type(True) == bool) # True\nprint(type(False) == bool) # True\n\nprint(isinstance(True, int)) # True\nprint(isinstance(True, int)) # True\n\n\n\n----Case inheritance----\nclass A:\n    x=1\n\nclass B(A):\n    x=2\n\nclass C(B):\n    x=3\n    \nvar1 = A()\nvar2 = B()\nvar3 = C()\n\nprint(type(var1)) # &lt;class '__main__.A'&gt;\nprint(type(var1) == A) # True\nprint(type(var2) == A) # False\nprint(type(var3) == A) # False\n\nprint(isinstance(var1, A)) # True\nprint(isinstance(var2, A)) # True\nprint(isinstance(var3, A)) # True\n\n\n\nprint(type(var2)) # &lt;class '__main__.B'&gt;\nprint(type(var1) == B) # False\nprint(type(var2) == B) # True\nprint(type(var3) == B) # False\n\nprint(isinstance(var1, B)) # False\nprint(isinstance(var2, B)) # True\nprint(isinstance(var3, B)) # True\n\n\n\nprint(type(var3)) # &lt;class '__main__.C'&gt;\nprint(type(var1) == C) # False\nprint(type(var2) == C) # False\nprint(type(var3) == C) # True\n\nprint(isinstance(var1, C)) # False\nprint(isinstance(var2, C)) # False\nprint(isinstance(var3, C)) # True\n</code></pre>\n", "abstract": "The differences between type() and isinstance() type() -> returns the type of the object isinstance() -> returns a boolean Generally speaking isinstance is a 'more' elegant way of checking if an object is of a certain \"type\" (since you are aware of the Inheritance chain). On the other hand, if you are not aware of the inheritance chain and you need to be pick, go for type(x) == ... Another interesting case for type is when you check for bool"}]}, {"link": "https://stackoverflow.com/questions/944700/how-can-i-check-for-nan-values", "question": {"id": "944700", "title": "How can I check for NaN values?", "content": "<p><code>float('nan')</code> represents NaN (not a number). But how do I check for it?</p>\n", "abstract": "float('nan') represents NaN (not a number). But how do I check for it?"}, "answers": [{"id": 944733, "score": 1873, "vote": 0, "content": "<p>Use <a href=\"http://docs.python.org/library/math.html#math.isnan\" rel=\"noreferrer\"><code>math.isnan</code></a>:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; import math\n&gt;&gt;&gt; x = float('nan')\n&gt;&gt;&gt; math.isnan(x)\nTrue\n</code></pre>\n", "abstract": "Use math.isnan:"}, {"id": 944712, "score": 542, "vote": 0, "content": "<p>The usual way to test for a NaN is to see if it's equal to itself:</p>\n<pre><code class=\"python\">def isNaN(num):\n    return num != num\n</code></pre>\n", "abstract": "The usual way to test for a NaN is to see if it's equal to itself:"}, {"id": 944756, "score": 251, "vote": 0, "content": "<p><code>numpy.isnan(number)</code> tells you if it's <code>NaN</code> or not.</p>\n", "abstract": "numpy.isnan(number) tells you if it's NaN or not."}, {"id": 54967010, "score": 200, "vote": 0, "content": "<p><strong>Here are three ways where you can test a variable is \"NaN\" or not.</strong></p>\n<pre><code class=\"python\">import pandas as pd\nimport numpy as np\nimport math\n\n# For single variable all three libraries return single boolean\nx1 = float(\"nan\")\n\nprint(f\"It's pd.isna: {pd.isna(x1)}\")\nprint(f\"It's np.isnan: {np.isnan(x1)}}\")\nprint(f\"It's math.isnan: {math.isnan(x1)}}\")\n</code></pre>\n<p><strong>Output</strong></p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">It's pd.isna: True\nIt's np.isnan: True\nIt's math.isnan: True\n</code></pre>\n", "abstract": "Here are three ways where you can test a variable is \"NaN\" or not. Output"}, {"id": 44154660, "score": 48, "vote": 0, "content": "<p>here is an answer working with:</p>\n<ul>\n<li>NaN implementations respecting IEEE 754 standard \n\n<ul>\n<li>ie: python's NaN: <code>float('nan')</code>, <code>numpy.nan</code>...</li>\n</ul></li>\n<li>any other objects: string or whatever (does not raise exceptions if encountered)</li>\n</ul>\n<p>A NaN implemented following the standard, is the only value for which the inequality comparison with itself should return True:</p>\n<pre><code class=\"python\">def is_nan(x):\n    return (x != x)\n</code></pre>\n<p>And some examples:</p>\n<pre><code class=\"python\">import numpy as np\nvalues = [float('nan'), np.nan, 55, \"string\", lambda x : x]\nfor value in values:\n    print(f\"{repr(value):&lt;8} : {is_nan(value)}\")\n</code></pre>\n<p>Output:</p>\n<pre><code class=\"python\">nan      : True\nnan      : True\n55       : False\n'string' : False\n&lt;function &lt;lambda&gt; at 0x000000000927BF28&gt; : False\n</code></pre>\n", "abstract": "here is an answer working with: A NaN implemented following the standard, is the only value for which the inequality comparison with itself should return True: And some examples: Output:"}, {"id": 62171968, "score": 47, "vote": 0, "content": "<p><strong>It seems that checking if it's equal to itself</strong></p>\n<pre><code class=\"python\">x!=x\n</code></pre>\n<p><strong>is the fastest.</strong></p>\n<pre><code class=\"python\">import pandas as pd \nimport numpy as np \nimport math \n\nx = float('nan')\n\n%timeit x!=x                                                                                                                                                                                                                        \n44.8 ns \u00b1 0.152 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each)\n\n%timeit math.isnan(x)                                                                                                                                                                                                               \n94.2 ns \u00b1 0.955 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each)\n\n%timeit pd.isna(x) \n281 ns \u00b1 5.48 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n\n%timeit np.isnan(x)                                                                                                                                                                                                                 \n1.38 \u00b5s \u00b1 15.7 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n\n</code></pre>\n", "abstract": "It seems that checking if it's equal to itself is the fastest."}, {"id": 12588878, "score": 34, "vote": 0, "content": "<p>I actually just ran into this, but for me it was checking for nan, -inf, or inf. I just used</p>\n<pre><code class=\"python\">if float('-inf') &lt; float(num) &lt; float('inf'):\n</code></pre>\n<p>This is true for numbers, false for nan and both inf, and will raise an exception for things like strings or other types (which is probably a good thing). Also this does not require importing any libraries like math or numpy (numpy is so damn big it doubles the size of any compiled application).</p>\n", "abstract": "I actually just ran into this, but for me it was checking for nan, -inf, or inf. I just used This is true for numbers, false for nan and both inf, and will raise an exception for things like strings or other types (which is probably a good thing). Also this does not require importing any libraries like math or numpy (numpy is so damn big it doubles the size of any compiled application)."}, {"id": 944734, "score": 27, "vote": 0, "content": "<p><a href=\"http://docs.python.org/library/math.html#math.isnan\" rel=\"noreferrer\">math.isnan()</a></p>\n<p>or compare the number to itself. NaN is always != NaN, otherwise (e.g. if it <em>is</em> a number) the comparison should succeed.</p>\n", "abstract": "math.isnan() or compare the number to itself. NaN is always != NaN, otherwise (e.g. if it is a number) the comparison should succeed."}, {"id": 11334997, "score": 25, "vote": 0, "content": "<p>Well I entered this post, because i've had some issues with the function:</p>\n<pre><code class=\"python\">math.isnan()\n</code></pre>\n<p>There are problem when you run this code:</p>\n<pre><code class=\"python\">a = \"hello\"\nmath.isnan(a)\n</code></pre>\n<p>It raises exception.\nMy solution for that is to make another check:</p>\n<pre><code class=\"python\">def is_nan(x):\n    return isinstance(x, float) and math.isnan(x)\n</code></pre>\n", "abstract": "Well I entered this post, because i've had some issues with the function: There are problem when you run this code: It raises exception.\nMy solution for that is to make another check:"}, {"id": 2138383, "score": 17, "vote": 0, "content": "<p>Another method if you're stuck on &lt;2.6, you don't have numpy, and you don't have IEEE 754 support:</p>\n<pre><code class=\"python\">def isNaN(x):\n    return str(x) == str(1e400*0)\n</code></pre>\n", "abstract": "Another method if you're stuck on <2.6, you don't have numpy, and you don't have IEEE 754 support:"}, {"id": 3060088, "score": 11, "vote": 0, "content": "<p>With python &lt; 2.6 I ended up with</p>\n<pre><code class=\"python\">def isNaN(x):\n    return str(float(x)).lower() == 'nan'\n</code></pre>\n<p>This works for me with python 2.5.1 on a Solaris 5.9 box and with python 2.6.5 on Ubuntu 10 </p>\n", "abstract": "With python < 2.6 I ended up with This works for me with python 2.5.1 on a Solaris 5.9 box and with python 2.6.5 on Ubuntu 10 "}, {"id": 37985974, "score": 8, "vote": 0, "content": "<p>I am receiving the data from a web-service that sends <code>NaN</code> as a string <code>'Nan'</code>. But there could be other sorts of string in my data as well, so a simple <code>float(value)</code> could throw an exception. I used the following variant of the accepted answer:</p>\n<pre><code class=\"python\">def isnan(value):\n  try:\n      import math\n      return math.isnan(float(value))\n  except:\n      return False\n</code></pre>\n<p>Requirement:</p>\n<pre><code class=\"python\">isnan('hello') == False\nisnan('NaN') == True\nisnan(100) == False\nisnan(float('nan')) = True\n</code></pre>\n", "abstract": "I am receiving the data from a web-service that sends NaN as a string 'Nan'. But there could be other sorts of string in my data as well, so a simple float(value) could throw an exception. I used the following variant of the accepted answer: Requirement:"}, {"id": 41011102, "score": 5, "vote": 0, "content": "<p>All the methods to tell if the variable is NaN or None:</p>\n<p><strong>None type</strong></p>\n<pre><code class=\"python\">In [1]: from numpy import math\n\nIn [2]: a = None\nIn [3]: not a\nOut[3]: True\n\nIn [4]: len(a or ()) == 0\nOut[4]: True\n\nIn [5]: a == None\nOut[5]: True\n\nIn [6]: a is None\nOut[6]: True\n\nIn [7]: a != a\nOut[7]: False\n\nIn [9]: math.isnan(a)\nTraceback (most recent call last):\n  File \"&lt;ipython-input-9-6d4d8c26d370&gt;\", line 1, in &lt;module&gt;\n    math.isnan(a)\nTypeError: a float is required\n\nIn [10]: len(a) == 0\nTraceback (most recent call last):\n  File \"&lt;ipython-input-10-65b72372873e&gt;\", line 1, in &lt;module&gt;\n    len(a) == 0\nTypeError: object of type 'NoneType' has no len()\n</code></pre>\n<p><strong>NaN type</strong></p>\n<pre><code class=\"python\">In [11]: b = float('nan')\nIn [12]: b\nOut[12]: nan\n\nIn [13]: not b\nOut[13]: False\n\nIn [14]: b != b\nOut[14]: True\n\nIn [15]: math.isnan(b)\nOut[15]: True\n</code></pre>\n", "abstract": "All the methods to tell if the variable is NaN or None: None type NaN type"}, {"id": 54396886, "score": 5, "vote": 0, "content": "<p><strong>How to remove NaN (float) item(s) from a list of mixed data types</strong></p>\n<p>If you have mixed types in an iterable, here is a solution that does not use numpy:</p>\n<pre><code class=\"python\">from math import isnan\n\nZ = ['a','b', float('NaN'), 'd', float('1.1024')]\n\n[x for x in Z if not (\n                      type(x) == float # let's drop all float values\u2026\n                      and isnan(x) # \u2026 but only if they are nan\n                      )]\n</code></pre>\n<pre>['a', 'b', 'd', 1.1024]</pre>\n<p>Short-circuit evaluation means that <code>isnan</code> will not be called on values that are not of type 'float', as <code>False and (\u2026)</code> quickly evaluates to <code>False</code> without having to evaluate the right-hand side.</p>\n", "abstract": "How to remove NaN (float) item(s) from a list of mixed data types If you have mixed types in an iterable, here is a solution that does not use numpy: Short-circuit evaluation means that isnan will not be called on values that are not of type 'float', as False and (\u2026) quickly evaluates to False without having to evaluate the right-hand side."}, {"id": 59722642, "score": 5, "vote": 0, "content": "<p>In Python 3.6 checking on a string value x math.isnan(x) and np.isnan(x) raises an error. \nSo I can't check if the given value is NaN or not if I don't know beforehand it's a number.\nThe following seems to solve this issue</p>\n<pre><code class=\"python\">if str(x)=='nan' and type(x)!='str':\n    print ('NaN')\nelse:\n    print ('non NaN')\n</code></pre>\n", "abstract": "In Python 3.6 checking on a string value x math.isnan(x) and np.isnan(x) raises an error. \nSo I can't check if the given value is NaN or not if I don't know beforehand it's a number.\nThe following seems to solve this issue"}, {"id": 68168892, "score": 5, "vote": 0, "content": "<p>Comparison <code>pd.isna</code>, <code>math.isnan</code> and <code>np.isnan</code> and their flexibility dealing with different type of objects.</p>\n<p>The table below shows if the type of object can be checked with the given method:</p>\n<pre><code class=\"python\">\n+------------+-----+---------+------+--------+------+\n|   Method   | NaN | numeric | None | string | list |\n+------------+-----+---------+------+--------+------+\n| pd.isna    | yes | yes     | yes  | yes    | yes  |\n| math.isnan | yes | yes     | no   | no     | no   |\n| np.isnan   | yes | yes     | no   | no     | yes  | &lt;-- # will error on mixed type list\n+------------+-----+---------+------+--------+------+\n\n</code></pre>\n<h3><a href=\"https://pandas.pydata.org/docs/reference/api/pandas.isna.html\" rel=\"noreferrer\"><code>pd.isna</code></a></h3>\n<p>The most flexible method to check for different types of missing values.</p>\n<hr/>\n<p>None of the answers cover the flexibility of <code>pd.isna</code>. While <code>math.isnan</code> and <code>np.isnan</code> will return <code>True</code> for <code>NaN</code> values, you cannot check for different type of objects like <code>None</code> or strings. Both methods will return an error, so checking a list with mixed types will be cumbersom. This while <code>pd.isna</code> is flexible and will return the correct boolean for different kind of types:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">In [1]: import pandas as pd\n\nIn [2]: import numpy as np\n\nIn [3]: missing_values = [3, None, np.NaN, pd.NA, pd.NaT, '10']\n\nIn [4]: pd.isna(missing_values)\nOut[4]: array([False,  True,  True,  True,  True, False])\n</code></pre>\n", "abstract": "Comparison pd.isna, math.isnan and np.isnan and their flexibility dealing with different type of objects. The table below shows if the type of object can be checked with the given method: The most flexible method to check for different types of missing values. None of the answers cover the flexibility of pd.isna. While math.isnan and np.isnan will return True for NaN values, you cannot check for different type of objects like None or strings. Both methods will return an error, so checking a list with mixed types will be cumbersom. This while pd.isna is flexible and will return the correct boolean for different kind of types:"}, {"id": 51373482, "score": 1, "vote": 0, "content": "<blockquote>\n<p>For nan of type float  </p>\n</blockquote>\n<pre><code class=\"python\">&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; value = float(nan)\n&gt;&gt;&gt; type(value)\n&gt;&gt;&gt; &lt;class 'float'&gt;\n&gt;&gt;&gt; pd.isnull(value)\nTrue\n&gt;&gt;&gt;\n&gt;&gt;&gt; value = 'nan'\n&gt;&gt;&gt; type(value)\n&gt;&gt;&gt; &lt;class 'str'&gt;\n&gt;&gt;&gt; pd.isnull(value)\nFalse\n</code></pre>\n", "abstract": "For nan of type float  "}, {"id": 51382112, "score": -4, "vote": 0, "content": "<p>for strings in panda take pd.isnull:</p>\n<pre><code class=\"python\">if not pd.isnull(atext):\n  for word in nltk.word_tokenize(atext):\n</code></pre>\n<p>the function as feature extraction for NLTK</p>\n<pre><code class=\"python\">def act_features(atext):\nfeatures = {}\nif not pd.isnull(atext):\n  for word in nltk.word_tokenize(atext):\n    if word not in default_stopwords:\n      features['cont({})'.format(word.lower())]=True\nreturn features\n</code></pre>\n", "abstract": "for strings in panda take pd.isnull: the function as feature extraction for NLTK"}]}, {"link": "https://stackoverflow.com/questions/2846653/how-can-i-use-threading-in-python", "question": {"id": "2846653", "title": "How can I use threading in Python?", "content": "<p>I am trying to understand threading in Python. I've looked at the documentation and examples, but quite frankly, many examples are overly sophisticated and I'm having trouble understanding them.</p>\n<p>How do you clearly show tasks being divided for multi-threading?</p>\n", "abstract": "I am trying to understand threading in Python. I've looked at the documentation and examples, but quite frankly, many examples are overly sophisticated and I'm having trouble understanding them. How do you clearly show tasks being divided for multi-threading?"}, "answers": [{"id": 28463266, "score": 1600, "vote": 0, "content": "<p>Since this question was asked in 2010, there has been real simplification in how to do simple multithreading with Python with <strong><a href=\"https://docs.python.org/2/library/functions.html#map\" rel=\"noreferrer\">map</a></strong> and <strong><a href=\"https://docs.python.org/2/library/multiprocessing.html\" rel=\"noreferrer\">pool</a></strong>.</p>\n<p>The code below comes from an article/blog post that you should definitely check out (no affiliation) - <strong><a href=\"https://chriskiehl.com/article/parallelism-in-one-line\" rel=\"noreferrer\">Parallelism in one line: A Better Model for Day to Day Threading Tasks</a></strong>. I'll summarize below - it ends up being just a few lines of code:</p>\n<pre><code class=\"python\">from multiprocessing.dummy import Pool as ThreadPool\npool = ThreadPool(4)\nresults = pool.map(my_function, my_array)\n</code></pre>\n<p>Which is the multithreaded version of:</p>\n<pre><code class=\"python\">results = []\nfor item in my_array:\n    results.append(my_function(item))\n</code></pre>\n<hr/>\n<p><strong>Description</strong></p>\n<blockquote>\n<p>Map is a cool little function, and the key to easily injecting parallelism into your Python code. For those unfamiliar, map is something lifted from functional languages like Lisp. It is a function which maps another function over a sequence.</p>\n<p>Map handles the iteration over the sequence for us, applies the function, and stores all of the results in a handy list at the end.</p>\n</blockquote>\n<p><img alt=\"Enter image description here\" src=\"https://i.stack.imgur.com/Yq37m.png\"/></p>\n<hr/>\n<p><strong>Implementation</strong></p>\n<blockquote>\n<p>Parallel versions of the map function are provided by two libraries:multiprocessing, and also its little known, but equally fantastic step child:multiprocessing.dummy.</p>\n</blockquote>\n<p><code>multiprocessing.dummy</code> is exactly the same as multiprocessing module, <a href=\"https://docs.python.org/2/library/multiprocessing.html#module-multiprocessing.dummy\" rel=\"noreferrer\">but uses threads instead</a> (<em><a href=\"https://medium.com/@bfortuner/python-multithreading-vs-multiprocessing-73072ce5600b\" rel=\"noreferrer\">an important distinction</a> - use multiple processes for CPU-intensive tasks; threads for (and during) I/O</em>):</p>\n<blockquote>\n<p>multiprocessing.dummy replicates the API of multiprocessing, but is no more than a wrapper around the threading module.</p>\n</blockquote>\n<pre><code class=\"python\">import urllib2\nfrom multiprocessing.dummy import Pool as ThreadPool\n\nurls = [\n  'http://www.python.org',\n  'http://www.python.org/about/',\n  'http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html',\n  'http://www.python.org/doc/',\n  'http://www.python.org/download/',\n  'http://www.python.org/getit/',\n  'http://www.python.org/community/',\n  'https://wiki.python.org/moin/',\n]\n\n# Make the Pool of workers\npool = ThreadPool(4)\n\n# Open the URLs in their own threads\n# and return the results\nresults = pool.map(urllib2.urlopen, urls)\n\n# Close the pool and wait for the work to finish\npool.close()\npool.join()\n</code></pre>\n<p>And the timing results:</p>\n<pre><code class=\"python\">Single thread:   14.4 seconds\n       4 Pool:   3.1 seconds\n       8 Pool:   1.4 seconds\n      13 Pool:   1.3 seconds\n</code></pre>\n<hr/>\n<p><strong>Passing multiple arguments</strong> (works like this <a href=\"https://stackoverflow.com/a/28975239/2327328\">only in Python 3.3 and later</a>):</p>\n<p>To pass multiple arrays:</p>\n<pre><code class=\"python\">results = pool.starmap(function, zip(list_a, list_b))\n</code></pre>\n<p>Or to pass a constant and an array:</p>\n<pre><code class=\"python\">results = pool.starmap(function, zip(itertools.repeat(constant), list_a))\n</code></pre>\n<p>If you are using an earlier version of Python, you can pass multiple arguments via <a href=\"https://stackoverflow.com/questions/5442910/python-multiprocessing-pool-map-for-multiple-arguments/5443941#5443941\">this workaround</a>).</p>\n<p>(Thanks to <a href=\"https://stackoverflow.com/users/2441026/user136036\">user136036</a> for the helpful comment.)</p>\n", "abstract": "Since this question was asked in 2010, there has been real simplification in how to do simple multithreading with Python with map and pool. The code below comes from an article/blog post that you should definitely check out (no affiliation) - Parallelism in one line: A Better Model for Day to Day Threading Tasks. I'll summarize below - it ends up being just a few lines of code: Which is the multithreaded version of: Description Map is a cool little function, and the key to easily injecting parallelism into your Python code. For those unfamiliar, map is something lifted from functional languages like Lisp. It is a function which maps another function over a sequence. Map handles the iteration over the sequence for us, applies the function, and stores all of the results in a handy list at the end.  Implementation Parallel versions of the map function are provided by two libraries:multiprocessing, and also its little known, but equally fantastic step child:multiprocessing.dummy. multiprocessing.dummy is exactly the same as multiprocessing module, but uses threads instead (an important distinction - use multiple processes for CPU-intensive tasks; threads for (and during) I/O): multiprocessing.dummy replicates the API of multiprocessing, but is no more than a wrapper around the threading module. And the timing results: Passing multiple arguments (works like this only in Python 3.3 and later): To pass multiple arrays: Or to pass a constant and an array: If you are using an earlier version of Python, you can pass multiple arguments via this workaround). (Thanks to user136036 for the helpful comment.)"}, {"id": 2846697, "score": 751, "vote": 0, "content": "<p>Here's a simple example: you need to try a few alternative URLs and return the contents of the first one to respond.</p>\n<pre><code class=\"python\">import Queue\nimport threading\nimport urllib2\n\n# Called by each thread\ndef get_url(q, url):\n    q.put(urllib2.urlopen(url).read())\n\ntheurls = [\"http://google.com\", \"http://yahoo.com\"]\n\nq = Queue.Queue()\n\nfor u in theurls:\n    t = threading.Thread(target=get_url, args = (q,u))\n    t.daemon = True\n    t.start()\n\ns = q.get()\nprint s\n</code></pre>\n<p>This is a case where threading is used as a simple optimization: each subthread is waiting for a URL to resolve and respond, to put its contents on the queue; each thread is a daemon (won't keep the process up if the main thread ends -- that's more common than not); the main thread starts all subthreads, does a <code>get</code> on the queue to wait until one of them has done a <code>put</code>, then emits the results and terminates (which takes down any subthreads that might still be running, since they're daemon threads).</p>\n<p>Proper use of threads in Python is invariably connected to I/O operations (since CPython doesn't use multiple cores to run CPU-bound tasks anyway, the only reason for threading is not blocking the process while there's a wait for some I/O). Queues are almost invariably the best way to farm out work to threads and/or collect the work's results, by the way, and they're intrinsically threadsafe, so they save you from worrying about locks, conditions, events, semaphores, and other inter-thread coordination/communication concepts.</p>\n", "abstract": "Here's a simple example: you need to try a few alternative URLs and return the contents of the first one to respond. This is a case where threading is used as a simple optimization: each subthread is waiting for a URL to resolve and respond, to put its contents on the queue; each thread is a daemon (won't keep the process up if the main thread ends -- that's more common than not); the main thread starts all subthreads, does a get on the queue to wait until one of them has done a put, then emits the results and terminates (which takes down any subthreads that might still be running, since they're daemon threads). Proper use of threads in Python is invariably connected to I/O operations (since CPython doesn't use multiple cores to run CPU-bound tasks anyway, the only reason for threading is not blocking the process while there's a wait for some I/O). Queues are almost invariably the best way to farm out work to threads and/or collect the work's results, by the way, and they're intrinsically threadsafe, so they save you from worrying about locks, conditions, events, semaphores, and other inter-thread coordination/communication concepts."}, {"id": 2846695, "score": 281, "vote": 0, "content": "<p><b>NOTE</b>: For actual parallelization in Python, you should use the <a href=\"https://docs.python.org/2/library/multiprocessing.html\" rel=\"noreferrer\">multiprocessing</a> module to fork multiple processes that execute in parallel (due to the global interpreter lock, Python threads provide interleaving, but they are in fact executed serially, not in parallel, and are only useful when interleaving I/O operations).</p>\n<p>However, if you are merely looking for interleaving (or are doing I/O operations that can be parallelized despite the global interpreter lock), then the <a href=\"http://docs.python.org/library/threading.html\" rel=\"noreferrer\">threading</a> module is the place to start. As a really simple example, let's consider the problem of summing a large range by summing subranges in parallel:</p>\n<pre><code class=\"python\">import threading\n\nclass SummingThread(threading.Thread):\n     def __init__(self,low,high):\n         super(SummingThread, self).__init__()\n         self.low=low\n         self.high=high\n         self.total=0\n\n     def run(self):\n         for i in range(self.low,self.high):\n             self.total+=i\n\n\nthread1 = SummingThread(0,500000)\nthread2 = SummingThread(500000,1000000)\nthread1.start() # This actually causes the thread to run\nthread2.start()\nthread1.join()  # This waits until the thread has completed\nthread2.join()\n# At this point, both threads have completed\nresult = thread1.total + thread2.total\nprint result\n</code></pre>\n<p>Note that the above is a very stupid example, as it does absolutely no I/O and will be executed serially albeit interleaved (with the added overhead of context switching) in <a href=\"http://en.wikipedia.org/wiki/CPython\" rel=\"noreferrer\">CPython</a> due to the global interpreter lock.</p>\n", "abstract": "NOTE: For actual parallelization in Python, you should use the multiprocessing module to fork multiple processes that execute in parallel (due to the global interpreter lock, Python threads provide interleaving, but they are in fact executed serially, not in parallel, and are only useful when interleaving I/O operations). However, if you are merely looking for interleaving (or are doing I/O operations that can be parallelized despite the global interpreter lock), then the threading module is the place to start. As a really simple example, let's consider the problem of summing a large range by summing subranges in parallel: Note that the above is a very stupid example, as it does absolutely no I/O and will be executed serially albeit interleaved (with the added overhead of context switching) in CPython due to the global interpreter lock."}, {"id": 9625995, "score": 116, "vote": 0, "content": "<p>Like others mentioned, CPython can use threads only for I/O waits due to <a href=\"https://en.wikipedia.org/wiki/Global_interpreter_lock\" rel=\"noreferrer\">GIL</a>.</p>\n<p>If you want to benefit from multiple cores for CPU-bound tasks, use <a href=\"http://docs.python.org/library/multiprocessing.html\" rel=\"noreferrer\">multiprocessing</a>:</p>\n<pre><code class=\"python\">from multiprocessing import Process\n\ndef f(name):\n    print 'hello', name\n\nif __name__ == '__main__':\n    p = Process(target=f, args=('bob',))\n    p.start()\n    p.join()\n</code></pre>\n", "abstract": "Like others mentioned, CPython can use threads only for I/O waits due to GIL. If you want to benefit from multiple cores for CPU-bound tasks, use multiprocessing:"}, {"id": 18963931, "score": 101, "vote": 0, "content": "<p>Just a note: A queue is not required for threading.</p>\n<p>This is the simplest example I could imagine that shows 10 processes running concurrently.</p>\n<pre><code class=\"python\">import threading\nfrom random import randint\nfrom time import sleep\n\n\ndef print_number(number):\n\n    # Sleeps a random 1 to 10 seconds\n    rand_int_var = randint(1, 10)\n    sleep(rand_int_var)\n    print \"Thread \" + str(number) + \" slept for \" + str(rand_int_var) + \" seconds\"\n\nthread_list = []\n\nfor i in range(1, 10):\n\n    # Instantiates the thread\n    # (i) does not make a sequence, so (i,)\n    t = threading.Thread(target=print_number, args=(i,))\n    # Sticks the thread in a list so that it remains accessible\n    thread_list.append(t)\n\n# Starts threads\nfor thread in thread_list:\n    thread.start()\n\n# This blocks the calling thread until the thread whose join() method is called is terminated.\n# From http://docs.python.org/2/library/threading.html#thread-objects\nfor thread in thread_list:\n    thread.join()\n\n# Demonstrates that the main process waited for threads to complete\nprint \"Done\"\n</code></pre>\n", "abstract": "Just a note: A queue is not required for threading. This is the simplest example I could imagine that shows 10 processes running concurrently."}, {"id": 19120647, "score": 52, "vote": 0, "content": "<p><a href=\"https://stackoverflow.com/questions/2846653/how-can-i-use-threading-in-python/2846697#2846697\">The answer from Alex Martelli</a> helped me. However, here is a modified version that I thought was more useful (at least to me).</p>\n<p><strong>Updated:</strong> works in both Python\u00a02 and Python\u00a03</p>\n<pre><code class=\"python\">try:\n    # For Python 3\n    import queue\n    from urllib.request import urlopen\nexcept:\n    # For Python 2 \n    import Queue as queue\n    from urllib2 import urlopen\n\nimport threading\n\nworker_data = ['http://google.com', 'http://yahoo.com', 'http://bing.com']\n\n# Load up a queue with your data. This will handle locking\nq = queue.Queue()\nfor url in worker_data:\n    q.put(url)\n\n# Define a worker function\ndef worker(url_queue):\n    queue_full = True\n    while queue_full:\n        try:\n            # Get your data off the queue, and do some work\n            url = url_queue.get(False)\n            data = urlopen(url).read()\n            print(len(data))\n\n        except queue.Empty:\n            queue_full = False\n\n# Create as many threads as you want\nthread_count = 5\nfor i in range(thread_count):\n    t = threading.Thread(target=worker, args = (q,))\n    t.start()\n</code></pre>\n", "abstract": "The answer from Alex Martelli helped me. However, here is a modified version that I thought was more useful (at least to me). Updated: works in both Python\u00a02 and Python\u00a03"}, {"id": 24092195, "score": 27, "vote": 0, "content": "<p>I found this very useful: create as many threads as cores and let them execute a (large) number of tasks (in this case, calling a shell program):</p>\n<pre><code class=\"python\">import Queue\nimport threading\nimport multiprocessing\nimport subprocess\n\nq = Queue.Queue()\nfor i in range(30): # Put 30 tasks in the queue\n    q.put(i)\n\ndef worker():\n    while True:\n        item = q.get()\n        # Execute a task: call a shell program and wait until it completes\n        subprocess.call(\"echo \" + str(item), shell=True)\n        q.task_done()\n\ncpus = multiprocessing.cpu_count() # Detect number of cores\nprint(\"Creating %d threads\" % cpus)\nfor i in range(cpus):\n     t = threading.Thread(target=worker)\n     t.daemon = True\n     t.start()\n\nq.join() # Block until all tasks are done\n</code></pre>\n", "abstract": "I found this very useful: create as many threads as cores and let them execute a (large) number of tasks (in this case, calling a shell program):"}, {"id": 42839268, "score": 27, "vote": 0, "content": "<p>Given a function, <code>f</code>, thread it like this:</p>\n<pre><code class=\"python\">import threading\nthreading.Thread(target=f).start()\n</code></pre>\n<p>To pass arguments to <code>f</code></p>\n<pre><code class=\"python\">threading.Thread(target=f, args=(a,b,c)).start()\n</code></pre>\n", "abstract": "Given a function, f, thread it like this: To pass arguments to f"}, {"id": 45213153, "score": 23, "vote": 0, "content": "<p>Python 3 has the facility of <a href=\"https://docs.python.org/dev/library/concurrent.futures.html\" rel=\"nofollow noreferrer\">launching parallel tasks</a>. This makes our work easier.</p>\n<p>It has <a href=\"https://docs.python.org/dev/library/concurrent.futures.html#threadpoolexecutor\" rel=\"nofollow noreferrer\">thread pooling</a> and <a href=\"https://docs.python.org/dev/library/concurrent.futures.html#processpoolexecutor\" rel=\"nofollow noreferrer\">process pooling</a>.</p>\n<p>The following gives an insight:</p>\n<p><strong>ThreadPoolExecutor Example</strong> (<a href=\"https://docs.python.org/dev/library/concurrent.futures.html#threadpoolexecutor-example\" rel=\"nofollow noreferrer\">source</a>)</p>\n<pre><code class=\"python\">import concurrent.futures\nimport urllib.request\n\nURLS = ['http://www.foxnews.com/',\n        'http://www.cnn.com/',\n        'http://europe.wsj.com/',\n        'http://www.bbc.co.uk/',\n        'http://some-made-up-domain.com/']\n\n# Retrieve a single page and report the URL and contents\ndef load_url(url, timeout):\n    with urllib.request.urlopen(url, timeout=timeout) as conn:\n        return conn.read()\n\n# We can use a with statement to ensure threads are cleaned up promptly\nwith concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:\n    # Start the load operations and mark each future with its URL\n    future_to_url = {executor.submit(load_url, url, 60): url for url in URLS}\n    for future in concurrent.futures.as_completed(future_to_url):\n        url = future_to_url[future]\n        try:\n            data = future.result()\n        except Exception as exc:\n            print('%r generated an exception: %s' % (url, exc))\n        else:\n            print('%r page is %d bytes' % (url, len(data)))\n</code></pre>\n<p><strong>ProcessPoolExecutor</strong> (<a href=\"https://docs.python.org/dev/library/concurrent.futures.html#processpoolexecutor-example\" rel=\"nofollow noreferrer\">source</a>)</p>\n<pre><code class=\"python\">import concurrent.futures\nimport math\n\nPRIMES = [\n    112272535095293,\n    112582705942171,\n    112272535095293,\n    115280095190773,\n    115797848077099,\n    1099726899285419]\n\ndef is_prime(n):\n    if n % 2 == 0:\n        return False\n\n    sqrt_n = int(math.floor(math.sqrt(n)))\n    for i in range(3, sqrt_n + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef main():\n    with concurrent.futures.ProcessPoolExecutor() as executor:\n        for number, prime in zip(PRIMES, executor.map(is_prime, PRIMES)):\n            print('%d is prime: %s' % (number, prime))\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n", "abstract": "Python 3 has the facility of launching parallel tasks. This makes our work easier. It has thread pooling and process pooling. The following gives an insight: ThreadPoolExecutor Example (source) ProcessPoolExecutor (source)"}, {"id": 49923273, "score": 21, "vote": 0, "content": "<p>I saw a lot of examples here where no real work was being performed, and they were mostly CPU-bound. Here is an example of a CPU-bound task that computes all prime numbers between 10 million and 10.05 million. I have used all four methods here:</p>\n<pre><code class=\"python\">import math\nimport timeit\nimport threading\nimport multiprocessing\nfrom concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor\n\n\ndef time_stuff(fn):\n    \"\"\"\n    Measure time of execution of a function\n    \"\"\"\n    def wrapper(*args, **kwargs):\n        t0 = timeit.default_timer()\n        fn(*args, **kwargs)\n        t1 = timeit.default_timer()\n        print(\"{} seconds\".format(t1 - t0))\n    return wrapper\n\ndef find_primes_in(nmin, nmax):\n    \"\"\"\n    Compute a list of prime numbers between the given minimum and maximum arguments\n    \"\"\"\n    primes = []\n\n    # Loop from minimum to maximum\n    for current in range(nmin, nmax + 1):\n\n        # Take the square root of the current number\n        sqrt_n = int(math.sqrt(current))\n        found = False\n\n        # Check if the any number from 2 to the square root + 1 divides the current numnber under consideration\n        for number in range(2, sqrt_n + 1):\n\n            # If divisible we have found a factor, hence this is not a prime number, lets move to the next one\n            if current % number == 0:\n                found = True\n                break\n\n        # If not divisible, add this number to the list of primes that we have found so far\n        if not found:\n            primes.append(current)\n\n    # I am merely printing the length of the array containing all the primes, but feel free to do what you want\n    print(len(primes))\n\n@time_stuff\ndef sequential_prime_finder(nmin, nmax):\n    \"\"\"\n    Use the main process and main thread to compute everything in this case\n    \"\"\"\n    find_primes_in(nmin, nmax)\n\n@time_stuff\ndef threading_prime_finder(nmin, nmax):\n    \"\"\"\n    If the minimum is 1000 and the maximum is 2000 and we have four workers,\n    1000 - 1250 to worker 1\n    1250 - 1500 to worker 2\n    1500 - 1750 to worker 3\n    1750 - 2000 to worker 4\n    so let\u2019s split the minimum and maximum values according to the number of workers\n    \"\"\"\n    nrange = nmax - nmin\n    threads = []\n    for i in range(8):\n        start = int(nmin + i * nrange/8)\n        end = int(nmin + (i + 1) * nrange/8)\n\n        # Start the thread with the minimum and maximum split up to compute\n        # Parallel computation will not work here due to the GIL since this is a CPU-bound task\n        t = threading.Thread(target = find_primes_in, args = (start, end))\n        threads.append(t)\n        t.start()\n\n    # Don\u2019t forget to wait for the threads to finish\n    for t in threads:\n        t.join()\n\n@time_stuff\ndef processing_prime_finder(nmin, nmax):\n    \"\"\"\n    Split the minimum, maximum interval similar to the threading method above, but use processes this time\n    \"\"\"\n    nrange = nmax - nmin\n    processes = []\n    for i in range(8):\n        start = int(nmin + i * nrange/8)\n        end = int(nmin + (i + 1) * nrange/8)\n        p = multiprocessing.Process(target = find_primes_in, args = (start, end))\n        processes.append(p)\n        p.start()\n\n    for p in processes:\n        p.join()\n\n@time_stuff\ndef thread_executor_prime_finder(nmin, nmax):\n    \"\"\"\n    Split the min max interval similar to the threading method, but use a thread pool executor this time.\n    This method is slightly faster than using pure threading as the pools manage threads more efficiently.\n    This method is still slow due to the GIL limitations since we are doing a CPU-bound task.\n    \"\"\"\n    nrange = nmax - nmin\n    with ThreadPoolExecutor(max_workers = 8) as e:\n        for i in range(8):\n            start = int(nmin + i * nrange/8)\n            end = int(nmin + (i + 1) * nrange/8)\n            e.submit(find_primes_in, start, end)\n\n@time_stuff\ndef process_executor_prime_finder(nmin, nmax):\n    \"\"\"\n    Split the min max interval similar to the threading method, but use the process pool executor.\n    This is the fastest method recorded so far as it manages process efficiently + overcomes GIL limitations.\n    RECOMMENDED METHOD FOR CPU-BOUND TASKS\n    \"\"\"\n    nrange = nmax - nmin\n    with ProcessPoolExecutor(max_workers = 8) as e:\n        for i in range(8):\n            start = int(nmin + i * nrange/8)\n            end = int(nmin + (i + 1) * nrange/8)\n            e.submit(find_primes_in, start, end)\n\ndef main():\n    nmin = int(1e7)\n    nmax = int(1.05e7)\n    print(\"Sequential Prime Finder Starting\")\n    sequential_prime_finder(nmin, nmax)\n    print(\"Threading Prime Finder Starting\")\n    threading_prime_finder(nmin, nmax)\n    print(\"Processing Prime Finder Starting\")\n    processing_prime_finder(nmin, nmax)\n    print(\"Thread Executor Prime Finder Starting\")\n    thread_executor_prime_finder(nmin, nmax)\n    print(\"Process Executor Finder Starting\")\n    process_executor_prime_finder(nmin, nmax)\nif __name__ == \"__main__\":\n    main()\n</code></pre>\n<p>Here are the results on my Mac\u00a0OS\u00a0X four-core machine</p>\n<pre><code class=\"python\">Sequential Prime Finder Starting\n9.708213827005238 seconds\nThreading Prime Finder Starting\n9.81836523200036 seconds\nProcessing Prime Finder Starting\n3.2467174359990167 seconds\nThread Executor Prime Finder Starting\n10.228896902000997 seconds\nProcess Executor Finder Starting\n2.656402041000547 seconds\n</code></pre>\n", "abstract": "I saw a lot of examples here where no real work was being performed, and they were mostly CPU-bound. Here is an example of a CPU-bound task that computes all prime numbers between 10 million and 10.05 million. I have used all four methods here: Here are the results on my Mac\u00a0OS\u00a0X four-core machine"}, {"id": 40323967, "score": 20, "vote": 0, "content": "<p>Using the blazing new <a href=\"https://docs.python.org/3/library/concurrent.futures.html\" rel=\"noreferrer\">concurrent.futures</a> module</p>\n<pre><code class=\"python\">def sqr(val):\n    import time\n    time.sleep(0.1)\n    return val * val\n\ndef process_result(result):\n    print(result)\n\ndef process_these_asap(tasks):\n    import concurrent.futures\n\n    with concurrent.futures.ProcessPoolExecutor() as executor:\n        futures = []\n        for task in tasks:\n            futures.append(executor.submit(sqr, task))\n\n        for future in concurrent.futures.as_completed(futures):\n            process_result(future.result())\n        # Or instead of all this just do:\n        # results = executor.map(sqr, tasks)\n        # list(map(process_result, results))\n\ndef main():\n    tasks = list(range(10))\n    print('Processing {} tasks'.format(len(tasks)))\n    process_these_asap(tasks)\n    print('Done')\n    return 0\n\nif __name__ == '__main__':\n    import sys\n    sys.exit(main())\n</code></pre>\n<p>The executor approach might seem familiar to all those who have gotten their hands dirty with Java before.</p>\n<p>Also on a side note: To keep the universe sane, don't forget to close your pools/executors if you don't use <code>with</code> context (which is so awesome that it does it for you)</p>\n", "abstract": "Using the blazing new concurrent.futures module The executor approach might seem familiar to all those who have gotten their hands dirty with Java before. Also on a side note: To keep the universe sane, don't forget to close your pools/executors if you don't use with context (which is so awesome that it does it for you)"}, {"id": 15995749, "score": 19, "vote": 0, "content": "<p>For me, the perfect example for threading is monitoring asynchronous events. Look at this code.</p>\n<pre><code class=\"python\"># thread_test.py\nimport threading\nimport time\n\nclass Monitor(threading.Thread):\n    def __init__(self, mon):\n        threading.Thread.__init__(self)\n        self.mon = mon\n\n    def run(self):\n        while True:\n            if self.mon[0] == 2:\n                print \"Mon = 2\"\n                self.mon[0] = 3;\n</code></pre>\n<p>You can play with this code by opening an <a href=\"http://en.wikipedia.org/wiki/IPython\" rel=\"nofollow noreferrer\">IPython</a> session and doing something like:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; from thread_test import Monitor\n&gt;&gt;&gt; a = [0]\n&gt;&gt;&gt; mon = Monitor(a)\n&gt;&gt;&gt; mon.start()\n&gt;&gt;&gt; a[0] = 2\nMon = 2\n&gt;&gt;&gt;a[0] = 2\nMon = 2\n</code></pre>\n<p>Wait a few minutes</p>\n<pre><code class=\"python\">&gt;&gt;&gt; a[0] = 2\nMon = 2\n</code></pre>\n", "abstract": "For me, the perfect example for threading is monitoring asynchronous events. Look at this code. You can play with this code by opening an IPython session and doing something like: Wait a few minutes"}, {"id": 45355034, "score": 19, "vote": 0, "content": "<p>Most documentation and tutorials use Python's <code>Threading</code> and <code>Queue</code> module, and they could seem overwhelming for beginners.</p>\n<p>Perhaps consider the <code>concurrent.futures.ThreadPoolExecutor</code> module of Python\u00a03.</p>\n<p>Combined with <code>with</code> clause and list comprehension it could be a real charm.</p>\n<pre><code class=\"python\">from concurrent.futures import ThreadPoolExecutor, as_completed\n\ndef get_url(url):\n    # Your actual program here. Using threading.Lock() if necessary\n    return \"\"\n\n# List of URLs to fetch\nurls = [\"url1\", \"url2\"]\n\nwith ThreadPoolExecutor(max_workers = 5) as executor:\n\n    # Create threads\n    futures = {executor.submit(get_url, url) for url in urls}\n\n    # as_completed() gives you the threads once finished\n    for f in as_completed(futures):\n        # Get the results\n        rs = f.result()\n</code></pre>\n", "abstract": "Most documentation and tutorials use Python's Threading and Queue module, and they could seem overwhelming for beginners. Perhaps consider the concurrent.futures.ThreadPoolExecutor module of Python\u00a03. Combined with with clause and list comprehension it could be a real charm."}, {"id": 56423044, "score": 15, "vote": 0, "content": "<p>With borrowing from <a href=\"https://stackoverflow.com/a/52498068/3702377\">this post</a> we know about choosing between the multithreading, multiprocessing, and async/<code>asyncio</code> and their usage.</p>\n<p><em>Python 3</em> has a new built-in library in order to make concurrency and parallelism: <a href=\"https://docs.python.org/dev/library/concurrent.futures.html\" rel=\"noreferrer\">concurrent.futures</a></p>\n<p>So I'll demonstrate through an experiment to run four tasks (i.e. <code>.sleep()</code> method) by <code>Threading-Pool</code>:</p>\n<pre><code class=\"python\">from concurrent.futures import ThreadPoolExecutor, as_completed\nfrom time import sleep, time\n\ndef concurrent(max_worker):\n    futures = []\n    tic = time()\n    with ThreadPoolExecutor(max_workers=max_worker) as executor:\n        futures.append(executor.submit(sleep, 2))  # Two seconds sleep\n        futures.append(executor.submit(sleep, 1))\n        futures.append(executor.submit(sleep, 7))\n        futures.append(executor.submit(sleep, 3))\n        for future in as_completed(futures):\n            if future.result() is not None:\n                print(future.result())\n    print(f'Total elapsed time by {max_worker} workers:', time()-tic)\n\nconcurrent(5)\nconcurrent(4)\nconcurrent(3)\nconcurrent(2)\nconcurrent(1)\n</code></pre>\n<p>Output:</p>\n<pre><code class=\"python\">Total elapsed time by 5 workers: 7.007831811904907\nTotal elapsed time by 4 workers: 7.007944107055664\nTotal elapsed time by 3 workers: 7.003149509429932\nTotal elapsed time by 2 workers: 8.004627466201782\nTotal elapsed time by 1 workers: 13.013478994369507\n</code></pre>\n<hr/>\n<p>[<strong>NOTE</strong>]:</p>\n<ul>\n<li>As you can see in the above results, the best case was <em><strong>3</strong></em> workers for those four tasks.</li>\n<li>If you have a process task instead of I/O bound or blocking (<code>multiprocessing</code> instead of <code>threading</code>) you can change the <code>ThreadPoolExecutor</code> to <code>ProcessPoolExecutor</code>.</li>\n</ul>\n", "abstract": "With borrowing from this post we know about choosing between the multithreading, multiprocessing, and async/asyncio and their usage. Python 3 has a new built-in library in order to make concurrency and parallelism: concurrent.futures So I'll demonstrate through an experiment to run four tasks (i.e. .sleep() method) by Threading-Pool: Output: [NOTE]:"}, {"id": 50150835, "score": 14, "vote": 0, "content": "<p>Here is the very simple example of <a href=\"http://en.wikipedia.org/wiki/Comma-separated_values\" rel=\"nofollow noreferrer\">CSV</a> import using threading. (Library inclusion may differ for different purpose.)</p>\n<p>Helper Functions:</p>\n<pre><code class=\"python\">from threading import Thread\nfrom project import app\nimport csv\n\n\ndef import_handler(csv_file_name):\n    thr = Thread(target=dump_async_csv_data, args=[csv_file_name])\n    thr.start()\n\ndef dump_async_csv_data(csv_file_name):\n    with app.app_context():\n        with open(csv_file_name) as File:\n            reader = csv.DictReader(File)\n            for row in reader:\n                # DB operation/query\n</code></pre>\n<p>Driver Function:</p>\n<pre><code class=\"python\">import_handler(csv_file_name)\n</code></pre>\n", "abstract": "Here is the very simple example of CSV import using threading. (Library inclusion may differ for different purpose.) Helper Functions: Driver Function:"}, {"id": 57388603, "score": 14, "vote": 0, "content": "<p>I would like to contribute with a simple example and the explanations I've found useful when I had to tackle this problem myself.</p>\n<p>In this answer you will find some information about Python's <a href=\"https://en.wikipedia.org/wiki/Global_interpreter_lock\" rel=\"noreferrer\">GIL</a> (global interpreter lock) and a simple day-to-day example written using multiprocessing.dummy plus some simple benchmarks.</p>\n<p><strong>Global Interpreter Lock (GIL)</strong></p>\n<p>Python doesn't allow multi-threading in the truest sense of the word. It has a multi-threading package, but if you want to multi-thread to speed your code up, then it's usually not a good idea to use it.</p>\n<p>Python has a construct called the global interpreter lock (GIL).\nThe GIL makes sure that only one of your 'threads' can execute at any one time. A thread acquires the GIL, does a little work, then passes the GIL onto the next thread.</p>\n<p>This happens very quickly so to the human eye it may seem like your threads are executing in parallel, but they are really just taking turns using the same CPU core.</p>\n<p>All this GIL passing adds overhead to execution. This means that if you want to make your code run faster then using the threading\npackage often isn't a good idea.</p>\n<p>There are reasons to use Python's threading package. If you want to run some things simultaneously, and efficiency is not a concern,\nthen it's totally fine and convenient. Or if you are running code that needs to wait for something (like some I/O) then it could make a lot of sense. But the threading library won't let you use extra CPU cores.</p>\n<p>Multi-threading can be outsourced to the operating system (by doing multi-processing), and some external application that calls your Python code (for example, <a href=\"https://en.wikipedia.org/wiki/Apache_Spark\" rel=\"noreferrer\">Spark</a> or <a href=\"http://en.wikipedia.org/wiki/Apache_Hadoop\" rel=\"noreferrer\">Hadoop</a>), or some code that your Python code calls (for example: you could have your Python code call a C function that does the expensive multi-threaded stuff).</p>\n<p><strong>Why This Matters</strong></p>\n<p>Because lots of people spend a lot of time trying to find bottlenecks in their fancy Python multi-threaded code before they learn what the GIL is.</p>\n<p>Once this information is clear, here's my code:</p>\n<pre><code class=\"python\">#!/bin/python\nfrom multiprocessing.dummy import Pool\nfrom subprocess import PIPE,Popen\nimport time\nimport os\n\n# In the variable pool_size we define the \"parallelness\".\n# For CPU-bound tasks, it doesn't make sense to create more Pool processes\n# than you have cores to run them on.\n#\n# On the other hand, if you are using I/O-bound tasks, it may make sense\n# to create a quite a few more Pool processes than cores, since the processes\n# will probably spend most their time blocked (waiting for I/O to complete).\npool_size = 8\n\ndef do_ping(ip):\n    if os.name == 'nt':\n        print (\"Using Windows Ping to \" + ip)\n        proc = Popen(['ping', ip], stdout=PIPE)\n        return proc.communicate()[0]\n    else:\n        print (\"Using Linux / Unix Ping to \" + ip)\n        proc = Popen(['ping', ip, '-c', '4'], stdout=PIPE)\n        return proc.communicate()[0]\n\n\nos.system('cls' if os.name=='nt' else 'clear')\nprint (\"Running using threads\\n\")\nstart_time = time.time()\npool = Pool(pool_size)\nwebsite_names = [\"www.google.com\",\"www.facebook.com\",\"www.pinterest.com\",\"www.microsoft.com\"]\nresult = {}\nfor website_name in website_names:\n    result[website_name] = pool.apply_async(do_ping, args=(website_name,))\npool.close()\npool.join()\nprint (\"\\n--- Execution took {} seconds ---\".format((time.time() - start_time)))\n\n# Now we do the same without threading, just to compare time\nprint (\"\\nRunning NOT using threads\\n\")\nstart_time = time.time()\nfor website_name in website_names:\n    do_ping(website_name)\nprint (\"\\n--- Execution took {} seconds ---\".format((time.time() - start_time)))\n\n# Here's one way to print the final output from the threads\noutput = {}\nfor key, value in result.items():\n    output[key] = value.get()\nprint (\"\\nOutput aggregated in a Dictionary:\")\nprint (output)\nprint (\"\\n\")\n\nprint (\"\\nPretty printed output: \")\nfor key, value in output.items():\n    print (key + \"\\n\")\n    print (value)\n</code></pre>\n", "abstract": "I would like to contribute with a simple example and the explanations I've found useful when I had to tackle this problem myself. In this answer you will find some information about Python's GIL (global interpreter lock) and a simple day-to-day example written using multiprocessing.dummy plus some simple benchmarks. Global Interpreter Lock (GIL) Python doesn't allow multi-threading in the truest sense of the word. It has a multi-threading package, but if you want to multi-thread to speed your code up, then it's usually not a good idea to use it. Python has a construct called the global interpreter lock (GIL).\nThe GIL makes sure that only one of your 'threads' can execute at any one time. A thread acquires the GIL, does a little work, then passes the GIL onto the next thread. This happens very quickly so to the human eye it may seem like your threads are executing in parallel, but they are really just taking turns using the same CPU core. All this GIL passing adds overhead to execution. This means that if you want to make your code run faster then using the threading\npackage often isn't a good idea. There are reasons to use Python's threading package. If you want to run some things simultaneously, and efficiency is not a concern,\nthen it's totally fine and convenient. Or if you are running code that needs to wait for something (like some I/O) then it could make a lot of sense. But the threading library won't let you use extra CPU cores. Multi-threading can be outsourced to the operating system (by doing multi-processing), and some external application that calls your Python code (for example, Spark or Hadoop), or some code that your Python code calls (for example: you could have your Python code call a C function that does the expensive multi-threaded stuff). Why This Matters Because lots of people spend a lot of time trying to find bottlenecks in their fancy Python multi-threaded code before they learn what the GIL is. Once this information is clear, here's my code:"}, {"id": 43994491, "score": 8, "vote": 0, "content": "<p>Here is multi threading with a simple example which will be helpful. You can run it and understand easily how multi threading is working in Python. I used a lock for preventing access to other threads until the previous threads finished their work. By the use of this line of code,</p>\n<blockquote>\n<p>tLock = threading.BoundedSemaphore(value=4)</p>\n</blockquote>\n<p>you can allow a number of processes at a time and keep hold to the rest of the threads which will run later or after finished previous processes.</p>\n<pre><code class=\"python\">import threading\nimport time\n\n#tLock = threading.Lock()\ntLock = threading.BoundedSemaphore(value=4)\ndef timer(name, delay, repeat):\n    print  \"\\r\\nTimer: \", name, \" Started\"\n    tLock.acquire()\n    print \"\\r\\n\", name, \" has the acquired the lock\"\n    while repeat &gt; 0:\n        time.sleep(delay)\n        print \"\\r\\n\", name, \": \", str(time.ctime(time.time()))\n        repeat -= 1\n\n    print \"\\r\\n\", name, \" is releaseing the lock\"\n    tLock.release()\n    print \"\\r\\nTimer: \", name, \" Completed\"\n\ndef Main():\n    t1 = threading.Thread(target=timer, args=(\"Timer1\", 2, 5))\n    t2 = threading.Thread(target=timer, args=(\"Timer2\", 3, 5))\n    t3 = threading.Thread(target=timer, args=(\"Timer3\", 4, 5))\n    t4 = threading.Thread(target=timer, args=(\"Timer4\", 5, 5))\n    t5 = threading.Thread(target=timer, args=(\"Timer5\", 0.1, 5))\n\n    t1.start()\n    t2.start()\n    t3.start()\n    t4.start()\n    t5.start()\n\n    print \"\\r\\nMain Complete\"\n\nif __name__ == \"__main__\":\n    Main()\n</code></pre>\n", "abstract": "Here is multi threading with a simple example which will be helpful. You can run it and understand easily how multi threading is working in Python. I used a lock for preventing access to other threads until the previous threads finished their work. By the use of this line of code, tLock = threading.BoundedSemaphore(value=4) you can allow a number of processes at a time and keep hold to the rest of the threads which will run later or after finished previous processes."}, {"id": 45000734, "score": 5, "vote": 0, "content": "<p>None of the previous solutions actually used multiple cores on my GNU/Linux server (where I don't have administrator rights). They just ran on a single core.</p>\n<p>I used the lower level <code>os.fork</code> interface to spawn multiple processes. This is the code that worked for me:</p>\n<pre><code class=\"python\">from os import fork\n\nvalues = ['different', 'values', 'for', 'threads']\n\nfor i in range(len(values)):\n    p = fork()\n    if p == 0:\n        my_function(values[i])\n        break\n</code></pre>\n", "abstract": "None of the previous solutions actually used multiple cores on my GNU/Linux server (where I don't have administrator rights). They just ran on a single core. I used the lower level os.fork interface to spawn multiple processes. This is the code that worked for me:"}, {"id": 68162778, "score": 2, "vote": 0, "content": "<p>As a python3 version of the second anwser:</p>\n<pre><code class=\"python\">import queue as Queue\nimport threading\nimport urllib.request\n\n# Called by each thread\ndef get_url(q, url):\n    q.put(urllib.request.urlopen(url).read())\n\ntheurls = [\"http://google.com\", \"http://yahoo.com\", \"http://www.python.org\",\"https://wiki.python.org/moin/\"]\n\nq = Queue.Queue()\ndef thread_func():\n    for u in theurls:\n        t = threading.Thread(target=get_url, args = (q,u))\n        t.daemon = True\n        t.start()\n\n    s = q.get()\n    \ndef non_thread_func():\n    for u in theurls:\n        get_url(q,u)\n        \n\n    s = q.get()\n   \n</code></pre>\n<p>And you can test it:</p>\n<pre><code class=\"python\">start = time.time()\nthread_func()\nend = time.time()\nprint(end - start)\n\nstart = time.time()\nnon_thread_func()\nend = time.time()\nprint(end - start)\n</code></pre>\n<p>non_thread_func() should cost 4 times the time spent than thread_func()</p>\n", "abstract": "As a python3 version of the second anwser: And you can test it: non_thread_func() should cost 4 times the time spent than thread_func()"}, {"id": 50220072, "score": 1, "vote": 0, "content": "<pre><code class=\"python\">import threading\nimport requests\n\ndef send():\n\n  r = requests.get('https://www.stackoverlow.com')\n\nthread = []\nt = threading.Thread(target=send())\nthread.append(t)\nt.start()\n</code></pre>\n", "abstract": ""}, {"id": 68964665, "score": 1, "vote": 0, "content": "<p>It's very easy to understand. Here are the two simple ways to do threading.</p>\n<pre><code class=\"python\">import time\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\nimport threading\n\ndef a(a=1, b=2):\n    print(a)\n    time.sleep(5)\n    print(b)\n    return a+b\n\ndef b(**kwargs):\n    if \"a\" in kwargs:\n        print(\"am b\")\n    else:\n        print(\"nothing\")\n        \nto_do=[]\nexecutor = ThreadPoolExecutor(max_workers=4)\nex1=executor.submit(a)\nto_do.append(ex1)\nex2=executor.submit(b, **{\"a\":1})\nto_do.append(ex2)\n\nfor future in as_completed(to_do):\n    print(\"Future {} and Future Return is {}\\n\".format(future, future.result()))\n\nprint(\"threading\")\n\nto_do=[]\nto_do.append(threading.Thread(target=a))\nto_do.append(threading.Thread(target=b, kwargs={\"a\":1}))\n\nfor threads in to_do:\n    threads.start()\n    \nfor threads in to_do:\n    threads.join()\n</code></pre>\n", "abstract": "It's very easy to understand. Here are the two simple ways to do threading."}]}, {"link": "https://stackoverflow.com/questions/8933237/how-do-i-check-if-directory-exists-in-python", "question": {"id": "8933237", "title": "How do I check if directory exists in Python?", "content": "<p>How do I check if a directory exists?</p>\n", "abstract": "How do I check if a directory exists?"}, "answers": [{"id": 8933290, "score": 2145, "vote": 0, "content": "<p>Use <a href=\"http://docs.python.org/dev/library/os.path.html#os.path.isdir\" rel=\"noreferrer\"><strong><code>os.path.isdir</code></strong></a> for directories only:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.path.isdir('new_folder')\nTrue\n</code></pre>\n<p>Use <a href=\"http://docs.python.org/dev/library/os.path.html#os.path.exists\" rel=\"noreferrer\"><strong><code>os.path.exists</code></strong></a> for both files and directories:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.path.exists(os.path.join(os.getcwd(), 'new_folder', 'file.txt'))\nFalse\n</code></pre>\n<p>Alternatively, you can use <a href=\"https://docs.python.org/dev/library/pathlib.html\" rel=\"noreferrer\"><strong><code>pathlib</code></strong></a>:</p>\n<pre><code class=\"python\"> &gt;&gt;&gt; from pathlib import Path\n &gt;&gt;&gt; Path('new_folder').is_dir()\n True\n &gt;&gt;&gt; (Path.cwd() / 'new_folder' / 'file.txt').exists()\n False\n</code></pre>\n", "abstract": "Use os.path.isdir for directories only: Use os.path.exists for both files and directories: Alternatively, you can use pathlib:"}, {"id": 44228213, "score": 112, "vote": 0, "content": "<p>Python 3.4 introduced <a href=\"https://docs.python.org/3/library/pathlib.html#\" rel=\"noreferrer\">the <code>pathlib</code> module</a> into the standard library, which provides an object oriented approach to handle filesystem paths. The <code>is_dir()</code> and <code>exists()</code> methods of a <code>Path</code> object can be used to answer the question:</p>\n<pre><code class=\"python\">In [1]: from pathlib import Path\n\nIn [2]: p = Path('/usr')\n\nIn [3]: p.exists()\nOut[3]: True\n\nIn [4]: p.is_dir()\nOut[4]: True\n</code></pre>\n<p>Paths (and strings) can be joined together with the <code>/</code> operator:</p>\n<pre><code class=\"python\">In [5]: q = p / 'bin' / 'vim'\n\nIn [6]: q\nOut[6]: PosixPath('/usr/bin/vim') \n\nIn [7]: q.exists()\nOut[7]: True\n\nIn [8]: q.is_dir()\nOut[8]: False\n</code></pre>\n<p>Pathlib is also available on Python 2.7 via <a href=\"https://pypi.python.org/pypi/pathlib2/\" rel=\"noreferrer\">the pathlib2 module on PyPi.</a></p>\n", "abstract": "Python 3.4 introduced the pathlib module into the standard library, which provides an object oriented approach to handle filesystem paths. The is_dir() and exists() methods of a Path object can be used to answer the question: Paths (and strings) can be joined together with the / operator: Pathlib is also available on Python 2.7 via the pathlib2 module on PyPi."}, {"id": 8933302, "score": 92, "vote": 0, "content": "<p>So close! <code>os.path.isdir</code> returns <code>True</code> if you pass in the name of a directory that currently exists. If it doesn't exist or it's not a directory, then it returns <code>False</code>.</p>\n", "abstract": "So close! os.path.isdir returns True if you pass in the name of a directory that currently exists. If it doesn't exist or it's not a directory, then it returns False."}, {"id": 8933273, "score": 49, "vote": 0, "content": "<p>Yes, use <a href=\"http://docs.python.org/library/os.path.html#os.path.exists\" rel=\"noreferrer\"><code>os.path.exists()</code></a>.</p>\n", "abstract": "Yes, use os.path.exists()."}, {"id": 49493008, "score": 25, "vote": 0, "content": "<p>We can check with 2 built in functions </p>\n<pre><code class=\"python\">os.path.isdir(\"directory\")\n</code></pre>\n<p>It will give boolean true the specified directory is available. </p>\n<pre><code class=\"python\">os.path.exists(\"directoryorfile\")\n</code></pre>\n<p>It will give boolead true if specified directory or file is available. </p>\n<p>To check whether the path is directory; </p>\n<p><code>os.path.isdir(\"directorypath\")</code></p>\n<p>will give boolean true if the path is directory</p>\n", "abstract": "We can check with 2 built in functions  It will give boolean true the specified directory is available.  It will give boolead true if specified directory or file is available.  To check whether the path is directory;  os.path.isdir(\"directorypath\") will give boolean true if the path is directory"}, {"id": 8933306, "score": 18, "vote": 0, "content": "<p>Yes use <a href=\"http://docs.python.org/library/os.path.html#os.path.isdir\">os.path.isdir(path)</a></p>\n", "abstract": "Yes use os.path.isdir(path)"}, {"id": 65780783, "score": 16, "vote": 0, "content": "<p>The following code checks the referred directory in your code exists or not, if it doesn't exist in your workplace then, it creates one:</p>\n<pre><code class=\"python\">import os\n\nif not os.path.isdir(\"directory_name\"):\n    os.mkdir(\"directory_name\")\n</code></pre>\n", "abstract": "The following code checks the referred directory in your code exists or not, if it doesn't exist in your workplace then, it creates one:"}, {"id": 8933291, "score": 14, "vote": 0, "content": "<p>As in:</p>\n<pre><code class=\"python\">In [3]: os.path.exists('/d/temp')\nOut[3]: True\n</code></pre>\n<p>Probably toss in a <code>os.path.isdir(...)</code> to be sure.</p>\n", "abstract": "As in: Probably toss in a os.path.isdir(...) to be sure."}, {"id": 36418012, "score": 12, "vote": 0, "content": "<p>Just to provide the <code>os.stat</code> version (python 2):</p>\n<pre><code class=\"python\">import os, stat, errno\ndef CheckIsDir(directory):\n  try:\n    return stat.S_ISDIR(os.stat(directory).st_mode)\n  except OSError, e:\n    if e.errno == errno.ENOENT:\n      return False\n    raise\n</code></pre>\n", "abstract": "Just to provide the os.stat version (python 2):"}, {"id": 59907476, "score": 11, "vote": 0, "content": "<h3>You may also want to create the directory if it's not there.</h3>\n<p><a href=\"https://stackoverflow.com/questions/273192/how-can-i-safely-create-a-nested-directory/273227#273227\">Source</a>, if it's still there on SO.</p>\n<p>=====================================================================</p>\n<p>On Python \u2265 3.5, use <a href=\"https://docs.python.org/library/pathlib.html#pathlib.Path.mkdir\" rel=\"noreferrer\"><code>pathlib.Path.mkdir</code></a>:</p>\n<pre><code class=\"python\">from pathlib import Path\nPath(\"/my/directory\").mkdir(parents=True, exist_ok=True)\n</code></pre>\n<p>For older versions of Python, I see two answers with good qualities, each with a small flaw, so I will give my take on it:</p>\n<p>Try <a href=\"https://docs.python.org/library/os.path.html#os.path.exists\" rel=\"noreferrer\"><code>os.path.exists</code></a>, and consider <a href=\"https://docs.python.org/library/os.html#os.makedirs\" rel=\"noreferrer\"><code>os.makedirs</code></a> for the creation.</p>\n<pre><code class=\"python\">import os\nif not os.path.exists(directory):\n    os.makedirs(directory)\n</code></pre>\n<p>As noted in comments and elsewhere, there's a race condition \u2013 if the directory is created between the <code>os.path.exists</code> and the <code>os.makedirs</code> calls, the <code>os.makedirs</code> will fail with an <code>OSError</code>. Unfortunately, blanket-catching <code>OSError</code> and continuing is not foolproof, as it will ignore a failure to create the directory due to other factors, such as insufficient permissions, full disk, etc.</p>\n<p>One option would be to trap the <code>OSError</code> and examine the embedded error code (see <a href=\"https://stackoverflow.com/questions/273698/is-there-a-cross-platform-way-of-getting-information-from-pythons-oserror\">Is there a cross-platform way of getting information from Python\u2019s OSError</a>):</p>\n<pre><code class=\"python\">import os, errno\n\ntry:\n    os.makedirs(directory)\nexcept OSError as e:\n    if e.errno != errno.EEXIST:\n        raise\n</code></pre>\n<p>Alternatively, there could be a second <code>os.path.exists</code>, but suppose another created the directory after the first check, then removed it before the second one \u2013 we could still be fooled. </p>\n<p>Depending on the application, the danger of concurrent operations may be more or less than the danger posed by other factors such as file permissions. The developer would have to know more about the particular application being developed and its expected environment before choosing an implementation.</p>\n<p>Modern versions of Python improve this code quite a bit, both by exposing <a href=\"https://docs.python.org/3.3/library/exceptions.html?#FileExistsError\" rel=\"noreferrer\"><code>FileExistsError</code></a> (in 3.3+)...</p>\n<pre><code class=\"python\">try:\n    os.makedirs(\"path/to/directory\")\nexcept FileExistsError:\n    # directory already exists\n    pass\n</code></pre>\n<p>...and by allowing <a href=\"https://docs.python.org/3.2/library/os.html#os.makedirs\" rel=\"noreferrer\">a keyword argument to <code>os.makedirs</code> called <code>exist_ok</code></a> (in 3.2+).</p>\n<pre><code class=\"python\">os.makedirs(\"path/to/directory\", exist_ok=True)  # succeeds even if directory exists.\n</code></pre>\n", "abstract": "Source, if it's still there on SO. ===================================================================== On Python \u2265 3.5, use pathlib.Path.mkdir: For older versions of Python, I see two answers with good qualities, each with a small flaw, so I will give my take on it: Try os.path.exists, and consider os.makedirs for the creation. As noted in comments and elsewhere, there's a race condition \u2013 if the directory is created between the os.path.exists and the os.makedirs calls, the os.makedirs will fail with an OSError. Unfortunately, blanket-catching OSError and continuing is not foolproof, as it will ignore a failure to create the directory due to other factors, such as insufficient permissions, full disk, etc. One option would be to trap the OSError and examine the embedded error code (see Is there a cross-platform way of getting information from Python\u2019s OSError): Alternatively, there could be a second os.path.exists, but suppose another created the directory after the first check, then removed it before the second one \u2013 we could still be fooled.  Depending on the application, the danger of concurrent operations may be more or less than the danger posed by other factors such as file permissions. The developer would have to know more about the particular application being developed and its expected environment before choosing an implementation. Modern versions of Python improve this code quite a bit, both by exposing FileExistsError (in 3.3+)... ...and by allowing a keyword argument to os.makedirs called exist_ok (in 3.2+)."}, {"id": 16600118, "score": 9, "vote": 0, "content": "<p>os provides you with a lot of these capabilities:</p>\n<pre><code class=\"python\">import os\nos.path.isdir(dir_in) #True/False: check if this is a directory\nos.listdir(dir_in)    #gets you a list of all files and directories under dir_in\n</code></pre>\n<p>the listdir will throw an exception if the input path is invalid.</p>\n", "abstract": "os provides you with a lot of these capabilities: the listdir will throw an exception if the input path is invalid."}, {"id": 47245107, "score": 8, "vote": 0, "content": "<pre><code class=\"python\">#You can also check it get help for you\n\nif not os.path.isdir('mydir'):\n    print('new directry has been created')\n    os.system('mkdir mydir')\n</code></pre>\n", "abstract": ""}, {"id": 57278888, "score": 6, "vote": 0, "content": "<p>There is a convenient <a href=\"https://github.com/mikeorr/Unipath\" rel=\"noreferrer\"><code>Unipath</code></a> module. </p>\n<pre><code class=\"python\">&gt;&gt;&gt; from unipath import Path \n&gt;&gt;&gt;  \n&gt;&gt;&gt; Path('/var/log').exists()\nTrue\n&gt;&gt;&gt; Path('/var/log').isdir()\nTrue\n</code></pre>\n<p>Other related things you might need:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; Path('/var/log/system.log').parent\nPath('/var/log')\n&gt;&gt;&gt; Path('/var/log/system.log').ancestor(2)\nPath('/var')\n&gt;&gt;&gt; Path('/var/log/system.log').listdir()\n[Path('/var/foo'), Path('/var/bar')]\n&gt;&gt;&gt; (Path('/var/log') + '/system.log').isfile()\nTrue\n</code></pre>\n<p>You can install it using pip:</p>\n<pre><code class=\"python\">$ pip3 install unipath\n</code></pre>\n<p>It's similar to the built-in <code>pathlib</code>. The difference is that it treats every path as a string (<code>Path</code> is a subclass of the <code>str</code>), so if some function expects a string, you can easily pass it a <code>Path</code> object without a need to convert it to a string. </p>\n<p>For example, this works great with Django and <code>settings.py</code>:</p>\n<pre><code class=\"python\"># settings.py\nBASE_DIR = Path(__file__).ancestor(2)\nSTATIC_ROOT = BASE_DIR + '/tmp/static'\n</code></pre>\n", "abstract": "There is a convenient Unipath module.  Other related things you might need: You can install it using pip: It's similar to the built-in pathlib. The difference is that it treats every path as a string (Path is a subclass of the str), so if some function expects a string, you can easily pass it a Path object without a need to convert it to a string.  For example, this works great with Django and settings.py:"}, {"id": 61075459, "score": 4, "vote": 0, "content": "<p>Two things</p>\n<ol>\n<li>check if the directory exist?</li>\n<li>if not, create a directory (optional).</li>\n</ol>\n<pre><code class=\"python\">import os\ndirpath = \"&lt;dirpath&gt;\" # Replace the \"&lt;dirpath&gt;\" with actual directory path.\n\nif os.path.exists(dirpath):\n   print(\"Directory exist\")\nelse: #this is optional if you want to create a directory if doesn't exist.\n   os.mkdir(dirpath):\n   print(\"Directory created\")\n</code></pre>\n", "abstract": "Two things"}, {"id": 71806388, "score": 1, "vote": 0, "content": "<p>Step 1: Import the os.path module <br/>\nimport the os.path module before running the code.</p>\n<pre><code class=\"python\">import os.path\nfrom os import path\n</code></pre>\n<p>Step 2: Use path.exists() function <br/>\nThe path.exists() method is used to find whether a file exists.</p>\n<pre><code class=\"python\">path.exists(\"your_file.txt\")\n</code></pre>\n<p>Step 3: Use os.path.isfile() <br/>\nWe can use the isfile command to determine whether or not a given input is a file.</p>\n<pre><code class=\"python\">path.isfile('your_file.txt')\n</code></pre>\n<p>step 4: Use os.path.isdir() <br/>\nWe can use the os.path.dir() function to determine whether or not a given input is a directory.</p>\n<pre><code class=\"python\">path.isdir('myDirectory')\n</code></pre>\n<p>Here is the complete code</p>\n<pre><code class=\"python\">    import os.path\n    from os import path\n    \n    def main():\n    \n       print (\"File exists:\"+str(path.exists('your_file.txt')))\n       print (\"Directory exists:\" + str(path.exists('myDirectory')))\n       print(\"Item is a file: \" + str(path.isfile(\"your_file.txt\")))\n       print(\"Item is a directory: \" + str(path.isdir(\"myDirectory\")))\n    \n    if __name__== \"__main__\":\n       main()\n</code></pre>\n<p><strong>pathlibPath.exists() For Python 3.4</strong> <br/></p>\n<p>Pathlib Module is included in Python 3.4 and later versions to handle file system paths. Python checks if a folder exists using an object-oriented technique.</p>\n<pre><code class=\"python\">import pathlib\nfile = pathlib.Path(\"your_file.txt\")\nif file.exists ():\n    print (\"File exist\")\nelse:\n    print (\"File not exist\")\n</code></pre>\n<ul>\n<li>os.path.exists() \u2013 Returns True if path or directory does exists.</li>\n<li>os.path.isfile() \u2013 Returns True if path is File.</li>\n<li>os.path.isdir() \u2013 Returns True if path is Directory.</li>\n<li>pathlib.Path.exists() \u2013 Returns True if path or directory does exists. (In Python 3.4 and above versions)</li>\n</ul>\n", "abstract": "Step 1: Import the os.path module \nimport the os.path module before running the code. Step 2: Use path.exists() function \nThe path.exists() method is used to find whether a file exists. Step 3: Use os.path.isfile() \nWe can use the isfile command to determine whether or not a given input is a file. step 4: Use os.path.isdir() \nWe can use the os.path.dir() function to determine whether or not a given input is a directory. Here is the complete code pathlibPath.exists() For Python 3.4  Pathlib Module is included in Python 3.4 and later versions to handle file system paths. Python checks if a folder exists using an object-oriented technique."}]}, {"link": "https://stackoverflow.com/questions/9942594/unicodeencodeerror-ascii-codec-cant-encode-character-u-xa0-in-position-20", "question": {"id": "9942594", "title": "UnicodeEncodeError: &#39;ascii&#39; codec can&#39;t encode character u&#39;\\xa0&#39; in position 20: ordinal not in range(128)", "content": "<p>I'm having problems dealing with unicode characters from text fetched from different web pages (on different sites). I am using BeautifulSoup. </p>\n<p>The problem is that the error is not always reproducible; it sometimes works with some pages, and sometimes, it barfs by throwing a <code>UnicodeEncodeError</code>. I have tried just about everything I can think of, and yet I have not found anything that works consistently without throwing some kind of Unicode-related error.</p>\n<p>One of the sections of code that is causing problems is shown below:</p>\n<pre><code class=\"python\">agent_telno = agent.find('div', 'agent_contact_number')\nagent_telno = '' if agent_telno is None else agent_telno.contents[0]\np.agent_info = str(agent_contact + ' ' + agent_telno).strip()\n</code></pre>\n<p>Here is a stack trace produced on SOME strings when the snippet above is run:</p>\n<pre><code class=\"python\">Traceback (most recent call last):\n  File \"foobar.py\", line 792, in &lt;module&gt;\n    p.agent_info = str(agent_contact + ' ' + agent_telno).strip()\nUnicodeEncodeError: 'ascii' codec can't encode character u'\\xa0' in position 20: ordinal not in range(128)\n</code></pre>\n<p>I suspect that this is because some pages (or more specifically, pages from some of the sites) may be encoded, whilst others may be unencoded. All the sites are based in the UK and provide data meant for UK consumption - so there are no issues relating to internalization or dealing with text written in anything other than English.</p>\n<p>Does anyone have any ideas as to how to solve this so that I can CONSISTENTLY fix this problem?</p>\n", "abstract": "I'm having problems dealing with unicode characters from text fetched from different web pages (on different sites). I am using BeautifulSoup.  The problem is that the error is not always reproducible; it sometimes works with some pages, and sometimes, it barfs by throwing a UnicodeEncodeError. I have tried just about everything I can think of, and yet I have not found anything that works consistently without throwing some kind of Unicode-related error. One of the sections of code that is causing problems is shown below: Here is a stack trace produced on SOME strings when the snippet above is run: I suspect that this is because some pages (or more specifically, pages from some of the sites) may be encoded, whilst others may be unencoded. All the sites are based in the UK and provide data meant for UK consumption - so there are no issues relating to internalization or dealing with text written in anything other than English. Does anyone have any ideas as to how to solve this so that I can CONSISTENTLY fix this problem?"}, "answers": [{"id": 9942822, "score": 1492, "vote": 0, "content": "<p>Read the Python <a href=\"https://docs.python.org/2.7/howto/unicode.html\" rel=\"nofollow noreferrer\">Unicode HOWTO</a>. This error is the <a href=\"https://docs.python.org/2.7/howto/unicode.html#the-unicode-type\" rel=\"nofollow noreferrer\">very first example</a>.</p>\n<p>Do not use <code>str()</code> to convert from unicode to encoded text / bytes.</p>\n<p>Instead, use <a href=\"http://docs.python.org/library/stdtypes.html#str.encode\" rel=\"nofollow noreferrer\"><code>.encode()</code></a> to encode the string:</p>\n<pre><code class=\"python\">p.agent_info = u' '.join((agent_contact, agent_telno)).encode('utf-8').strip()\n</code></pre>\n<p>or work entirely in unicode.</p>\n", "abstract": "Read the Python Unicode HOWTO. This error is the very first example. Do not use str() to convert from unicode to encoded text / bytes. Instead, use .encode() to encode the string: or work entirely in unicode."}, {"id": 9942885, "score": 479, "vote": 0, "content": "<p>This is a classic python unicode pain point! Consider the following:</p>\n<pre><code class=\"python\">a = u'bats\\u00E0'\nprint a\n =&gt; bats\u00e0\n</code></pre>\n<p>All good so far, but if we call str(a), let's see what happens:</p>\n<pre><code class=\"python\">str(a)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nUnicodeEncodeError: 'ascii' codec can't encode character u'\\xe0' in position 4: ordinal not in range(128)\n</code></pre>\n<p>Oh dip, that's not gonna do anyone any good! To fix the error, encode the bytes explicitly with .encode and tell python what codec to use:</p>\n<pre><code class=\"python\">a.encode('utf-8')\n =&gt; 'bats\\xc3\\xa0'\nprint a.encode('utf-8')\n =&gt; bats\u00e0\n</code></pre>\n<p>Voil\\u00E0!</p>\n<p>The issue is that when you call str(), python uses the default character encoding to try and encode the bytes you gave it, which in your case are sometimes representations of unicode characters. To fix the problem, you have to tell python how to deal with the string you give it by using .encode('whatever_unicode'). Most of the time, you should be fine using utf-8.</p>\n<p>For an excellent exposition on this topic, see Ned Batchelder's PyCon talk here: <a href=\"http://nedbatchelder.com/text/unipain.html\">http://nedbatchelder.com/text/unipain.html</a></p>\n", "abstract": "This is a classic python unicode pain point! Consider the following: All good so far, but if we call str(a), let's see what happens: Oh dip, that's not gonna do anyone any good! To fix the error, encode the bytes explicitly with .encode and tell python what codec to use: Voil\\u00E0! The issue is that when you call str(), python uses the default character encoding to try and encode the bytes you gave it, which in your case are sometimes representations of unicode characters. To fix the problem, you have to tell python how to deal with the string you give it by using .encode('whatever_unicode'). Most of the time, you should be fine using utf-8. For an excellent exposition on this topic, see Ned Batchelder's PyCon talk here: http://nedbatchelder.com/text/unipain.html"}, {"id": 25402141, "score": 242, "vote": 0, "content": "<p>I found elegant work around for me to remove symbols and continue to keep string as string in follows:</p>\n<pre><code class=\"python\">yourstring = yourstring.encode('ascii', 'ignore').decode('ascii')\n</code></pre>\n<p>It's important to notice that using the ignore option is <strong>dangerous</strong> because it silently drops any unicode(and internationalization) support from the code that uses it, as seen here (convert unicode):</p>\n<pre><code class=\"python\">&gt;&gt;&gt; u'City: Malm\u00f6'.encode('ascii', 'ignore').decode('ascii')\n'City: Malm'\n</code></pre>\n", "abstract": "I found elegant work around for me to remove symbols and continue to keep string as string in follows: It's important to notice that using the ignore option is dangerous because it silently drops any unicode(and internationalization) support from the code that uses it, as seen here (convert unicode):"}, {"id": 39293287, "score": 185, "vote": 0, "content": "<p>well i tried everything but it did not help, after googling around i figured the following and it helped.\npython 2.7 is in use.</p>\n<pre><code class=\"python\"># encoding=utf8\nimport sys\nreload(sys)\nsys.setdefaultencoding('utf8')\n</code></pre>\n", "abstract": "well i tried everything but it did not help, after googling around i figured the following and it helped.\npython 2.7 is in use."}, {"id": 20334767, "score": 105, "vote": 0, "content": "<p>A subtle problem causing even print to fail is having your environment variables set wrong, eg. here LC_ALL set to \"C\".  In Debian they discourage setting it: <a href=\"https://wiki.debian.org/Locale\" rel=\"noreferrer\">Debian wiki on Locale</a></p>\n<pre><code class=\"python\">$ echo $LANG\nen_US.utf8\n$ echo $LC_ALL \nC\n$ python -c \"print (u'voil\\u00e0')\"\nTraceback (most recent call last):\n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\nUnicodeEncodeError: 'ascii' codec can't encode character u'\\xe0' in position 4: ordinal not in range(128)\n$ export LC_ALL='en_US.utf8'\n$ python -c \"print (u'voil\\u00e0')\"\nvoil\u00e0\n$ unset LC_ALL\n$ python -c \"print (u'voil\\u00e0')\"\nvoil\u00e0\n</code></pre>\n", "abstract": "A subtle problem causing even print to fail is having your environment variables set wrong, eg. here LC_ALL set to \"C\".  In Debian they discourage setting it: Debian wiki on Locale"}, {"id": 31987791, "score": 37, "vote": 0, "content": "<p>The problem is that you're trying to print a unicode character, but your terminal doesn't support it.</p>\n<p>You can try installing <code>language-pack-en</code> package to fix that:</p>\n<pre><code class=\"python\">sudo apt-get install language-pack-en\n</code></pre>\n<p>which provides English translation data updates for all supported packages (including Python). Install different language package if necessary (depending which characters you're trying to print).</p>\n<p>On some Linux distributions it's required in order to make sure that the default English locales are set-up properly (so unicode characters can be handled by shell/terminal). Sometimes it's easier to install it, than configuring it manually.</p>\n<p>Then when writing the code, make sure you use the right encoding in your code.</p>\n<p>For example:</p>\n<pre><code class=\"python\">open(foo, encoding='utf-8')\n</code></pre>\n<p>If you've still a problem, double check your system configuration, such as:</p>\n<ul>\n<li><p>Your locale file (<code>/etc/default/locale</code>), which should have e.g.</p>\n<pre><code class=\"python\">LANG=\"en_US.UTF-8\"\nLC_ALL=\"en_US.UTF-8\"\n</code></pre>\n<p>or:</p>\n<pre><code class=\"python\">LC_ALL=C.UTF-8\nLANG=C.UTF-8\n</code></pre></li>\n<li><p>Value of <code>LANG</code>/<a href=\"https://unix.stackexchange.com/a/3219/21471\"><code>LC_CTYPE</code></a> in shell.</p></li>\n<li><p>Check which locale your shell supports by:</p>\n<pre><code class=\"python\">locale -a | grep \"UTF-8\"\n</code></pre></li>\n</ul>\n<hr/>\n<p>Demonstrating the problem and solution in fresh VM.</p>\n<ol>\n<li><p>Initialize and provision the VM (e.g. using <a href=\"https://www.vagrantup.com/\" rel=\"noreferrer\"><code>vagrant</code></a>):</p>\n<pre><code class=\"python\">vagrant init ubuntu/trusty64; vagrant up; vagrant ssh\n</code></pre>\n<p><sup>See: <a href=\"https://atlas.hashicorp.com/ubuntu\" rel=\"noreferrer\">available Ubuntu boxes</a>.</sup>.</p></li>\n<li><p>Printing unicode characters (such as trade mark sign like <code>\u2122</code>): </p>\n<pre><code class=\"python\">$ python -c 'print(u\"\\u2122\");'\nTraceback (most recent call last):\n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\nUnicodeEncodeError: 'ascii' codec can't encode character u'\\u2122' in position 0: ordinal not in range(128)\n</code></pre></li>\n<li><p>Now installing <code>language-pack-en</code>:</p>\n<pre><code class=\"python\">$ sudo apt-get -y install language-pack-en\nThe following extra packages will be installed:\n  language-pack-en-base\nGenerating locales...\n  en_GB.UTF-8... /usr/sbin/locale-gen: done\nGeneration complete.\n</code></pre></li>\n<li><p>Now problem should be solved:</p>\n<pre><code class=\"python\">$ python -c 'print(u\"\\u2122\");'\n\u2122\n</code></pre></li>\n<li><p>Otherwise, try the following command:</p>\n<pre><code class=\"python\">$ LC_ALL=C.UTF-8 python -c 'print(u\"\\u2122\");'\n\u2122\n</code></pre></li>\n</ol>\n", "abstract": "The problem is that you're trying to print a unicode character, but your terminal doesn't support it. You can try installing language-pack-en package to fix that: which provides English translation data updates for all supported packages (including Python). Install different language package if necessary (depending which characters you're trying to print). On some Linux distributions it's required in order to make sure that the default English locales are set-up properly (so unicode characters can be handled by shell/terminal). Sometimes it's easier to install it, than configuring it manually. Then when writing the code, make sure you use the right encoding in your code. For example: If you've still a problem, double check your system configuration, such as: Your locale file (/etc/default/locale), which should have e.g. or: Value of LANG/LC_CTYPE in shell. Check which locale your shell supports by: Demonstrating the problem and solution in fresh VM. Initialize and provision the VM (e.g. using vagrant): See: available Ubuntu boxes.. Printing unicode characters (such as trade mark sign like \u2122):  Now installing language-pack-en: Now problem should be solved: Otherwise, try the following command:"}, {"id": 54448940, "score": 32, "vote": 0, "content": "<p>In shell:</p>\n<ol>\n<li><p>Find supported UTF-8 locale by the following command:</p>\n<pre><code class=\"python\">locale -a | grep \"UTF-8\"\n</code></pre></li>\n<li><p>Export it, before running the script, e.g.:</p>\n<pre><code class=\"python\">export LC_ALL=$(locale -a | grep UTF-8)\n</code></pre>\n<p>or manually like:</p>\n<pre><code class=\"python\">export LC_ALL=C.UTF-8\n</code></pre></li>\n<li><p>Test it by printing special character, e.g. <code>\u2122</code>:</p>\n<pre><code class=\"python\">python -c 'print(u\"\\u2122\");'\n</code></pre></li>\n</ol>\n<p>Above tested in Ubuntu.</p>\n", "abstract": "In shell: Find supported UTF-8 locale by the following command: Export it, before running the script, e.g.: or manually like: Test it by printing special character, e.g. \u2122: Above tested in Ubuntu."}, {"id": 19727991, "score": 29, "vote": 0, "content": "<p>I've actually found that in most of my cases, just stripping out those characters is much simpler:</p>\n<pre><code class=\"python\">s = mystring.decode('ascii', 'ignore')\n</code></pre>\n", "abstract": "I've actually found that in most of my cases, just stripping out those characters is much simpler:"}, {"id": 28152554, "score": 29, "vote": 0, "content": "<p>For me, what worked was:</p>\n<pre><code class=\"python\">BeautifulSoup(html_text,from_encoding=\"utf-8\")\n</code></pre>\n<p>Hope this helps someone.</p>\n", "abstract": "For me, what worked was: Hope this helps someone."}, {"id": 46434294, "score": 22, "vote": 0, "content": "<p>Here's a rehashing of some other so-called \"cop out\" answers.  There are situations in which simply throwing away the troublesome characters/strings is a good solution, despite the protests voiced here.</p>\n<pre><code class=\"python\">def safeStr(obj):\n    try: return str(obj)\n    except UnicodeEncodeError:\n        return obj.encode('ascii', 'ignore').decode('ascii')\n    except: return \"\"\n</code></pre>\n<p>Testing it:</p>\n<pre><code class=\"python\">if __name__ == '__main__': \n    print safeStr( 1 ) \n    print safeStr( \"test\" ) \n    print u'98\\xb0'\n    print safeStr( u'98\\xb0' )\n</code></pre>\n<p>Results:</p>\n<pre><code class=\"python\">1\ntest\n98\u00b0\n98\n</code></pre>\n<p><strong>UPDATE:</strong> My original answer was written for Python 2. For <strong>Python 3</strong>:</p>\n<pre><code class=\"python\">def safeStr(obj):\n    try: return str(obj).encode('ascii', 'ignore').decode('ascii')\n    except: return \"\"\n</code></pre>\n<p>Note: if you'd prefer to leave a <code>?</code> indicator where the \"unsafe\" unicode characters are, specify <code>replace</code> instead of <code>ignore</code> in the call to encode for the error handler.</p>\n<p>Suggestion: you might want to name this function <code>toAscii</code> instead?  That's a matter of preference...</p>\n<p>Finally, here's a more robust PY2/3 version using <code>six</code>, where I opted to use <code>replace</code>, and peppered in some character swaps to replace fancy unicode quotes and apostrophes which curl left or right with the simple vertical ones that are part of the ascii set.  You might expand on such swaps yourself:</p>\n<pre><code class=\"python\">from six import PY2, iteritems \n\nCHAR_SWAP = { u'\\u201c': u'\"'\n            , u'\\u201D': u'\"' \n            , u'\\u2018': u\"'\" \n            , u'\\u2019': u\"'\" \n}\n\ndef toAscii( text ) :    \n    try:\n        for k,v in iteritems( CHAR_SWAP ): \n            text = text.replace(k,v)\n    except: pass     \n    try: return str( text ) if PY2 else bytes( text, 'replace' ).decode('ascii')\n    except UnicodeEncodeError:\n        return text.encode('ascii', 'replace').decode('ascii')\n    except: return \"\"\n\nif __name__ == '__main__':     \n    print( toAscii( u'testin\\u2019' ) )\n</code></pre>\n", "abstract": "Here's a rehashing of some other so-called \"cop out\" answers.  There are situations in which simply throwing away the troublesome characters/strings is a good solution, despite the protests voiced here. Testing it: Results: UPDATE: My original answer was written for Python 2. For Python 3: Note: if you'd prefer to leave a ? indicator where the \"unsafe\" unicode characters are, specify replace instead of ignore in the call to encode for the error handler. Suggestion: you might want to name this function toAscii instead?  That's a matter of preference... Finally, here's a more robust PY2/3 version using six, where I opted to use replace, and peppered in some character swaps to replace fancy unicode quotes and apostrophes which curl left or right with the simple vertical ones that are part of the ascii set.  You might expand on such swaps yourself:"}, {"id": 38826645, "score": 17, "vote": 0, "content": "<p>Add line below at the beginning of your script ( or as second line):</p>\n<pre><code class=\"python\"># -*- coding: utf-8 -*-\n</code></pre>\n<p>That's definition of python source code encoding. More info in <a href=\"https://www.python.org/dev/peps/pep-0263/\" rel=\"noreferrer\">PEP 263</a>.</p>\n", "abstract": "Add line below at the beginning of your script ( or as second line): That's definition of python source code encoding. More info in PEP 263."}, {"id": 49011273, "score": 12, "vote": 0, "content": "<p>I always put the code below in the first two lines of the python files:</p>\n<pre><code class=\"python\"># -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n</code></pre>\n", "abstract": "I always put the code below in the first two lines of the python files:"}, {"id": 55697697, "score": 10, "vote": 0, "content": "<p><em>Alas this works in Python 3 at least...</em></p>\n<p><strong>Python 3</strong></p>\n<p>Sometimes the error is in the enviroment variables and enconding so</p>\n<pre><code class=\"python\">import os\nimport locale\nos.environ[\"PYTHONIOENCODING\"] = \"utf-8\"\nmyLocale=locale.setlocale(category=locale.LC_ALL, locale=\"en_GB.UTF-8\")\n... \nprint(myText.encode('utf-8', errors='ignore'))\n</code></pre>\n<p>where errors are ignored in encoding.</p>\n", "abstract": "Alas this works in Python 3 at least... Python 3 Sometimes the error is in the enviroment variables and enconding so where errors are ignored in encoding."}, {"id": 68284037, "score": 10, "vote": 0, "content": "<p>It works for me:</p>\n<pre><code class=\"python\">export LC_CTYPE=\"en_US.UTF-8\"\n</code></pre>\n", "abstract": "It works for me:"}, {"id": 34543139, "score": 8, "vote": 0, "content": "<p>Simple helper functions found <a href=\"http://code.activestate.com/recipes/466341-guaranteed-conversion-to-unicode-or-byte-string/\" rel=\"noreferrer\">here</a>.</p>\n<pre><code class=\"python\">def safe_unicode(obj, *args):\n    \"\"\" return the unicode representation of obj \"\"\"\n    try:\n        return unicode(obj, *args)\n    except UnicodeDecodeError:\n        # obj is byte string\n        ascii_text = str(obj).encode('string_escape')\n        return unicode(ascii_text)\n\ndef safe_str(obj):\n    \"\"\" return the byte string representation of obj \"\"\"\n    try:\n        return str(obj)\n    except UnicodeEncodeError:\n        # obj is unicode\n        return unicode(obj).encode('unicode_escape')\n</code></pre>\n", "abstract": "Simple helper functions found here."}, {"id": 48535304, "score": 8, "vote": 0, "content": "<p>Just add to a variable encode('utf-8')</p>\n<pre><code class=\"python\">agent_contact.encode('utf-8')\n</code></pre>\n", "abstract": "Just add to a variable encode('utf-8')"}, {"id": 53918764, "score": 7, "vote": 0, "content": "<p>Please open terminal and fire the below command:</p>\n<pre><code class=\"python\">export LC_ALL=\"en_US.UTF-8\"\n</code></pre>\n", "abstract": "Please open terminal and fire the below command:"}, {"id": 68888460, "score": 7, "vote": 0, "content": "<p>In case its an issue with a print statement, a lot fo times its just an issue with the terminal printing. This helped me :\n<code>export PYTHONIOENCODING=UTF-8</code></p>\n", "abstract": "In case its an issue with a print statement, a lot fo times its just an issue with the terminal printing. This helped me :\nexport PYTHONIOENCODING=UTF-8"}, {"id": 40834411, "score": 6, "vote": 0, "content": "<p>I just used the following:</p>\n<pre><code class=\"python\">import unicodedata\nmessage = unicodedata.normalize(\"NFKD\", message)\n</code></pre>\n<p>Check what documentation says about it:</p>\n<blockquote>\n<p>unicodedata.normalize(form, unistr) Return the normal form form for\n  the Unicode string unistr. Valid values for form are \u2018NFC\u2019, \u2018NFKC\u2019,\n  \u2018NFD\u2019, and \u2018NFKD\u2019.</p>\n<p>The Unicode standard defines various normalization forms of a Unicode\n  string, based on the definition of canonical equivalence and\n  compatibility equivalence. In Unicode, several characters can be\n  expressed in various way. For example, the character U+00C7 (LATIN\n  CAPITAL LETTER C WITH CEDILLA) can also be expressed as the sequence\n  U+0043 (LATIN CAPITAL LETTER C) U+0327 (COMBINING CEDILLA).</p>\n<p>For each character, there are two normal forms: normal form C and\n  normal form D. Normal form D (NFD) is also known as canonical\n  decomposition, and translates each character into its decomposed form.\n  Normal form C (NFC) first applies a canonical decomposition, then\n  composes pre-combined characters again.</p>\n<p>In addition to these two forms, there are two additional normal forms\n  based on compatibility equivalence. In Unicode, certain characters are\n  supported which normally would be unified with other characters. For\n  example, U+2160 (ROMAN NUMERAL ONE) is really the same thing as U+0049\n  (LATIN CAPITAL LETTER I). However, it is supported in Unicode for\n  compatibility with existing character sets (e.g. gb2312).</p>\n<p>The normal form KD (NFKD) will apply the compatibility decomposition,\n  i.e. replace all compatibility characters with their equivalents. The\n  normal form KC (NFKC) first applies the compatibility decomposition,\n  followed by the canonical composition.</p>\n<p>Even if two unicode strings are normalized and look the same to a\n  human reader, if one has combining characters and the other doesn\u2019t,\n  they may not compare equal.</p>\n</blockquote>\n<p>Solves it for me. Simple and easy.</p>\n", "abstract": "I just used the following: Check what documentation says about it: unicodedata.normalize(form, unistr) Return the normal form form for\n  the Unicode string unistr. Valid values for form are \u2018NFC\u2019, \u2018NFKC\u2019,\n  \u2018NFD\u2019, and \u2018NFKD\u2019. The Unicode standard defines various normalization forms of a Unicode\n  string, based on the definition of canonical equivalence and\n  compatibility equivalence. In Unicode, several characters can be\n  expressed in various way. For example, the character U+00C7 (LATIN\n  CAPITAL LETTER C WITH CEDILLA) can also be expressed as the sequence\n  U+0043 (LATIN CAPITAL LETTER C) U+0327 (COMBINING CEDILLA). For each character, there are two normal forms: normal form C and\n  normal form D. Normal form D (NFD) is also known as canonical\n  decomposition, and translates each character into its decomposed form.\n  Normal form C (NFC) first applies a canonical decomposition, then\n  composes pre-combined characters again. In addition to these two forms, there are two additional normal forms\n  based on compatibility equivalence. In Unicode, certain characters are\n  supported which normally would be unified with other characters. For\n  example, U+2160 (ROMAN NUMERAL ONE) is really the same thing as U+0049\n  (LATIN CAPITAL LETTER I). However, it is supported in Unicode for\n  compatibility with existing character sets (e.g. gb2312). The normal form KD (NFKD) will apply the compatibility decomposition,\n  i.e. replace all compatibility characters with their equivalents. The\n  normal form KC (NFKC) first applies the compatibility decomposition,\n  followed by the canonical composition. Even if two unicode strings are normalized and look the same to a\n  human reader, if one has combining characters and the other doesn\u2019t,\n  they may not compare equal. Solves it for me. Simple and easy."}, {"id": 66550715, "score": 6, "vote": 0, "content": "<p>Late answer, but this error is related to your terminal's encoding not supporting certain characters.<br/>\nI fixed it on <code>python3</code> using:</p>\n<pre><code class=\"python\">import sys\nimport io\n\nsys.stdout = io.open(sys.stdout.fileno(), 'w', encoding='utf8')\nprint(\"\u00e9, \u00e0, ...\")\n</code></pre>\n", "abstract": "Late answer, but this error is related to your terminal's encoding not supporting certain characters.\nI fixed it on python3 using:"}, {"id": 47064361, "score": 5, "vote": 0, "content": "<p>Below solution worked for me, Just added </p>\n<blockquote>\n<p>u \"String\"</p>\n</blockquote>\n<p>(representing the string as unicode) before my string.</p>\n<pre><code class=\"python\">result_html = result.to_html(col_space=1, index=False, justify={'right'})\n\ntext = u\"\"\"\n&lt;html&gt;\n&lt;body&gt;\n&lt;p&gt;\nHello all, &lt;br&gt;\n&lt;br&gt;\nHere's weekly summary report.  Let me know if you have any questions. &lt;br&gt;\n&lt;br&gt;\nData Summary &lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n{0}\n&lt;/p&gt;\n&lt;p&gt;Thanks,&lt;/p&gt;\n&lt;p&gt;Data Team&lt;/p&gt;\n&lt;/body&gt;&lt;/html&gt;\n\"\"\".format(result_html)\n</code></pre>\n", "abstract": "Below solution worked for me, Just added  u \"String\" (representing the string as unicode) before my string."}, {"id": 62244789, "score": 5, "vote": 0, "content": "<p>In general case of writing this <em>unsupported encoding</em> <strong>string</strong> (let's say <code>data_that_causes_this_error</code>) to some file (for e.g. <code>results.txt</code>), this works </p>\n<pre><code class=\"python\">f = open(\"results.txt\", \"w\")\n  f.write(data_that_causes_this_error.encode('utf-8'))\n  f.close()\n</code></pre>\n", "abstract": "In general case of writing this unsupported encoding string (let's say data_that_causes_this_error) to some file (for e.g. results.txt), this works "}, {"id": 35953321, "score": 4, "vote": 0, "content": "<p>I just had this problem, and Google led me here, so just to add to the general solutions here, this is what worked for me:</p>\n<pre><code class=\"python\"># 'value' contains the problematic data\nunic = u''\nunic += value\nvalue = unic\n</code></pre>\n<p>I had this idea after reading <a href=\"http://nedbatchelder.com/text/unipain.html\" rel=\"nofollow\">Ned's presentation</a>.</p>\n<p>I don't claim to fully understand why this works, though. So if anyone can edit this answer or put in a comment to explain, I'll appreciate it.</p>\n", "abstract": "I just had this problem, and Google led me here, so just to add to the general solutions here, this is what worked for me: I had this idea after reading Ned's presentation. I don't claim to fully understand why this works, though. So if anyone can edit this answer or put in a comment to explain, I'll appreciate it."}, {"id": 49768957, "score": 4, "vote": 0, "content": "<p>We struck this error when running <code>manage.py migrate</code> in Django with localized fixtures.</p>\n<p>Our source contained the <code># -*- coding: utf-8 -*-</code> declaration, MySQL was correctly configured for utf8 and Ubuntu had the appropriate language pack and values in <code>/etc/default/locale</code>.</p>\n<p>The issue was simply that the Django container (we use docker) was missing the <code>LANG</code> env var.</p>\n<p>Setting <code>LANG</code> to <code>en_US.UTF-8</code> and restarting the container before re-running migrations fixed the problem.</p>\n", "abstract": "We struck this error when running manage.py migrate in Django with localized fixtures. Our source contained the # -*- coding: utf-8 -*- declaration, MySQL was correctly configured for utf8 and Ubuntu had the appropriate language pack and values in /etc/default/locale. The issue was simply that the Django container (we use docker) was missing the LANG env var. Setting LANG to en_US.UTF-8 and restarting the container before re-running migrations fixed the problem."}, {"id": 53922454, "score": 4, "vote": 0, "content": "<p>Update for python 3.0 and later. Try the following in the python editor:</p>\n<pre><code class=\"python\">locale-gen en_US.UTF-8\nexport LANG=en_US.UTF-8 LANGUAGE=en_US.en\nLC_ALL=en_US.UTF-8\n</code></pre>\n<p>This sets the system`s default locale encoding to the UTF-8 format.</p>\n<p>More can be read <a href=\"https://www.python.org/dev/peps/pep-0538/\" rel=\"nofollow noreferrer\">here at PEP 538 -- Coercing the legacy C locale to a UTF-8 based locale</a>.</p>\n", "abstract": "Update for python 3.0 and later. Try the following in the python editor: This sets the system`s default locale encoding to the UTF-8 format. More can be read here at PEP 538 -- Coercing the legacy C locale to a UTF-8 based locale."}, {"id": 60874849, "score": 4, "vote": 0, "content": "<p>The recommended solution did not work for me, and I could live with dumping all non ascii characters, so </p>\n<pre><code class=\"python\">s = s.encode('ascii',errors='ignore')\n</code></pre>\n<p>which left me with something stripped that doesn't throw errors.</p>\n", "abstract": "The recommended solution did not work for me, and I could live with dumping all non ascii characters, so  which left me with something stripped that doesn't throw errors."}, {"id": 54019119, "score": 3, "vote": 0, "content": "<p>Many answers here (@agf and @Andbdrew for example) have already addressed the most immediate aspects of the OP question.</p>\n<p>However, I think there is one subtle but important aspect that has been largely ignored and that matters dearly for everyone who like me ended up here while trying to make sense of encodings in Python: <strong>Python 2 vs Python 3 management of character representation  is wildly different</strong>. I feel like a big chunk of confusion out there has to do with people reading about encodings in Python without being version aware. </p>\n<p>I suggest anyone interested in understanding the root cause of OP problem to begin by reading <a href=\"https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/\" rel=\"nofollow noreferrer\">Spolsky's</a> introduction to character representations and Unicode and then move to <a href=\"https://pyvideo.org/pycon-us-2012/pragmatic-unicode-or-how-do-i-stop-the-pain.html\" rel=\"nofollow noreferrer\">Batchelder</a> on Unicode in Python 2 and Python 3.</p>\n", "abstract": "Many answers here (@agf and @Andbdrew for example) have already addressed the most immediate aspects of the OP question. However, I think there is one subtle but important aspect that has been largely ignored and that matters dearly for everyone who like me ended up here while trying to make sense of encodings in Python: Python 2 vs Python 3 management of character representation  is wildly different. I feel like a big chunk of confusion out there has to do with people reading about encodings in Python without being version aware.  I suggest anyone interested in understanding the root cause of OP problem to begin by reading Spolsky's introduction to character representations and Unicode and then move to Batchelder on Unicode in Python 2 and Python 3."}, {"id": 56897401, "score": 3, "vote": 0, "content": "<p>Try to avoid conversion of variable to str(variable). Sometimes, It may cause the issue.</p>\n<p>Simple tip to avoid :</p>\n<pre><code class=\"python\">try: \n    data=str(data)\nexcept:\n    data = data #Don't convert to String\n</code></pre>\n<p>The above example will solve Encode error also.</p>\n", "abstract": "Try to avoid conversion of variable to str(variable). Sometimes, It may cause the issue. Simple tip to avoid : The above example will solve Encode error also."}, {"id": 49305999, "score": 1, "vote": 0, "content": "<p>If you have something like <code>packet_data = \"This is data\"</code> then do this on the next line, right after initializing <code>packet_data</code>:</p>\n<pre><code class=\"python\">unic = u''\npacket_data = unic\n</code></pre>\n", "abstract": "If you have something like packet_data = \"This is data\" then do this on the next line, right after initializing packet_data:"}, {"id": 67436803, "score": 1, "vote": 0, "content": "<p>You can set the character encoding to <code>UTF-8</code> before running your script:</p>\n<pre><code class=\"python\">export LC_CTYPE=\"en_US.UTF-8\"\n</code></pre>\n<p>This should generally resolve the issue.</p>\n", "abstract": "You can set the character encoding to UTF-8 before running your script: This should generally resolve the issue."}, {"id": 54384336, "score": 0, "vote": 0, "content": "<p>I had this issue trying to output Unicode characters to <code>stdout</code>, but with <code>sys.stdout.write</code>, rather than print (so that I could support output to a different file as well).</p>\n<p><a href=\"https://www.crummy.com/software/BeautifulSoup/bs3/documentation.html#Why%20can't%20Beautiful%20Soup%20print%20out%20the%20non-ASCII%20characters%20I%20gave%20it?\" rel=\"nofollow noreferrer\">From BeautifulSoup's own documentation</a>, I solved this with the codecs library:</p>\n<pre><code class=\"python\">import sys\nimport codecs\n\ndef main(fIn, fOut):\n    soup = BeautifulSoup(fIn)\n    # Do processing, with data including non-ASCII characters\n    fOut.write(unicode(soup))\n\nif __name__ == '__main__':\n    with (sys.stdin) as fIn: # Don't think we need codecs.getreader here\n        with codecs.getwriter('utf-8')(sys.stdout) as fOut:\n            main(fIn, fOut)\n</code></pre>\n", "abstract": "I had this issue trying to output Unicode characters to stdout, but with sys.stdout.write, rather than print (so that I could support output to a different file as well). From BeautifulSoup's own documentation, I solved this with the codecs library:"}, {"id": 58372537, "score": 0, "vote": 0, "content": "<p>This problem often happens  when a django project deploys using Apache. Because Apache sets environment variable LANG=C in /etc/sysconfig/httpd. Just open the file and comment (or change to your flavior) this setting. Or use the lang option of the WSGIDaemonProcess command, in this case you will be able to set different LANG environment variable  to different virtualhosts.</p>\n", "abstract": "This problem often happens  when a django project deploys using Apache. Because Apache sets environment variable LANG=C in /etc/sysconfig/httpd. Just open the file and comment (or change to your flavior) this setting. Or use the lang option of the WSGIDaemonProcess command, in this case you will be able to set different LANG environment variable  to different virtualhosts."}, {"id": 61792839, "score": 0, "vote": 0, "content": "<p><strong>This will work:</strong></p>\n<pre><code class=\"python\"> &gt;&gt;&gt;print(unicodedata.normalize('NFD', re.sub(\"[\\(\\[].*?[\\)\\]]\", \"\", \"bats\\xc3\\xa0\")).encode('ascii', 'ignore'))\n</code></pre>\n<p><strong>Output:</strong></p>\n<pre><code class=\"python\">&gt;&gt;&gt;bats\n</code></pre>\n", "abstract": "This will work: Output:"}, {"id": 70623463, "score": -1, "vote": 0, "content": "<p>You can you use unicodedata for avoid UnicodeEncodeError. here is an example:</p>\n<pre><code class=\"python\">import unicodedata\n\nagent_telno = agent.find('div', 'agent_contact_number')\nagent_telno = unicodedata.normalize(\"NFKD\", agent_telno) #it will remove all unwanted character like '\\xa0'\nagent_telno = '' if agent_telno is None else agent_telno.contents[0]\np.agent_info = str(agent_contact + ' ' + agent_telno).strip()\n</code></pre>\n", "abstract": "You can you use unicodedata for avoid UnicodeEncodeError. here is an example:"}]}, {"link": "https://stackoverflow.com/questions/14132789/relative-imports-for-the-billionth-time", "question": {"id": "14132789", "title": "Relative imports for the billionth time", "content": "<p>I've been here:</p>\n<ul>\n<li><a href=\"http://www.python.org/dev/peps/pep-0328/\" rel=\"noreferrer\">http://www.python.org/dev/peps/pep-0328/</a></li>\n<li><a href=\"http://docs.python.org/2/tutorial/modules.html#packages\" rel=\"noreferrer\">http://docs.python.org/2/tutorial/modules.html#packages</a></li>\n<li><a href=\"https://stackoverflow.com/questions/10059002/python-packages-relative-imports\">Python packages: relative imports</a></li>\n<li><a href=\"https://stackoverflow.com/questions/9123062/python-relative-import-example-code-does-not-work\">python relative import example code does not work</a></li>\n<li><a href=\"https://stackoverflow.com/questions/8299270/ultimate-answer-to-relative-python-imports\">Relative imports in python 2.5</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4175534/relative-imports-in-python\">Relative imports in Python</a></li>\n<li><a href=\"https://stackoverflow.com/questions/13233931/python-disabling-relative-import?rq=1\">Python: Disabling relative import</a></li>\n</ul>\n<p>and plenty of URLs that I did not copy, some on SO, some on other sites, back when I thought I'd have the solution quickly.</p>\n<p>The forever-recurring question is this: how do I solve this \"Attempted relative import in non-package\" message?</p>\n<pre><code class=\"python\">ImportError: attempted relative import with no known parent package\n</code></pre>\n<p>I built an exact replica of the package on pep-0328:</p>\n<pre><code class=\"python\">package/\n    __init__.py\n    subpackage1/\n        __init__.py\n        moduleX.py\n        moduleY.py\n    subpackage2/\n        __init__.py\n        moduleZ.py\n    moduleA.py\n</code></pre>\n<p>The imports were done from the console.</p>\n<p>I did make functions named spam and eggs in their appropriate modules.  Naturally, it didn't work.  The answer is apparently in the 4th URL I listed, but it's all alumni to me. There was this response on one of the URLs I visited:</p>\n<blockquote>\n<p>Relative imports use a module's name attribute to determine that module's position in the package hierarchy. If the module's name does not contain any package information (e.g. it is set to 'main') then relative imports are resolved as if the module were a top level module, regardless of where the module is actually located on the file system.</p>\n</blockquote>\n<p>The above response looks promising, but it's all hieroglyphs to me.  So my question, how do I make Python not return to me \"Attempted relative import in non-package\"? has an answer that involves -m, supposedly.</p>\n<p>Can somebody please tell me why Python gives that error message, what it means by \"non-package\", why and how do you define a 'package', and <em>the precise answer put in terms easy enough for a kindergartener to understand</em>.</p>\n", "abstract": "I've been here: and plenty of URLs that I did not copy, some on SO, some on other sites, back when I thought I'd have the solution quickly. The forever-recurring question is this: how do I solve this \"Attempted relative import in non-package\" message? I built an exact replica of the package on pep-0328: The imports were done from the console. I did make functions named spam and eggs in their appropriate modules.  Naturally, it didn't work.  The answer is apparently in the 4th URL I listed, but it's all alumni to me. There was this response on one of the URLs I visited: Relative imports use a module's name attribute to determine that module's position in the package hierarchy. If the module's name does not contain any package information (e.g. it is set to 'main') then relative imports are resolved as if the module were a top level module, regardless of where the module is actually located on the file system. The above response looks promising, but it's all hieroglyphs to me.  So my question, how do I make Python not return to me \"Attempted relative import in non-package\"? has an answer that involves -m, supposedly. Can somebody please tell me why Python gives that error message, what it means by \"non-package\", why and how do you define a 'package', and the precise answer put in terms easy enough for a kindergartener to understand."}, "answers": [{"id": 14132912, "score": 1890, "vote": 0, "content": "<p><strong>Script vs. Module</strong></p>\n<p>Here's an explanation.  The short version is that there is a big difference between directly running a Python file, and importing that file from somewhere else.  <strong>Just knowing what directory a file is in does not determine what package Python thinks it is in.</strong>  That depends, additionally, on how you load the file into Python (by running or by importing).</p>\n<p>There are two ways to load a Python file: as the top-level script, or as a\nmodule.  A file is loaded as the top-level script if you execute it directly, for instance by typing <code>python myfile.py</code> on the command line.  It is loaded as a module when an <code>import</code> statement is encountered inside some other file.  There can only be one top-level script at a time; the top-level script is the Python file you ran to start things off.</p>\n<p><strong>Naming</strong></p>\n<p>When a file is loaded, it is given a name (which is stored in its <code>__name__</code> attribute).</p>\n<ul>\n<li>If it was loaded as the top-level script, its name is <code>__main__</code>.</li>\n<li>If it was loaded as a module, its name is [ the filename, preceded by the names of any packages/subpackages of which it is a part, separated by dots ], for example, <code>package.subpackage1.moduleX</code>.</li>\n</ul>\n<p>But be aware, if you load <code>moduleX</code> as a module from shell command line using something like <code>python -m package.subpackage1.moduleX</code>, the <code>__name__</code> will still be <code>__main__</code>.</p>\n<p>So for instance in your example:</p>\n<pre><code class=\"python\">package/\n    __init__.py\n    subpackage1/\n        __init__.py\n        moduleX.py\n    moduleA.py\n</code></pre>\n<p>if you imported <code>moduleX</code> (note: <em>imported</em>, not directly executed), its name would be <code>package.subpackage1.moduleX</code>.  If you imported <code>moduleA</code>, its name would be <code>package.moduleA</code>.  However, if you <em>directly run</em> <code>moduleX</code> from the command line, its name will instead be <code>__main__</code>, and if you directly run <code>moduleA</code> from the command line, its name will be <code>__main__</code>.  When a module is run as the top-level script, it loses its normal name and its name is instead <code>__main__</code>.</p>\n<p><strong>Accessing a module NOT through its containing package</strong></p>\n<p>There is an additional wrinkle: the module's name depends on whether it was imported \"directly\" from the directory it is in or imported via a package.  This only makes a difference if you run Python in a directory, and try to import a file in that same directory (or a subdirectory of it).  For instance, if you start the Python interpreter in the directory <code>package/subpackage1</code> and then do <code>import moduleX</code>, the name of <code>moduleX</code> will just be <code>moduleX</code>, and not <code>package.subpackage1.moduleX</code>.  This is because Python adds the current directory to its search path when the interpreter is entered interactively; if it finds the to-be-imported module in the current directory, it will not know that that directory is part of a package, and the package information will not become part of the module's name.</p>\n<p>A special case is if you run the interpreter interactively (e.g., just type <code>python</code> and start entering Python code on the fly).  In this case, the name of that interactive session is <code>__main__</code>.</p>\n<p>Now here is the crucial thing for your error message: <strong>if a module's name has no dots, it is not considered to be part of a package</strong>.  It doesn't matter where the file actually is on disk.  All that matters is what its name is, and its name depends on how you loaded it.</p>\n<p>Now look at the quote you included in your question:</p>\n<blockquote>\n<p>Relative imports use a module's name attribute to determine that module's position in the package hierarchy. If the module's name does not contain any package information (e.g. it is set to 'main') then relative imports are resolved as if the module were a top-level module, regardless of where the module is actually located on the file system.</p>\n</blockquote>\n<p><strong>Relative imports...</strong></p>\n<p>Relative imports use the module's <em>name</em> to determine where it is in a package.  When you use a relative import like <code>from .. import foo</code>, the dots indicate to step up some number of levels in the package hierarchy.  For instance, if your current module's name is <code>package.subpackage1.moduleX</code>, then <code>..moduleA</code> would mean <code>package.moduleA</code>.  For a <code>from .. import</code> to work, the module's name must have at least as many dots as there are in the <code>import</code> statement.</p>\n<p><strong>... are only relative in a package</strong></p>\n<p>However, if your module's name is <code>__main__</code>, it is not considered to be in a package.  Its name has no dots, and therefore you cannot use <code>from .. import</code> statements inside it.  If you try to do so, you will get the \"relative-import in non-package\" error.</p>\n<p><strong>Scripts can't import relative</strong></p>\n<p>What you probably did is you tried to run <code>moduleX</code> or the like from the command line.  When you did this, its name was set to <code>__main__</code>, which means that relative imports within it will fail, because its name does not reveal that it is in a package. Note that this will also happen if you run Python from the same directory where a module is, and then try to import that module, because, as described above, Python will find the module in the current directory \"too early\" without realizing it is part of a package.</p>\n<p>Also remember that when you run the interactive interpreter, the \"name\" of that interactive session is always <code>__main__</code>.  Thus <strong>you cannot do relative imports directly from an interactive session</strong>.  Relative imports are only for use within module files.</p>\n<p><strong>Two solutions:</strong></p>\n<ol>\n<li><p>If you really do want to run <code>moduleX</code> directly, but you still want it to be considered part of a package, you can do <code>python -m package.subpackage1.moduleX</code>.  The <code>-m</code> tells Python to load it as a module, not as the top-level script.</p>\n</li>\n<li><p>Or perhaps you don't actually want to <em>run</em> <code>moduleX</code>, you just want to run some other script, say <code>myfile.py</code>, that <em>uses</em> functions inside <code>moduleX</code>.  If that is the case, put <code>myfile.py</code> <em>somewhere else</em> \u2013 <em>not</em> inside the <code>package</code> directory \u2013 and run it.  If inside <code>myfile.py</code> you do things like <code>from package.moduleA import spam</code>, it will work fine.</p>\n</li>\n</ol>\n<p><strong>Notes</strong></p>\n<ul>\n<li><p>For either of these solutions, the package directory (<code>package</code> in your example) must be accessible from the Python module search path (<code>sys.path</code>).  If it is not, you will not be able to use anything in the package reliably at all.</p>\n</li>\n<li><p>Since Python 2.6, the module's \"name\" for package-resolution purposes is determined not just by its <code>__name__</code> attributes but also by the <code>__package__</code> attribute.  That's why I'm avoiding using the explicit symbol <code>__name__</code> to refer to the module's \"name\".  Since Python 2.6 a module's \"name\" is effectively <code>__package__ + '.' + __name__</code>, or just <code>__name__</code> if <code>__package__</code> is <code>None</code>.)</p>\n</li>\n</ul>\n", "abstract": "Script vs. Module Here's an explanation.  The short version is that there is a big difference between directly running a Python file, and importing that file from somewhere else.  Just knowing what directory a file is in does not determine what package Python thinks it is in.  That depends, additionally, on how you load the file into Python (by running or by importing). There are two ways to load a Python file: as the top-level script, or as a\nmodule.  A file is loaded as the top-level script if you execute it directly, for instance by typing python myfile.py on the command line.  It is loaded as a module when an import statement is encountered inside some other file.  There can only be one top-level script at a time; the top-level script is the Python file you ran to start things off. Naming When a file is loaded, it is given a name (which is stored in its __name__ attribute). But be aware, if you load moduleX as a module from shell command line using something like python -m package.subpackage1.moduleX, the __name__ will still be __main__. So for instance in your example: if you imported moduleX (note: imported, not directly executed), its name would be package.subpackage1.moduleX.  If you imported moduleA, its name would be package.moduleA.  However, if you directly run moduleX from the command line, its name will instead be __main__, and if you directly run moduleA from the command line, its name will be __main__.  When a module is run as the top-level script, it loses its normal name and its name is instead __main__. Accessing a module NOT through its containing package There is an additional wrinkle: the module's name depends on whether it was imported \"directly\" from the directory it is in or imported via a package.  This only makes a difference if you run Python in a directory, and try to import a file in that same directory (or a subdirectory of it).  For instance, if you start the Python interpreter in the directory package/subpackage1 and then do import moduleX, the name of moduleX will just be moduleX, and not package.subpackage1.moduleX.  This is because Python adds the current directory to its search path when the interpreter is entered interactively; if it finds the to-be-imported module in the current directory, it will not know that that directory is part of a package, and the package information will not become part of the module's name. A special case is if you run the interpreter interactively (e.g., just type python and start entering Python code on the fly).  In this case, the name of that interactive session is __main__. Now here is the crucial thing for your error message: if a module's name has no dots, it is not considered to be part of a package.  It doesn't matter where the file actually is on disk.  All that matters is what its name is, and its name depends on how you loaded it. Now look at the quote you included in your question: Relative imports use a module's name attribute to determine that module's position in the package hierarchy. If the module's name does not contain any package information (e.g. it is set to 'main') then relative imports are resolved as if the module were a top-level module, regardless of where the module is actually located on the file system. Relative imports... Relative imports use the module's name to determine where it is in a package.  When you use a relative import like from .. import foo, the dots indicate to step up some number of levels in the package hierarchy.  For instance, if your current module's name is package.subpackage1.moduleX, then ..moduleA would mean package.moduleA.  For a from .. import to work, the module's name must have at least as many dots as there are in the import statement. ... are only relative in a package However, if your module's name is __main__, it is not considered to be in a package.  Its name has no dots, and therefore you cannot use from .. import statements inside it.  If you try to do so, you will get the \"relative-import in non-package\" error. Scripts can't import relative What you probably did is you tried to run moduleX or the like from the command line.  When you did this, its name was set to __main__, which means that relative imports within it will fail, because its name does not reveal that it is in a package. Note that this will also happen if you run Python from the same directory where a module is, and then try to import that module, because, as described above, Python will find the module in the current directory \"too early\" without realizing it is part of a package. Also remember that when you run the interactive interpreter, the \"name\" of that interactive session is always __main__.  Thus you cannot do relative imports directly from an interactive session.  Relative imports are only for use within module files. Two solutions: If you really do want to run moduleX directly, but you still want it to be considered part of a package, you can do python -m package.subpackage1.moduleX.  The -m tells Python to load it as a module, not as the top-level script. Or perhaps you don't actually want to run moduleX, you just want to run some other script, say myfile.py, that uses functions inside moduleX.  If that is the case, put myfile.py somewhere else \u2013 not inside the package directory \u2013 and run it.  If inside myfile.py you do things like from package.moduleA import spam, it will work fine. Notes For either of these solutions, the package directory (package in your example) must be accessible from the Python module search path (sys.path).  If it is not, you will not be able to use anything in the package reliably at all. Since Python 2.6, the module's \"name\" for package-resolution purposes is determined not just by its __name__ attributes but also by the __package__ attribute.  That's why I'm avoiding using the explicit symbol __name__ to refer to the module's \"name\".  Since Python 2.6 a module's \"name\" is effectively __package__ + '.' + __name__, or just __name__ if __package__ is None.)"}, {"id": 49480246, "score": 82, "vote": 0, "content": "<p>This is really a problem within python. <strong>The origin of confusion is that people mistakenly takes the relative import as path relative which is not.</strong> </p>\n<p>For example when you write in <em>faa.py</em>:</p>\n<pre><code class=\"python\">from .. import foo\n</code></pre>\n<p>This has a meaning only if <em>faa.py</em> was <em>identified and loaded</em> by python, during execution, as a part of a package. In that case,the <strong>module's name</strong> \n for <em>faa.py</em> would be for example <em>some_packagename.faa</em>. If the file was loaded just because it is in the current directory, when python is run, then its name would not refer to any package and eventually relative import would fail. </p>\n<p>A simple solution to refer modules in the current directory, is to use this:</p>\n<pre><code class=\"python\">if __package__ is None or __package__ == '':\n    # uses current directory visibility\n    import foo\nelse:\n    # uses current package visibility\n    from . import foo\n</code></pre>\n", "abstract": "This is really a problem within python. The origin of confusion is that people mistakenly takes the relative import as path relative which is not.  For example when you write in faa.py: This has a meaning only if faa.py was identified and loaded by python, during execution, as a part of a package. In that case,the module's name \n for faa.py would be for example some_packagename.faa. If the file was loaded just because it is in the current directory, when python is run, then its name would not refer to any package and eventually relative import would fail.  A simple solution to refer modules in the current directory, is to use this:"}, {"id": 65589847, "score": 22, "vote": 0, "content": "<p>There are too much too long anwers in a foreign language. So I'll try to make it short.</p>\n<p>If you write <code>from . import module</code>, opposite to  what you think, <code>module</code> will not be imported from current directory, but from the top level of your package! If you run .py file as a script, it simply doesn't know where the top level is and thus refuses to work.</p>\n<p>If you start it like this <code>py -m package.module</code> from the directory above <code>package</code>, then python knows where the top level is. That's very similar to java: <code>java -cp bin_directory package.class</code></p>\n", "abstract": "There are too much too long anwers in a foreign language. So I'll try to make it short. If you write from . import module, opposite to  what you think, module will not be imported from current directory, but from the top level of your package! If you run .py file as a script, it simply doesn't know where the top level is and thus refuses to work. If you start it like this py -m package.module from the directory above package, then python knows where the top level is. That's very similar to java: java -cp bin_directory package.class"}, {"id": 52657007, "score": 17, "vote": 0, "content": "<p>So after carping about this along with many others, I came across a note posted by <a href=\"https://stackoverflow.com/users/5420054/dorian-b\">Dorian B</a> in this <a href=\"https://stackoverflow.com/questions/5286210/is-there-a-way-to-access-parent-modules-in-python\">article</a> that solved the specific problem I was having where I would develop modules and classes for use with a web service, but I also want to be able to test them as I'm coding, using the debugger facilities in PyCharm. To run tests in a self-contained class, I would include the following at the end of my class file:</p>\n<pre><code class=\"python\">if __name__ == '__main__':\n   # run test code here...\n</code></pre>\n<p>but if I wanted to import other classes or modules in the same folder, I would then have to change all my import statements from relative notation to local references (i.e. remove the dot (.))  But after reading Dorian's suggestion, I tried his 'one-liner' and it worked!  I can now test in PyCharm and leave my test code in place when I use the class in another class under test, or when I use it in my web service!</p>\n<pre><code class=\"python\"># import any site-lib modules first, then...\nimport sys\nparent_module = sys.modules['.'.join(__name__.split('.')[:-1]) or '__main__']\nif __name__ == '__main__' or parent_module.__name__ == '__main__':\n    from codex import Codex # these are in same folder as module under test!\n    from dblogger import DbLogger\nelse:\n    from .codex import Codex\n    from .dblogger import DbLogger\n</code></pre>\n<p>The if statement checks to see if we're running this module as <strong>main</strong> or if it's being used in another module that's being tested as <strong>main</strong>.  Perhaps this is obvious, but I offer this note here in case anyone else frustrated by the relative import issues above can make use of it.</p>\n", "abstract": "So after carping about this along with many others, I came across a note posted by Dorian B in this article that solved the specific problem I was having where I would develop modules and classes for use with a web service, but I also want to be able to test them as I'm coding, using the debugger facilities in PyCharm. To run tests in a self-contained class, I would include the following at the end of my class file: but if I wanted to import other classes or modules in the same folder, I would then have to change all my import statements from relative notation to local references (i.e. remove the dot (.))  But after reading Dorian's suggestion, I tried his 'one-liner' and it worked!  I can now test in PyCharm and leave my test code in place when I use the class in another class under test, or when I use it in my web service! The if statement checks to see if we're running this module as main or if it's being used in another module that's being tested as main.  Perhaps this is obvious, but I offer this note here in case anyone else frustrated by the relative import issues above can make use of it."}, {"id": 43815970, "score": 11, "vote": 0, "content": "<p>Here's a general recipe, modified to fit as an example, that I am using right now for dealing with Python libraries written as packages, that contain interdependent files, where I want to be able to test parts of them piecemeal.  Let's call this <code>lib.foo</code> and say that it needs access to <code>lib.fileA</code> for functions <code>f1</code> and <code>f2</code>, and <code>lib.fileB</code> for class <code>Class3</code>.</p>\n<p>I have included a few <code>print</code> calls to help illustrate how this works.  In practice you would want to remove them (and maybe also the <code>from __future__ import print_function</code> line).</p>\n<p>This particular example is too simple to show when we really need to insert an entry into <code>sys.path</code>.  (See <a href=\"https://stackoverflow.com/a/38455936/1256452\">Lars' answer</a> for a case where we <em>do</em> need it, when we have two or more levels of package directories, and then we use <code>os.path.dirname(os.path.dirname(__file__))</code>\u2014but it doesn't really <em>hurt</em> here either.)  It's also safe enough to do this without the <code>if _i in sys.path</code> test.  However, if each imported file inserts the same path\u2014for instance, if both <code>fileA</code> and <code>fileB</code> want to import utilities from the package\u2014this clutters up <code>sys.path</code> with the same path many times, so it's nice to have the <code>if _i not in sys.path</code> in the boilerplate.</p>\n<pre><code class=\"python\">from __future__ import print_function # only when showing how this works\n\nif __package__:\n    print('Package named {!r}; __name__ is {!r}'.format(__package__, __name__))\n    from .fileA import f1, f2\n    from .fileB import Class3\nelse:\n    print('Not a package; __name__ is {!r}'.format(__name__))\n    # these next steps should be used only with care and if needed\n    # (remove the sys.path manipulation for simple cases!)\n    import os, sys\n    _i = os.path.dirname(os.path.abspath(__file__))\n    if _i not in sys.path:\n        print('inserting {!r} into sys.path'.format(_i))\n        sys.path.insert(0, _i)\n    else:\n        print('{!r} is already in sys.path'.format(_i))\n    del _i # clean up global name space\n\n    from fileA import f1, f2\n    from fileB import Class3\n\n... all the code as usual ...\n\nif __name__ == '__main__':\n    import doctest, sys\n    ret = doctest.testmod()\n    sys.exit(0 if ret.failed == 0 else 1)\n</code></pre>\n<p>The idea here is this (and note that these all function the same across python2.7 and python 3.x):</p>\n<ol>\n<li><p>If run as <code>import lib</code> or <code>from lib import foo</code> as a regular package import from ordinary code, <code>__package</code> is <code>lib</code> and <code>__name__</code> is <code>lib.foo</code>.  We take the first code path, importing from <code>.fileA</code>, etc.</p>\n</li>\n<li><p>If run as <code>python lib/foo.py</code>, <code>__package__</code> will be None and <code>__name__</code> will be <code>__main__</code>.</p>\n<p>We take the second code path.  The <code>lib</code> directory will already be in <code>sys.path</code> so there is no need to add it.  We import from <code>fileA</code>, etc.</p>\n</li>\n<li><p>If run within the <code>lib</code> directory as <code>python foo.py</code>, the behavior is the same as for case 2.</p>\n</li>\n<li><p>If run within the <code>lib</code> directory as <code>python -m foo</code>, the behavior is similar to cases 2 and 3.  However, the path to the <code>lib</code> directory is not in <code>sys.path</code>, so we add it before importing.  The same applies if we run Python and then <code>import foo</code>.</p>\n<p>(Since <code>.</code> <em>is</em> in <code>sys.path</code>, we don't really need to add the absolute version of the path here.  This is where a deeper package nesting structure, where we want to do <code>from ..otherlib.fileC import ...</code>, makes a difference.  If you're not doing this, you can omit all the <code>sys.path</code> manipulation entirely.)</p>\n</li>\n</ol>\n<h3>Notes</h3>\n<p>There is still a quirk.  If you run this whole thing from outside:</p>\n<pre><code class=\"python\">$ python2 lib.foo\n</code></pre>\n<p>or:</p>\n<pre><code class=\"python\">$ python3 lib.foo\n</code></pre>\n<p>the behavior depends on the contents of <code>lib/__init__.py</code>.  If that exists and <em>is empty</em>, all is well:</p>\n<pre><code class=\"python\">Package named 'lib'; __name__ is '__main__'\n</code></pre>\n<p>But if <code>lib/__init__.py</code> <em>itself</em> imports <code>routine</code> so that it can export <code>routine.name</code> directly as <code>lib.name</code>, you get:</p>\n<pre><code class=\"python\">$ python2 lib.foo\nPackage named 'lib'; __name__ is 'lib.foo'\nPackage named 'lib'; __name__ is '__main__'\n</code></pre>\n<p>That is, the module gets imported twice, once via the package and then again as <code>__main__</code> so that it runs your <code>main</code> code.  Python 3.6 and later warn about this:</p>\n<pre><code class=\"python\">$ python3 lib.routine\nPackage named 'lib'; __name__ is 'lib.foo'\n[...]/runpy.py:125: RuntimeWarning: 'lib.foo' found in sys.modules\nafter import of package 'lib', but prior to execution of 'lib.foo';\nthis may result in unpredictable behaviour\n  warn(RuntimeWarning(msg))\nPackage named 'lib'; __name__ is '__main__'\n</code></pre>\n<p>The <em>warning</em> is new, but the warned-about behavior is not.  It is part of what some call <a href=\"http://python-notes.curiousefficiency.org/en/latest/python_concepts/import_traps.html#the-double-import-trap\" rel=\"noreferrer\">the double import trap</a>.  (For additional details see <a href=\"https://bugs.python.org/issue27487\" rel=\"noreferrer\">issue 27487</a>.)  Nick Coghlan says:</p>\n<blockquote>\n<p>This next trap exists in all current versions of Python, including 3.3, and can be summed up in the following general guideline: \"Never add a package directory, or any directory inside a package, directly to the Python path\".</p>\n</blockquote>\n<p>Note that while we violate that rule here, we do it <em>only</em> when the file being loaded is <em>not</em> being loaded as part of a package, and our modification is specifically designed to allow us to access other files in that package.  (And, as I noted, we probably shouldn't do this at all for single level packages.)  If we wanted to be extra-clean, we might rewrite this as, e.g.:</p>\n<pre><code class=\"python\">    import os, sys\n    _i = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n    if _i not in sys.path:\n        sys.path.insert(0, _i)\n    else:\n        _i = None\n\n    from sub.fileA import f1, f2\n    from sub.fileB import Class3\n\n    if _i:\n        sys.path.remove(_i)\n    del _i\n</code></pre>\n<p>That is, we modify <code>sys.path</code> long enough to achieve our imports, then put it back the way it was (deleting one copy of <code>_i</code> if and only if we added one copy of <code>_i</code>).</p>\n", "abstract": "Here's a general recipe, modified to fit as an example, that I am using right now for dealing with Python libraries written as packages, that contain interdependent files, where I want to be able to test parts of them piecemeal.  Let's call this lib.foo and say that it needs access to lib.fileA for functions f1 and f2, and lib.fileB for class Class3. I have included a few print calls to help illustrate how this works.  In practice you would want to remove them (and maybe also the from __future__ import print_function line). This particular example is too simple to show when we really need to insert an entry into sys.path.  (See Lars' answer for a case where we do need it, when we have two or more levels of package directories, and then we use os.path.dirname(os.path.dirname(__file__))\u2014but it doesn't really hurt here either.)  It's also safe enough to do this without the if _i in sys.path test.  However, if each imported file inserts the same path\u2014for instance, if both fileA and fileB want to import utilities from the package\u2014this clutters up sys.path with the same path many times, so it's nice to have the if _i not in sys.path in the boilerplate. The idea here is this (and note that these all function the same across python2.7 and python 3.x): If run as import lib or from lib import foo as a regular package import from ordinary code, __package is lib and __name__ is lib.foo.  We take the first code path, importing from .fileA, etc. If run as python lib/foo.py, __package__ will be None and __name__ will be __main__. We take the second code path.  The lib directory will already be in sys.path so there is no need to add it.  We import from fileA, etc. If run within the lib directory as python foo.py, the behavior is the same as for case 2. If run within the lib directory as python -m foo, the behavior is similar to cases 2 and 3.  However, the path to the lib directory is not in sys.path, so we add it before importing.  The same applies if we run Python and then import foo. (Since . is in sys.path, we don't really need to add the absolute version of the path here.  This is where a deeper package nesting structure, where we want to do from ..otherlib.fileC import ..., makes a difference.  If you're not doing this, you can omit all the sys.path manipulation entirely.) There is still a quirk.  If you run this whole thing from outside: or: the behavior depends on the contents of lib/__init__.py.  If that exists and is empty, all is well: But if lib/__init__.py itself imports routine so that it can export routine.name directly as lib.name, you get: That is, the module gets imported twice, once via the package and then again as __main__ so that it runs your main code.  Python 3.6 and later warn about this: The warning is new, but the warned-about behavior is not.  It is part of what some call the double import trap.  (For additional details see issue 27487.)  Nick Coghlan says: This next trap exists in all current versions of Python, including 3.3, and can be summed up in the following general guideline: \"Never add a package directory, or any directory inside a package, directly to the Python path\". Note that while we violate that rule here, we do it only when the file being loaded is not being loaded as part of a package, and our modification is specifically designed to allow us to access other files in that package.  (And, as I noted, we probably shouldn't do this at all for single level packages.)  If we wanted to be extra-clean, we might rewrite this as, e.g.: That is, we modify sys.path long enough to achieve our imports, then put it back the way it was (deleting one copy of _i if and only if we added one copy of _i)."}, {"id": 37934474, "score": 6, "vote": 0, "content": "<p>Here is one solution that I would not recommend, but might be useful in some situations where modules were simply not generated:</p>\n<pre><code class=\"python\">import os\nimport sys\nparent_dir_name = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))\nsys.path.append(parent_dir_name + \"/your_dir\")\nimport your_script\nyour_script.a_function()\n</code></pre>\n", "abstract": "Here is one solution that I would not recommend, but might be useful in some situations where modules were simply not generated:"}, {"id": 57421753, "score": 3, "vote": 0, "content": "<p>@BrenBarn's answer says it all, but if you're like me it might take a while to understand.  Here's my case and how @BrenBarn's answer applies to it, perhaps it will help you.</p>\n<p><strong>The case</strong></p>\n<pre><code class=\"python\">package/\n    __init__.py\n    subpackage1/\n        __init__.py\n        moduleX.py\n    moduleA.py\n</code></pre>\n<p>Using our familiar example, and add to it that moduleX.py has a relative import to ..moduleA.  Given that I tried writing a test script in the subpackage1 directory that imported moduleX, but then got the dreaded error described by the OP.</p>\n<p><strong>Solution</strong></p>\n<p>Move test script to the same level as package and import package.subpackage1.moduleX</p>\n<p><strong>Explanation</strong></p>\n<p>As explained, relative imports are made relative to the current name.  When my test script imports moduleX from the same directory, then module name inside moduleX is moduleX.  When it encounters a relative import the interpreter can't back up the package hierarchy because it's already at the top</p>\n<p>When I import moduleX from above, then name inside moduleX is package.subpackage1.moduleX and the relative import can be found</p>\n", "abstract": "@BrenBarn's answer says it all, but if you're like me it might take a while to understand.  Here's my case and how @BrenBarn's answer applies to it, perhaps it will help you. The case Using our familiar example, and add to it that moduleX.py has a relative import to ..moduleA.  Given that I tried writing a test script in the subpackage1 directory that imported moduleX, but then got the dreaded error described by the OP. Solution Move test script to the same level as package and import package.subpackage1.moduleX Explanation As explained, relative imports are made relative to the current name.  When my test script imports moduleX from the same directory, then module name inside moduleX is moduleX.  When it encounters a relative import the interpreter can't back up the package hierarchy because it's already at the top When I import moduleX from above, then name inside moduleX is package.subpackage1.moduleX and the relative import can be found"}, {"id": 14132870, "score": 2, "vote": 0, "content": "<p><code>__name__</code> changes depending on whether the code in question is run in the global namespace or as part of an imported module.</p>\n<p>If the code is not running in the global space, <code>__name__</code> will be the name of the module. If it is running in global namespace -- for example, if you type it into a console, or run the module as a script using <code>python.exe yourscriptnamehere.py</code> then <code>__name__</code> becomes <code>\"__main__\"</code>.  </p>\n<p>You'll see a lot of python code with  <code>if __name__ == '__main__'</code> is used to test whether the code is being run from the global namespace \u2013 that allows you to have a module that doubles as a script. </p>\n<p>Did you try to do these imports from the console? </p>\n", "abstract": "__name__ changes depending on whether the code in question is run in the global namespace or as part of an imported module. If the code is not running in the global space, __name__ will be the name of the module. If it is running in global namespace -- for example, if you type it into a console, or run the module as a script using python.exe yourscriptnamehere.py then __name__ becomes \"__main__\".   You'll see a lot of python code with  if __name__ == '__main__' is used to test whether the code is being run from the global namespace \u2013 that allows you to have a module that doubles as a script.  Did you try to do these imports from the console? "}, {"id": 38455936, "score": 1, "vote": 0, "content": "<p>I had a similar problem where I didn't want to change the Python module search \npath and needed to load a module relatively <em>from a script</em> (in spite of <em>\"scripts can't import relative with all\"</em> as BrenBarn explained nicely above).</p>\n<p>So I used the following hack. Unfortunately, it relies on the <code>imp</code> module that \nbecame deprecated since version 3.4 to be dropped in favour of <code>importlib</code>.\n(Is this possible with <code>importlib</code>, too? I don't know.) Still, the hack works for now.</p>\n<p>Example for accessing members of <code>moduleX</code> in <code>subpackage1</code> from a script residing in the <code>subpackage2</code> folder:</p>\n<pre><code class=\"python\">#!/usr/bin/env python3\n\nimport inspect\nimport imp\nimport os\n\ndef get_script_dir(follow_symlinks=True):\n    \"\"\"\n    Return directory of code defining this very function.\n    Should work from a module as well as from a script.\n    \"\"\"\n    script_path = inspect.getabsfile(get_script_dir)\n    if follow_symlinks:\n        script_path = os.path.realpath(script_path)\n    return os.path.dirname(script_path)\n\n# loading the module (hack, relying on deprecated imp-module)\nPARENT_PATH = os.path.dirname(get_script_dir())\n(x_file, x_path, x_desc) = imp.find_module('moduleX', [PARENT_PATH+'/'+'subpackage1'])\nmodule_x = imp.load_module('subpackage1.moduleX', x_file, x_path, x_desc)\n\n# importing a function and a value\nfunction = module_x.my_function\nVALUE = module_x.MY_CONST\n</code></pre>\n<p>A cleaner approach seems to be to modify the sys.path used for loading modules as mentioned by Federico.</p>\n<pre><code class=\"python\">#!/usr/bin/env python3\n\nif __name__ == '__main__' and __package__ is None:\n    from os import sys, path\n    # __file__ should be defined in this case\n    PARENT_DIR = path.dirname(path.dirname(path.abspath(__file__)))\n   sys.path.append(PARENT_DIR)\nfrom subpackage1.moduleX import *\n</code></pre>\n", "abstract": "I had a similar problem where I didn't want to change the Python module search \npath and needed to load a module relatively from a script (in spite of \"scripts can't import relative with all\" as BrenBarn explained nicely above). So I used the following hack. Unfortunately, it relies on the imp module that \nbecame deprecated since version 3.4 to be dropped in favour of importlib.\n(Is this possible with importlib, too? I don't know.) Still, the hack works for now. Example for accessing members of moduleX in subpackage1 from a script residing in the subpackage2 folder: A cleaner approach seems to be to modify the sys.path used for loading modules as mentioned by Federico."}, {"id": 72682005, "score": 1, "vote": 0, "content": "<p>Following up on what Lars has suggested I've wrapped this approach in an experimental, new import library: <a href=\"https://github.com/ronny-rentner/ultraimport\" rel=\"nofollow noreferrer\">ultraimport</a></p>\n<p>It gives the programmer more control over imports and it allows file system based imports. Therefore, you can do relative imports from scripts. Parent package not necessary. ultraimports will always work, no matter how you run your code or what is your current working directory because ultraimport makes imports unambiguous. You don't need to change sys.path and also you don't need a try/except block to sometimes do relative imports and sometimes absolute.</p>\n<p>You would then write in somefile.py something like:</p>\n<pre><code class=\"python\">import ultraimport\nfoo = ultraimport('__dir__/foo.py')\n</code></pre>\n<p>__dir__ is the directory of somefile.py, the caller of ultraimport(). foo.py would live in the same directory as somefile.py.</p>\n<p>One caveat when importing scripts like this is if they contain further relative imports. ultraimport has a builtin preprocessor to rewrite subsequent relative imports to ultraimports so they continue to work. Though, this is currently somewhat limited as original Python imports are ambiguous and there's only so much you can do about it.</p>\n", "abstract": "Following up on what Lars has suggested I've wrapped this approach in an experimental, new import library: ultraimport It gives the programmer more control over imports and it allows file system based imports. Therefore, you can do relative imports from scripts. Parent package not necessary. ultraimports will always work, no matter how you run your code or what is your current working directory because ultraimport makes imports unambiguous. You don't need to change sys.path and also you don't need a try/except block to sometimes do relative imports and sometimes absolute. You would then write in somefile.py something like: __dir__ is the directory of somefile.py, the caller of ultraimport(). foo.py would live in the same directory as somefile.py. One caveat when importing scripts like this is if they contain further relative imports. ultraimport has a builtin preprocessor to rewrite subsequent relative imports to ultraimports so they continue to work. Though, this is currently somewhat limited as original Python imports are ambiguous and there's only so much you can do about it."}, {"id": 48964834, "score": 0, "vote": 0, "content": "<blockquote>\n<p>Relative imports use a module's name attribute to determine that module's position in the package hierarchy. If the module's name does not contain any package information (e.g. it is set to 'main') then relative imports are resolved as if the module were a top level module, regardless of where the module is actually located on the file system.</p>\n</blockquote>\n<p>Wrote a little python package to PyPi that might help viewers of this question. The package acts as workaround if one wishes to be able to run python files containing imports containing upper level packages from within a package / project without being directly in the importing file's directory. <a href=\"https://pypi.org/project/import-anywhere/\" rel=\"nofollow noreferrer\">https://pypi.org/project/import-anywhere/</a> </p>\n", "abstract": "Relative imports use a module's name attribute to determine that module's position in the package hierarchy. If the module's name does not contain any package information (e.g. it is set to 'main') then relative imports are resolved as if the module were a top level module, regardless of where the module is actually located on the file system. Wrote a little python package to PyPi that might help viewers of this question. The package acts as workaround if one wishes to be able to run python files containing imports containing upper level packages from within a package / project without being directly in the importing file's directory. https://pypi.org/project/import-anywhere/ "}, {"id": 71994816, "score": -1, "vote": 0, "content": "<p>In most cases when I see the <code>ValueError: attempted relative import beyond top-level package</code> and pull my hair out, the solution is as follows:</p>\n<p>You need to <strong>step one level higher</strong> in the file hierarchy!</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">#dir/package/module1/foo.py\n\n#dir/package/module2/bar.py\nfrom ..module1 import foo\n</code></pre>\n<p>Importing <code>bar.py</code> when interpreter is started in <code>dir/package/</code> will result in error despite the import process never going beyond your current directory.</p>\n<p>Importing <code>bar.py</code> when interpreter is started in <code>dir/</code> will succeed.</p>\n<p>Similarly for unit tests:\n<code>python3 -m unittest discover --start-directory=.</code> successfully works from <code>dir/</code>, but not from <code>dir/package/</code>.</p>\n", "abstract": "In most cases when I see the ValueError: attempted relative import beyond top-level package and pull my hair out, the solution is as follows: You need to step one level higher in the file hierarchy! Importing bar.py when interpreter is started in dir/package/ will result in error despite the import process never going beyond your current directory. Importing bar.py when interpreter is started in dir/ will succeed. Similarly for unit tests:\npython3 -m unittest discover --start-directory=. successfully works from dir/, but not from dir/package/."}]}, {"link": "https://stackoverflow.com/questions/13148429/how-to-change-the-order-of-dataframe-columns", "question": {"id": "13148429", "title": "How to change the order of DataFrame columns?", "content": "<p>I have the following <code>DataFrame</code> (<code>df</code>):</p>\n<pre><code class=\"python\">import numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame(np.random.rand(10, 5))\n</code></pre>\n<p>I add more column(s) by assignment:</p>\n<pre><code class=\"python\">df['mean'] = df.mean(1)\n</code></pre>\n<p>How can I move the column <code>mean</code> to the front, i.e. set it as first column leaving the order of the other columns untouched?</p>\n", "abstract": "I have the following DataFrame (df): I add more column(s) by assignment: How can I move the column mean to the front, i.e. set it as first column leaving the order of the other columns untouched?"}, "answers": [{"id": 13148611, "score": 1258, "vote": 0, "content": "<p>One easy way would be to reassign the dataframe with a list of the columns, rearranged as needed. </p>\n<p>This is what you have now: </p>\n<pre><code class=\"python\">In [6]: df\nOut[6]:\n          0         1         2         3         4      mean\n0  0.445598  0.173835  0.343415  0.682252  0.582616  0.445543\n1  0.881592  0.696942  0.702232  0.696724  0.373551  0.670208\n2  0.662527  0.955193  0.131016  0.609548  0.804694  0.632596\n3  0.260919  0.783467  0.593433  0.033426  0.512019  0.436653\n4  0.131842  0.799367  0.182828  0.683330  0.019485  0.363371\n5  0.498784  0.873495  0.383811  0.699289  0.480447  0.587165\n6  0.388771  0.395757  0.745237  0.628406  0.784473  0.588529\n7  0.147986  0.459451  0.310961  0.706435  0.100914  0.345149\n8  0.394947  0.863494  0.585030  0.565944  0.356561  0.553195\n9  0.689260  0.865243  0.136481  0.386582  0.730399  0.561593\n\nIn [7]: cols = df.columns.tolist()\n\nIn [8]: cols\nOut[8]: [0L, 1L, 2L, 3L, 4L, 'mean']\n</code></pre>\n<p>Rearrange <code>cols</code> in any way you want. This is how I moved the last element to the first position: </p>\n<pre><code class=\"python\">In [12]: cols = cols[-1:] + cols[:-1]\n\nIn [13]: cols\nOut[13]: ['mean', 0L, 1L, 2L, 3L, 4L]\n</code></pre>\n<p>Then reorder the dataframe like this: </p>\n<pre><code class=\"python\">In [16]: df = df[cols]  #    OR    df = df.ix[:, cols]\n\nIn [17]: df\nOut[17]:\n       mean         0         1         2         3         4\n0  0.445543  0.445598  0.173835  0.343415  0.682252  0.582616\n1  0.670208  0.881592  0.696942  0.702232  0.696724  0.373551\n2  0.632596  0.662527  0.955193  0.131016  0.609548  0.804694\n3  0.436653  0.260919  0.783467  0.593433  0.033426  0.512019\n4  0.363371  0.131842  0.799367  0.182828  0.683330  0.019485\n5  0.587165  0.498784  0.873495  0.383811  0.699289  0.480447\n6  0.588529  0.388771  0.395757  0.745237  0.628406  0.784473\n7  0.345149  0.147986  0.459451  0.310961  0.706435  0.100914\n8  0.553195  0.394947  0.863494  0.585030  0.565944  0.356561\n9  0.561593  0.689260  0.865243  0.136481  0.386582  0.730399\n</code></pre>\n", "abstract": "One easy way would be to reassign the dataframe with a list of the columns, rearranged as needed.  This is what you have now:  Rearrange cols in any way you want. This is how I moved the last element to the first position:  Then reorder the dataframe like this: "}, {"id": 23741480, "score": 756, "vote": 0, "content": "<p>You could also do something like this:</p>\n<pre><code class=\"python\">df = df[['mean', '0', '1', '2', '3']]\n</code></pre>\n<p>You can get the list of columns with:</p>\n<pre><code class=\"python\">cols = list(df.columns.values)\n</code></pre>\n<p>The output will produce:</p>\n<pre><code class=\"python\">['0', '1', '2', '3', 'mean']\n</code></pre>\n<p>...which is then easy to rearrange manually before dropping it into the first function</p>\n", "abstract": "You could also do something like this: You can get the list of columns with: The output will produce: ...which is then easy to rearrange manually before dropping it into the first function"}, {"id": 29922207, "score": 391, "vote": 0, "content": "<p>Just assign the column names in the order you want them:</p>\n<pre><code class=\"python\">In [39]: df\nOut[39]: \n          0         1         2         3         4  mean\n0  0.172742  0.915661  0.043387  0.712833  0.190717     1\n1  0.128186  0.424771  0.590779  0.771080  0.617472     1\n2  0.125709  0.085894  0.989798  0.829491  0.155563     1\n3  0.742578  0.104061  0.299708  0.616751  0.951802     1\n4  0.721118  0.528156  0.421360  0.105886  0.322311     1\n5  0.900878  0.082047  0.224656  0.195162  0.736652     1\n6  0.897832  0.558108  0.318016  0.586563  0.507564     1\n7  0.027178  0.375183  0.930248  0.921786  0.337060     1\n8  0.763028  0.182905  0.931756  0.110675  0.423398     1\n9  0.848996  0.310562  0.140873  0.304561  0.417808     1\n\nIn [40]: df = df[['mean', 4,3,2,1]]\n</code></pre>\n<p>Now, 'mean' column comes out in the front:</p>\n<pre><code class=\"python\">In [41]: df\nOut[41]: \n   mean         4         3         2         1\n0     1  0.190717  0.712833  0.043387  0.915661\n1     1  0.617472  0.771080  0.590779  0.424771\n2     1  0.155563  0.829491  0.989798  0.085894\n3     1  0.951802  0.616751  0.299708  0.104061\n4     1  0.322311  0.105886  0.421360  0.528156\n5     1  0.736652  0.195162  0.224656  0.082047\n6     1  0.507564  0.586563  0.318016  0.558108\n7     1  0.337060  0.921786  0.930248  0.375183\n8     1  0.423398  0.110675  0.931756  0.182905\n9     1  0.417808  0.304561  0.140873  0.310562\n</code></pre>\n", "abstract": "Just assign the column names in the order you want them: Now, 'mean' column comes out in the front:"}, {"id": 13316001, "score": 283, "vote": 0, "content": "<p>For pandas &gt;= 1.3 (Edited in 2022):</p>\n<pre><code class=\"python\">df.insert(0, 'mean', df.pop('mean'))\n</code></pre>\n<p>How about   (for Pandas &lt; 1.3, the original answer)</p>\n<pre><code class=\"python\">df.insert(0, 'mean', df['mean'])\n</code></pre>\n<p><a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/dsintro.html#column-selection-addition-deletion\" rel=\"noreferrer\">https://pandas.pydata.org/pandas-docs/stable/user_guide/dsintro.html#column-selection-addition-deletion</a></p>\n", "abstract": "For pandas >= 1.3 (Edited in 2022): How about   (for Pandas < 1.3, the original answer) https://pandas.pydata.org/pandas-docs/stable/user_guide/dsintro.html#column-selection-addition-deletion"}, {"id": 39237712, "score": 186, "vote": 0, "content": "<p>In your case,</p>\n<pre><code class=\"python\">df = df.reindex(columns=['mean',0,1,2,3,4])\n</code></pre>\n<p>will do exactly what you want.</p>\n<p><strong>In my case (general form):</strong></p>\n<pre><code class=\"python\">df = df.reindex(columns=sorted(df.columns))\ndf = df.reindex(columns=(['opened'] + list([a for a in df.columns if a != 'opened']) ))\n</code></pre>\n", "abstract": "In your case, will do exactly what you want. In my case (general form):"}, {"id": 58776941, "score": 109, "vote": 0, "content": "<pre><code class=\"python\">import numpy as np\nimport pandas as pd\ndf = pd.DataFrame()\ncolumn_names = ['x','y','z','mean']\nfor col in column_names: \n    df[col] = np.random.randint(0,100, size=10000)\n</code></pre>\n<p>You can try out the following solutions :</p>\n<p><strong>Solution 1:</strong></p>\n<pre><code class=\"python\">df = df[ ['mean'] + [ col for col in df.columns if col != 'mean' ] ]\n</code></pre>\n<p><strong>Solution 2:</strong></p>\n<hr/>\n<pre><code class=\"python\">df = df[['mean', 'x', 'y', 'z']]\n</code></pre>\n<hr/>\n<p><strong>Solution 3:</strong></p>\n<pre><code class=\"python\">col = df.pop(\"mean\")\ndf = df.insert(0, col.name, col)\n</code></pre>\n<hr/>\n<p><strong>Solution 4:</strong></p>\n<pre><code class=\"python\">df.set_index(df.columns[-1], inplace=True)\ndf.reset_index(inplace=True)\n</code></pre>\n<hr/>\n<p><strong>Solution 5:</strong></p>\n<pre><code class=\"python\">cols = list(df)\ncols = [cols[-1]] + cols[:-1]\ndf = df[cols]\n</code></pre>\n<hr/>\n<p><strong>solution 6:</strong></p>\n<pre><code class=\"python\">order = [1,2,3,0] # setting column's order\ndf = df[[df.columns[i] for i in order]]\n</code></pre>\n<h2>Time Comparison:</h2>\n<p><strong>Solution 1:</strong></p>\n<blockquote>\n<p>CPU times: user 1.05 ms, sys: 35 \u00b5s, total: 1.08 ms Wall time: 995 \u00b5s</p>\n</blockquote>\n<p><strong>Solution 2</strong>:</p>\n<blockquote>\n<p>CPU times: user 933 \u00b5s, sys: 0 ns, total: 933 \u00b5s\n  Wall time: 800 \u00b5s</p>\n</blockquote>\n<p><strong>Solution 3</strong>:</p>\n<blockquote>\n<p>CPU times: user 0 ns, sys: 1.35 ms, total: 1.35 ms\n  Wall time: 1.08 ms</p>\n</blockquote>\n<p><strong>Solution 4</strong>:</p>\n<blockquote>\n<p>CPU times: user 1.23 ms, sys: 45 \u00b5s, total: 1.27 ms\n  Wall time: 986 \u00b5s</p>\n</blockquote>\n<p><strong>Solution 5</strong>:</p>\n<blockquote>\n<p>CPU times: user 1.09 ms, sys: 19 \u00b5s, total: 1.11 ms\n  Wall time: 949 \u00b5s</p>\n</blockquote>\n<p><strong>Solution 6</strong>:</p>\n<blockquote>\n<p>CPU times: user 955 \u00b5s, sys: 34 \u00b5s, total: 989 \u00b5s\n  Wall time: 859 \u00b5s</p>\n</blockquote>\n", "abstract": "You can try out the following solutions : Solution 1: Solution 2: Solution 3: Solution 4: Solution 5: solution 6: Solution 1: CPU times: user 1.05 ms, sys: 35 \u00b5s, total: 1.08 ms Wall time: 995 \u00b5s Solution 2: CPU times: user 933 \u00b5s, sys: 0 ns, total: 933 \u00b5s\n  Wall time: 800 \u00b5s Solution 3: CPU times: user 0 ns, sys: 1.35 ms, total: 1.35 ms\n  Wall time: 1.08 ms Solution 4: CPU times: user 1.23 ms, sys: 45 \u00b5s, total: 1.27 ms\n  Wall time: 986 \u00b5s Solution 5: CPU times: user 1.09 ms, sys: 19 \u00b5s, total: 1.11 ms\n  Wall time: 949 \u00b5s Solution 6: CPU times: user 955 \u00b5s, sys: 34 \u00b5s, total: 989 \u00b5s\n  Wall time: 859 \u00b5s"}, {"id": 32131398, "score": 81, "vote": 0, "content": "<p>You need to create a new list of your columns in the desired order, then use <code>df = df[cols]</code> to rearrange the columns in this new order.</p>\n<pre><code class=\"python\">cols = ['mean']  + [col for col in df if col != 'mean']\ndf = df[cols]\n</code></pre>\n<p>You can also use a more general approach.  In this example, the last column (indicated by -1) is inserted as the first column.</p>\n<pre><code class=\"python\">cols = [df.columns[-1]] + [col for col in df if col != df.columns[-1]]\ndf = df[cols]\n</code></pre>\n<p>You can also use this approach for reordering columns in a desired order if they are present in the DataFrame.</p>\n<pre><code class=\"python\">inserted_cols = ['a', 'b', 'c']\ncols = ([col for col in inserted_cols if col in df] \n        + [col for col in df if col not in inserted_cols])\ndf = df[cols]\n</code></pre>\n", "abstract": "You need to create a new list of your columns in the desired order, then use df = df[cols] to rearrange the columns in this new order. You can also use a more general approach.  In this example, the last column (indicated by -1) is inserted as the first column. You can also use this approach for reordering columns in a desired order if they are present in the DataFrame."}, {"id": 62098121, "score": 66, "vote": 0, "content": "<p>Suppose you have <code>df</code> with columns <code>A</code> <code>B</code> <code>C</code>.</p>\n<p>The most simple way is:</p>\n<pre><code class=\"python\">df = df.reindex(['B','C','A'], axis=1)\n</code></pre>\n", "abstract": "Suppose you have df with columns A B C. The most simple way is:"}, {"id": 51935892, "score": 63, "vote": 0, "content": "<p>If your column names are too-long-to-type then you could specify the new order through a list of integers with the positions:</p>\n<p>Data:</p>\n<pre><code class=\"python\">          0         1         2         3         4      mean\n0  0.397312  0.361846  0.719802  0.575223  0.449205  0.500678\n1  0.287256  0.522337  0.992154  0.584221  0.042739  0.485741\n2  0.884812  0.464172  0.149296  0.167698  0.793634  0.491923\n3  0.656891  0.500179  0.046006  0.862769  0.651065  0.543382\n4  0.673702  0.223489  0.438760  0.468954  0.308509  0.422683\n5  0.764020  0.093050  0.100932  0.572475  0.416471  0.389390\n6  0.259181  0.248186  0.626101  0.556980  0.559413  0.449972\n7  0.400591  0.075461  0.096072  0.308755  0.157078  0.207592\n8  0.639745  0.368987  0.340573  0.997547  0.011892  0.471749\n9  0.050582  0.714160  0.168839  0.899230  0.359690  0.438500\n</code></pre>\n<p>Generic example:</p>\n<pre><code class=\"python\">new_order = [3,2,1,4,5,0]\nprint(df[df.columns[new_order]])  \n\n          3         2         1         4      mean         0\n0  0.575223  0.719802  0.361846  0.449205  0.500678  0.397312\n1  0.584221  0.992154  0.522337  0.042739  0.485741  0.287256\n2  0.167698  0.149296  0.464172  0.793634  0.491923  0.884812\n3  0.862769  0.046006  0.500179  0.651065  0.543382  0.656891\n4  0.468954  0.438760  0.223489  0.308509  0.422683  0.673702\n5  0.572475  0.100932  0.093050  0.416471  0.389390  0.764020\n6  0.556980  0.626101  0.248186  0.559413  0.449972  0.259181\n7  0.308755  0.096072  0.075461  0.157078  0.207592  0.400591\n8  0.997547  0.340573  0.368987  0.011892  0.471749  0.639745\n9  0.899230  0.168839  0.714160  0.359690  0.438500  0.050582\n</code></pre>\n<p>Although it might seem like I'm just explicitly typing the column names in a different order, the fact that there's a column 'mean' should make it clear that <code>new_order</code> relates to actual positions and not column names.</p>\n<p>For the specific case of OP's question:</p>\n<pre><code class=\"python\">new_order = [-1,0,1,2,3,4]\ndf = df[df.columns[new_order]]\nprint(df)\n\n       mean         0         1         2         3         4\n0  0.500678  0.397312  0.361846  0.719802  0.575223  0.449205\n1  0.485741  0.287256  0.522337  0.992154  0.584221  0.042739\n2  0.491923  0.884812  0.464172  0.149296  0.167698  0.793634\n3  0.543382  0.656891  0.500179  0.046006  0.862769  0.651065\n4  0.422683  0.673702  0.223489  0.438760  0.468954  0.308509\n5  0.389390  0.764020  0.093050  0.100932  0.572475  0.416471\n6  0.449972  0.259181  0.248186  0.626101  0.556980  0.559413\n7  0.207592  0.400591  0.075461  0.096072  0.308755  0.157078\n8  0.471749  0.639745  0.368987  0.340573  0.997547  0.011892\n9  0.438500  0.050582  0.714160  0.168839  0.899230  0.359690\n</code></pre>\n<p>The main problem with this approach is that calling the same code multiple times will create different results each time, so one needs to be careful :)</p>\n", "abstract": "If your column names are too-long-to-type then you could specify the new order through a list of integers with the positions: Data: Generic example: Although it might seem like I'm just explicitly typing the column names in a different order, the fact that there's a column 'mean' should make it clear that new_order relates to actual positions and not column names. For the specific case of OP's question: The main problem with this approach is that calling the same code multiple times will create different results each time, so one needs to be careful :)"}, {"id": 14151942, "score": 56, "vote": 0, "content": "<p>This question has been answered <a href=\"https://stackoverflow.com/questions/11067027/python-pandas-re-ordering-columns-in-a-dataframe-based-on-column-name\">before</a> but <code>reindex_axis</code> is deprecated now so I would suggest to use:</p>\n<pre><code class=\"python\">df = df.reindex(sorted(df.columns), axis=1)\n</code></pre>\n<p>For those who want to specify the order they want instead of just sorting them, here's the solution spelled out:</p>\n<pre><code class=\"python\">df = df.reindex(['the','order','you','want'], axis=1)\n</code></pre>\n<p>Now, how you want to sort the list of column names is really not a <code>pandas</code> question, that's a Python list manipulation question. There are many ways of doing that, and I think <a href=\"https://stackoverflow.com/a/51935892/1479269\">this answer</a> has a very neat way of doing it.</p>\n", "abstract": "This question has been answered before but reindex_axis is deprecated now so I would suggest to use: For those who want to specify the order they want instead of just sorting them, here's the solution spelled out: Now, how you want to sort the list of column names is really not a pandas question, that's a Python list manipulation question. There are many ways of doing that, and I think this answer has a very neat way of doing it."}, {"id": 58715675, "score": 27, "vote": 0, "content": "<p>I think this is a slightly neater solution:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">df.insert(0, 'mean', df.pop(\"mean\"))\n</code></pre>\n<p>This solution is somewhat similar to @JoeHeffer 's solution but this is one liner.</p>\n<p>Here we remove the column <code>\"mean\"</code> from the dataframe and attach it to index <code>0</code> with the same column name.</p>\n", "abstract": "I think this is a slightly neater solution: This solution is somewhat similar to @JoeHeffer 's solution but this is one liner. Here we remove the column \"mean\" from the dataframe and attach it to index 0 with the same column name."}, {"id": 67075968, "score": 27, "vote": 0, "content": "<p>You can reorder the dataframe columns using a list of names with:</p>\n<p><code>df = df.filter(list_of_col_names)</code></p>\n", "abstract": "You can reorder the dataframe columns using a list of names with: df = df.filter(list_of_col_names)"}, {"id": 25535803, "score": 21, "vote": 0, "content": "<p>I ran into a similar question myself, and just wanted to add what I settled on. I liked the <code>reindex_axis() method</code> for changing column order. This worked:</p>\n<pre><code class=\"python\">df = df.reindex_axis(['mean'] + list(df.columns[:-1]), axis=1)\n</code></pre>\n<p>An alternate method based on the comment from @Jorge:</p>\n<pre><code class=\"python\">df = df.reindex(columns=['mean'] + list(df.columns[:-1]))\n</code></pre>\n<p>Although <code>reindex_axis</code> seems to be slightly faster in micro benchmarks than <code>reindex</code>, I think I prefer the latter for its directness.</p>\n", "abstract": "I ran into a similar question myself, and just wanted to add what I settled on. I liked the reindex_axis() method for changing column order. This worked: An alternate method based on the comment from @Jorge: Although reindex_axis seems to be slightly faster in micro benchmarks than reindex, I think I prefer the latter for its directness."}, {"id": 25023460, "score": 20, "vote": 0, "content": "<p>This function avoids you having to list out every variable in your dataset just to order a few of them. </p>\n<pre><code class=\"python\">def order(frame,var):\n    if type(var) is str:\n        var = [var] #let the command take a string or list\n    varlist =[w for w in frame.columns if w not in var]\n    frame = frame[var+varlist]\n    return frame \n</code></pre>\n<p>It takes two arguments, the first is the dataset, the second are the columns in the data set that you want to bring to the front. </p>\n<p>So in my case I have a data set called Frame with variables A1, A2, B1, B2, Total and Date. If I want to bring Total to the front then all I have to do is: </p>\n<pre><code class=\"python\">frame = order(frame,['Total'])\n</code></pre>\n<p>If I want to bring Total and Date to the front then I do:</p>\n<pre><code class=\"python\">frame = order(frame,['Total','Date'])\n</code></pre>\n<p>EDIT:</p>\n<p>Another useful way to use this is, if you have an unfamiliar table and you're looking with variables with a particular term in them, like VAR1, VAR2,... you may execute something like: </p>\n<pre><code class=\"python\">frame = order(frame,[v for v in frame.columns if \"VAR\" in v])\n</code></pre>\n", "abstract": "This function avoids you having to list out every variable in your dataset just to order a few of them.  It takes two arguments, the first is the dataset, the second are the columns in the data set that you want to bring to the front.  So in my case I have a data set called Frame with variables A1, A2, B1, B2, Total and Date. If I want to bring Total to the front then all I have to do is:  If I want to bring Total and Date to the front then I do: EDIT: Another useful way to use this is, if you have an unfamiliar table and you're looking with variables with a particular term in them, like VAR1, VAR2,... you may execute something like: "}, {"id": 29916004, "score": 19, "vote": 0, "content": "<p>Simply do,</p>\n<pre><code class=\"python\">df = df[['mean'] + df.columns[:-1].tolist()]\n</code></pre>\n", "abstract": "Simply do,"}, {"id": 48096340, "score": 17, "vote": 0, "content": "<p>Here's a way to move one existing column that will modify the existing dataframe in place.</p>\n<pre><code class=\"python\">my_column = df.pop('column name')\ndf.insert(3, my_column.name, my_column)  # Is in-place\n</code></pre>\n", "abstract": "Here's a way to move one existing column that will modify the existing dataframe in place."}, {"id": 41042896, "score": 12, "vote": 0, "content": "<p>You could do the following (borrowing parts from Aman's answer):</p>\n<pre><code class=\"python\">cols = df.columns.tolist()\ncols.insert(0, cols.pop(-1))\n\ncols\n&gt;&gt;&gt;['mean', 0L, 1L, 2L, 3L, 4L]\n\ndf = df[cols]\n</code></pre>\n", "abstract": "You could do the following (borrowing parts from Aman's answer):"}, {"id": 37071454, "score": 11, "vote": 0, "content": "<p>Just type the column name you want to change, and set the index for the new location.</p>\n<pre><code class=\"python\">def change_column_order(df, col_name, index):\n    cols = df.columns.tolist()\n    cols.remove(col_name)\n    cols.insert(index, col_name)\n    return df[cols]\n</code></pre>\n<p>For your case, this would be like:</p>\n<pre><code class=\"python\">df = change_column_order(df, 'mean', 0)\n</code></pre>\n", "abstract": "Just type the column name you want to change, and set the index for the new location. For your case, this would be like:"}, {"id": 49010588, "score": 11, "vote": 0, "content": "<p>Moving any column to any position: </p>\n<pre><code class=\"python\">import pandas as pd\ndf = pd.DataFrame({\"A\": [1,2,3], \n                   \"B\": [2,4,8], \n                   \"C\": [5,5,5]})\n\ncols = df.columns.tolist()\ncolumn_to_move = \"C\"\nnew_position = 1\n\ncols.insert(new_position, cols.pop(cols.index(column_to_move)))\ndf = df[cols]\n</code></pre>\n", "abstract": "Moving any column to any position: "}, {"id": 45346504, "score": 7, "vote": 0, "content": "<p>I wanted to bring two columns in front from a dataframe where I do not know exactly the names of all columns, because they are generated from a pivot statement before.\nSo, if you are in the same situation: To bring columns in front that you know the name of and then let them follow by \"all the other columns\", I came up with the following general solution:</p>\n<pre><code class=\"python\">df = df.reindex_axis(['Col1','Col2'] + list(df.columns.drop(['Col1','Col2'])), axis=1)\n</code></pre>\n", "abstract": "I wanted to bring two columns in front from a dataframe where I do not know exactly the names of all columns, because they are generated from a pivot statement before.\nSo, if you are in the same situation: To bring columns in front that you know the name of and then let them follow by \"all the other columns\", I came up with the following general solution:"}, {"id": 62457968, "score": 6, "vote": 0, "content": "<h3>Here is a very simple answer to this(only one line).</h3>\n<p>You can do that after you added the 'n' column into your df as follows.</p>\n<pre><code class=\"python\">import numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame(np.random.rand(10, 5))\ndf['mean'] = df.mean(1)\ndf\n           0           1           2           3           4        mean\n0   0.929616    0.316376    0.183919    0.204560    0.567725    0.440439\n1   0.595545    0.964515    0.653177    0.748907    0.653570    0.723143\n2   0.747715    0.961307    0.008388    0.106444    0.298704    0.424512\n3   0.656411    0.809813    0.872176    0.964648    0.723685    0.805347\n4   0.642475    0.717454    0.467599    0.325585    0.439645    0.518551\n5   0.729689    0.994015    0.676874    0.790823    0.170914    0.672463\n6   0.026849    0.800370    0.903723    0.024676    0.491747    0.449473\n7   0.526255    0.596366    0.051958    0.895090    0.728266    0.559587\n8   0.818350    0.500223    0.810189    0.095969    0.218950    0.488736\n9   0.258719    0.468106    0.459373    0.709510    0.178053    0.414752\n\n\n### here you can add below line and it should work \n# Don't forget the two (()) 'brackets' around columns names.Otherwise, it'll give you an error.\n\ndf = df[list(('mean',0, 1, 2,3,4))]\ndf\n\n        mean           0           1           2           3           4\n0   0.440439    0.929616    0.316376    0.183919    0.204560    0.567725\n1   0.723143    0.595545    0.964515    0.653177    0.748907    0.653570\n2   0.424512    0.747715    0.961307    0.008388    0.106444    0.298704\n3   0.805347    0.656411    0.809813    0.872176    0.964648    0.723685\n4   0.518551    0.642475    0.717454    0.467599    0.325585    0.439645\n5   0.672463    0.729689    0.994015    0.676874    0.790823    0.170914\n6   0.449473    0.026849    0.800370    0.903723    0.024676    0.491747\n7   0.559587    0.526255    0.596366    0.051958    0.895090    0.728266\n8   0.488736    0.818350    0.500223    0.810189    0.095969    0.218950\n9   0.414752    0.258719    0.468106    0.459373    0.709510    0.178053\n\n</code></pre>\n", "abstract": "You can do that after you added the 'n' column into your df as follows."}, {"id": 62727918, "score": 6, "vote": 0, "content": "<p>You can use a set which is an <em>unordered collection of unique elements</em> to do keep the \"order of the other columns untouched\":</p>\n<pre><code class=\"python\">other_columns = list(set(df.columns).difference([\"mean\"])) #[0, 1, 2, 3, 4]\n</code></pre>\n<p>Then, you can use a lambda to move a specific column to the front by:</p>\n<pre><code class=\"python\">In [1]: import numpy as np                                                                               \n\nIn [2]: import pandas as pd                                                                              \n\nIn [3]: df = pd.DataFrame(np.random.rand(10, 5))                                                         \n\nIn [4]: df[\"mean\"] = df.mean(1)                                                                          \n\nIn [5]: move_col_to_front = lambda df, col: df[[col]+list(set(df.columns).difference([col]))]            \n\nIn [6]: move_col_to_front(df, \"mean\")                                                                    \nOut[6]: \n       mean         0         1         2         3         4\n0  0.697253  0.600377  0.464852  0.938360  0.945293  0.537384\n1  0.609213  0.703387  0.096176  0.971407  0.955666  0.319429\n2  0.561261  0.791842  0.302573  0.662365  0.728368  0.321158\n3  0.518720  0.710443  0.504060  0.663423  0.208756  0.506916\n4  0.616316  0.665932  0.794385  0.163000  0.664265  0.793995\n5  0.519757  0.585462  0.653995  0.338893  0.714782  0.305654\n6  0.532584  0.434472  0.283501  0.633156  0.317520  0.994271\n7  0.640571  0.732680  0.187151  0.937983  0.921097  0.423945\n8  0.562447  0.790987  0.200080  0.317812  0.641340  0.862018\n9  0.563092  0.811533  0.662709  0.396048  0.596528  0.348642\n\nIn [7]: move_col_to_front(df, 2)                                                                         \nOut[7]: \n          2         0         1         3         4      mean\n0  0.938360  0.600377  0.464852  0.945293  0.537384  0.697253\n1  0.971407  0.703387  0.096176  0.955666  0.319429  0.609213\n2  0.662365  0.791842  0.302573  0.728368  0.321158  0.561261\n3  0.663423  0.710443  0.504060  0.208756  0.506916  0.518720\n4  0.163000  0.665932  0.794385  0.664265  0.793995  0.616316\n5  0.338893  0.585462  0.653995  0.714782  0.305654  0.519757\n6  0.633156  0.434472  0.283501  0.317520  0.994271  0.532584\n7  0.937983  0.732680  0.187151  0.921097  0.423945  0.640571\n8  0.317812  0.790987  0.200080  0.641340  0.862018  0.562447\n9  0.396048  0.811533  0.662709  0.596528  0.348642  0.563092\n</code></pre>\n", "abstract": "You can use a set which is an unordered collection of unique elements to do keep the \"order of the other columns untouched\": Then, you can use a lambda to move a specific column to the front by:"}, {"id": 61139493, "score": 5, "vote": 0, "content": "<p>Just flipping helps often.</p>\n<pre><code class=\"python\">df[df.columns[::-1]]\n</code></pre>\n<p>Or just shuffle for a look.</p>\n<pre><code class=\"python\">import random\ncols = list(df.columns)\nrandom.shuffle(cols)\ndf[cols]\n</code></pre>\n", "abstract": "Just flipping helps often. Or just shuffle for a look."}, {"id": 47871469, "score": 4, "vote": 0, "content": "<p>You can use <code>reindex</code> which can be used for both axis:</p>\n<pre><code class=\"python\">df\n#           0         1         2         3         4      mean\n# 0  0.943825  0.202490  0.071908  0.452985  0.678397  0.469921\n# 1  0.745569  0.103029  0.268984  0.663710  0.037813  0.363821\n# 2  0.693016  0.621525  0.031589  0.956703  0.118434  0.484254\n# 3  0.284922  0.527293  0.791596  0.243768  0.629102  0.495336\n# 4  0.354870  0.113014  0.326395  0.656415  0.172445  0.324628\n# 5  0.815584  0.532382  0.195437  0.829670  0.019001  0.478415\n# 6  0.944587  0.068690  0.811771  0.006846  0.698785  0.506136\n# 7  0.595077  0.437571  0.023520  0.772187  0.862554  0.538182\n# 8  0.700771  0.413958  0.097996  0.355228  0.656919  0.444974\n# 9  0.263138  0.906283  0.121386  0.624336  0.859904  0.555009\n\ndf.reindex(['mean', *range(5)], axis=1)\n\n#        mean         0         1         2         3         4\n# 0  0.469921  0.943825  0.202490  0.071908  0.452985  0.678397\n# 1  0.363821  0.745569  0.103029  0.268984  0.663710  0.037813\n# 2  0.484254  0.693016  0.621525  0.031589  0.956703  0.118434\n# 3  0.495336  0.284922  0.527293  0.791596  0.243768  0.629102\n# 4  0.324628  0.354870  0.113014  0.326395  0.656415  0.172445\n# 5  0.478415  0.815584  0.532382  0.195437  0.829670  0.019001\n# 6  0.506136  0.944587  0.068690  0.811771  0.006846  0.698785\n# 7  0.538182  0.595077  0.437571  0.023520  0.772187  0.862554\n# 8  0.444974  0.700771  0.413958  0.097996  0.355228  0.656919\n# 9  0.555009  0.263138  0.906283  0.121386  0.624336  0.859904\n</code></pre>\n", "abstract": "You can use reindex which can be used for both axis:"}, {"id": 55638623, "score": 4, "vote": 0, "content": "<p>Hackiest method in the book</p>\n<pre><code class=\"python\">df.insert(0, \"test\", df[\"mean\"])\ndf = df.drop(columns=[\"mean\"]).rename(columns={\"test\": \"mean\"})\n</code></pre>\n", "abstract": "Hackiest method in the book"}, {"id": 61682815, "score": 4, "vote": 0, "content": "<p>A pretty straightforward solution that worked for me is to use <code>.reindex</code> on <code>df.columns</code>:</p>\n<pre><code class=\"python\">df = df[df.columns.reindex(['mean', 0, 1, 2, 3, 4])[0]]\n</code></pre>\n", "abstract": "A pretty straightforward solution that worked for me is to use .reindex on df.columns:"}, {"id": 38044211, "score": 3, "vote": 0, "content": "<p>How about using <code>T</code>?</p>\n<pre><code class=\"python\">df = df.T.reindex(['mean', 0, 1, 2, 3, 4]).T\n</code></pre>\n", "abstract": "How about using T?"}, {"id": 46166838, "score": 3, "vote": 0, "content": "<p>A simple approach is using <strong><code>set()</code></strong>, in particular when you have a long list of columns and do not want to handle them manually:</p>\n<pre><code class=\"python\">cols = list(set(df.columns.tolist()) - set(['mean']))\ncols.insert(0, 'mean')\ndf = df[cols]\n</code></pre>\n", "abstract": "A simple approach is using set(), in particular when you have a long list of columns and do not want to handle them manually:"}, {"id": 48508148, "score": 3, "vote": 0, "content": "<p>Here is a function to do this for any number of columns. </p>\n<pre><code class=\"python\">def mean_first(df):\n    ncols = df.shape[1]        # Get the number of columns\n    index = list(range(ncols)) # Create an index to reorder the columns\n    index.insert(0,ncols)      # This puts the last column at the front\n    return(df.assign(mean=df.mean(1)).iloc[:,index]) # new df with last column (mean) first\n</code></pre>\n", "abstract": "Here is a function to do this for any number of columns. "}, {"id": 29195706, "score": 2, "vote": 0, "content": "<p>I believe <a href=\"https://stackoverflow.com/a/13148611/1082349\">@Aman's answer</a> is the best if you know the location of the other column.</p>\n<p>If you don't know the location of <code>mean</code>, but only have its name, you  cannot resort directly to <code>cols = cols[-1:] + cols[:-1]</code>. Following is the next-best thing I could come up with:</p>\n<pre><code class=\"python\">meanDf = pd.DataFrame(df.pop('mean'))\n# now df doesn't contain \"mean\" anymore. Order of join will move it to left or right:\nmeanDf.join(df) # has mean as first column\ndf.join(meanDf) # has mean as last column\n</code></pre>\n", "abstract": "I believe @Aman's answer is the best if you know the location of the other column. If you don't know the location of mean, but only have its name, you  cannot resort directly to cols = cols[-1:] + cols[:-1]. Following is the next-best thing I could come up with:"}, {"id": 47725257, "score": 2, "vote": 0, "content": "<p>I liked <a href=\"https://stackoverflow.com/a/46166838/9075180\">Shoresh's answer</a> to use set functionality to remove columns when you don't know the location, however this didn't work for my purpose as I need to keep the original column order (which has arbitrary column labels). </p>\n<p>I got this to work though by using <a href=\"http://boltons.readthedocs.io/en/latest/setutils.html#\" rel=\"nofollow noreferrer\">IndexedSet</a> from the boltons package.</p>\n<p>I also needed to re-add multiple column labels, so for a more general case I used the following code:</p>\n<pre><code class=\"python\">from boltons.setutils import IndexedSet\ncols = list(IndexedSet(df.columns.tolist()) - set(['mean', 'std']))\ncols[0:0] =['mean', 'std']\ndf = df[cols]\n</code></pre>\n<p>Hope this is useful to anyone searching this thread for a general solution.</p>\n", "abstract": "I liked Shoresh's answer to use set functionality to remove columns when you don't know the location, however this didn't work for my purpose as I need to keep the original column order (which has arbitrary column labels).  I got this to work though by using IndexedSet from the boltons package. I also needed to re-add multiple column labels, so for a more general case I used the following code: Hope this is useful to anyone searching this thread for a general solution."}, {"id": 58565105, "score": 2, "vote": 0, "content": "<p>Most of the answers did not generalize enough and pandas reindex_axis method is a little tedious, hence I offer a simple function to move an arbitrary number of columns to any position using a dictionary where key = column name and value = position to move to. If your dataframe is large pass True to 'big_data' then the function will return the ordered columns list. And you could use this list to slice your data.</p>\n<pre><code class=\"python\">def order_column(df, columns, big_data = False):\n\n    \"\"\"Re-Orders dataFrame column(s)\n       Parameters : \n       df      -- dataframe\n       columns -- a dictionary:\n                  key   = current column position/index or column name\n                  value = position to move it to  \n       big_data -- boolean \n                  True = returns only the ordered columns as a list\n                          the user user can then slice the data using this\n                          ordered column\n                  False = default - return a copy of the dataframe\n    \"\"\"\n    ordered_col = df.columns.tolist()\n\n    for key, value in columns.items():\n\n        ordered_col.remove(key)\n        ordered_col.insert(value, key)\n\n    if big_data:\n\n        return ordered_col\n\n    return df[ordered_col]\n\n# e.g.\ndf = pd.DataFrame({'chicken wings': np.random.rand(10, 1).flatten(), 'taco': np.random.rand(10,1).flatten(),\n                          'coffee': np.random.rand(10, 1).flatten()})\ndf['mean'] = df.mean(1)\n\ndf = order_column(df, {'mean': 0, 'coffee':1 })\n\n&gt;&gt;&gt;\n</code></pre>\n<p><a href=\"https://i.stack.imgur.com/uqZWm.png\" rel=\"nofollow noreferrer\"><img alt=\"output\" src=\"https://i.stack.imgur.com/uqZWm.png\"/></a></p>\n<pre><code class=\"python\">col = order_column(df, {'mean': 0, 'coffee':1 }, True)\n\ncol\n&gt;&gt;&gt;\n['mean', 'coffee', 'chicken wings', 'taco']\n\n# you could grab it by doing this\n\ndf = df[col]\n\n</code></pre>\n", "abstract": "Most of the answers did not generalize enough and pandas reindex_axis method is a little tedious, hence I offer a simple function to move an arbitrary number of columns to any position using a dictionary where key = column name and value = position to move to. If your dataframe is large pass True to 'big_data' then the function will return the ordered columns list. And you could use this list to slice your data. "}, {"id": 69861512, "score": 2, "vote": 0, "content": "<p>Here's an example of a super easy way to do it. If you're copying the headers from excel use <code>.split('\\t')</code></p>\n<pre><code class=\"python\">df = df['FILE_NAME DISPLAY_PATH SHAREPOINT_PATH RETAILER LAST_UPDATE'.split()]\n</code></pre>\n", "abstract": "Here's an example of a super easy way to do it. If you're copying the headers from excel use .split('\\t')"}, {"id": 59295739, "score": 1, "vote": 0, "content": "<p>I have a very specific use case for re-ordering column names in pandas.  Sometimes I am creating a new column in a dataframe that is based on an existing column.  By default pandas will insert my new column at the end, but I want the new column to be inserted next to the existing column it's derived from.  </p>\n<p><a href=\"https://i.stack.imgur.com/EenQB.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/EenQB.png\"/></a></p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">def rearrange_list(input_list, input_item_to_move, input_item_insert_here):\n    '''\n    Helper function to re-arrange the order of items in a list.\n    Useful for moving column in pandas dataframe.\n\n    Inputs:\n        input_list - list\n        input_item_to_move - item in list to move\n        input_item_insert_here - item in list, insert before \n\n    returns:\n        output_list\n    '''\n    # make copy for output, make sure it's a list\n    output_list = list(input_list)\n\n    # index of item to move\n    idx_move = output_list.index(input_item_to_move)\n\n    # pop off the item to move\n    itm_move = output_list.pop(idx_move)\n\n    # index of item to insert here\n    idx_insert = output_list.index(input_item_insert_here)\n\n    # insert item to move into here\n    output_list.insert(idx_insert, itm_move)\n\n    return output_list\n\n\nimport pandas as pd\n\n# step 1: create sample dataframe\ndf = pd.DataFrame({\n    'motorcycle': ['motorcycle1', 'motorcycle2', 'motorcycle3'],\n    'initial_odometer': [101, 500, 322],\n    'final_odometer': [201, 515, 463],\n    'other_col_1': ['blah', 'blah', 'blah'],\n    'other_col_2': ['blah', 'blah', 'blah']\n})\nprint('Step 1: create sample dataframe')\ndisplay(df)\nprint()\n\n# step 2: add new column that is difference between final and initial\ndf['change_odometer'] = df['final_odometer']-df['initial_odometer']\nprint('Step 2: add new column')\ndisplay(df)\nprint()\n\n# step 3: rearrange columns\nls_cols = df.columns\nls_cols = rearrange_list(ls_cols, 'change_odometer', 'final_odometer')\ndf=df[ls_cols]\nprint('Step 3: rearrange columns')\ndisplay(df)\n</code></pre>\n", "abstract": "I have a very specific use case for re-ordering column names in pandas.  Sometimes I am creating a new column in a dataframe that is based on an existing column.  By default pandas will insert my new column at the end, but I want the new column to be inserted next to the existing column it's derived from.   "}, {"id": 60871877, "score": 1, "vote": 0, "content": "<p>I think this function is more straightforward. You Just need to specify a subset of columns at the start or the end or both:</p>\n<pre><code class=\"python\">def reorder_df_columns(df, start=None, end=None):\n    \"\"\"\n        This function reorder columns of a DataFrame.\n        It takes columns given in the list `start` and move them to the left.\n        Its also takes columns in `end` and move them to the right.\n    \"\"\"\n    if start is None:\n        start = []\n    if end is None:\n        end = []\n    assert isinstance(start, list) and isinstance(end, list)\n    cols = list(df.columns)\n    for c in start:\n        if c not in cols:\n            start.remove(c)\n    for c in end:\n        if c not in cols or c in start:\n            end.remove(c)\n    for c in start + end:\n        cols.remove(c)\n    cols = start + cols + end\n    return df[cols]\n</code></pre>\n", "abstract": "I think this function is more straightforward. You Just need to specify a subset of columns at the start or the end or both:"}, {"id": 66818542, "score": 1, "vote": 0, "content": "<p>Similar to the top answer, there is an alternative using deque() and its rotate() method. The rotate method takes the last element in the list and inserts it to the beginning:</p>\n<pre><code class=\"python\">from collections import deque\n\ncolumns = deque(df.columns.tolist())\ncolumns.rotate()\n\ndf = df[columns]\n</code></pre>\n", "abstract": "Similar to the top answer, there is an alternative using deque() and its rotate() method. The rotate method takes the last element in the list and inserts it to the beginning:"}, {"id": 45839408, "score": 0, "vote": 0, "content": "<p><code>DataFrame.sort_index(axis=1)</code> is quite clean.<a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.sort_index.html\" rel=\"nofollow noreferrer\">Check doc here</a>.\nAnd then <code>concat</code> </p>\n", "abstract": "DataFrame.sort_index(axis=1) is quite clean.Check doc here.\nAnd then concat "}, {"id": 65238542, "score": 0, "vote": 0, "content": "<p>To set an existing column right/left of another, based on their names:</p>\n<pre><code class=\"python\">def df_move_column(df, col_to_move, col_left_of_destiny=\"\", right_of_col_bool=True):\n    cols = list(df.columns.values)\n    index_max = len(cols) - 1\n\n    if not right_of_col_bool:\n        # set left of a column \"c\", is like putting right of column previous to \"c\"\n        # ... except if left of 1st column, then recursive call to set rest right to it\n        aux = cols.index(col_left_of_destiny)\n        if not aux:\n            for g in [x for x in cols[::-1] if x != col_to_move]:\n                df = df_move_column(\n                        df, \n                        col_to_move=g, \n                        col_left_of_destiny=col_to_move\n                        )\n            return df\n        col_left_of_destiny = cols[aux - 1]\n\n    index_old = cols.index(col_to_move)\n    index_new = 0\n    if len(col_left_of_destiny):\n        index_new = cols.index(col_left_of_destiny) + 1\n\n    if index_old == index_new:\n        return df\n\n    if index_new &lt; index_old:\n        index_new = np.min([index_new, index_max])\n        cols = (\n            cols[:index_new]\n            + [cols[index_old]]\n            + cols[index_new:index_old]\n            + cols[index_old + 1 :]\n        )\n    else:\n        cols = (\n            cols[:index_old]\n            + cols[index_old + 1 : index_new]\n            + [cols[index_old]]\n            + cols[index_new:]\n        )\n\n    df = df[cols]\n    return df\n</code></pre>\n<p>E.g.</p>\n<pre><code class=\"python\">cols = list(\"ABCD\")\ndf2 = pd.DataFrame(np.arange(4)[np.newaxis, :], columns=cols)\nfor k in cols:\n    print(30 * \"-\")\n    for g in [x for x in cols if x != k]:\n        df_new = df_move_column(df2, k, g)\n        print(f\"{k} after {g}:  {df_new.columns.values}\")\nfor k in cols:\n    print(30 * \"-\")\n    for g in [x for x in cols if x != k]:\n        df_new = df_move_column(df2, k, g, right_of_col_bool=False)\n        print(f\"{k} before {g}:  {df_new.columns.values}\")\n</code></pre>\n<p>Output:</p>\n<p><a href=\"https://i.stack.imgur.com/LieHi.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/LieHi.png\"/></a></p>\n", "abstract": "To set an existing column right/left of another, based on their names: E.g. Output: "}, {"id": 67398949, "score": 0, "vote": 0, "content": "<p>I thought of the same as Dmitriy Work, clearly easiest answer:</p>\n<pre><code class=\"python\">df[\"mean\"] = df.mean(1)\nl =  list(np.arange(0,len(df.columns) -1 ))\nl.insert(0,-1)\ndf.iloc[:,l]\n</code></pre>\n", "abstract": "I thought of the same as Dmitriy Work, clearly easiest answer:"}, {"id": 68795817, "score": 0, "vote": 0, "content": "<p>Another option would be to use <a href=\"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.set_index.html\" rel=\"nofollow noreferrer\"><code>set_index()</code></a> method followed by a <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.reset_index.html\" rel=\"nofollow noreferrer\"><code>reset_index()</code></a>. Note that we first <code>pop()</code> the column we intend to move to the front of the dataframe, so that we avoid name collision when resetting the index:</p>\n<pre><code class=\"python\">df.set_index(df.pop('column_name'), inplace=True)\ndf.reset_index(inplace=True)\n</code></pre>\n<hr/>\n<p>For more details see <a href=\"https://towardsdatascience.com/how-to-change-the-order-of-dataframe-columns-in-pandas-c91370326053\" rel=\"nofollow noreferrer\">How to change the order of dataframe columns in pandas</a>.</p>\n", "abstract": "Another option would be to use set_index() method followed by a reset_index(). Note that we first pop() the column we intend to move to the front of the dataframe, so that we avoid name collision when resetting the index: For more details see How to change the order of dataframe columns in pandas."}, {"id": 68464246, "score": -2, "vote": 0, "content": "<p>I tried making a order function which you can reorder/move column(s) with reference of order command of Stata. it would be better to make a py file( the name of which may be order.py) and save it in a directory and call it function</p>\n<pre><code class=\"python\">def order(dataframe,cols,f_or_l=None,before=None, after=None):\n\n#\ub9cc\ub4e0\uc774: \uae40\uc644\uc11d, Stata\ub85c \ub69d\ub531\ub69d\ub531 \uc800\uc790, blog.naver.com/sanzo213 \uc6b4\uc601\n# \uac16\ub2e4 \uc4f0\uc2dc\uac70\ub098 \uc218\uc815\uc744 \ud558\uc154\ub3c4 \ub418\uc9c0\ub9cc \ucd9c\ucc98\ub294 \uaf2d \ubc1d\ud600\uc8fc\uc138\uc694\n# cols\uc635\uc158 \ubc0f befor/after\uc635\uc158\uc5d0 \ud29c\ud50c\uc774 \uac00\ub2a5\ud558\uac8c\ub054 \uc218\uc815\ud588\uc73c\uba70, \uc624\ub958\ubb38\uad6c \uc218\uc815\ud568(2021.07.12,1)\n# \uce7c\ub7fc\uc774 \uba40\ud2f0\uc778\ub371\uc2a4\uc778 \uc0c1\ud0dc\uc5d0\uc11c reset_index()\uba54\uc18c\ub4dc \uc0ac\uc6a9\ud588\uc744 \uc2dc \uc801\uc6a9\uc548\ub418\ub294 \uac78 \uc218\uc815\ud568(2021.07.12,2) \n\nimport pandas as pd\nif (type(cols)==str) or (type(cols)==int) or (type(cols)==float) or (type(cols)==bool) or type(cols)==tuple:    \n    cols=[cols]\n    \ndd=list(dataframe.columns)\nfor i in cols:\n    i\n    dd.remove(i) #cols\uc694\uc18c\ub97c \uc81c\uac70\ud568\n    \nif (f_or_l==None) &amp; ((before==None) &amp; (after==None)):\n    print('f_or_l\uc635\uc158\uc744 \uc4f0\uc2dc\uac70\ub098 \uc544\ub2c8\uba74 before\uc635\uc158/after\uc635\uc158 \uc4f0\uc154\uc57c\ub418\uc694')\n    \nif ((f_or_l=='first') or (f_or_l=='last')) &amp; ~((before==None) &amp; (after==None)):\n    print('f_or_l\uc635\uc158 \uc0ac\uc6a9\uc2dc before after \uc635\uc158 \uc0ac\uc6a9\ubd88\uac00\uc785\ub2c8\ub2e4.')\n    \nif (f_or_l=='first') &amp; (before==None) &amp; (after==None):\n    new_order=cols+dd\n    dataframe=dataframe[new_order]\n    return dataframe\n\nif (f_or_l=='last') &amp; (before==None) &amp; (after==None):   \n    new_order=dd+cols\n    dataframe=dataframe[new_order]\n    return dataframe\n    \nif (before!=None) &amp; (after!=None):\n    print('before\uc635\uc158 after\uc635\uc158 \ub458\ub2e4 \uc4f8 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.')\n    \n\nif (before!=None) &amp; (after==None) &amp; (f_or_l==None):\n\n    if not((type(before)==str) or (type(before)==int) or (type(before)==float) or\n       (type(before)==bool) or ((type(before)!=list)) or \n       ((type(before)==tuple))):\n        print('before\uc635\uc158\uc740 \uce7c\ub7fc \ud558\ub098\ub9cc \uc785\ub825\uac00\ub2a5\ud558\uba70 \ub9ac\uc2a4\ud2b8 \ud615\ud0dc\ub85c\ub3c4 \uc785\ub825\ud558\uc9c0 \ub9c8\uc138\uc694.')\n    \n    else:\n        b=dd[:dd.index(before)]\n        a=dd[dd.index(before):]\n        \n        new_order=b+cols+a\n        dataframe=dataframe[new_order]  \n        return dataframe\n    \nif (after!=None) &amp; (before==None) &amp; (f_or_l==None):\n\n    if not((type(after)==str) or (type(after)==int) or (type(after)==float) or\n       (type(after)==bool) or ((type(after)!=list)) or \n       ((type(after)==tuple))):\n            \n        print('after\uc635\uc158\uc740 \uce7c\ub7fc \ud558\ub098\ub9cc \uc785\ub825\uac00\ub2a5\ud558\uba70 \ub9ac\uc2a4\ud2b8 \ud615\ud0dc\ub85c\ub3c4 \uc785\ub825\ud558\uc9c0 \ub9c8\uc138\uc694.')  \n\n    else:\n        b=dd[:dd.index(after)+1]\n        a=dd[dd.index(after)+1:]\n        \n        new_order=b+cols+a\n        dataframe=dataframe[new_order]\n        return dataframe\n</code></pre>\n<p>python code below is an example of order function I made. I hope you can reorder column(s) so easily with my order function :)</p>\n<pre><code class=\"python\"># module\n\nimport pandas as pd\nimport numpy as np\nfrom order import order # call order function from order.py file\n\n# make a dataset\n\ncolumns='a b c d e f g h i j k'.split()\ndic={}\n\nn=-1\nfor i in columns:\n    \n    n+=1\n    dic[i]=list(range(1+n,10+1+n))\ndata=pd.DataFrame(dic)\nprint(data)\n\n# use order function (1) : order column e in the first\n\ndata2=order(data,'e',f_or_l='first')\nprint(data2)\n\n# use order function (2): order column e in the last , \"data\" dataframe\n\nprint(order(data,'e',f_or_l='last'))\n\n\n# use order function (3) : order column i before column c in \"data\" dataframe\n\nprint(order(data,'i',before='c'))\n\n\n# use order function (4) : order column g after column b in \"data\" dataframe\n\nprint(order(data,'g',after='b'))\n\n# use order function (4) : order columns ['c', 'd', 'e'] after column i in \"data\" dataframe\n\nprint(order(data,['c', 'd', 'e'],after='i'))\n</code></pre>\n", "abstract": "I tried making a order function which you can reorder/move column(s) with reference of order command of Stata. it would be better to make a py file( the name of which may be order.py) and save it in a directory and call it function python code below is an example of order function I made. I hope you can reorder column(s) so easily with my order function :)"}]}, {"link": "https://stackoverflow.com/questions/4700614/how-to-put-the-legend-outside-the-plot", "question": {"id": "4700614", "title": "How to put the legend outside the plot", "content": "<p>I have a series of 20 plots (not subplots) to be made in a single figure. I want the legend to be outside of the box. At the same time, I do not want to change the axes, as the size of the figure gets reduced.</p>\n<ol>\n<li>I want to keep the legend box outside the plot area (I want the legend to be outside at the right side of the plot area).</li>\n<li>Is there a way that I reduce the font size of the text inside the legend box, so that the size of the legend box will be small?</li>\n</ol>\n", "abstract": "I have a series of 20 plots (not subplots) to be made in a single figure. I want the legend to be outside of the box. At the same time, I do not want to change the axes, as the size of the figure gets reduced."}, "answers": [{"id": 4701285, "score": 2245, "vote": 0, "content": "<p>There are a number of ways to do what you want.  To add to <a href=\"https://stackoverflow.com/questions/4700614/how-to-put-the-legend-outside-the-plot/4700762#4700762\">what Christian Alis</a> and <a href=\"https://stackoverflow.com/questions/4700614/how-to-put-the-legend-outside-the-plot/4700674#4700674\">Navi already said</a>, you can use the <code>bbox_to_anchor</code> keyword argument to place the legend partially outside the axes and/or decrease the font size.</p>\n<p>Before you consider decreasing the font size (which can make things awfully hard to read), try playing around with placing the legend in different places:</p>\n<p>So, let's start with a generic example:</p>\n<pre><code class=\"python\">import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\n\nfig = plt.figure()\nax = plt.subplot(111)\n\nfor i in xrange(5):\n    ax.plot(x, i * x, label='$y = %ix$' % i)\n\nax.legend()\n\nplt.show()\n</code></pre>\n<p><img alt=\"alt text\" src=\"https://i.stack.imgur.com/LQ8xkm.png\"/></p>\n<p>If we do the same thing, but use the <code>bbox_to_anchor</code> keyword argument we can shift the legend slightly outside the axes boundaries:</p>\n<pre><code class=\"python\">import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\n\nfig = plt.figure()\nax = plt.subplot(111)\n\nfor i in xrange(5):\n    ax.plot(x, i * x, label='$y = %ix$' % i)\n\nax.legend(bbox_to_anchor=(1.1, 1.05))\n\nplt.show()\n</code></pre>\n<p><img alt=\"Alt text\" src=\"https://i.stack.imgur.com/OtE5Um.png\"/></p>\n<p>Similarly, make the legend more horizontal and/or put it at the top of the figure (I'm also turning on rounded corners and a simple drop shadow):</p>\n<pre><code class=\"python\">import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\n\nfig = plt.figure()\nax = plt.subplot(111)\n\nfor i in xrange(5):\n    line, = ax.plot(x, i * x, label='$y = %ix$'%i)\n\nax.legend(loc='upper center', bbox_to_anchor=(0.5, 1.05),\n          ncol=3, fancybox=True, shadow=True)\nplt.show()\n</code></pre>\n<p><img alt=\"alt text\" src=\"https://i.stack.imgur.com/zgtBlm.png\"/></p>\n<p>Alternatively, shrink the current plot's width, and put the legend entirely outside the axis of the figure (note: if you use <a href=\"https://matplotlib.org/3.2.1/tutorials/intermediate/tight_layout_guide.html\" rel=\"noreferrer\"><code>tight_layout()</code></a>, then leave out <code>ax.set_position()</code>:</p>\n<pre><code class=\"python\">import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\n\nfig = plt.figure()\nax = plt.subplot(111)\n\nfor i in xrange(5):\n    ax.plot(x, i * x, label='$y = %ix$'%i)\n\n# Shrink current axis by 20%\nbox = ax.get_position()\nax.set_position([box.x0, box.y0, box.width * 0.8, box.height])\n\n# Put a legend to the right of the current axis\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\n\nplt.show()\n</code></pre>\n<p><img alt=\"Alt text\" src=\"https://i.stack.imgur.com/v34g8m.png\"/></p>\n<p>And in a similar manner, shrink the plot vertically, and put a horizontal legend at the bottom:</p>\n<pre><code class=\"python\">import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\n\nfig = plt.figure()\nax = plt.subplot(111)\n\nfor i in xrange(5):\n    line, = ax.plot(x, i * x, label='$y = %ix$'%i)\n\n# Shrink current axis's height by 10% on the bottom\nbox = ax.get_position()\nax.set_position([box.x0, box.y0 + box.height * 0.1,\n                 box.width, box.height * 0.9])\n\n# Put a legend below current axis\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05),\n          fancybox=True, shadow=True, ncol=5)\n\nplt.show()\n</code></pre>\n<p><img alt=\"Alt text\" src=\"https://i.stack.imgur.com/cXcYam.png\"/></p>\n<p>Have a look at the <a href=\"http://matplotlib.org/users/legend_guide.html#legend-location\" rel=\"noreferrer\">matplotlib legend guide</a>. You might also take a look at <a href=\"http://matplotlib.sourceforge.net/api/pyplot_api.html#matplotlib.pyplot.figlegend\" rel=\"noreferrer\"><code>plt.figlegend()</code></a>.</p>\n", "abstract": "There are a number of ways to do what you want.  To add to what Christian Alis and Navi already said, you can use the bbox_to_anchor keyword argument to place the legend partially outside the axes and/or decrease the font size. Before you consider decreasing the font size (which can make things awfully hard to read), try playing around with placing the legend in different places: So, let's start with a generic example:  If we do the same thing, but use the bbox_to_anchor keyword argument we can shift the legend slightly outside the axes boundaries:  Similarly, make the legend more horizontal and/or put it at the top of the figure (I'm also turning on rounded corners and a simple drop shadow):  Alternatively, shrink the current plot's width, and put the legend entirely outside the axis of the figure (note: if you use tight_layout(), then leave out ax.set_position():  And in a similar manner, shrink the plot vertically, and put a horizontal legend at the bottom:  Have a look at the matplotlib legend guide. You might also take a look at plt.figlegend()."}, {"id": 43439132, "score": 1315, "vote": 0, "content": "<h2>Placing the legend (<code>bbox_to_anchor</code>)</h2>\n<p>A legend is positioned inside the bounding box of the axes using the <code>loc</code> argument to <a href=\"http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.legend\" rel=\"noreferrer\"><code>plt.legend</code></a>. <br/>\nE.g., <code>loc=\"upper right\"</code> places the legend in the upper right corner of the bounding box, which by default extents from <code>(0, 0)</code> to <code>(1, 1)</code> in axes coordinates (or in bounding box notation <code>(x0, y0, width, height) = (0, 0, 1, 1)</code>).</p>\n<p>To place the legend outside of the axes bounding box, one may specify a tuple <code>(x0, y0)</code> of axes coordinates of the lower left corner of the legend.</p>\n<pre><code class=\"python\">plt.legend(loc=(1.04, 0))\n</code></pre>\n<p>A more versatile approach is to manually specify the bounding box into which the legend should be placed, using the <strong><code>bbox_to_anchor</code></strong> argument. One can restrict oneself to supply only the <code>(x0, y0)</code> part of the bbox. This creates a zero span box, out of which the legend will expand in the direction given by the <code>loc</code> argument. E.g.,</p>\n<p><strong><pre>plt.legend(bbox_to_anchor=(1.04, 1), loc=\"upper left\")</pre></strong></p>\n<p>places the legend outside the axes, such that the upper left corner of the legend is at position <code>(1.04, 1)</code> in axes coordinates.</p>\n<p>Further examples are given below, where additionally the interplay between different arguments like <code>mode</code> and <code>ncols</code> are shown.</p>\n<p><a href=\"https://i.stack.imgur.com/OIMyM.png\" rel=\"noreferrer\"><img alt=\"Enter image description here\" src=\"https://i.stack.imgur.com/OIMyM.png\"/></a></p>\n<pre><code class=\"python\">l1 = plt.legend(bbox_to_anchor=(1.04, 1), borderaxespad=0)\nl2 = plt.legend(bbox_to_anchor=(1.04, 0), loc=\"lower left\", borderaxespad=0)\nl3 = plt.legend(bbox_to_anchor=(1.04, 0.5), loc=\"center left\", borderaxespad=0)\nl4 = plt.legend(bbox_to_anchor=(0, 1.02, 1, 0.2), loc=\"lower left\",\n                mode=\"expand\", borderaxespad=0, ncol=3)\nl5 = plt.legend(bbox_to_anchor=(1, 0), loc=\"lower right\",\n                bbox_transform=fig.transFigure, ncol=3)\nl6 = plt.legend(bbox_to_anchor=(0.4, 0.8), loc=\"upper right\")\n</code></pre>\n<p>Details about how to interpret the 4-tuple argument to <code>bbox_to_anchor</code>, as in <code>l4</code>, can be found in <a href=\"https://stackoverflow.com/questions/39803385/what-does-a-4-element-tuple-argument-for-bbox-to-anchor-mean-in-matplotlib\">this question</a>. The <code>mode=\"expand\"</code> expands the legend horizontally inside the bounding box given by the 4-tuple. For a vertically expanded legend, see <a href=\"https://stackoverflow.com/questions/46710546/matplotlib-expand-legend-vertically\">this question</a>.</p>\n<p>Sometimes it may be useful to specify the bounding box in figure coordinates instead of axes coordinates. This is shown in the example <code>l5</code> from above, where the <code>bbox_transform</code> argument is used to put the legend in the lower left corner of the figure.</p>\n<h3>Postprocessing</h3>\n<p>Having placed the legend outside the axes often leads to the undesired situation that it is completely or partially outside the figure canvas.</p>\n<p>Solutions to this problem are:</p>\n<ul>\n<li><p><strong>Adjust the subplot parameters</strong> <br/>\nOne can adjust the subplot parameters such, that the axes take less space inside the figure (and thereby leave more space to the legend) by using <a href=\"http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.subplots_adjust\" rel=\"noreferrer\"><code>plt.subplots_adjust</code></a>. E.g.,</p>\n<pre><code class=\"python\">plt.subplots_adjust(right=0.7)\n</code></pre>\n<p>leaves 30% space on the right-hand side of the figure, where one could place the legend.</p>\n</li>\n<li><p><strong>Tight layout</strong> <br/>\nUsing <a href=\"http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.tight_layout\" rel=\"noreferrer\"><code>plt.tight_layout</code></a> Allows to automatically adjust the subplot parameters such that the elements in the figure sit tight against the figure edges. Unfortunately, the legend is not taken into account in this automatism, but we can supply a rectangle box that the whole subplots area (including labels) will fit into.</p>\n<pre><code class=\"python\">plt.tight_layout(rect=[0, 0, 0.75, 1])\n</code></pre>\n</li>\n<li><p><strong>Saving the figure with <code>bbox_inches = \"tight\"</code></strong> <br/>\nThe argument <code>bbox_inches = \"tight\"</code> to <a href=\"https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.savefig.html\" rel=\"noreferrer\"><code>plt.savefig</code></a> can be used to save the figure such that all artist on the canvas (including the legend) are fit into the saved area. If needed, the figure size is automatically adjusted.</p>\n<pre><code class=\"python\">plt.savefig(\"output.png\", bbox_inches=\"tight\")\n</code></pre>\n</li>\n<li><p><strong>Automatically adjusting the subplot parameters</strong> <br/>\nA way to automatically adjust the subplot position such that the legend fits inside the canvas <strong>without changing the figure size</strong> can be found in this answer: <em><a href=\"https://stackoverflow.com/a/43001737/4124317\">Creating figure with exact size and no padding (and legend outside the axes)</a></em></p>\n</li>\n</ul>\n<p>Comparison between the cases discussed above:</p>\n<p><a href=\"https://i.stack.imgur.com/zqKjY.png\" rel=\"noreferrer\"><img alt=\"Enter image description here\" src=\"https://i.stack.imgur.com/zqKjY.png\"/></a></p>\n<h2>Alternatives</h2>\n<p><strong>A figure legend</strong></p>\n<p>One may use a legend to the figure instead of the axes, <a href=\"https://matplotlib.org/api/_as_gen/matplotlib.figure.Figure.html#matplotlib.figure.Figure.legend\" rel=\"noreferrer\"><code>matplotlib.figure.Figure.legend</code></a>. This has become especially useful for Matplotlib version 2.1 or later, where no special arguments are needed</p>\n<pre><code class=\"python\">fig.legend(loc=7)\n</code></pre>\n<p>to create a legend for all artists in the different axes of the figure. The legend is placed using the <code>loc</code> argument, similar to how it is placed inside an axes, but in reference to the whole figure - hence it will be outside the axes somewhat automatically. What remains is to adjust the subplots such that there is no overlap between the legend and the axes. Here the point <em>\"Adjust the subplot parameters\"</em>  from above will be helpful. An example:</p>\n<pre><code class=\"python\">import numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.linspace(0, 2*np.pi)\ncolors = [\"#7aa0c4\", \"#ca82e1\", \"#8bcd50\", \"#e18882\"]\nfig, axes = plt.subplots(ncols=2)\nfor i in range(4):\n    axes[i//2].plot(x, np.sin(x+i), color=colors[i], label=\"y=sin(x + {})\".format(i))\n\nfig.legend(loc=7)\nfig.tight_layout()\nfig.subplots_adjust(right=0.75)\nplt.show()\n</code></pre>\n<p><a href=\"https://i.stack.imgur.com/v1AU6.png\" rel=\"noreferrer\"><img alt=\"Enter image description here\" src=\"https://i.stack.imgur.com/v1AU6.png\"/></a></p>\n<p><strong>Legend inside dedicated subplot axes</strong></p>\n<p>An alternative to using <code>bbox_to_anchor</code> would be to place the legend in its dedicated subplot axes (<code>lax</code>).\nSince the legend subplot should be smaller than the plot, we may use <code>gridspec_kw={\"width_ratios\":[4, 1]}</code> at axes creation.\nWe can hide the axes <code>lax.axis(\"off\")</code>, but we still put a legend in. The legend handles and labels need to obtained from the real plot via <code>h, l = ax.get_legend_handles_labels()</code> and can then be supplied to the legend in the <code>lax</code> subplot, <code>lax.legend(h, l)</code>. A complete example is below.</p>\n<pre><code class=\"python\">import matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = 6, 2\n\nfig, (ax, lax) = plt.subplots(ncols=2, gridspec_kw={\"width_ratios\":[4, 1]})\nax.plot(x, y, label=\"y=sin(x)\")\n....\n\nh, l = ax.get_legend_handles_labels()\nlax.legend(h, l, borderaxespad=0)\nlax.axis(\"off\")\n\nplt.tight_layout()\nplt.show()\n</code></pre>\n<p>This produces a plot which is visually pretty similar to the plot from above:</p>\n<p><a href=\"https://i.stack.imgur.com/4RrYb.png\" rel=\"noreferrer\"><img alt=\"Enter image description here\" src=\"https://i.stack.imgur.com/4RrYb.png\"/></a></p>\n<p>We could also use the first axes to place the legend, but use the <code>bbox_transform</code> of the legend axes,</p>\n<pre><code class=\"python\">ax.legend(bbox_to_anchor=(0, 0, 1, 1), bbox_transform=lax.transAxes)\nlax.axis(\"off\")\n</code></pre>\n<p>In this approach, we do not need to obtain the legend handles externally, but we need to specify the <code>bbox_to_anchor</code> argument.</p>\n<h3>Further reading and notes:</h3>\n<ul>\n<li>Consider the Matplotlib <a href=\"https://matplotlib.org/stable/tutorials/intermediate/legend_guide.html\" rel=\"noreferrer\">legend guide</a> with some examples of other stuff you want to do with legends.</li>\n<li>Some example code for placing legends for pie charts may directly be found in answer to this question: <a href=\"https://stackoverflow.com/questions/43272206/python-legend-overlaps-with-the-pie-chart\">Python - Legend overlaps with the pie chart</a></li>\n<li>The <code>loc</code> argument can take numbers instead of strings, which make calls shorter, however, they are not very intuitively mapped to each other. Here is the mapping for reference:</li>\n</ul>\n<p><a href=\"https://i.stack.imgur.com/jxecX.png\" rel=\"noreferrer\"><img alt=\"Enter image description here\" src=\"https://i.stack.imgur.com/jxecX.png\"/></a></p>\n", "abstract": "A legend is positioned inside the bounding box of the axes using the loc argument to plt.legend. \nE.g., loc=\"upper right\" places the legend in the upper right corner of the bounding box, which by default extents from (0, 0) to (1, 1) in axes coordinates (or in bounding box notation (x0, y0, width, height) = (0, 0, 1, 1)). To place the legend outside of the axes bounding box, one may specify a tuple (x0, y0) of axes coordinates of the lower left corner of the legend. A more versatile approach is to manually specify the bounding box into which the legend should be placed, using the bbox_to_anchor argument. One can restrict oneself to supply only the (x0, y0) part of the bbox. This creates a zero span box, out of which the legend will expand in the direction given by the loc argument. E.g., plt.legend(bbox_to_anchor=(1.04, 1), loc=\"upper left\") places the legend outside the axes, such that the upper left corner of the legend is at position (1.04, 1) in axes coordinates. Further examples are given below, where additionally the interplay between different arguments like mode and ncols are shown.  Details about how to interpret the 4-tuple argument to bbox_to_anchor, as in l4, can be found in this question. The mode=\"expand\" expands the legend horizontally inside the bounding box given by the 4-tuple. For a vertically expanded legend, see this question. Sometimes it may be useful to specify the bounding box in figure coordinates instead of axes coordinates. This is shown in the example l5 from above, where the bbox_transform argument is used to put the legend in the lower left corner of the figure. Having placed the legend outside the axes often leads to the undesired situation that it is completely or partially outside the figure canvas. Solutions to this problem are: Adjust the subplot parameters \nOne can adjust the subplot parameters such, that the axes take less space inside the figure (and thereby leave more space to the legend) by using plt.subplots_adjust. E.g., leaves 30% space on the right-hand side of the figure, where one could place the legend. Tight layout \nUsing plt.tight_layout Allows to automatically adjust the subplot parameters such that the elements in the figure sit tight against the figure edges. Unfortunately, the legend is not taken into account in this automatism, but we can supply a rectangle box that the whole subplots area (including labels) will fit into. Saving the figure with bbox_inches = \"tight\" \nThe argument bbox_inches = \"tight\" to plt.savefig can be used to save the figure such that all artist on the canvas (including the legend) are fit into the saved area. If needed, the figure size is automatically adjusted. Automatically adjusting the subplot parameters \nA way to automatically adjust the subplot position such that the legend fits inside the canvas without changing the figure size can be found in this answer: Creating figure with exact size and no padding (and legend outside the axes) Comparison between the cases discussed above:  A figure legend One may use a legend to the figure instead of the axes, matplotlib.figure.Figure.legend. This has become especially useful for Matplotlib version 2.1 or later, where no special arguments are needed to create a legend for all artists in the different axes of the figure. The legend is placed using the loc argument, similar to how it is placed inside an axes, but in reference to the whole figure - hence it will be outside the axes somewhat automatically. What remains is to adjust the subplots such that there is no overlap between the legend and the axes. Here the point \"Adjust the subplot parameters\"  from above will be helpful. An example:  Legend inside dedicated subplot axes An alternative to using bbox_to_anchor would be to place the legend in its dedicated subplot axes (lax).\nSince the legend subplot should be smaller than the plot, we may use gridspec_kw={\"width_ratios\":[4, 1]} at axes creation.\nWe can hide the axes lax.axis(\"off\"), but we still put a legend in. The legend handles and labels need to obtained from the real plot via h, l = ax.get_legend_handles_labels() and can then be supplied to the legend in the lax subplot, lax.legend(h, l). A complete example is below. This produces a plot which is visually pretty similar to the plot from above:  We could also use the first axes to place the legend, but use the bbox_transform of the legend axes, In this approach, we do not need to obtain the legend handles externally, but we need to specify the bbox_to_anchor argument. "}, {"id": 24544116, "score": 189, "vote": 0, "content": "<p>Just call <code>legend()</code> after the <code>plot()</code> call like this:</p>\n<pre><code class=\"python\"># Matplotlib\nplt.plot(...)\nplt.legend(loc='center left', bbox_to_anchor=(1, 0.5))\n\n# Pandas\ndf.myCol.plot().legend(loc='center left', bbox_to_anchor=(1, 0.5))\n</code></pre>\n<p>Results would look something like this:</p>\n<p><img alt=\"Enter image description here\" src=\"https://i.stack.imgur.com/5fgie.png\"/></p>\n", "abstract": "Just call legend() after the plot() call like this: Results would look something like this: "}, {"id": 4700674, "score": 182, "vote": 0, "content": "<ul>\n<li>You can make the legend text smaller by specifying <code>set_size</code> of <code>FontProperties</code>.</li>\n<li>Resources:\n<ul>\n<li><a href=\"https://matplotlib.org/tutorials/intermediate/legend_guide.html#legend-guide\" rel=\"nofollow noreferrer\">Legend guide</a></li>\n<li><a href=\"https://matplotlib.org/api/legend_api.html\" rel=\"nofollow noreferrer\"><code>matplotlib.legend</code></a></li>\n<li><a href=\"https://matplotlib.org/api/_as_gen/matplotlib.pyplot.legend.html#matplotlib.pyplot.legend\" rel=\"nofollow noreferrer\"><code>matplotlib.pyplot.legend</code></a></li>\n<li><a href=\"https://matplotlib.org/3.3.1/api/font_manager_api.html\" rel=\"nofollow noreferrer\"><code>matplotlib.font_manager</code></a>\n<ul>\n<li><a href=\"https://matplotlib.org/3.3.1/api/font_manager_api.html#matplotlib.font_manager.FontProperties.set_size\" rel=\"nofollow noreferrer\"><code>set_size(self, size)</code></a></li>\n<li>Valid font size are <em>xx-small</em>, <em>x-small</em>, <em>small</em>, <em>medium</em>, <em>large</em>, <em>x-large</em>, <em>xx-large</em>, <em>larger</em>, <em>smaller</em>, and <em>None</em>.</li>\n</ul>\n</li>\n<li><a href=\"https://realpython.com/python-matplotlib-guide/\" rel=\"nofollow noreferrer\">Real Python: Python Plotting With Matplotlib (Guide)</a></li>\n</ul>\n</li>\n</ul>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">import matplotlib.pyplot as plt\nfrom matplotlib.font_manager import FontProperties\n\nfontP = FontProperties()\nfontP.set_size('xx-small')\n\np1, = plt.plot([1, 2, 3], label='Line 1')\np2, = plt.plot([3, 2, 1], label='Line 2')\nplt.legend(handles=[p1, p2], title='title', bbox_to_anchor=(1.05, 1), loc='upper left', prop=fontP)\n</code></pre>\n<p><a href=\"https://i.stack.imgur.com/OMgiC.png\" rel=\"nofollow noreferrer\"><img alt=\"Enter image description here\" src=\"https://i.stack.imgur.com/OMgiC.png\"/></a></p>\n<ul>\n<li><code>fontsize='xx-small'</code> also works, without importing <code>FontProperties</code>.</li>\n</ul>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">plt.legend(handles=[p1, p2], title='title', bbox_to_anchor=(1.05, 1), loc='upper left', fontsize='xx-small')\n</code></pre>\n", "abstract": ""}, {"id": 4700762, "score": 102, "vote": 0, "content": "<p>To place the legend outside the plot area, use <code>loc</code> and <code>bbox_to_anchor</code> keywords of <code>legend()</code>. For example, the following code will place the legend to the right of the plot area:</p>\n<pre><code class=\"python\">legend(loc=\"upper left\", bbox_to_anchor=(1,1))\n</code></pre>\n<p>For more info, see the <a href=\"http://matplotlib.org/users/legend_guide.html#plotting-guide-legend\" rel=\"noreferrer\">legend guide</a></p>\n", "abstract": "To place the legend outside the plot area, use loc and bbox_to_anchor keywords of legend(). For example, the following code will place the legend to the right of the plot area: For more info, see the legend guide"}, {"id": 25344713, "score": 90, "vote": 0, "content": "<p>Short answer: you can use <code>bbox_to_anchor</code> + <code>bbox_extra_artists</code> + <code>bbox_inches='tight'</code>.</p>\n<hr/>\n<p>Longer answer:\nYou can use <code>bbox_to_anchor</code> to manually specify the location of the legend box, as some other people have pointed out in the answers. </p>\n<p>However, the usual issue is that the legend box is cropped, e.g.:</p>\n<pre><code class=\"python\">import matplotlib.pyplot as plt\n\n# data \nall_x = [10,20,30]\nall_y = [[1,3], [1.5,2.9],[3,2]]\n\n# Plot\nfig = plt.figure(1)\nax = fig.add_subplot(111)\nax.plot(all_x, all_y)\n\n# Add legend, title and axis labels\nlgd = ax.legend( [ 'Lag ' + str(lag) for lag in all_x], loc='center right', bbox_to_anchor=(1.3, 0.5))\nax.set_title('Title')\nax.set_xlabel('x label')\nax.set_ylabel('y label')\n\nfig.savefig('image_output.png', dpi=300, format='png')\n</code></pre>\n<p><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/DWe9y.png\"/></p>\n<p>In order to prevent the legend box from getting cropped, when you save the figure you can use the parameters <code>bbox_extra_artists</code> and <code>bbox_inches</code> to ask <code>savefig</code> to include cropped elements in the saved image:</p>\n<p><code>fig.savefig('image_output.png', bbox_extra_artists=(lgd,), bbox_inches='tight')</code></p>\n<p>Example (I only changed the last line to add 2 parameters to <code>fig.savefig()</code>):</p>\n<pre><code class=\"python\">import matplotlib.pyplot as plt\n\n# data \nall_x = [10,20,30]\nall_y = [[1,3], [1.5,2.9],[3,2]]\n\n# Plot\nfig = plt.figure(1)\nax = fig.add_subplot(111)\nax.plot(all_x, all_y)\n\n# Add legend, title and axis labels\nlgd = ax.legend( [ 'Lag ' + str(lag) for lag in all_x], loc='center right', bbox_to_anchor=(1.3, 0.5))\nax.set_title('Title')\nax.set_xlabel('x label')\nax.set_ylabel('y label')    \n\nfig.savefig('image_output.png', dpi=300, format='png', bbox_extra_artists=(lgd,), bbox_inches='tight')\n</code></pre>\n<p><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/xGq1Y.png\"/></p>\n<p>I wish that matplotlib would natively allow outside location for the legend box as <a href=\"http://www.mathworks.com/help/matlab/ref/legend.html\" rel=\"noreferrer\">Matlab does</a>:</p>\n<pre><code class=\"python\">figure\nx = 0:.2:12;\nplot(x,besselj(1,x),x,besselj(2,x),x,besselj(3,x));\nhleg = legend('First','Second','Third',...\n              'Location','NorthEastOutside')\n% Make the text of the legend italic and color it brown\nset(hleg,'FontAngle','italic','TextColor',[.3,.2,.1])\n</code></pre>\n<p><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/bUGFR.png\"/></p>\n", "abstract": "Short answer: you can use bbox_to_anchor + bbox_extra_artists + bbox_inches='tight'. Longer answer:\nYou can use bbox_to_anchor to manually specify the location of the legend box, as some other people have pointed out in the answers.  However, the usual issue is that the legend box is cropped, e.g.:  In order to prevent the legend box from getting cropped, when you save the figure you can use the parameters bbox_extra_artists and bbox_inches to ask savefig to include cropped elements in the saved image: fig.savefig('image_output.png', bbox_extra_artists=(lgd,), bbox_inches='tight') Example (I only changed the last line to add 2 parameters to fig.savefig()):  I wish that matplotlib would natively allow outside location for the legend box as Matlab does: "}, {"id": 27355247, "score": 70, "vote": 0, "content": "<p>In addition to all the excellent answers here, newer versions of <code>matplotlib</code> and <code>pylab</code> can <strong>automatically determine where to put the legend without interfering with the plots</strong>, if possible.</p>\n<pre><code class=\"python\">pylab.legend(loc='best')\n</code></pre>\n<p>This will automatically place the legend away from the data if possible!</p>\n<p><img alt=\"Compare the use of loc='best'\" src=\"https://i.stack.imgur.com/NDq48.png\"/></p>\n<p>However, if there isn't any place to put the legend without overlapping the data, then you'll want to try one of the other answers; using <code>loc=\"best\"</code> will never put the legend <em>outside</em> of the plot.</p>\n", "abstract": "In addition to all the excellent answers here, newer versions of matplotlib and pylab can automatically determine where to put the legend without interfering with the plots, if possible. This will automatically place the legend away from the data if possible!  However, if there isn't any place to put the legend without overlapping the data, then you'll want to try one of the other answers; using loc=\"best\" will never put the legend outside of the plot."}, {"id": 14988532, "score": 57, "vote": 0, "content": "<p><strong>Short Answer</strong>: Invoke draggable on the legend and interactively move it wherever you want:</p>\n<pre><code class=\"python\">ax.legend().draggable()\n</code></pre>\n<p><strong>Long Answer</strong>: If you rather prefer to place the legend interactively/manually rather than programmatically, you can toggle the draggable mode of the legend so that you can drag it to wherever you want. Check the example below:</p>\n<pre><code class=\"python\">import matplotlib.pylab as plt\nimport numpy as np\n#define the figure and get an axes instance\nfig = plt.figure()\nax = fig.add_subplot(111)\n#plot the data\nx = np.arange(-5, 6)\nax.plot(x, x*x, label='y = x^2')\nax.plot(x, x*x*x, label='y = x^3')\nax.legend().draggable()\nplt.show()\n</code></pre>\n", "abstract": "Short Answer: Invoke draggable on the legend and interactively move it wherever you want: Long Answer: If you rather prefer to place the legend interactively/manually rather than programmatically, you can toggle the draggable mode of the legend so that you can drag it to wherever you want. Check the example below:"}, {"id": 61050261, "score": 17, "vote": 0, "content": "<p>Newer versions of Matplotlib have made it much easier to position the legend outside the plot. I produced this example with Matplotlib version <code>3.1.1</code>.</p>\n<p>Users can pass a 2-tuple of coordinates to the <code>loc</code> parameter to position the legend anywhere in the bounding box. The only gotcha is you need to run <code>plt.tight_layout()</code> to get matplotlib to recompute the plot dimensions so the legend is visible:</p>\n<pre><code class=\"python\">import matplotlib.pyplot as plt\n\nplt.plot([0, 1], [0, 1], label=\"Label 1\")\nplt.plot([0, 1], [0, 2], label='Label 2')\n\nplt.legend(loc=(1.05, 0.5))\nplt.tight_layout()\n</code></pre>\n<p>This leads to the following plot:</p>\n<p><a href=\"https://i.stack.imgur.com/MpHTh.png\" rel=\"nofollow noreferrer\"><img alt=\"Plot with legend outside\" src=\"https://i.stack.imgur.com/MpHTh.png\"/></a></p>\n<p>References:</p>\n<ul>\n<li><em><a href=\"https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.legend.html\" rel=\"nofollow noreferrer\">matplotlib.pyplot.legend</a></em></li>\n</ul>\n", "abstract": "Newer versions of Matplotlib have made it much easier to position the legend outside the plot. I produced this example with Matplotlib version 3.1.1. Users can pass a 2-tuple of coordinates to the loc parameter to position the legend anywhere in the bounding box. The only gotcha is you need to run plt.tight_layout() to get matplotlib to recompute the plot dimensions so the legend is visible: This leads to the following plot:  References:"}, {"id": 23139642, "score": 16, "vote": 0, "content": "<p>It is not exactly what you asked for, but I found it's an alternative for the same problem.</p>\n<p>Make the legend semitransparent, like so:</p>\n<p><img alt=\"Matplotlib plot with semitransparent legend and semitransparent text box\" src=\"https://i.stack.imgur.com/foCZw.png\"/></p>\n<p>Do this with:</p>\n<pre><code class=\"python\">fig = pylab.figure()\nax = fig.add_subplot(111)\nax.plot(x, y, label=label, color=color)\n# Make the legend transparent:\nax.legend(loc=2, fontsize=10, fancybox=True).get_frame().set_alpha(0.5)\n# Make a transparent text box\nax.text(0.02, 0.02, yourstring, verticalalignment='bottom',\n                    horizontalalignment='left',\n                    fontsize=10,\n                    bbox={'facecolor':'white', 'alpha':0.6, 'pad':10},\n                    transform=self.ax.transAxes)\n</code></pre>\n", "abstract": "It is not exactly what you asked for, but I found it's an alternative for the same problem. Make the legend semitransparent, like so:  Do this with:"}, {"id": 21659899, "score": 11, "vote": 0, "content": "<p>As noted, you could also place the legend in the plot, or slightly off it to the edge as well. Here is an example using the <a href=\"http://plot.ly/api/python\" rel=\"noreferrer\">Plotly Python API</a>, made with an <a href=\"http://nbviewer.ipython.org/github/plotly/IPython-plotly/blob/master/Plotly%20gets%20LaTeXy.ipynb\" rel=\"noreferrer\">IPython Notebook</a>. I'm on the team. </p>\n<p>To begin, you'll want to install the necessary packages:</p>\n<pre><code class=\"python\">import plotly\nimport math\nimport random\nimport numpy as np\n</code></pre>\n<p>Then, install Plotly:</p>\n<pre><code class=\"python\">un='IPython.Demo'\nk='1fw3zw2o13'\npy = plotly.plotly(username=un, key=k)\n\n\ndef sin(x,n):\nsine = 0\nfor i in range(n):\n    sign = (-1)**i\n    sine = sine + ((x**(2.0*i+1))/math.factorial(2*i+1))*sign\nreturn sine\n\nx = np.arange(-12,12,0.1)\n\nanno = {\n'text': '$\\\\sum_{k=0}^{\\\\infty} \\\\frac {(-1)^k x^{1+2k}}{(1 + 2k)!}$',\n'x': 0.3, 'y': 0.6,'xref': \"paper\", 'yref': \"paper\",'showarrow': False,\n'font':{'size':24}\n}\n\nl = {\n'annotations': [anno], \n'title': 'Taylor series of sine',\n'xaxis':{'ticks':'','linecolor':'white','showgrid':False,'zeroline':False},\n'yaxis':{'ticks':'','linecolor':'white','showgrid':False,'zeroline':False},\n'legend':{'font':{'size':16},'bordercolor':'white','bgcolor':'#fcfcfc'}\n}\n\npy.iplot([{'x':x, 'y':sin(x,1), 'line':{'color':'#e377c2'}, 'name':'$x\\\\\\\\$'},\\\n      {'x':x, 'y':sin(x,2), 'line':{'color':'#7f7f7f'},'name':'$ x-\\\\frac{x^3}{6}$'},\\\n      {'x':x, 'y':sin(x,3), 'line':{'color':'#bcbd22'},'name':'$ x-\\\\frac{x^3}{6}+\\\\frac{x^5}{120}$'},\\\n      {'x':x, 'y':sin(x,4), 'line':{'color':'#17becf'},'name':'$ x-\\\\frac{x^5}{120}$'}], layout=l)\n</code></pre>\n<p>This creates your graph, and allows you a chance to keep the legend within the plot itself. The default for the legend if it is not set is to place it in the plot, as shown here.  </p>\n<p><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/SZgAG.png\"/></p>\n<p>For an alternative placement, you can closely align the edge of the graph and border of the legend, and remove border lines for a closer fit. </p>\n<p><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/Ev3xA.png\"/></p>\n<p>You can move and re-style the legend and graph with code, or with the GUI. To shift the legend, you have the following options to position the legend inside the graph by assigning x and y values of &lt;= 1. E.g : </p>\n<ul>\n<li><code>{\"x\" : 0,\"y\" : 0}</code> -- Bottom Left </li>\n<li><code>{\"x\" : 1, \"y\" : 0}</code> -- Bottom Right </li>\n<li><code>{\"x\" : 1, \"y\" : 1}</code> -- Top Right </li>\n<li><code>{\"x\" : 0, \"y\" : 1}</code> -- Top Left </li>\n<li><code>{\"x\" :.5, \"y\" : 0}</code> -- Bottom Center </li>\n<li><code>{\"x\": .5, \"y\" : 1}</code> -- Top Center</li>\n</ul>\n<p>In this case, we choose the upper right, <code>legendstyle = {\"x\" : 1, \"y\" : 1}</code>, also described in <a href=\"http://plot.ly/api/python/docs/legends\" rel=\"noreferrer\">the documentation</a>:</p>\n<p><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/O8vCG.png\"/></p>\n", "abstract": "As noted, you could also place the legend in the plot, or slightly off it to the edge as well. Here is an example using the Plotly Python API, made with an IPython Notebook. I'm on the team.  To begin, you'll want to install the necessary packages: Then, install Plotly: This creates your graph, and allows you a chance to keep the legend within the plot itself. The default for the legend if it is not set is to place it in the plot, as shown here.    For an alternative placement, you can closely align the edge of the graph and border of the legend, and remove border lines for a closer fit.   You can move and re-style the legend and graph with code, or with the GUI. To shift the legend, you have the following options to position the legend inside the graph by assigning x and y values of <= 1. E.g :  In this case, we choose the upper right, legendstyle = {\"x\" : 1, \"y\" : 1}, also described in the documentation: "}, {"id": 42805773, "score": 9, "vote": 0, "content": "<p>I simply used the string <code>'center left'</code> for the location, like in <a href=\"https://en.wikipedia.org/wiki/MATLAB\" rel=\"nofollow noreferrer\">MATLAB</a>.</p>\n<p>I imported pylab from Matplotlib.</p>\n<p>See the code as follows:</p>\n<pre><code class=\"python\">from matplotlib as plt\nfrom matplotlib.font_manager import FontProperties\n\nt = A[:, 0]\nsensors = A[:, index_lst]\n\nfor i in range(sensors.shape[1]):\n    plt.plot(t, sensors[:, i])\n\nplt.xlabel('s')\nplt.ylabel('\u00b0C')\nlgd = plt.legend(loc='center left', bbox_to_anchor=(1, 0.5), fancybox = True, shadow = True)\n</code></pre>\n<p><a href=\"https://i.stack.imgur.com/dNQCa.png\" rel=\"nofollow noreferrer\"><img alt=\"Enter image description here\" src=\"https://i.stack.imgur.com/dNQCa.png\"/></a></p>\n", "abstract": "I simply used the string 'center left' for the location, like in MATLAB. I imported pylab from Matplotlib. See the code as follows: "}, {"id": 4710783, "score": 3, "vote": 0, "content": "<p>You can also try <code>figlegend</code>.  It is possible to create a legend independent of any Axes object.  However, you may need to create some \"dummy\" Paths to make sure the formatting for the objects gets passed on correctly.</p>\n", "abstract": "You can also try figlegend.  It is possible to create a legend independent of any Axes object.  However, you may need to create some \"dummy\" Paths to make sure the formatting for the objects gets passed on correctly."}, {"id": 20714126, "score": 3, "vote": 0, "content": "<p>Something along these lines worked for me. Starting with a bit of code taken from Joe, this method modifies the window width to automatically fit a legend to the right of the figure.</p>\n<pre><code class=\"python\">import matplotlib.pyplot as plt\nimport numpy as np\n\nplt.ion()\n\nx = np.arange(10)\n\nfig = plt.figure()\nax = plt.subplot(111)\n\nfor i in xrange(5):\n    ax.plot(x, i * x, label='$y = %ix$'%i)\n\n# Put a legend to the right of the current axis\nleg = ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\n\nplt.draw()\n\n# Get the ax dimensions.\nbox = ax.get_position()\nxlocs = (box.x0,box.x1)\nylocs = (box.y0,box.y1)\n\n# Get the figure size in inches and the dpi.\nw, h = fig.get_size_inches()\ndpi = fig.get_dpi()\n\n# Get the legend size, calculate new window width and change the figure size.\nlegWidth = leg.get_window_extent().width\nwinWidthNew = w*dpi+legWidth\nfig.set_size_inches(winWidthNew/dpi,h)\n\n# Adjust the window size to fit the figure.\nmgr = plt.get_current_fig_manager()\nmgr.window.wm_geometry(\"%ix%i\"%(winWidthNew,mgr.window.winfo_height()))\n\n# Rescale the ax to keep its original size.\nfactor = w*dpi/winWidthNew\nx0 = xlocs[0]*factor\nx1 = xlocs[1]*factor\nwidth = box.width*factor\nax.set_position([x0,ylocs[0],x1-x0,ylocs[1]-ylocs[0]])\n\nplt.draw()\n</code></pre>\n", "abstract": "Something along these lines worked for me. Starting with a bit of code taken from Joe, this method modifies the window width to automatically fit a legend to the right of the figure."}, {"id": 39193743, "score": 2, "vote": 0, "content": "<p>The solution that worked for me when I had a huge legend was to use an extra empty image layout.</p>\n<p>In the following example, I made four rows and at the bottom I plotted the image with an offset for the legend (bbox_to_anchor). At the top it does not get cut.</p>\n<pre><code class=\"python\">f = plt.figure()\nax = f.add_subplot(414)\nlgd = ax.legend(loc='upper left', bbox_to_anchor=(0, 4), mode=\"expand\", borderaxespad=0.3)\nax.autoscale_view()\nplt.savefig(fig_name, format='svg', dpi=1200, bbox_extra_artists=(lgd,), bbox_inches='tight')\n</code></pre>\n", "abstract": "The solution that worked for me when I had a huge legend was to use an extra empty image layout. In the following example, I made four rows and at the bottom I plotted the image with an offset for the legend (bbox_to_anchor). At the top it does not get cut."}, {"id": 41889297, "score": 2, "vote": 0, "content": "<p>Here's another solution, similar to adding <code>bbox_extra_artists</code> and <code>bbox_inches</code>, where you don't have to have your extra artists in the scope of your <code>savefig</code> call. I came up with this since I generate most of my plot inside functions.</p>\n<p>Instead of adding all your additions to the bounding box when you want to write it out, you can add them ahead of time to the <code>Figure</code>'s artists. Using something similar to <a href=\"https://stackoverflow.com/a/25344713/3841270\">Franck Dernoncourt's answer</a>:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">import matplotlib.pyplot as plt\n\n# Data\nall_x = [10, 20, 30]\nall_y = [[1, 3], [1.5, 2.9], [3, 2]]\n\n# Plotting function\ndef gen_plot(x, y):\n    fig = plt.figure(1)\n    ax = fig.add_subplot(111)\n    ax.plot(all_x, all_y)\n    lgd = ax.legend([\"Lag \" + str(lag) for lag in all_x], loc=\"center right\", bbox_to_anchor=(1.3, 0.5))\n    fig.artists.append(lgd) # Here's the change\n    ax.set_title(\"Title\")\n    ax.set_xlabel(\"x label\")\n    ax.set_ylabel(\"y label\")\n    return fig\n\n# Plotting\nfig = gen_plot(all_x, all_y)\n\n# No need for `bbox_extra_artists`\nfig.savefig(\"image_output.png\", dpi=300, format=\"png\", bbox_inches=\"tight\")\n</code></pre>\n<p><img alt=\"Here's the generated plot\" src=\"https://i.stack.imgur.com/0Wvr4.png\"/>.</p>\n", "abstract": "Here's another solution, similar to adding bbox_extra_artists and bbox_inches, where you don't have to have your extra artists in the scope of your savefig call. I came up with this since I generate most of my plot inside functions. Instead of adding all your additions to the bounding box when you want to write it out, you can add them ahead of time to the Figure's artists. Using something similar to Franck Dernoncourt's answer: ."}, {"id": 24147086, "score": 1, "vote": 0, "content": "<p>Here is an example from the matplotlib tutorial found <a href=\"http://matplotlib.org/users/legend_guide.html\" rel=\"nofollow\">here</a>. This is one of the more simpler examples but I added transparency to the legend and added plt.show() so you can paste this into the interactive shell and get a result:</p>\n<pre><code class=\"python\">import matplotlib.pyplot as plt\np1, = plt.plot([1, 2, 3])\np2, = plt.plot([3, 2, 1])\np3, = plt.plot([2, 3, 1])\nplt.legend([p2, p1, p3], [\"line 1\", \"line 2\", \"line 3\"]).get_frame().set_alpha(0.5)\nplt.show()\n</code></pre>\n", "abstract": "Here is an example from the matplotlib tutorial found here. This is one of the more simpler examples but I added transparency to the legend and added plt.show() so you can paste this into the interactive shell and get a result:"}]}, {"link": "https://stackoverflow.com/questions/1471994/what-is-setup-py", "question": {"id": "1471994", "title": "What is setup.py?", "content": "<p>What is <code>setup.py</code> and how can it be configured or used?</p>\n", "abstract": "What is setup.py and how can it be configured or used?"}, "answers": [{"id": 1472014, "score": 1050, "vote": 0, "content": "<p><code>setup.py</code> is a python file, the presence of which is an indication that the module/package you are about to install has likely been packaged and distributed with Distutils, which is the standard for distributing Python Modules.<br/></p>\n<p>This allows you to easily install Python packages. Often it's enough to write:</p>\n<pre><code class=\"python\">$ pip install . \n</code></pre>\n<p><code>pip</code> will use <code>setup.py</code> to install your module. Avoid calling <code>setup.py</code> directly.</p>\n<p><a href=\"https://docs.python.org/3/installing/index.html#installing-index\" rel=\"noreferrer\">https://docs.python.org/3/installing/index.html#installing-index</a></p>\n", "abstract": "setup.py is a python file, the presence of which is an indication that the module/package you are about to install has likely been packaged and distributed with Distutils, which is the standard for distributing Python Modules. This allows you to easily install Python packages. Often it's enough to write: pip will use setup.py to install your module. Avoid calling setup.py directly. https://docs.python.org/3/installing/index.html#installing-index"}, {"id": 39811884, "score": 744, "vote": 0, "content": "<p>It helps to install a python package <code>foo</code> on your machine (can also be in <code>virtualenv</code>) so that you can import the package <code>foo</code> from other projects and also from [I]Python prompts.</p>\n<p><em><strong>It does the similar job of <code>pip</code>, <code>easy_install</code> etc.,</strong></em></p>\n<hr/>\n<p><strong>Using <code>setup.py</code></strong></p>\n<p>Let's start with some definitions:</p>\n<p><em>Package</em> - A folder/directory that contains <code>__init__.py</code> file.\n<em>Module</em>  - A valid python file with <code>.py</code> extension.\n<em>Distribution</em> - How one <em>package</em> relates to other <em>packages</em> and <em>modules</em>.</p>\n<p>Let's say you want to install a package named <code>foo</code>. Then you do,</p>\n<pre><code class=\"python\">$ git clone https://github.com/user/foo\n$ cd foo\n$ python setup.py install\n</code></pre>\n<p>Instead, if you don't want to actually install it but still would like to use it. Then do,</p>\n<pre><code class=\"python\">$ python setup.py develop\n</code></pre>\n<p>This command will create symlinks to the source directory within site-packages instead of copying things. Because of this, it is quite fast (particularly for large packages).</p>\n<hr/>\n<p><strong>Creating <code>setup.py</code></strong></p>\n<p>If you have your package tree like,</p>\n<pre><code class=\"python\">foo\n\u251c\u2500\u2500 foo\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 data_struct.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 internals.py\n\u251c\u2500\u2500 README\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 setup.py\n</code></pre>\n<p>Then, you do the following in your <strong><code>setup.py</code></strong> script so that it can be installed on some machine:</p>\n<pre><code class=\"python\">from setuptools import setup\n\nsetup(\n   name='foo',\n   version='1.0',\n   description='A useful module',\n   author='Man Foo',\n   author_email='foomail@foo.example',\n   packages=['foo'],  #same as name\n   install_requires=['wheel', 'bar', 'greek'], #external packages as dependencies\n)\n</code></pre>\n<p>Instead, if your package tree is more complex like the one below:</p>\n<pre><code class=\"python\">foo\n\u251c\u2500\u2500 foo\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 data_struct.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 internals.py\n\u251c\u2500\u2500 README\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 scripts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 cool\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 skype\n\u2514\u2500\u2500 setup.py\n</code></pre>\n<p>Then, your <strong><code>setup.py</code></strong> in this case would be like:</p>\n<pre><code class=\"python\">from setuptools import setup\n\nsetup(\n   name='foo',\n   version='1.0',\n   description='A useful module',\n   author='Man Foo',\n   author_email='foomail@foo.example',\n   packages=['foo'],  #same as name\n   install_requires=['wheel', 'bar', 'greek'], #external packages as dependencies\n   scripts=[\n            'scripts/cool',\n            'scripts/skype',\n           ]\n)\n</code></pre>\n<hr/>\n<p><strong>Add more stuff to (<code>setup.py</code>)</strong> &amp; make it decent:</p>\n<pre><code class=\"python\">from setuptools import setup\n\nwith open(\"README\", 'r') as f:\n    long_description = f.read()\n\nsetup(\n   name='foo',\n   version='1.0',\n   description='A useful module',\n   license=\"MIT\",\n   long_description=long_description,\n   author='Man Foo',\n   author_email='foomail@foo.example',\n   url=\"http://www.foopackage.example/\",\n   packages=['foo'],  #same as name\n   install_requires=['wheel', 'bar', 'greek'], #external packages as dependencies\n   scripts=[\n            'scripts/cool',\n            'scripts/skype',\n           ]\n)\n</code></pre>\n<p>The <code>long_description</code> is used in <a href=\"https://pypi.org/\" rel=\"noreferrer\">pypi.org</a> as the README description of your package.</p>\n<hr/>\n<p>And finally, you're now ready to upload your package to <a href=\"https://pypi.org/\" rel=\"noreferrer\">PyPi.org</a> so that others can install your package using <code>pip install yourpackage</code>.</p>\n<p>At this point there are two options.</p>\n<ul>\n<li>publish in the <strong>temporary</strong> <a href=\"https://packaging.python.org/guides/using-testpypi\" rel=\"noreferrer\">test.pypi.org</a> server to make oneself familiarize with the procedure, and then publish it on the <em>permanent</em> <a href=\"https://pypi.org/account/register\" rel=\"noreferrer\">pypi.org</a> server for the public to use your package.</li>\n<li>publish straight away on the <strong>permanent</strong> <a href=\"https://pypi.org/account/register\" rel=\"noreferrer\">pypi.org</a> server, if you are already familiar with the procedure and have your user credentials (e.g., username, password, package name)</li>\n</ul>\n<p>Once your package name is registered in <a href=\"https://pypi.org/account/register\" rel=\"noreferrer\">pypi.org</a>, nobody can claim or use it. <a href=\"https://packaging.python.org/tutorials/packaging-projects/#uploading-the-distribution-archives\" rel=\"noreferrer\">Python packaging suggests the <strong>twine</strong> package</a> for uploading purposes (of your package to PyPi). Thus,</p>\n<ol>\n<li><p>the first step is to locally <em>build</em> the distributions using:</p>\n<pre><code class=\"python\"># prereq: wheel (pip install wheel)\n$ python setup.py sdist bdist_wheel\n</code></pre>\n</li>\n<li><p>then using <code>twine</code> for uploading either to <code>test.pypi.org</code> or <code>pypi.org</code>:</p>\n<pre><code class=\"python\">$ twine upload --repository testpypi dist/*\nusername: ***\npassword: ***\n</code></pre>\n</li>\n</ol>\n<p>It will take few minutes for the package to appear on <code>test.pypi.org</code>. Once you're satisfied with it, you can then upload your package to the real &amp; permanent index of <a href=\"https://pypi.org/account/register\" rel=\"noreferrer\">pypi.org</a> simply with:</p>\n<pre><code class=\"python\">$ twine upload dist/*\n</code></pre>\n<p>Optionally, you can also sign the files in your package with a <code>GPG</code> by:</p>\n<pre><code class=\"python\">$ twine upload dist/* --sign\n</code></pre>\n<hr/>\n<p><strong>Bonus Reading</strong>:</p>\n<ul>\n<li><p>See a sample <strong><code>setup.py</code></strong> from a real project here: <a href=\"https://github.com/pytorch/vision/blob/master/setup.py\" rel=\"noreferrer\"><strong><code>torchvision-setup.py</code></strong></a></p>\n</li>\n<li><p><a href=\"https://www.python.org/dev/peps/pep-0517/\" rel=\"noreferrer\">PEP 517</a>, <a href=\"https://setuptools.readthedocs.io/en/latest/userguide/quickstart.html\" rel=\"noreferrer\">setuptools</a></p>\n</li>\n<li><p><a href=\"https://twine.readthedocs.io/en/latest/#using-twine\" rel=\"noreferrer\">why twine? using twine</a></p>\n</li>\n</ul>\n", "abstract": "It helps to install a python package foo on your machine (can also be in virtualenv) so that you can import the package foo from other projects and also from [I]Python prompts. It does the similar job of pip, easy_install etc., Using setup.py Let's start with some definitions: Package - A folder/directory that contains __init__.py file.\nModule  - A valid python file with .py extension.\nDistribution - How one package relates to other packages and modules. Let's say you want to install a package named foo. Then you do, Instead, if you don't want to actually install it but still would like to use it. Then do, This command will create symlinks to the source directory within site-packages instead of copying things. Because of this, it is quite fast (particularly for large packages). Creating setup.py If you have your package tree like, Then, you do the following in your setup.py script so that it can be installed on some machine: Instead, if your package tree is more complex like the one below: Then, your setup.py in this case would be like: Add more stuff to (setup.py) & make it decent: The long_description is used in pypi.org as the README description of your package. And finally, you're now ready to upload your package to PyPi.org so that others can install your package using pip install yourpackage. At this point there are two options. Once your package name is registered in pypi.org, nobody can claim or use it. Python packaging suggests the twine package for uploading purposes (of your package to PyPi). Thus, the first step is to locally build the distributions using: then using twine for uploading either to test.pypi.org or pypi.org: It will take few minutes for the package to appear on test.pypi.org. Once you're satisfied with it, you can then upload your package to the real & permanent index of pypi.org simply with: Optionally, you can also sign the files in your package with a GPG by: Bonus Reading: See a sample setup.py from a real project here: torchvision-setup.py PEP 517, setuptools why twine? using twine"}, {"id": 1472439, "score": 127, "vote": 0, "content": "<p><code>setup.py</code> is Python's answer to a multi-platform installer and <code>make</code> file. </p>\n<p>If you\u2019re familiar with command line installations, then <code>make &amp;&amp; make install</code> translates to <code>python setup.py build &amp;&amp; python setup.py install</code>. </p>\n<p>Some packages are pure Python, and are only byte compiled. Others may contain native code, which will require a native compiler (like <code>gcc</code> or <code>cl</code>) and a Python interfacing module (like <code>swig</code> or <code>pyrex</code>).</p>\n", "abstract": "setup.py is Python's answer to a multi-platform installer and make file.  If you\u2019re familiar with command line installations, then make && make install translates to python setup.py build && python setup.py install.  Some packages are pure Python, and are only byte compiled. Others may contain native code, which will require a native compiler (like gcc or cl) and a Python interfacing module (like swig or pyrex)."}, {"id": 1472029, "score": 64, "vote": 0, "content": "<p>If you downloaded package that has \"setup.py\" in root folder, you can install it by running</p>\n<pre><code class=\"python\">python setup.py install\n</code></pre>\n<p>If you are developing a project and are wondering what this file is useful for, check <a href=\"http://docs.python.org/distutils/setupscript.html\" rel=\"noreferrer\">Python documentation on writing the Setup Script</a></p>\n", "abstract": "If you downloaded package that has \"setup.py\" in root folder, you can install it by running If you are developing a project and are wondering what this file is useful for, check Python documentation on writing the Setup Script"}, {"id": 1472031, "score": 24, "vote": 0, "content": "<p><code>setup.py</code> is a Python script that is usually shipped with libraries or programs, written in that language. It's purpose is the correct installation of the software.</p>\n<p>Many packages use the <code>distutils</code> framework in conjuction with <code>setup.py</code>.</p>\n<p><a href=\"http://docs.python.org/distutils/\" rel=\"noreferrer\">http://docs.python.org/distutils/</a></p>\n", "abstract": "setup.py is a Python script that is usually shipped with libraries or programs, written in that language. It's purpose is the correct installation of the software. Many packages use the distutils framework in conjuction with setup.py. http://docs.python.org/distutils/"}, {"id": 16088409, "score": 23, "vote": 0, "content": "<p>setup.py can be used in two scenarios , First, you want to install a Python package. Second, you want to create your own Python package. Usually standard Python package has couple of important files like setup.py, setup.cfg and Manifest.in. When you are creating the Python package, these three files will determine the (content in PKG-INFO under egg-info folder) name, version, description, other required installations (usually in .txt file) and few other parameters. setup.cfg is read by setup.py while package is created (could be tar.gz ). Manifest.in is where you can define what should be included in your package. Anyways you can do bunch of stuff using setup.py like </p>\n<pre><code class=\"python\">python setup.py build\npython setup.py install\npython setup.py sdist &lt;distname&gt; upload [-r urltorepo]  (to upload package to pypi or local repo)\n</code></pre>\n<p>There are bunch of other commands which could be used with setup.py . for help </p>\n<pre><code class=\"python\">python setup.py --help-commands\n</code></pre>\n", "abstract": "setup.py can be used in two scenarios , First, you want to install a Python package. Second, you want to create your own Python package. Usually standard Python package has couple of important files like setup.py, setup.cfg and Manifest.in. When you are creating the Python package, these three files will determine the (content in PKG-INFO under egg-info folder) name, version, description, other required installations (usually in .txt file) and few other parameters. setup.cfg is read by setup.py while package is created (could be tar.gz ). Manifest.in is where you can define what should be included in your package. Anyways you can do bunch of stuff using setup.py like  There are bunch of other commands which could be used with setup.py . for help "}, {"id": 49268017, "score": 14, "vote": 0, "content": "<p><code>setup.py</code> is a Python file like any other.  It can take any name, except by convention it is named <code>setup.py</code> so that there is not a different procedure with each script.</p>\n<p>Most frequently <code>setup.py</code> is used to install a Python module but server other purposes:</p>\n<p><strong>Modules:</strong></p>\n<p>Perhaps this is most famous usage of <code>setup.py</code> is in modules.  Although they can be installed using <code>pip</code>,  old Python versions did not include <code>pip</code> by default and they needed to be installed separately.  </p>\n<p>If you wanted to install a module but did not want to install <code>pip</code>, just about the only alternative was to install the module from <code>setup.py</code> file.  This could be achieved via <code>python setup.py install</code>.  This would install the Python module to the root dictionary (without <code>pip</code>, <code>easy_install</code> ect).</p>\n<p>This method is often used when <code>pip</code> will fail.  For example if the correct Python version of the desired package is not available via <code>pip</code>perhaps because it is no longer maintained, , downloading the source and running <code>python setup.py install</code> would perform the same thing, except in the case of compiled binaries are required,  (but will disregard the Python version -unless an error is returned).</p>\n<p>Another use of <code>setup.py</code> is to install a package from source.  If a module is still under development the wheel files will not be available and the only way to install is to install from the source directly. </p>\n<p><strong>Building Python extensions:</strong></p>\n<p>When a module has been built it can be converted into module ready for distribution using a <a href=\"https://docs.python.org/3.6/distutils/introduction.html\" rel=\"noreferrer\">distutils setup script</a>. Once built these can be installed using the command above.</p>\n<p>A setup script is easy to build and once the file has been properly configured and can be compiled by running <code>python setup.py build</code> (see link for all commands).</p>\n<p>Once again it is named <code>setup.py</code> for ease of use and by convention, but can take any name.</p>\n<p><strong>Cython:</strong></p>\n<p>Another famous use of <code>setup.py</code> files include compiled extensions.  These require a setup script with user defined values.  They allow fast (but once compiled are platform dependant) execution.  Here is a simple example from the <a href=\"http://docs.cython.org/en/latest/src/quickstart/build.html#building-a-cython-module-using-distutils]\" rel=\"noreferrer\">documentation</a>:</p>\n<pre><code class=\"python\">from distutils.core import setup\nfrom Cython.Build import cythonize\n\nsetup(\n    name = 'Hello world app',\n    ext_modules = cythonize(\"hello.pyx\"),\n)\n</code></pre>\n<p>This can be compiled via <code>python setup.py build</code></p>\n<p><strong>Cx_Freeze:</strong></p>\n<p>Another module requiring a setup script is <code>cx_Freeze</code>.  This converts Python script to executables.  This allows many commands such as descriptions, names, icons, packages to include, exclude ect and once run will produce a distributable application.  An example from the <a href=\"http://cx-freeze.readthedocs.io/en/latest/distutils.html\" rel=\"noreferrer\">documentation</a>:</p>\n<pre><code class=\"python\">import sys\nfrom cx_Freeze import setup, Executable\nbuild_exe_options = {\"packages\": [\"os\"], \"excludes\": [\"tkinter\"]} \n\nbase = None\nif sys.platform == \"win32\":\n    base = \"Win32GUI\"\n\nsetup(  name = \"guifoo\",\n        version = \"0.1\",\n        description = \"My GUI application!\",\n        options = {\"build_exe\": build_exe_options},\n        executables = [Executable(\"guifoo.py\", base=base)])\n</code></pre>\n<p>This can be compiled via <code>python setup.py build</code>.</p>\n<p><strong>So what is a <code>setup.py</code> file?</strong></p>\n<p>Quite simply it is a script that builds or configures something in the Python environment.</p>\n<p>A package when distributed should contain only one setup script but it is not uncommon to combine several together into a single setup script.  Notice this often involves <code>distutils</code> but not always (as I showed in my last example).  The thing to remember it just configures Python package/script in some way. </p>\n<p>It takes the name so the same command can always be used when building or installing.</p>\n", "abstract": "setup.py is a Python file like any other.  It can take any name, except by convention it is named setup.py so that there is not a different procedure with each script. Most frequently setup.py is used to install a Python module but server other purposes: Modules: Perhaps this is most famous usage of setup.py is in modules.  Although they can be installed using pip,  old Python versions did not include pip by default and they needed to be installed separately.   If you wanted to install a module but did not want to install pip, just about the only alternative was to install the module from setup.py file.  This could be achieved via python setup.py install.  This would install the Python module to the root dictionary (without pip, easy_install ect). This method is often used when pip will fail.  For example if the correct Python version of the desired package is not available via pipperhaps because it is no longer maintained, , downloading the source and running python setup.py install would perform the same thing, except in the case of compiled binaries are required,  (but will disregard the Python version -unless an error is returned). Another use of setup.py is to install a package from source.  If a module is still under development the wheel files will not be available and the only way to install is to install from the source directly.  Building Python extensions: When a module has been built it can be converted into module ready for distribution using a distutils setup script. Once built these can be installed using the command above. A setup script is easy to build and once the file has been properly configured and can be compiled by running python setup.py build (see link for all commands). Once again it is named setup.py for ease of use and by convention, but can take any name. Cython: Another famous use of setup.py files include compiled extensions.  These require a setup script with user defined values.  They allow fast (but once compiled are platform dependant) execution.  Here is a simple example from the documentation: This can be compiled via python setup.py build Cx_Freeze: Another module requiring a setup script is cx_Freeze.  This converts Python script to executables.  This allows many commands such as descriptions, names, icons, packages to include, exclude ect and once run will produce a distributable application.  An example from the documentation: This can be compiled via python setup.py build. So what is a setup.py file? Quite simply it is a script that builds or configures something in the Python environment. A package when distributed should contain only one setup script but it is not uncommon to combine several together into a single setup script.  Notice this often involves distutils but not always (as I showed in my last example).  The thing to remember it just configures Python package/script in some way.  It takes the name so the same command can always be used when building or installing."}, {"id": 18870208, "score": 8, "vote": 0, "content": "<p>When you download a package with <code>setup.py</code> open your Terminal (Mac,Linux) or Command Prompt (Windows). Using <code>cd</code>  and helping you with Tab button set the path right to the folder where you have downloaded the file and where there is <code>setup.py</code> :</p>\n<pre><code class=\"python\">iMac:~ user $ cd path/pakagefolderwithsetupfile/\n</code></pre>\n<p>Press enter, you should see something like this:</p>\n<pre><code class=\"python\">iMac:pakagefolderwithsetupfile user$\n</code></pre>\n<p>Then type after this <code>python setup.py install</code> :</p>\n<pre><code class=\"python\">iMac:pakagefolderwithsetupfile user$ python setup.py install\n</code></pre>\n<p>Press <code>enter</code>. Done!</p>\n", "abstract": "When you download a package with setup.py open your Terminal (Mac,Linux) or Command Prompt (Windows). Using cd  and helping you with Tab button set the path right to the folder where you have downloaded the file and where there is setup.py : Press enter, you should see something like this: Then type after this python setup.py install : Press enter. Done!"}, {"id": 48811495, "score": 7, "vote": 0, "content": "<p>To make it simple, setup.py is run as <code>\"__main__\"</code> when you call the <a href=\"https://stackoverflow.com/questions/15031694/installing-python-packages-from-local-file-system-folder-with-pip%3E\">install functions</a> the other answers mentioned. Inside setup.py, you should put everything needed to install your package.</p>\n<h1>Common setup.py functions</h1>\n<p>The following two sections discuss two things many setup.py modules have. </p>\n<h3>setuptools.setup</h3>\n<p>This function allows you to specify <a href=\"https://setuptools.readthedocs.io/en/latest/setuptools.html\" rel=\"noreferrer\">project attributes</a> like the name of the project, the version.... Most importantly, this function allows you to install other functions if they're packaged properly. See <a href=\"https://github.com/pypa/sampleproject/blob/master/setup.py\" rel=\"noreferrer\">this webpage</a> for an example of setuptools.setup\n<br/><br/>\nThese attributes of setuptools.setup enable installing these types of packages:</p>\n<ul>\n<li><p>Packages that are imported to your project and listed in <a href=\"https://pypi.python.org/pypi\" rel=\"noreferrer\">PyPI</a> using <a href=\"https://setuptools.readthedocs.io/en/latest/setuptools.html#using-find-packages\" rel=\"noreferrer\">setuptools.findpackages</a>:</p>\n<p><code>packages=find_packages(exclude=[\"docs\",\"tests\", \".gitignore\", \"README.rst\",\"DESCRIPTION.rst\"])</code></p></li>\n<li><p>Packages not in <a href=\"https://pypi.python.org/pypi\" rel=\"noreferrer\">PyPI</a>, but can be downloaded from a URL using <a href=\"https://setuptools.readthedocs.io/en/latest/setuptools.html#dependencies-that-aren-t-in-pypi\" rel=\"noreferrer\">dependency_links</a> </p>\n<p><code>dependency_links=[\"http://peak.telecommunity.com/snapshots/\",]</code></p></li>\n</ul>\n<h3>Custom functions</h3>\n<p>In an ideal world, <code>setuptools.setup</code> would handle everything for you. Unfortunately this isn't always the case. Sometimes you have to do specific things, like installing dependencies with the <a href=\"https://docs.python.org/2/library/subprocess.html\" rel=\"noreferrer\">subprocess</a> command, to get the system you're installing on in the right state for your package. Try to avoid this, these functions get confusing and often differ between <a href=\"https://docs.python.org/2/library/sys.html#platform\" rel=\"noreferrer\">OS</a> and even <a href=\"https://docs.python.org/2/library/platform.html\" rel=\"noreferrer\">distribution</a>.</p>\n", "abstract": "To make it simple, setup.py is run as \"__main__\" when you call the install functions the other answers mentioned. Inside setup.py, you should put everything needed to install your package. The following two sections discuss two things many setup.py modules have.  This function allows you to specify project attributes like the name of the project, the version.... Most importantly, this function allows you to install other functions if they're packaged properly. See this webpage for an example of setuptools.setup\n\nThese attributes of setuptools.setup enable installing these types of packages: Packages that are imported to your project and listed in PyPI using setuptools.findpackages: packages=find_packages(exclude=[\"docs\",\"tests\", \".gitignore\", \"README.rst\",\"DESCRIPTION.rst\"]) Packages not in PyPI, but can be downloaded from a URL using dependency_links  dependency_links=[\"http://peak.telecommunity.com/snapshots/\",] In an ideal world, setuptools.setup would handle everything for you. Unfortunately this isn't always the case. Sometimes you have to do specific things, like installing dependencies with the subprocess command, to get the system you're installing on in the right state for your package. Try to avoid this, these functions get confusing and often differ between OS and even distribution."}, {"id": 23998536, "score": 6, "vote": 0, "content": "<p>To install a Python package you've downloaded, you extract the archive and run the setup.py script inside:</p>\n<pre><code class=\"python\">python setup.py install\n</code></pre>\n<p>To me, this has always felt odd. It would be more natural to point a package manager at the download, as one would do in Ruby and Nodejs, eg. <code>gem install rails-4.1.1.gem</code></p>\n<p>A package manager is more comfortable too, because it's familiar and reliable. On the other hand, each <code>setup.py</code> is novel, because it's specific to the package. It demands faith in convention \"I trust this setup.py takes the same commands as others I have used in the past\". That's a regrettable tax on mental willpower. </p>\n<p>I'm not saying the setup.py workflow is less secure than a package manager (I understand Pip just runs the setup.py inside), but certainly I feel it's awkard and jarring. There's a harmony to commands all being to the same package manager application. You might even grow fond it.</p>\n", "abstract": "To install a Python package you've downloaded, you extract the archive and run the setup.py script inside: To me, this has always felt odd. It would be more natural to point a package manager at the download, as one would do in Ruby and Nodejs, eg. gem install rails-4.1.1.gem A package manager is more comfortable too, because it's familiar and reliable. On the other hand, each setup.py is novel, because it's specific to the package. It demands faith in convention \"I trust this setup.py takes the same commands as others I have used in the past\". That's a regrettable tax on mental willpower.  I'm not saying the setup.py workflow is less secure than a package manager (I understand Pip just runs the setup.py inside), but certainly I feel it's awkard and jarring. There's a harmony to commands all being to the same package manager application. You might even grow fond it."}]}, {"link": "https://stackoverflow.com/questions/5082452/string-formatting-vs-format-vs-f-string-literal", "question": {"id": "5082452", "title": "String formatting: % vs. .format vs. f-string literal", "content": "<p>There are various string formatting methods:</p>\n<ul>\n<li>Python &lt;2.6: <code>\"Hello %s\" % name</code></li>\n<li>Python 2.6+: <code>\"Hello {}\".format(name)</code> \u00a0 (uses <a href=\"https://docs.python.org/2/library/stdtypes.html#str.format\" rel=\"nofollow noreferrer\"><code>str.format</code></a>)</li>\n<li>Python 3.6+: <code>f\"{name}\"</code> \u00a0 (uses f-strings)</li>\n</ul>\n<p>Which is better, and for what situations?</p>\n<hr/>\n<ol>\n<li><p>The following methods have the same outcome, so what is the difference?</p>\n<pre><code class=\"python\">name = \"Alice\"\n\n\"Hello %s\" % name\n\"Hello {0}\".format(name)\nf\"Hello {name}\"\n\n# Using named arguments:\n\"Hello %(kwarg)s\" % {'kwarg': name}\n\"Hello {kwarg}\".format(kwarg=name)\nf\"Hello {name}\"\n</code></pre>\n</li>\n<li><p>When does string formatting run, and how do I avoid a runtime performance penalty?</p>\n</li>\n</ol>\n<hr/>\n<p><sub>If you are trying to close a duplicate question that is just looking for a way to format a string, please use <a href=\"https://stackoverflow.com/questions/2960772\">How do I put a variable\u2019s value inside a string?</a>.</sub></p>\n", "abstract": "There are various string formatting methods: Which is better, and for what situations? The following methods have the same outcome, so what is the difference? When does string formatting run, and how do I avoid a runtime performance penalty? If you are trying to close a duplicate question that is just looking for a way to format a string, please use How do I put a variable\u2019s value inside a string?."}, "answers": [{"id": 5082482, "score": 979, "vote": 0, "content": "<p>To answer your first question... <code>.format</code> just seems more sophisticated in many ways. An annoying thing about <code>%</code> is also how it can either take a variable or a tuple. You'd think the following would always work:</p>\n<pre><code class=\"python\">\"Hello %s\" % name\n</code></pre>\n<p>yet, if <code>name</code> happens to be <code>(1, 2, 3)</code>, it will throw a <code>TypeError</code>. To guarantee that it always prints, you'd need to do</p>\n<pre><code class=\"python\">\"Hello %s\" % (name,)   # supply the single argument as a single-item tuple\n</code></pre>\n<p>which is just ugly. <code>.format</code> doesn't have those issues. Also in the second example you gave, the <code>.format</code> example is much cleaner looking.</p>\n<p>Only use it for backwards compatibility with Python 2.5.</p>\n<hr/>\n<p>To answer your second question, string formatting happens at the same time as any other operation - when the string formatting expression is evaluated. And Python, not being a lazy language, evaluates expressions before calling functions, so the expression <code>log.debug(\"some debug info: %s\" % some_info)</code> will first evaluate the string to, e.g. <code>\"some debug info: roflcopters are active\"</code>, then that string will be passed to <code>log.debug()</code>.</p>\n", "abstract": "To answer your first question... .format just seems more sophisticated in many ways. An annoying thing about % is also how it can either take a variable or a tuple. You'd think the following would always work: yet, if name happens to be (1, 2, 3), it will throw a TypeError. To guarantee that it always prints, you'd need to do which is just ugly. .format doesn't have those issues. Also in the second example you gave, the .format example is much cleaner looking. Only use it for backwards compatibility with Python 2.5. To answer your second question, string formatting happens at the same time as any other operation - when the string formatting expression is evaluated. And Python, not being a lazy language, evaluates expressions before calling functions, so the expression log.debug(\"some debug info: %s\" % some_info) will first evaluate the string to, e.g. \"some debug info: roflcopters are active\", then that string will be passed to log.debug()."}, {"id": 6335836, "score": 316, "vote": 0, "content": "<p>Something that the modulo operator ( % ) can't do, afaik:</p>\n<pre><code class=\"python\">tu = (12,45,22222,103,6)\nprint '{0} {2} {1} {2} {3} {2} {4} {2}'.format(*tu)\n</code></pre>\n<p>result</p>\n<pre><code class=\"python\">12 22222 45 22222 103 22222 6 22222\n</code></pre>\n<p>Very useful.</p>\n<p>Another point: <code>format()</code>, being a function, can be used as an argument in other functions: </p>\n<pre><code class=\"python\">li = [12,45,78,784,2,69,1254,4785,984]\nprint map('the number is {}'.format,li)   \n\nprint\n\nfrom datetime import datetime,timedelta\n\nonce_upon_a_time = datetime(2010, 7, 1, 12, 0, 0)\ndelta = timedelta(days=13, hours=8,  minutes=20)\n\ngen =(once_upon_a_time +x*delta for x in xrange(20))\n\nprint '\\n'.join(map('{:%Y-%m-%d %H:%M:%S}'.format, gen))\n</code></pre>\n<p>Results in:</p>\n<pre><code class=\"python\">['the number is 12', 'the number is 45', 'the number is 78', 'the number is 784', 'the number is 2', 'the number is 69', 'the number is 1254', 'the number is 4785', 'the number is 984']\n\n2010-07-01 12:00:00\n2010-07-14 20:20:00\n2010-07-28 04:40:00\n2010-08-10 13:00:00\n2010-08-23 21:20:00\n2010-09-06 05:40:00\n2010-09-19 14:00:00\n2010-10-02 22:20:00\n2010-10-16 06:40:00\n2010-10-29 15:00:00\n2010-11-11 23:20:00\n2010-11-25 07:40:00\n2010-12-08 16:00:00\n2010-12-22 00:20:00\n2011-01-04 08:40:00\n2011-01-17 17:00:00\n2011-01-31 01:20:00\n2011-02-13 09:40:00\n2011-02-26 18:00:00\n2011-03-12 02:20:00\n</code></pre>\n", "abstract": "Something that the modulo operator ( % ) can't do, afaik: result Very useful. Another point: format(), being a function, can be used as an argument in other functions:  Results in:"}, {"id": 5082809, "score": 156, "vote": 0, "content": "<p>Assuming you're using Python's <code>logging</code> module, you can pass the string formatting arguments as arguments to the <code>.debug()</code> method rather than doing the formatting yourself:</p>\n<pre><code class=\"python\">log.debug(\"some debug info: %s\", some_info)\n</code></pre>\n<p>which avoids doing the formatting unless the logger actually logs something.</p>\n", "abstract": "Assuming you're using Python's logging module, you can pass the string formatting arguments as arguments to the .debug() method rather than doing the formatting yourself: which avoids doing the formatting unless the logger actually logs something."}, {"id": 36645589, "score": 132, "vote": 0, "content": "<p>As of Python 3.6 (2016) you can use <a href=\"https://docs.python.org/3.6/whatsnew/3.6.html#whatsnew36-pep498\" rel=\"noreferrer\"><em>f-strings</em></a> to substitute variables:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; origin = \"London\"\n&gt;&gt;&gt; destination = \"Paris\"\n&gt;&gt;&gt; f\"from {origin} to {destination}\"\n'from London to Paris'\n</code></pre>\n<p>Note the <code>f\"</code> prefix. If you try this in Python 3.5 or earlier, you'll get a <code>SyntaxError</code>.</p>\n<p>See <a href=\"https://docs.python.org/3.6/reference/lexical_analysis.html#f-strings\" rel=\"noreferrer\">https://docs.python.org/3.6/reference/lexical_analysis.html#f-strings</a></p>\n", "abstract": "As of Python 3.6 (2016) you can use f-strings to substitute variables: Note the f\" prefix. If you try this in Python 3.5 or earlier, you'll get a SyntaxError. See https://docs.python.org/3.6/reference/lexical_analysis.html#f-strings"}, {"id": 6893888, "score": 64, "vote": 0, "content": "<p><a href=\"http://www.python.org/dev/peps/pep-3101/\" rel=\"noreferrer\">PEP 3101</a> proposes the replacement of the <code>%</code> operator with the new, advanced string formatting in Python 3, where it would be the default.</p>\n", "abstract": "PEP 3101 proposes the replacement of the % operator with the new, advanced string formatting in Python 3, where it would be the default."}, {"id": 12252460, "score": 59, "vote": 0, "content": "<p>But please be careful, just now I've discovered one issue when trying to replace all <code>%</code> with <code>.format</code> in existing code: <strong><code>'{}'.format(unicode_string)</code> will try to encode unicode_string and will probably fail.</strong></p>\n<p>Just look at this Python interactive session log:</p>\n<pre><code class=\"python\">Python 2.7.2 (default, Aug 27 2012, 19:52:55) \n[GCC 4.1.2 20080704 (Red Hat 4.1.2-48)] on linux2\n; s='\u0439'\n; u=u'\u0439'\n; s\n'\\xd0\\xb9'\n; u\nu'\\u0439'\n</code></pre>\n<p><code>s</code> is just a string (called 'byte array' in Python3) and <code>u</code> is a Unicode string (called 'string' in Python3):</p>\n<pre><code class=\"python\">; '%s' % s\n'\\xd0\\xb9'\n; '%s' % u\nu'\\u0439'\n</code></pre>\n<p>When you give a Unicode object as a parameter to <code>%</code> operator it will produce a Unicode string even if the original string wasn't Unicode:</p>\n<pre><code class=\"python\">; '{}'.format(s)\n'\\xd0\\xb9'\n; '{}'.format(u)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nUnicodeEncodeError: 'latin-1' codec can't encode character u'\\u0439' in position 0: ordinal not in range(256)\n</code></pre>\n<p>but the <code>.format</code> function will raise \"UnicodeEncodeError\":</p>\n<pre><code class=\"python\">; u'{}'.format(s)\nu'\\xd0\\xb9'\n; u'{}'.format(u)\nu'\\u0439'\n</code></pre>\n<p>and it will work with a Unicode argument fine only if the original string was Unicode.</p>\n<pre><code class=\"python\">; '{}'.format(u'i')\n'i'\n</code></pre>\n<p>or if argument string can be converted to a string (so called 'byte array')</p>\n", "abstract": "But please be careful, just now I've discovered one issue when trying to replace all % with .format in existing code: '{}'.format(unicode_string) will try to encode unicode_string and will probably fail. Just look at this Python interactive session log: s is just a string (called 'byte array' in Python3) and u is a Unicode string (called 'string' in Python3): When you give a Unicode object as a parameter to % operator it will produce a Unicode string even if the original string wasn't Unicode: but the .format function will raise \"UnicodeEncodeError\": and it will work with a Unicode argument fine only if the original string was Unicode. or if argument string can be converted to a string (so called 'byte array')"}, {"id": 6334743, "score": 46, "vote": 0, "content": "<p><code>%</code> gives better performance than <code>format</code> from my test.</p>\n<p>Test code:</p>\n<p>Python 2.7.2:</p>\n<pre><code class=\"python\">import timeit\nprint 'format:', timeit.timeit(\"'{}{}{}'.format(1, 1.23, 'hello')\")\nprint '%:', timeit.timeit(\"'%s%s%s' % (1, 1.23, 'hello')\")\n</code></pre>\n<p>Result:</p>\n<pre><code class=\"python\">&gt; format: 0.470329046249\n&gt; %: 0.357107877731\n</code></pre>\n<p>Python 3.5.2</p>\n<pre><code class=\"python\">import timeit\nprint('format:', timeit.timeit(\"'{}{}{}'.format(1, 1.23, 'hello')\"))\nprint('%:', timeit.timeit(\"'%s%s%s' % (1, 1.23, 'hello')\"))\n</code></pre>\n<p>Result</p>\n<pre><code class=\"python\">&gt; format: 0.5864730989560485\n&gt; %: 0.013593495357781649\n</code></pre>\n<p>It looks in Python2, the difference is small whereas in Python3, <code>%</code> is much faster than <code>format</code>.</p>\n<p>Thanks @Chris Cogdon for the sample code.</p>\n<p>Edit 1:</p>\n<p>Tested again in Python 3.7.2 in July 2019.</p>\n<p>Result:</p>\n<pre><code class=\"python\">&gt; format: 0.86600608\n&gt; %: 0.630180146\n</code></pre>\n<p>There is not much difference. I guess Python is improving gradually.</p>\n<p>Edit 2:</p>\n<p>After someone mentioned python 3's f-string in comment, I did a test for the following code under python 3.7.2 :</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">import timeit\nprint('format:', timeit.timeit(\"'{}{}{}'.format(1, 1.23, 'hello')\"))\nprint('%:', timeit.timeit(\"'%s%s%s' % (1, 1.23, 'hello')\"))\nprint('f-string:', timeit.timeit(\"f'{1}{1.23}{\\\"hello\\\"}'\"))\n</code></pre>\n<p>Result:</p>\n<pre><code class=\"python\">format: 0.8331376779999999\n%: 0.6314778750000001\nf-string: 0.766649943\n</code></pre>\n<p>It seems f-string is still slower than <code>%</code> but better than <code>format</code>.</p>\n", "abstract": "% gives better performance than format from my test. Test code: Python 2.7.2: Result: Python 3.5.2 Result It looks in Python2, the difference is small whereas in Python3, % is much faster than format. Thanks @Chris Cogdon for the sample code. Edit 1: Tested again in Python 3.7.2 in July 2019. Result: There is not much difference. I guess Python is improving gradually. Edit 2: After someone mentioned python 3's f-string in comment, I did a test for the following code under python 3.7.2 : Result: It seems f-string is still slower than % but better than format."}, {"id": 27301386, "score": 38, "vote": 0, "content": "<p>Yet another advantage of <code>.format</code> (which I don't see in the answers): it can take object properties.</p>\n<pre><code class=\"python\">In [12]: class A(object):\n   ....:     def __init__(self, x, y):\n   ....:         self.x = x\n   ....:         self.y = y\n   ....:         \n\nIn [13]: a = A(2,3)\n\nIn [14]: 'x is {0.x}, y is {0.y}'.format(a)\nOut[14]: 'x is 2, y is 3'\n</code></pre>\n<p>Or, as a keyword argument:</p>\n<pre><code class=\"python\">In [15]: 'x is {a.x}, y is {a.y}'.format(a=a)\nOut[15]: 'x is 2, y is 3'\n</code></pre>\n<p>This is not possible with <code>%</code> as far as I can tell.</p>\n", "abstract": "Yet another advantage of .format (which I don't see in the answers): it can take object properties. Or, as a keyword argument: This is not possible with % as far as I can tell."}, {"id": 23637584, "score": 33, "vote": 0, "content": "<p>As I discovered today, the old way of formatting strings via <code>%</code> doesn't support <code>Decimal</code>, Python's module for decimal fixed point and floating point arithmetic, out of the box.</p>\n<p>Example (using Python 3.3.5):</p>\n<pre><code class=\"python\">#!/usr/bin/env python3\n\nfrom decimal import *\n\ngetcontext().prec = 50\nd = Decimal('3.12375239e-24') # no magic number, I rather produced it by banging my head on my keyboard\n\nprint('%.50f' % d)\nprint('{0:.50f}'.format(d))\n</code></pre>\n<p>Output:</p>\n<blockquote>\n<p>0.00000000000000000000000312375239000000009907464850\n  0.00000000000000000000000312375239000000000000000000</p>\n</blockquote>\n<p>There surely might be work-arounds but you still might consider using the <code>format()</code> method right away. </p>\n", "abstract": "As I discovered today, the old way of formatting strings via % doesn't support Decimal, Python's module for decimal fixed point and floating point arithmetic, out of the box. Example (using Python 3.3.5): Output: 0.00000000000000000000000312375239000000009907464850\n  0.00000000000000000000000312375239000000000000000000 There surely might be work-arounds but you still might consider using the format() method right away. "}, {"id": 51167833, "score": 26, "vote": 0, "content": "<p>If your python &gt;= 3.6, F-string formatted literal is your new friend.</p>\n<p>It's more simple, clean, and better performance.</p>\n<pre><code class=\"python\">In [1]: params=['Hello', 'adam', 42]\n\nIn [2]: %timeit \"%s %s, the answer to everything is %d.\"%(params[0],params[1],params[2])\n448 ns \u00b1 1.48 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n\nIn [3]: %timeit \"{} {}, the answer to everything is {}.\".format(*params)\n449 ns \u00b1 1.42 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n\nIn [4]: %timeit f\"{params[0]} {params[1]}, the answer to everything is {params[2]}.\"\n12.7 ns \u00b1 0.0129 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000000 loops each)\n</code></pre>\n", "abstract": "If your python >= 3.6, F-string formatted literal is your new friend. It's more simple, clean, and better performance."}, {"id": 25433007, "score": 16, "vote": 0, "content": "<p>As a side note, you don't have to take a performance hit to use new style formatting with logging.  You can pass any object to <code>logging.debug</code>, <code>logging.info</code>, etc. that implements the <code>__str__</code> magic method.  When the logging module has decided that it must emit your message object (whatever it is), it calls <code>str(message_object)</code> before doing so.  So you could do something like this:</p>\n<pre><code class=\"python\">import logging\n\n\nclass NewStyleLogMessage(object):\n    def __init__(self, message, *args, **kwargs):\n        self.message = message\n        self.args = args\n        self.kwargs = kwargs\n\n    def __str__(self):\n        args = (i() if callable(i) else i for i in self.args)\n        kwargs = dict((k, v() if callable(v) else v) for k, v in self.kwargs.items())\n\n        return self.message.format(*args, **kwargs)\n\nN = NewStyleLogMessage\n\n# Neither one of these messages are formatted (or calculated) until they're\n# needed\n\n# Emits \"Lazily formatted log entry: 123 foo\" in log\nlogging.debug(N('Lazily formatted log entry: {0} {keyword}', 123, keyword='foo'))\n\n\ndef expensive_func():\n    # Do something that takes a long time...\n    return 'foo'\n\n# Emits \"Expensive log entry: foo\" in log\nlogging.debug(N('Expensive log entry: {keyword}', keyword=expensive_func))\n</code></pre>\n<p>This is all described in the Python 3 documentation (<a href=\"https://docs.python.org/3/howto/logging-cookbook.html#formatting-styles\" rel=\"noreferrer\">https://docs.python.org/3/howto/logging-cookbook.html#formatting-styles</a>).  However, it will work with Python 2.6 as well (<a href=\"https://docs.python.org/2.6/library/logging.html#using-arbitrary-objects-as-messages\" rel=\"noreferrer\">https://docs.python.org/2.6/library/logging.html#using-arbitrary-objects-as-messages</a>).</p>\n<p>One of the advantages of using this technique, other than the fact that it's formatting-style agnostic, is that it allows for lazy values e.g. the function <code>expensive_func</code> above.  This provides a more elegant alternative to the advice being given in the Python docs here: <a href=\"https://docs.python.org/2.6/library/logging.html#optimization\" rel=\"noreferrer\">https://docs.python.org/2.6/library/logging.html#optimization</a>.</p>\n", "abstract": "As a side note, you don't have to take a performance hit to use new style formatting with logging.  You can pass any object to logging.debug, logging.info, etc. that implements the __str__ magic method.  When the logging module has decided that it must emit your message object (whatever it is), it calls str(message_object) before doing so.  So you could do something like this: This is all described in the Python 3 documentation (https://docs.python.org/3/howto/logging-cookbook.html#formatting-styles).  However, it will work with Python 2.6 as well (https://docs.python.org/2.6/library/logging.html#using-arbitrary-objects-as-messages). One of the advantages of using this technique, other than the fact that it's formatting-style agnostic, is that it allows for lazy values e.g. the function expensive_func above.  This provides a more elegant alternative to the advice being given in the Python docs here: https://docs.python.org/2.6/library/logging.html#optimization."}, {"id": 29548557, "score": 12, "vote": 0, "content": "<p>One situation where <code>%</code> may help is when you are formatting regex expressions. For example, </p>\n<pre><code class=\"python\">'{type_names} [a-z]{2}'.format(type_names='triangle|square')\n</code></pre>\n<p>raises <code>IndexError</code>. In this situation, you can use:</p>\n<pre><code class=\"python\">'%(type_names)s [a-z]{2}' % {'type_names': 'triangle|square'}\n</code></pre>\n<p>This avoids writing the regex as <code>'{type_names} [a-z]{{2}}'</code>. This can be useful when you have two regexes, where one is used alone without format, but the concatenation of both is formatted.</p>\n", "abstract": "One situation where % may help is when you are formatting regex expressions. For example,  raises IndexError. In this situation, you can use: This avoids writing the regex as '{type_names} [a-z]{{2}}'. This can be useful when you have two regexes, where one is used alone without format, but the concatenation of both is formatted."}, {"id": 49860068, "score": 8, "vote": 0, "content": "<p>I would add that since version 3.6, we can use fstrings like the following</p>\n<pre><code class=\"python\">foo = \"john\"\nbar = \"smith\"\nprint(f\"My name is {foo} {bar}\")\n</code></pre>\n<p>Which give</p>\n<blockquote>\n<p>My name is john smith</p>\n</blockquote>\n<p><strong>Everything is converted to strings</strong></p>\n<pre><code class=\"python\">mylist = [\"foo\", \"bar\"]\nprint(f\"mylist = {mylist}\")\n</code></pre>\n<p>Result:</p>\n<blockquote>\n<p>mylist = ['foo', 'bar']</p>\n</blockquote>\n<p><strong>you can pass function, like in others formats method</strong></p>\n<pre><code class=\"python\">print(f'Hello, here is the date : {time.strftime(\"%d/%m/%Y\")}')\n</code></pre>\n<p>Giving for example</p>\n<blockquote>\n<p>Hello, here is the date : 16/04/2018</p>\n</blockquote>\n", "abstract": "I would add that since version 3.6, we can use fstrings like the following Which give My name is john smith Everything is converted to strings Result: mylist = ['foo', 'bar'] you can pass function, like in others formats method Giving for example Hello, here is the date : 16/04/2018"}, {"id": 54531714, "score": 6, "vote": 0, "content": "<p>Python 3.6.7 comparative:</p>\n<pre><code class=\"python\">#!/usr/bin/env python\nimport timeit\n\ndef time_it(fn):\n    \"\"\"\n    Measure time of execution of a function\n    \"\"\"\n    def wrapper(*args, **kwargs):\n        t0 = timeit.default_timer()\n        fn(*args, **kwargs)\n        t1 = timeit.default_timer()\n        print(\"{0:.10f} seconds\".format(t1 - t0))\n    return wrapper\n\n\n@time_it\ndef new_new_format(s):\n    print(\"new_new_format:\", f\"{s[0]} {s[1]} {s[2]} {s[3]} {s[4]}\")\n\n\n@time_it\ndef new_format(s):\n    print(\"new_format:\", \"{0} {1} {2} {3} {4}\".format(*s))\n\n\n@time_it\ndef old_format(s):\n    print(\"old_format:\", \"%s %s %s %s %s\" % s)\n\n\ndef main():\n    samples = ((\"uno\", \"dos\", \"tres\", \"cuatro\", \"cinco\"), (1,2,3,4,5), (1.1, 2.1, 3.1, 4.1, 5.1), (\"uno\", 2, 3.14, \"cuatro\", 5.5),) \n    for s in samples:\n        new_new_format(s)\n        new_format(s)\n        old_format(s)\n        print(\"-----\")\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n<p>Output:</p>\n<pre><code class=\"python\">new_new_format: uno dos tres cuatro cinco\n0.0000170280 seconds\nnew_format: uno dos tres cuatro cinco\n0.0000046750 seconds\nold_format: uno dos tres cuatro cinco\n0.0000034820 seconds\n-----\nnew_new_format: 1 2 3 4 5\n0.0000043980 seconds\nnew_format: 1 2 3 4 5\n0.0000062590 seconds\nold_format: 1 2 3 4 5\n0.0000041730 seconds\n-----\nnew_new_format: 1.1 2.1 3.1 4.1 5.1\n0.0000092650 seconds\nnew_format: 1.1 2.1 3.1 4.1 5.1\n0.0000055340 seconds\nold_format: 1.1 2.1 3.1 4.1 5.1\n0.0000052130 seconds\n-----\nnew_new_format: uno 2 3.14 cuatro 5.5\n0.0000053380 seconds\nnew_format: uno 2 3.14 cuatro 5.5\n0.0000047570 seconds\nold_format: uno 2 3.14 cuatro 5.5\n0.0000045320 seconds\n-----\n</code></pre>\n", "abstract": "Python 3.6.7 comparative: Output:"}, {"id": 48797435, "score": 5, "vote": 0, "content": "<p>For python version &gt;= 3.6 (see <a href=\"https://www.python.org/dev/peps/pep-0498/\" rel=\"nofollow noreferrer\">PEP 498</a>)</p>\n<pre><code class=\"python\">s1='albha'\ns2='beta'\n\nf'{s1}{s2:&gt;10}'\n\n#output\n'albha      beta'\n</code></pre>\n", "abstract": "For python version >= 3.6 (see PEP 498)"}, {"id": 52013269, "score": 3, "vote": 0, "content": "<p>But one thing is that also if you have nested curly-braces, won't work for format but <code>%</code> will work.</p>\n<p>Example:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; '{{0}, {1}}'.format(1,2)\nTraceback (most recent call last):\n  File \"&lt;pyshell#3&gt;\", line 1, in &lt;module&gt;\n    '{{0}, {1}}'.format(1,2)\nValueError: Single '}' encountered in format string\n&gt;&gt;&gt; '{%s, %s}'%(1,2)\n'{1, 2}'\n&gt;&gt;&gt; \n</code></pre>\n", "abstract": "But one thing is that also if you have nested curly-braces, won't work for format but % will work. Example:"}]}, {"link": "https://stackoverflow.com/questions/101268/hidden-features-of-python", "question": {"id": "101268", "title": "Hidden features of Python", "content": "<p>What are the lesser-known but useful features of the Python programming language?</p>\n<ul>\n<li>Try to limit answers to Python core.</li>\n<li>One feature per answer.</li>\n<li>Give an example and short description of the feature, not just a link to documentation.</li>\n<li>Label the feature using a title as the first line.</li>\n</ul>\n<h2>Quick links to answers:</h2>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#111176\">Argument Unpacking</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#112303\">Braces</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#101945\">Chaining Comparison Operators</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#101447\">Decorators</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#113198\">Default Argument Gotchas / Dangers of Mutable Default arguments</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#102062\">Descriptors</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#111970\">Dictionary default <code>.get</code> value</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#102065\">Docstring Tests</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python/112316#112316\">Ellipsis Slicing Syntax</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#117116\">Enumeration</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#114420\">For/else</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#102202\">Function as iter() argument</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#101310\">Generator expressions</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#101276\"><code>import this</code></a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#102037\">In Place Value Swapping</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#101840\">List stepping</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#112286\"><code>__missing__</code> items</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#101537\">Multi-line Regex</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#113164\">Named string formatting</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#101549\">Nested list/generator comprehensions</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#108297\">New types at runtime</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#113833\"><code>.pth</code> files</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#1024693\">ROT13 Encoding</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#143636\">Regex Debugging</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#101739\">Sending to Generators</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#168270\">Tab Completion in Interactive Interpreter</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#116480\">Ternary Expression</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#114157\"><code>try/except/else</code></a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#3267903\">Unpacking+<code>print()</code> function</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#109182\"><code>with</code> statement</a></li>\n</ul>\n", "abstract": "What are the lesser-known but useful features of the Python programming language?"}, "answers": [{"id": 101945, "score": 739, "vote": 0, "content": "<h2>Chaining comparison operators:</h2>\n<pre><code class=\"python\">&gt;&gt;&gt; x = 5\n&gt;&gt;&gt; 1 &lt; x &lt; 10\nTrue\n&gt;&gt;&gt; 10 &lt; x &lt; 20 \nFalse\n&gt;&gt;&gt; x &lt; 10 &lt; x*10 &lt; 100\nTrue\n&gt;&gt;&gt; 10 &gt; x &lt;= 9\nTrue\n&gt;&gt;&gt; 5 == x &gt; 4\nTrue\n</code></pre>\n<p>In case you're thinking it's doing <code>1 &lt; x</code>, which comes out as <code>True</code>, and then comparing <code>True &lt; 10</code>, which is also <code>True</code>, then no, that's really not what happens (see the last example.) It's really translating into <code>1 &lt; x and x &lt; 10</code>, and <code>x &lt; 10 and 10 &lt; x * 10 and x*10 &lt; 100</code>, but with less typing and each term is only evaluated once.</p>\n", "abstract": "In case you're thinking it's doing 1 < x, which comes out as True, and then comparing True < 10, which is also True, then no, that's really not what happens (see the last example.) It's really translating into 1 < x and x < 10, and x < 10 and 10 < x * 10 and x*10 < 100, but with less typing and each term is only evaluated once."}, {"id": 143636, "score": 511, "vote": 0, "content": "<p><strong>Get the python regex parse tree to debug your regex.</strong></p>\n<p>Regular expressions are a great feature of python, but debugging them can be a pain, and it's all too easy to get a regex wrong.</p>\n<p>Fortunately, python can print the regex parse tree, by passing the undocumented, experimental, hidden flag <code>re.DEBUG</code> (actually, 128) to <code>re.compile</code>.</p>\n<pre><code class=\"python\">&gt;&gt;&gt; re.compile(\"^\\[font(?:=(?P&lt;size&gt;[-+][0-9]{1,2}))?\\](.*?)[/font]\",\n    re.DEBUG)\nat at_beginning\nliteral 91\nliteral 102\nliteral 111\nliteral 110\nliteral 116\nmax_repeat 0 1\n  subpattern None\n    literal 61\n    subpattern 1\n      in\n        literal 45\n        literal 43\n      max_repeat 1 2\n        in\n          range (48, 57)\nliteral 93\nsubpattern 2\n  min_repeat 0 65535\n    any None\nin\n  literal 47\n  literal 102\n  literal 111\n  literal 110\n  literal 116\n</code></pre>\n<p>Once you understand the syntax, you can spot your errors.  There we can see that I forgot to escape the <code>[]</code> in <code>[/font]</code>.</p>\n<p>Of course you can combine it with whatever flags you want, like commented regexes:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; re.compile(\"\"\"\n ^              # start of a line\n \\[font         # the font tag\n (?:=(?P&lt;size&gt;  # optional [font=+size]\n [-+][0-9]{1,2} # size specification\n ))?\n \\]             # end of tag\n (.*?)          # text between the tags\n \\[/font\\]      # end of the tag\n \"\"\", re.DEBUG|re.VERBOSE|re.DOTALL)\n</code></pre>\n", "abstract": "Get the python regex parse tree to debug your regex. Regular expressions are a great feature of python, but debugging them can be a pain, and it's all too easy to get a regex wrong. Fortunately, python can print the regex parse tree, by passing the undocumented, experimental, hidden flag re.DEBUG (actually, 128) to re.compile. Once you understand the syntax, you can spot your errors.  There we can see that I forgot to escape the [] in [/font]. Of course you can combine it with whatever flags you want, like commented regexes:"}, {"id": 117116, "score": 459, "vote": 0, "content": "<p><strong>enumerate</strong></p>\n<p>Wrap an iterable with enumerate and it will yield the item along with its index.</p>\n<p>For example:</p>\n<pre><code class=\"python\">\n&gt;&gt;&gt; a = ['a', 'b', 'c', 'd', 'e']\n&gt;&gt;&gt; for index, item in enumerate(a): print index, item\n...\n0 a\n1 b\n2 c\n3 d\n4 e\n&gt;&gt;&gt;\n</code></pre>\n<p>References:</p>\n<ul>\n<li><a href=\"http://docs.python.org/tutorial/datastructures.html#looping-techniques\" rel=\"nofollow noreferrer\">Python tutorial\u2014looping techniques</a></li>\n<li><a href=\"http://docs.python.org/library/functions.html#enumerate\" rel=\"nofollow noreferrer\">Python docs\u2014built-in functions\u2014<code>enumerate</code></a></li>\n<li><a href=\"http://www.python.org/dev/peps/pep-0279/\" rel=\"nofollow noreferrer\">PEP 279</a></li>\n</ul>\n", "abstract": "enumerate Wrap an iterable with enumerate and it will yield the item along with its index. For example: References:"}, {"id": 101310, "score": 418, "vote": 0, "content": "<p><strong>Creating generators objects</strong></p>\n<p>If you write </p>\n<pre><code class=\"python\">x=(n for n in foo if bar(n))\n</code></pre>\n<p>you can get out the generator and assign it to x. Now it means you can do</p>\n<pre><code class=\"python\">for n in x:\n</code></pre>\n<p>The advantage of this is that you don't need intermediate storage, which you would need if you did</p>\n<pre><code class=\"python\">x = [n for n in foo if bar(n)]\n</code></pre>\n<p>In some cases this can lead to significant speed up.</p>\n<p>You can append many if statements to the end of the generator, basically replicating nested for loops:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; n = ((a,b) for a in range(0,2) for b in range(4,6))\n&gt;&gt;&gt; for i in n:\n...   print i \n\n(0, 4)\n(0, 5)\n(1, 4)\n(1, 5)\n</code></pre>\n", "abstract": "Creating generators objects If you write  you can get out the generator and assign it to x. Now it means you can do The advantage of this is that you don't need intermediate storage, which you would need if you did In some cases this can lead to significant speed up. You can append many if statements to the end of the generator, basically replicating nested for loops:"}, {"id": 102202, "score": 352, "vote": 0, "content": "<p><strong>iter() can take a callable argument</strong></p>\n<p>For instance:</p>\n<pre><code class=\"python\">def seek_next_line(f):\n    for c in iter(lambda: f.read(1),'\\n'):\n        pass\n</code></pre>\n<p>The <code>iter(callable, until_value)</code> function repeatedly calls <code>callable</code> and yields its result until <code>until_value</code> is returned. </p>\n", "abstract": "iter() can take a callable argument For instance: The iter(callable, until_value) function repeatedly calls callable and yields its result until until_value is returned. "}, {"id": 113198, "score": 339, "vote": 0, "content": "<p><strong>Be careful with mutable default arguments</strong></p>\n<pre><code class=\"python\">&gt;&gt;&gt; def foo(x=[]):\n...     x.append(1)\n...     print x\n... \n&gt;&gt;&gt; foo()\n[1]\n&gt;&gt;&gt; foo()\n[1, 1]\n&gt;&gt;&gt; foo()\n[1, 1, 1]\n</code></pre>\n<p>Instead, you should use a sentinel value denoting \"not given\" and replace with the mutable you'd like as default:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; def foo(x=None):\n...     if x is None:\n...         x = []\n...     x.append(1)\n...     print x\n&gt;&gt;&gt; foo()\n[1]\n&gt;&gt;&gt; foo()\n[1]\n</code></pre>\n", "abstract": "Be careful with mutable default arguments Instead, you should use a sentinel value denoting \"not given\" and replace with the mutable you'd like as default:"}, {"id": 101739, "score": 316, "vote": 0, "content": "<p><a href=\"http://www.python.org/dev/peps/pep-0342/\" rel=\"nofollow noreferrer\">Sending values into generator functions</a>. For example having this function:</p>\n<pre><code class=\"python\">def mygen():\n    \"\"\"Yield 5 until something else is passed back via send()\"\"\"\n    a = 5\n    while True:\n        f = (yield a) #yield a and possibly get f in return\n        if f is not None: \n            a = f  #store the new value\n</code></pre>\n<p>You can:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; g = mygen()\n&gt;&gt;&gt; g.next()\n5\n&gt;&gt;&gt; g.next()\n5\n&gt;&gt;&gt; g.send(7)  #we send this back to the generator\n7\n&gt;&gt;&gt; g.next() #now it will yield 7 until we send something else\n7\n</code></pre>\n", "abstract": "Sending values into generator functions. For example having this function: You can:"}, {"id": 112303, "score": 312, "vote": 0, "content": "<p>If you don't like using whitespace to denote scopes, you can use the C-style {} by issuing:</p>\n<pre><code class=\"python\">from __future__ import braces\n</code></pre>\n", "abstract": "If you don't like using whitespace to denote scopes, you can use the C-style {} by issuing:"}, {"id": 101840, "score": 305, "vote": 0, "content": "<p>The step argument in slice operators. For example:</p>\n<pre><code class=\"python\">a = [1,2,3,4,5]\n&gt;&gt;&gt; a[::2]  # iterate over the whole list in 2-increments\n[1,3,5]\n</code></pre>\n<p>The special case <code>x[::-1]</code> is a useful idiom for 'x reversed'.</p>\n<pre><code class=\"python\">&gt;&gt;&gt; a[::-1]\n[5,4,3,2,1]\n</code></pre>\n", "abstract": "The step argument in slice operators. For example: The special case x[::-1] is a useful idiom for 'x reversed'."}, {"id": 101447, "score": 288, "vote": 0, "content": "<p><strong>Decorators</strong></p>\n<p><a href=\"http://docs.python.org/ref/function.html#tok-decorators\" rel=\"nofollow noreferrer\">Decorators</a> allow to wrap a function or method in another function that can add functionality, modify arguments or results, etc. You write decorators one line above the function definition, beginning with an \"at\" sign (@).</p>\n<p>Example shows a <code>print_args</code> decorator that prints the decorated function's arguments before calling it:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; def print_args(function):\n&gt;&gt;&gt;     def wrapper(*args, **kwargs):\n&gt;&gt;&gt;         print 'Arguments:', args, kwargs\n&gt;&gt;&gt;         return function(*args, **kwargs)\n&gt;&gt;&gt;     return wrapper\n\n&gt;&gt;&gt; @print_args\n&gt;&gt;&gt; def write(text):\n&gt;&gt;&gt;     print text\n\n&gt;&gt;&gt; write('foo')\nArguments: ('foo',) {}\nfoo\n</code></pre>\n", "abstract": "Decorators Decorators allow to wrap a function or method in another function that can add functionality, modify arguments or results, etc. You write decorators one line above the function definition, beginning with an \"at\" sign (@). Example shows a print_args decorator that prints the decorated function's arguments before calling it:"}, {"id": 114420, "score": 288, "vote": 0, "content": "<p>The for...else syntax (see <a href=\"http://docs.python.org/ref/for.html\" rel=\"nofollow noreferrer\">http://docs.python.org/ref/for.html</a> )</p>\n<pre><code class=\"python\">for i in foo:\n    if i == 0:\n        break\nelse:\n    print(\"i was never 0\")\n</code></pre>\n<p>The \"else\" block will be normally executed at the end of the for loop, unless the break is called.</p>\n<p>The above code could be emulated as follows:</p>\n<pre><code class=\"python\">found = False\nfor i in foo:\n    if i == 0:\n        found = True\n        break\nif not found: \n    print(\"i was never 0\")\n</code></pre>\n", "abstract": "The for...else syntax (see http://docs.python.org/ref/for.html ) The \"else\" block will be normally executed at the end of the for loop, unless the break is called. The above code could be emulated as follows:"}, {"id": 112286, "score": 258, "vote": 0, "content": "<p>From 2.5 onwards dicts have a special method <code>__missing__</code> that is invoked for missing items:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; class MyDict(dict):\n...  def __missing__(self, key):\n...   self[key] = rv = []\n...   return rv\n... \n&gt;&gt;&gt; m = MyDict()\n&gt;&gt;&gt; m[\"foo\"].append(1)\n&gt;&gt;&gt; m[\"foo\"].append(2)\n&gt;&gt;&gt; dict(m)\n{'foo': [1, 2]}\n</code></pre>\n<p>There is also a dict subclass in <code>collections</code> called <code>defaultdict</code> that does pretty much the same but calls a function without arguments for not existing items:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; from collections import defaultdict\n&gt;&gt;&gt; m = defaultdict(list)\n&gt;&gt;&gt; m[\"foo\"].append(1)\n&gt;&gt;&gt; m[\"foo\"].append(2)\n&gt;&gt;&gt; dict(m)\n{'foo': [1, 2]}\n</code></pre>\n<p>I recommend converting such dicts to regular dicts before passing them to functions that don't expect such subclasses.  A lot of code uses <code>d[a_key]</code> and catches KeyErrors to check if an item exists which would add a new item to the dict.</p>\n", "abstract": "From 2.5 onwards dicts have a special method __missing__ that is invoked for missing items: There is also a dict subclass in collections called defaultdict that does pretty much the same but calls a function without arguments for not existing items: I recommend converting such dicts to regular dicts before passing them to functions that don't expect such subclasses.  A lot of code uses d[a_key] and catches KeyErrors to check if an item exists which would add a new item to the dict."}, {"id": 102037, "score": 247, "vote": 0, "content": "<p><strong>In-place value swapping</strong></p>\n<pre><code class=\"python\">&gt;&gt;&gt; a = 10\n&gt;&gt;&gt; b = 5\n&gt;&gt;&gt; a, b\n(10, 5)\n\n&gt;&gt;&gt; a, b = b, a\n&gt;&gt;&gt; a, b\n(5, 10)\n</code></pre>\n<p>The right-hand side of the assignment is an expression that creates a new tuple. The left-hand side of the assignment immediately unpacks that (unreferenced) tuple to the names <code>a</code> and <code>b</code>.</p>\n<p>After the assignment, the new tuple is unreferenced and marked for garbage collection, and the values bound to <code>a</code> and <code>b</code> have been swapped.</p>\n<p>As noted in the <a href=\"http://docs.python.org/tutorial/datastructures.html#tuples-and-sequences\" rel=\"nofollow noreferrer\">Python tutorial section on data structures</a>,</p>\n<blockquote>\n<p>Note that multiple assignment is really just a combination of tuple packing and sequence unpacking.</p>\n</blockquote>\n", "abstract": "In-place value swapping The right-hand side of the assignment is an expression that creates a new tuple. The left-hand side of the assignment immediately unpacks that (unreferenced) tuple to the names a and b. After the assignment, the new tuple is unreferenced and marked for garbage collection, and the values bound to a and b have been swapped. As noted in the Python tutorial section on data structures, Note that multiple assignment is really just a combination of tuple packing and sequence unpacking."}, {"id": 101537, "score": 235, "vote": 0, "content": "<p><strong>Readable regular expressions</strong></p>\n<p>In Python you can split a regular expression over multiple lines, name your matches and insert comments.</p>\n<p>Example verbose syntax (from <a href=\"http://diveintopython.net/regular_expressions/index.html\" rel=\"nofollow noreferrer\">Dive into Python</a>):</p>\n<pre><code class=\"python\">&gt;&gt;&gt; pattern = \"\"\"\n... ^                   # beginning of string\n... M{0,4}              # thousands - 0 to 4 M's\n... (CM|CD|D?C{0,3})    # hundreds - 900 (CM), 400 (CD), 0-300 (0 to 3 C's),\n...                     #            or 500-800 (D, followed by 0 to 3 C's)\n... (XC|XL|L?X{0,3})    # tens - 90 (XC), 40 (XL), 0-30 (0 to 3 X's),\n...                     #        or 50-80 (L, followed by 0 to 3 X's)\n... (IX|IV|V?I{0,3})    # ones - 9 (IX), 4 (IV), 0-3 (0 to 3 I's),\n...                     #        or 5-8 (V, followed by 0 to 3 I's)\n... $                   # end of string\n... \"\"\"\n&gt;&gt;&gt; re.search(pattern, 'M', re.VERBOSE)\n</code></pre>\n<p>Example naming matches (from <a href=\"http://www.amk.ca/python/howto/regex/\" rel=\"nofollow noreferrer\">Regular Expression HOWTO</a>)</p>\n<pre><code class=\"python\">&gt;&gt;&gt; p = re.compile(r'(?P&lt;word&gt;\\b\\w+\\b)')\n&gt;&gt;&gt; m = p.search( '(((( Lots of punctuation )))' )\n&gt;&gt;&gt; m.group('word')\n'Lots'\n</code></pre>\n<p>You can also verbosely write a regex without using <code>re.VERBOSE</code> thanks to string literal concatenation.</p>\n<pre><code class=\"python\">&gt;&gt;&gt; pattern = (\n...     \"^\"                 # beginning of string\n...     \"M{0,4}\"            # thousands - 0 to 4 M's\n...     \"(CM|CD|D?C{0,3})\"  # hundreds - 900 (CM), 400 (CD), 0-300 (0 to 3 C's),\n...                         #            or 500-800 (D, followed by 0 to 3 C's)\n...     \"(XC|XL|L?X{0,3})\"  # tens - 90 (XC), 40 (XL), 0-30 (0 to 3 X's),\n...                         #        or 50-80 (L, followed by 0 to 3 X's)\n...     \"(IX|IV|V?I{0,3})\"  # ones - 9 (IX), 4 (IV), 0-3 (0 to 3 I's),\n...                         #        or 5-8 (V, followed by 0 to 3 I's)\n...     \"$\"                 # end of string\n... )\n&gt;&gt;&gt; print pattern\n\"^M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$\"\n</code></pre>\n", "abstract": "Readable regular expressions In Python you can split a regular expression over multiple lines, name your matches and insert comments. Example verbose syntax (from Dive into Python): Example naming matches (from Regular Expression HOWTO) You can also verbosely write a regex without using re.VERBOSE thanks to string literal concatenation."}, {"id": 111176, "score": 222, "vote": 0, "content": "<p><strong>Function argument unpacking</strong></p>\n<p>You can unpack a list or a dictionary as function arguments using <code>*</code> and <code>**</code>.</p>\n<p>For example:</p>\n<pre><code class=\"python\">def draw_point(x, y):\n    # do some magic\n\npoint_foo = (3, 4)\npoint_bar = {'y': 3, 'x': 2}\n\ndraw_point(*point_foo)\ndraw_point(**point_bar)\n</code></pre>\n<p>Very useful shortcut since lists, tuples and dicts are widely used as containers.</p>\n", "abstract": "Function argument unpacking You can unpack a list or a dictionary as function arguments using * and **. For example: Very useful shortcut since lists, tuples and dicts are widely used as containers."}, {"id": 1024693, "score": 205, "vote": 0, "content": "<p>ROT13 is a valid encoding for source code, when you use the right coding declaration at the top of the code file:</p>\n<pre><code class=\"python\">#!/usr/bin/env python\n# -*- coding: rot13 -*-\n\ncevag \"Uryyb fgnpxbiresybj!\".rapbqr(\"rot13\")\n</code></pre>\n", "abstract": "ROT13 is a valid encoding for source code, when you use the right coding declaration at the top of the code file:"}, {"id": 108297, "score": 183, "vote": 0, "content": "<h2>Creating new types in a fully dynamic manner</h2>\n<pre><code class=\"python\">&gt;&gt;&gt; NewType = type(\"NewType\", (object,), {\"x\": \"hello\"})\n&gt;&gt;&gt; n = NewType()\n&gt;&gt;&gt; n.x\n\"hello\"\n</code></pre>\n<p>which is exactly the same as</p>\n<pre><code class=\"python\">&gt;&gt;&gt; class NewType(object):\n&gt;&gt;&gt;     x = \"hello\"\n&gt;&gt;&gt; n = NewType()\n&gt;&gt;&gt; n.x\n\"hello\"\n</code></pre>\n<p>Probably not the most useful thing, but nice to know.</p>\n<p><strong>Edit</strong>: Fixed name of new type, should be <code>NewType</code> to be the exact same thing as with <code>class</code> statement.</p>\n<p><strong>Edit</strong>: Adjusted the title to more accurately describe the feature.</p>\n", "abstract": "which is exactly the same as Probably not the most useful thing, but nice to know. Edit: Fixed name of new type, should be NewType to be the exact same thing as with class statement. Edit: Adjusted the title to more accurately describe the feature."}, {"id": 109182, "score": 179, "vote": 0, "content": "<p><strong>Context managers and the \"<code>with</code>\" Statement</strong></p>\n<p>Introduced in <a href=\"http://www.python.org/dev/peps/pep-0343/\" rel=\"nofollow noreferrer\">PEP 343</a>, a <a href=\"http://docs.python.org/library/stdtypes.html#context-manager-types\" rel=\"nofollow noreferrer\">context manager</a> is an object that acts as a run-time context for a suite of statements.</p>\n<p>Since the feature makes use of new keywords, it is introduced gradually: it is available in Python 2.5 via the <a href=\"http://docs.python.org/lib/module-future.html\" rel=\"nofollow noreferrer\"><code>__future__</code></a> directive. Python 2.6 and above (including Python 3) has it available by default.</p>\n<p>I have used the <a href=\"http://www.python.org/dev/peps/pep-0343/\" rel=\"nofollow noreferrer\">\"with\" statement</a> a lot because I think it's a very useful construct, here is a quick demo:</p>\n<pre><code class=\"python\">from __future__ import with_statement\n\nwith open('foo.txt', 'w') as f:\n    f.write('hello!')\n</code></pre>\n<p>What's happening here behind the scenes, is that the <a href=\"http://www.python.org/dev/peps/pep-0343/\" rel=\"nofollow noreferrer\">\"with\" statement</a> calls the special <code>__enter__</code> and <code>__exit__</code> methods on the file object. Exception details are also passed to <code>__exit__</code> if any exception was raised from the with statement body, allowing for exception handling to happen there.</p>\n<p>What this does for you in this particular case is that it guarantees that the file is closed when execution falls out of scope of the <code>with</code> suite, regardless if that occurs normally or whether an exception was thrown. It is basically a way of abstracting away common exception-handling code.</p>\n<p>Other common use cases for this include locking with threads and database transactions. </p>\n", "abstract": "Context managers and the \"with\" Statement Introduced in PEP 343, a context manager is an object that acts as a run-time context for a suite of statements. Since the feature makes use of new keywords, it is introduced gradually: it is available in Python 2.5 via the __future__ directive. Python 2.6 and above (including Python 3) has it available by default. I have used the \"with\" statement a lot because I think it's a very useful construct, here is a quick demo: What's happening here behind the scenes, is that the \"with\" statement calls the special __enter__ and __exit__ methods on the file object. Exception details are also passed to __exit__ if any exception was raised from the with statement body, allowing for exception handling to happen there. What this does for you in this particular case is that it guarantees that the file is closed when execution falls out of scope of the with suite, regardless if that occurs normally or whether an exception was thrown. It is basically a way of abstracting away common exception-handling code. Other common use cases for this include locking with threads and database transactions. "}, {"id": 111970, "score": 168, "vote": 0, "content": "<h2>Dictionaries have a get() method</h2>\n<p>Dictionaries have a 'get()' method. If you do d['key'] and key isn't there, you get an exception. If you do d.get('key'), you get back None if 'key' isn't there. You can add a second argument to get that item back instead of None, eg: d.get('key', 0).</p>\n<p>It's great for things like adding up numbers:</p>\n<p><code>sum[value] = sum.get(value, 0) + 1</code></p>\n", "abstract": "Dictionaries have a 'get()' method. If you do d['key'] and key isn't there, you get an exception. If you do d.get('key'), you get back None if 'key' isn't there. You can add a second argument to get that item back instead of None, eg: d.get('key', 0). It's great for things like adding up numbers: sum[value] = sum.get(value, 0) + 1"}, {"id": 102062, "score": 152, "vote": 0, "content": "<h2>Descriptors</h2>\n<p>They're the magic behind a whole bunch of core Python features. </p>\n<p>When you use dotted access to look up a member (eg, x.y), Python first looks for the member in the instance dictionary. If it's not found, it looks for it in the class dictionary. If it finds it in the class dictionary, and the object implements the descriptor protocol, instead of just returning it, Python executes it. A descriptor is any class that implements the <code>__get__</code>, <code>__set__</code>, or <code>__delete__</code> methods.</p>\n<p>Here's how you'd implement your own (read-only) version of property using descriptors:</p>\n<pre><code class=\"python\">class Property(object):\n    def __init__(self, fget):\n        self.fget = fget\n\n    def __get__(self, obj, type):\n        if obj is None:\n            return self\n        return self.fget(obj)\n</code></pre>\n<p>and you'd use it just like the built-in property():</p>\n<pre><code class=\"python\">class MyClass(object):\n    @Property\n    def foo(self):\n        return \"Foo!\"\n</code></pre>\n<p>Descriptors are used in Python to implement properties, bound methods, static methods, class methods and slots, amongst other things. Understanding them makes it easy to see why a lot of things that previously looked like Python 'quirks' are the way they are.</p>\n<p>Raymond Hettinger has <a href=\"http://users.rcn.com/python/download/Descriptor.htm\" rel=\"noreferrer\">an excellent tutorial</a> that does a much better job of describing them than I do.</p>\n", "abstract": "They're the magic behind a whole bunch of core Python features.  When you use dotted access to look up a member (eg, x.y), Python first looks for the member in the instance dictionary. If it's not found, it looks for it in the class dictionary. If it finds it in the class dictionary, and the object implements the descriptor protocol, instead of just returning it, Python executes it. A descriptor is any class that implements the __get__, __set__, or __delete__ methods. Here's how you'd implement your own (read-only) version of property using descriptors: and you'd use it just like the built-in property(): Descriptors are used in Python to implement properties, bound methods, static methods, class methods and slots, amongst other things. Understanding them makes it easy to see why a lot of things that previously looked like Python 'quirks' are the way they are. Raymond Hettinger has an excellent tutorial that does a much better job of describing them than I do."}, {"id": 116480, "score": 142, "vote": 0, "content": "<p><strong>Conditional Assignment</strong></p>\n<pre><code class=\"python\">x = 3 if (y == 1) else 2\n</code></pre>\n<p>It does exactly what it sounds like: \"assign 3 to x if y is 1, otherwise assign 2 to x\". Note that the parens are not necessary, but I like them for readability. You can also chain it if you have something more complicated:</p>\n<pre><code class=\"python\">x = 3 if (y == 1) else 2 if (y == -1) else 1\n</code></pre>\n<p>Though at a certain point, it goes a little too far.</p>\n<p>Note that you can use if ... else in any expression. For example:</p>\n<pre><code class=\"python\">(func1 if y == 1 else func2)(arg1, arg2) \n</code></pre>\n<p>Here func1 will be called if y is 1 and func2, otherwise. In both cases the corresponding function will be called with arguments arg1 and arg2.</p>\n<p>Analogously, the following is also valid:</p>\n<pre><code class=\"python\">x = (class1 if y == 1 else class2)(arg1, arg2)\n</code></pre>\n<p>where class1 and class2 are two classes.</p>\n", "abstract": "Conditional Assignment It does exactly what it sounds like: \"assign 3 to x if y is 1, otherwise assign 2 to x\". Note that the parens are not necessary, but I like them for readability. You can also chain it if you have something more complicated: Though at a certain point, it goes a little too far. Note that you can use if ... else in any expression. For example: Here func1 will be called if y is 1 and func2, otherwise. In both cases the corresponding function will be called with arguments arg1 and arg2. Analogously, the following is also valid: where class1 and class2 are two classes."}, {"id": 102065, "score": 141, "vote": 0, "content": "<h2><a href=\"http://docs.python.org/lib/module-doctest.html\" rel=\"nofollow noreferrer\">Doctest</a>: documentation and unit-testing at the same time.</h2>\n<p>Example extracted from the Python documentation:</p>\n<pre><code class=\"python\">def factorial(n):\n    \"\"\"Return the factorial of n, an exact integer &gt;= 0.\n\n    If the result is small enough to fit in an int, return an int.\n    Else return a long.\n\n    &gt;&gt;&gt; [factorial(n) for n in range(6)]\n    [1, 1, 2, 6, 24, 120]\n    &gt;&gt;&gt; factorial(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be &gt;= 0\n\n    Factorials of floats are OK, but the float must be an exact integer:\n    \"\"\"\n\n    import math\n    if not n &gt;= 0:\n        raise ValueError(\"n must be &gt;= 0\")\n    if math.floor(n) != n:\n        raise ValueError(\"n must be exact integer\")\n    if n+1 == n:  # catch a value like 1e300\n        raise OverflowError(\"n too large\")\n    result = 1\n    factor = 2\n    while factor &lt;= n:\n        result *= factor\n        factor += 1\n    return result\n\ndef _test():\n    import doctest\n    doctest.testmod()    \n\nif __name__ == \"__main__\":\n    _test()\n</code></pre>\n", "abstract": "Example extracted from the Python documentation:"}, {"id": 113164, "score": 138, "vote": 0, "content": "<h2>Named formatting</h2>\n<p>% -formatting takes a dictionary (also applies %i/%s etc. validation).</p>\n<pre><code class=\"python\">&gt;&gt;&gt; print \"The %(foo)s is %(bar)i.\" % {'foo': 'answer', 'bar':42}\nThe answer is 42.\n\n&gt;&gt;&gt; foo, bar = 'question', 123\n\n&gt;&gt;&gt; print \"The %(foo)s is %(bar)i.\" % locals()\nThe question is 123.\n</code></pre>\n<p>And since locals() is also a dictionary, you can simply pass that as a dict and have % -substitions from your local variables. I think this is frowned upon, but simplifies things..</p>\n<p><strong>New Style Formatting</strong></p>\n<pre><code class=\"python\">&gt;&gt;&gt; print(\"The {foo} is {bar}\".format(foo='answer', bar=42))\n</code></pre>\n", "abstract": "% -formatting takes a dictionary (also applies %i/%s etc. validation). And since locals() is also a dictionary, you can simply pass that as a dict and have % -substitions from your local variables. I think this is frowned upon, but simplifies things.. New Style Formatting"}, {"id": 113833, "score": 132, "vote": 0, "content": "<p>To add more python modules (espcially 3rd party ones), most people seem to use PYTHONPATH environment variables or they add symlinks or directories in their site-packages directories. Another way, is to use *.pth files. Here's the official python doc's explanation:</p>\n<blockquote>\n<p>\"The most convenient way [to modify\n  python's search path] is to add a path\n  configuration file to a directory\n  that's already on Python's path,\n  usually to the .../site-packages/\n  directory. Path configuration files\n  have an extension of .pth, and each\n  line must contain a single path that\n  will be appended to sys.path. (Because\n  the new paths are appended to\n  sys.path, modules in the added\n  directories will not override standard\n  modules. This means you can't use this\n  mechanism for installing fixed\n  versions of standard modules.)\"</p>\n</blockquote>\n", "abstract": "To add more python modules (espcially 3rd party ones), most people seem to use PYTHONPATH environment variables or they add symlinks or directories in their site-packages directories. Another way, is to use *.pth files. Here's the official python doc's explanation: \"The most convenient way [to modify\n  python's search path] is to add a path\n  configuration file to a directory\n  that's already on Python's path,\n  usually to the .../site-packages/\n  directory. Path configuration files\n  have an extension of .pth, and each\n  line must contain a single path that\n  will be appended to sys.path. (Because\n  the new paths are appended to\n  sys.path, modules in the added\n  directories will not override standard\n  modules. This means you can't use this\n  mechanism for installing fixed\n  versions of standard modules.)\""}, {"id": 114157, "score": 122, "vote": 0, "content": "<p>Exception <strong>else</strong> clause:</p>\n<pre><code class=\"python\">try:\n  put_4000000000_volts_through_it(parrot)\nexcept Voom:\n  print \"'E's pining!\"\nelse:\n  print \"This parrot is no more!\"\nfinally:\n  end_sketch()\n</code></pre>\n<p>The use of the else clause is better than adding additional code to the try clause because it avoids accidentally catching an exception that wasn\u2019t raised by the code being protected by the try ... except statement.</p>\n<p>See <a href=\"http://docs.python.org/tut/node10.html\" rel=\"nofollow noreferrer\">http://docs.python.org/tut/node10.html</a></p>\n", "abstract": "Exception else clause: The use of the else clause is better than adding additional code to the try clause because it avoids accidentally catching an exception that wasn\u2019t raised by the code being protected by the try ... except statement. See http://docs.python.org/tut/node10.html"}, {"id": 102006, "score": 114, "vote": 0, "content": "<p><strong>Re-raising exceptions</strong>:</p>\n<pre><code class=\"python\"># Python 2 syntax\ntry:\n    some_operation()\nexcept SomeError, e:\n    if is_fatal(e):\n        raise\n    handle_nonfatal(e)\n\n# Python 3 syntax\ntry:\n    some_operation()\nexcept SomeError as e:\n    if is_fatal(e):\n        raise\n    handle_nonfatal(e)\n</code></pre>\n<p>The 'raise' statement with no arguments inside an error handler tells Python to re-raise the exception <em>with the original traceback intact</em>, allowing you to say \"oh, sorry, sorry, I didn't mean to catch that, sorry, sorry.\"</p>\n<p>If you wish to print, store or fiddle with the original traceback, you can get it with sys.exc_info(), and printing it like Python would is done with the 'traceback' module.</p>\n", "abstract": "Re-raising exceptions: The 'raise' statement with no arguments inside an error handler tells Python to re-raise the exception with the original traceback intact, allowing you to say \"oh, sorry, sorry, I didn't mean to catch that, sorry, sorry.\" If you wish to print, store or fiddle with the original traceback, you can get it with sys.exc_info(), and printing it like Python would is done with the 'traceback' module."}, {"id": 101276, "score": 106, "vote": 0, "content": "<p><strong>Main messages :)</strong></p>\n<pre><code class=\"python\">import this\n# btw look at this module's source :)\n</code></pre>\n<hr/>\n<p><a href=\"http://svn.python.org/view/python/trunk/Lib/this.py?view=markup\" rel=\"nofollow noreferrer\">De-cyphered</a>:</p>\n<blockquote>\n<p>The Zen of Python, by Tim Peters    </p>\n<p>Beautiful is better than ugly.<br/>\n  Explicit is better than implicit.<br/>\n  Simple is better than complex.<br/>\n  Complex is better than complicated.<br/>\n  Flat is better than nested.<br/>\n  Sparse is better than dense.<br/>\n  Readability counts.<br/>\n  Special cases aren't special enough to break the rules.<br/>\n  Although practicality beats purity.<br/>\n  Errors should never pass silently.<br/>\n  Unless explicitly silenced.<br/>\n  In the face of ambiguity, refuse the temptation to guess.\n  There should be one-- and preferably only one --obvious way to do it.<br/>\n  Although that way may not be obvious at first unless you're Dutch.<br/>\n  Now is better than never.<br/>\n  Although never is often better than <em>right</em> now.<br/>\n  If the implementation is hard to explain, it's a bad idea.<br/>\n  If the implementation is easy to explain, it may be a good idea.<br/>\n  Namespaces are one honking great idea -- let's do more of those!  </p>\n</blockquote>\n", "abstract": "Main messages :) De-cyphered: The Zen of Python, by Tim Peters     Beautiful is better than ugly.\n  Explicit is better than implicit.\n  Simple is better than complex.\n  Complex is better than complicated.\n  Flat is better than nested.\n  Sparse is better than dense.\n  Readability counts.\n  Special cases aren't special enough to break the rules.\n  Although practicality beats purity.\n  Errors should never pass silently.\n  Unless explicitly silenced.\n  In the face of ambiguity, refuse the temptation to guess.\n  There should be one-- and preferably only one --obvious way to do it.\n  Although that way may not be obvious at first unless you're Dutch.\n  Now is better than never.\n  Although never is often better than right now.\n  If the implementation is hard to explain, it's a bad idea.\n  If the implementation is easy to explain, it may be a good idea.\n  Namespaces are one honking great idea -- let's do more of those!  "}, {"id": 168270, "score": 105, "vote": 0, "content": "<p><strong>Interactive Interpreter Tab Completion</strong></p>\n<pre><code class=\"python\">try:\n    import readline\nexcept ImportError:\n    print \"Unable to load readline module.\"\nelse:\n    import rlcompleter\n    readline.parse_and_bind(\"tab: complete\")\n\n\n&gt;&gt;&gt; class myclass:\n...    def function(self):\n...       print \"my function\"\n... \n&gt;&gt;&gt; class_instance = myclass()\n&gt;&gt;&gt; class_instance.&lt;TAB&gt;\nclass_instance.__class__   class_instance.__module__\nclass_instance.__doc__     class_instance.function\n&gt;&gt;&gt; class_instance.f&lt;TAB&gt;unction()\n</code></pre>\n<p>You will also have to set a PYTHONSTARTUP environment variable.</p>\n", "abstract": "Interactive Interpreter Tab Completion You will also have to set a PYTHONSTARTUP environment variable."}, {"id": 101549, "score": 91, "vote": 0, "content": "<p>Nested list comprehensions and generator expressions:</p>\n<pre><code class=\"python\">[(i,j) for i in range(3) for j in range(i) ]    \n((i,j) for i in range(4) for j in range(i) )\n</code></pre>\n<p>These can replace huge chunks of nested-loop code.</p>\n", "abstract": "Nested list comprehensions and generator expressions: These can replace huge chunks of nested-loop code."}, {"id": 405085, "score": 91, "vote": 0, "content": "<p><strong>Operator overloading for the <code>set</code> builtin:</strong></p>\n<pre><code class=\"python\">&gt;&gt;&gt; a = set([1,2,3,4])\n&gt;&gt;&gt; b = set([3,4,5,6])\n&gt;&gt;&gt; a | b # Union\n{1, 2, 3, 4, 5, 6}\n&gt;&gt;&gt; a &amp; b # Intersection\n{3, 4}\n&gt;&gt;&gt; a &lt; b # Subset\nFalse\n&gt;&gt;&gt; a - b # Difference\n{1, 2}\n&gt;&gt;&gt; a ^ b # Symmetric Difference\n{1, 2, 5, 6}\n</code></pre>\n<p>More detail from the standard library reference: <a href=\"http://docs.python.org/py3k/library/stdtypes.html#set-types-set-frozenset\" rel=\"noreferrer\">Set Types</a></p>\n", "abstract": "Operator overloading for the set builtin: More detail from the standard library reference: Set Types"}, {"id": 373949, "score": 85, "vote": 0, "content": "<p><strong>Negative round</strong></p>\n<p>The <code>round()</code> function rounds a float number to given precision in decimal digits, but precision can be negative:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; str(round(1234.5678, -2))\n'1200.0'\n&gt;&gt;&gt; str(round(1234.5678, 2))\n'1234.57'\n</code></pre>\n<p><em>Note:</em> <code>round()</code> always returns a float, <code>str()</code> used in the above example because floating point math is inexact, and under 2.x the second example can print as <code>1234.5700000000001</code>. Also see the <a href=\"http://docs.python.org/library/decimal.html#module-decimal\" rel=\"nofollow noreferrer\"><code>decimal</code></a> module.</p>\n", "abstract": "Negative round The round() function rounds a float number to given precision in decimal digits, but precision can be negative: Note: round() always returns a float, str() used in the above example because floating point math is inexact, and under 2.x the second example can print as 1234.5700000000001. Also see the decimal module."}, {"id": 1853593, "score": 81, "vote": 0, "content": "<p><strong>Multiplying by a boolean</strong></p>\n<p>One thing I'm constantly doing in web development is optionally printing HTML parameters. We've all seen code like this in other languages:</p>\n<pre><code class=\"python\">class='&lt;% isSelected ? \"selected\" : \"\" %&gt;'\n</code></pre>\n<p>In Python, you can multiply by a boolean and it does exactly what you'd expect:</p>\n<pre><code class=\"python\">class='&lt;% \"selected\" * isSelected %&gt;'\n</code></pre>\n<p>This is because multiplication coerces the boolean to an integer (0 for False, 1 for True), and in python multiplying a string by an int <em>repeats</em> the string N times.</p>\n", "abstract": "Multiplying by a boolean One thing I'm constantly doing in web development is optionally printing HTML parameters. We've all seen code like this in other languages: In Python, you can multiply by a boolean and it does exactly what you'd expect: This is because multiplication coerces the boolean to an integer (0 for False, 1 for True), and in python multiplying a string by an int repeats the string N times."}, {"id": 112316, "score": 74, "vote": 0, "content": "<p>Python's advanced slicing operation has a barely known syntax element, the ellipsis:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; class C(object):\n...  def __getitem__(self, item):\n...   return item\n... \n&gt;&gt;&gt; C()[1:2, ..., 3]\n(slice(1, 2, None), Ellipsis, 3)\n</code></pre>\n<p>Unfortunately it's barely useful as the ellipsis is only supported if tuples are involved.</p>\n", "abstract": "Python's advanced slicing operation has a barely known syntax element, the ellipsis: Unfortunately it's barely useful as the ellipsis is only supported if tuples are involved."}, {"id": 804238, "score": 72, "vote": 0, "content": "<h1>re can call functions!</h1>\n<p>The fact that you can call a function every time something matches a regular expression is very handy.\nHere I have a sample of replacing every \"Hello\" with \"Hi,\" and \"there\" with \"Fred\", etc.</p>\n<pre><code class=\"python\">import re\n\ndef Main(haystack):\n  # List of from replacements, can be a regex\n  finds = ('Hello', 'there', 'Bob')\n  replaces = ('Hi,', 'Fred,', 'how are you?')\n\n  def ReplaceFunction(matchobj):\n    for found, rep in zip(matchobj.groups(), replaces):\n      if found != None:\n        return rep\n\n    # log error\n    return matchobj.group(0)\n\n  named_groups = [ '(%s)' % find for find in finds ]\n  ret = re.sub('|'.join(named_groups), ReplaceFunction, haystack)\n  print ret\n\nif __name__ == '__main__':\n  str = 'Hello there Bob'\n  Main(str)\n  # Prints 'Hi, Fred, how are you?'\n</code></pre>\n", "abstract": "The fact that you can call a function every time something matches a regular expression is very handy.\nHere I have a sample of replacing every \"Hello\" with \"Hi,\" and \"there\" with \"Fred\", etc."}, {"id": 4602518, "score": 70, "vote": 0, "content": "<p><strong>tuple unpacking in python 3</strong></p>\n<p>in python 3, you can use a syntax identical to optional arguments in function definition for tuple unpacking:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; first,second,*rest = (1,2,3,4,5,6,7,8)\n&gt;&gt;&gt; first\n1\n&gt;&gt;&gt; second\n2\n&gt;&gt;&gt; rest\n[3, 4, 5, 6, 7, 8]\n</code></pre>\n<p>but a feature less known and more powerful allows you to have an unknown number of elements <strong>in the middle of the list</strong>:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; first,*rest,last = (1,2,3,4,5,6,7,8)\n&gt;&gt;&gt; first\n1\n&gt;&gt;&gt; rest\n[2, 3, 4, 5, 6, 7]\n&gt;&gt;&gt; last\n8\n</code></pre>\n", "abstract": "tuple unpacking in python 3 in python 3, you can use a syntax identical to optional arguments in function definition for tuple unpacking: but a feature less known and more powerful allows you to have an unknown number of elements in the middle of the list:"}, {"id": 3342952, "score": 67, "vote": 0, "content": "<p><strong>Multi line strings</strong></p>\n<p>One approach is to use backslashes:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; sql = \"select * from some_table \\\nwhere id &gt; 10\"\n&gt;&gt;&gt; print sql\nselect * from some_table where id &gt; 10\n</code></pre>\n<p>Another is to use the triple-quote:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; sql = \"\"\"select * from some_table \nwhere id &gt; 10\"\"\"\n&gt;&gt;&gt; print sql\nselect * from some_table where id &gt; 10\n</code></pre>\n<p>Problem with those is that they are not indented (look poor in your code). If you try to indent, it'll just print the white-spaces you put. </p>\n<p>A third solution, which I found about recently, is to divide your string into lines and surround with parentheses:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; sql = (\"select * from some_table \" # &lt;-- no comma, whitespace at end\n           \"where id &gt; 10 \"\n           \"order by name\") \n&gt;&gt;&gt; print sql\nselect * from some_table where id &gt; 10 order by name\n</code></pre>\n<p>note how there's no comma between lines (this is not a tuple), and you have to account for any trailing/leading white spaces that your string needs to have. All of these work with placeholders, by the way (such as <code>\"my name is %s\" % name</code>).</p>\n", "abstract": "Multi line strings One approach is to use backslashes: Another is to use the triple-quote: Problem with those is that they are not indented (look poor in your code). If you try to indent, it'll just print the white-spaces you put.  A third solution, which I found about recently, is to divide your string into lines and surround with parentheses: note how there's no comma between lines (this is not a tuple), and you have to account for any trailing/leading white spaces that your string needs to have. All of these work with placeholders, by the way (such as \"my name is %s\" % name)."}, {"id": 3268128, "score": 63, "vote": 0, "content": "<p>This answer has been moved into the question itself, as requested by many people.</p>\n", "abstract": "This answer has been moved into the question itself, as requested by many people."}, {"id": 116580, "score": 59, "vote": 0, "content": "<ul>\n<li>The underscore, it contains the most recent output value displayed by the interpreter (in an interactive session):</li>\n</ul>\n<pre>\n&gt;&gt;&gt; (a for a in xrange(10000))\n&lt;generator object at 0x81a8fcc&gt;\n&gt;&gt;&gt; b = 'blah'\n&gt;&gt;&gt; _\n&lt;generator object at 0x81a8fcc&gt;\n</pre>\n<ul>\n<li>A convenient Web-browser controller:</li>\n</ul>\n<pre>&gt;&gt;&gt; import webbrowser\n&gt;&gt;&gt; webbrowser.open_new_tab('http://www.stackoverflow.com')</pre>\n<ul>\n<li>A built-in http server. To serve the files in the current directory:</li>\n</ul>\n<pre>python -m SimpleHTTPServer 8000</pre>\n<ul>\n<li>AtExit</li>\n</ul>\n<pre>&gt;&gt;&gt; import atexit</pre>\n", "abstract": ""}, {"id": 3371415, "score": 56, "vote": 0, "content": "<h3>pow() can also calculate (x ** y) % z efficiently.</h3>\n<p>There is a lesser known third argument of the built-in <code>pow()</code> function that allows you to calculate x<sup>y</sup> modulo z more efficiently than simply doing <code>(x ** y) % z</code>:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; x, y, z = 1234567890, 2345678901, 17\n&gt;&gt;&gt; pow(x, y, z)            # almost instantaneous\n6\n</code></pre>\n<p>In comparison, <code>(x ** y) % z</code> didn't given a result in one minute on my machine for the same values.</p>\n", "abstract": "There is a lesser known third argument of the built-in pow() function that allows you to calculate xy modulo z more efficiently than simply doing (x ** y) % z: In comparison, (x ** y) % z didn't given a result in one minute on my machine for the same values."}, {"id": 326893, "score": 52, "vote": 0, "content": "<p>You can easily transpose an array with zip.</p>\n<pre><code class=\"python\">a = [(1,2), (3,4), (5,6)]\nzip(*a)\n# [(1, 3, 5), (2, 4, 6)]\n</code></pre>\n", "abstract": "You can easily transpose an array with zip."}, {"id": 3967144, "score": 52, "vote": 0, "content": "<h3>enumerate with different starting index</h3>\n<p><code>enumerate</code> has partly been covered in <a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python/117116#117116\">this answer</a>, but recently I've found an even more hidden feature of <code>enumerate</code> that I think deserves its own post instead of just a comment.</p>\n<p>Since Python 2.6, you can specify a starting index to <code>enumerate</code> in its second argument:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; l = [\"spam\", \"ham\", \"eggs\"]\n&gt;&gt;&gt; list(enumerate(l))\n&gt;&gt;&gt; [(0, \"spam\"), (1, \"ham\"), (2, \"eggs\")]\n&gt;&gt;&gt; list(enumerate(l, 1))\n&gt;&gt;&gt; [(1, \"spam\"), (2, \"ham\"), (3, \"eggs\")]\n</code></pre>\n<p>One place where I've found it utterly useful is when I am enumerating over entries of a symmetric matrix. Since the matrix is symmetric, I can save time by iterating over the upper triangle only, but in that case, I have to use <code>enumerate</code> with a different starting index in the inner <code>for</code> loop to keep track of the row and column indices properly:</p>\n<pre><code class=\"python\">for ri, row in enumerate(matrix):\n    for ci, column in enumerate(matrix[ri:], ri):\n        # ci now refers to the proper column index\n</code></pre>\n<p>Strangely enough, this behaviour of <code>enumerate</code> is not documented in <code>help(enumerate)</code>, only in the <a href=\"http://docs.python.org/library/functions.html#enumerate\" rel=\"nofollow noreferrer\">online documentation</a>.</p>\n", "abstract": "enumerate has partly been covered in this answer, but recently I've found an even more hidden feature of enumerate that I think deserves its own post instead of just a comment. Since Python 2.6, you can specify a starting index to enumerate in its second argument: One place where I've found it utterly useful is when I am enumerating over entries of a symmetric matrix. Since the matrix is symmetric, I can save time by iterating over the upper triangle only, but in that case, I have to use enumerate with a different starting index in the inner for loop to keep track of the row and column indices properly: Strangely enough, this behaviour of enumerate is not documented in help(enumerate), only in the online documentation."}, {"id": 101919, "score": 50, "vote": 0, "content": "<p>You can use <a href=\"http://docs.python.org/library/functions.html#property\" rel=\"nofollow noreferrer\">property</a> to make your class interfaces more strict.</p>\n<pre><code class=\"python\">class C(object):\n    def __init__(self, foo, bar):\n        self.foo = foo # read-write property\n        self.bar = bar # simple attribute\n\n    def _set_foo(self, value):\n        self._foo = value\n\n    def _get_foo(self):\n        return self._foo\n\n    def _del_foo(self):\n        del self._foo\n\n    # any of fget, fset, fdel and doc are optional,\n    # so you can make a write-only and/or delete-only property.\n    foo = property(fget = _get_foo, fset = _set_foo,\n                   fdel = _del_foo, doc = 'Hello, I am foo!')\n\nclass D(C):\n    def _get_foo(self):\n        return self._foo * 2\n\n    def _set_foo(self, value):\n        self._foo = value / 2\n\n    foo = property(fget = _get_foo, fset = _set_foo,\n                   fdel = C.foo.fdel, doc = C.foo.__doc__)\n</code></pre>\n<p>In Python <a href=\"http://docs.python.org/dev/whatsnew/2.6.html\" rel=\"nofollow noreferrer\">2.6 and 3.0</a>:</p>\n<pre><code class=\"python\">class C(object):\n    def __init__(self, foo, bar):\n        self.foo = foo # read-write property\n        self.bar = bar # simple attribute\n\n    @property\n    def foo(self):\n        '''Hello, I am foo!'''\n\n        return self._foo\n\n    @foo.setter\n    def foo(self, value):\n        self._foo = value\n\n    @foo.deleter\n    def foo(self):\n        del self._foo\n\nclass D(C):\n    @C.foo.getter\n    def foo(self):\n        return self._foo * 2\n\n    @foo.setter\n    def foo(self, value):\n        self._foo = value / 2\n</code></pre>\n<p>To learn more about how property works refer to <a href=\"http://docs.python.org/howto/descriptor.html\" rel=\"nofollow noreferrer\">descriptors</a>.</p>\n", "abstract": "You can use property to make your class interfaces more strict. In Python 2.6 and 3.0: To learn more about how property works refer to descriptors."}, {"id": 116280, "score": 48, "vote": 0, "content": "<p>Many people don't know about the \"dir\" function. It's a great way to figure out what an object can do from the interpreter. For example, if you want to see a list of all the string methods:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; dir(\"foo\")\n['__add__', '__class__', '__contains__', (snipped a bunch), 'title',\n 'translate', 'upper', 'zfill']\n</code></pre>\n<p>And then if you want more information about a particular method you can call \"help\" on it.</p>\n<pre><code class=\"python\">&gt;&gt;&gt; help(\"foo\".upper)\n    Help on built-in function upper:\n\nupper(...)\n    S.upper() -&gt; string\n\n    Return a copy of the string S converted to uppercase.\n</code></pre>\n", "abstract": "Many people don't know about the \"dir\" function. It's a great way to figure out what an object can do from the interpreter. For example, if you want to see a list of all the string methods: And then if you want more information about a particular method you can call \"help\" on it."}, {"id": 224747, "score": 47, "vote": 0, "content": "<p><a href=\"http://docs.python.org/library/stdtypes.html#set\" rel=\"nofollow noreferrer\"><strong>set/frozenset</strong></a></p>\n<p>Probably an easily overlooked python builtin is \"set/frozenset\".</p>\n<p>Useful when you have a list like this, [1,2,1,1,2,3,4] and only want the uniques like this [1,2,3,4].</p>\n<p>Using set() that's exactly what you get:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; x = [1,2,1,1,2,3,4] \n&gt;&gt;&gt; \n&gt;&gt;&gt; set(x) \nset([1, 2, 3, 4]) \n&gt;&gt;&gt;\n&gt;&gt;&gt; for i in set(x):\n...     print i\n...\n1\n2\n3\n4\n</code></pre>\n<p>And of course to get the number of uniques in a list:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; len(set([1,2,1,1,2,3,4]))\n4\n</code></pre>\n<p>You can also find if a list is a subset of another list using set().issubset():</p>\n<pre><code class=\"python\">&gt;&gt;&gt; set([1,2,3,4]).issubset([0,1,2,3,4,5])\nTrue\n</code></pre>\n<p>As of Python 2.7 and 3.0 you can use curly braces to create a set:</p>\n<pre><code class=\"python\">myset = {1,2,3,4}\n</code></pre>\n<p>as well as set comprehensions:</p>\n<pre><code class=\"python\">{x for x in stuff}\n</code></pre>\n<p>For more details:\n<a href=\"http://docs.python.org/library/stdtypes.html#set\" rel=\"nofollow noreferrer\">http://docs.python.org/library/stdtypes.html#set</a></p>\n", "abstract": "set/frozenset Probably an easily overlooked python builtin is \"set/frozenset\". Useful when you have a list like this, [1,2,1,1,2,3,4] and only want the uniques like this [1,2,3,4]. Using set() that's exactly what you get: And of course to get the number of uniques in a list: You can also find if a list is a subset of another list using set().issubset(): As of Python 2.7 and 3.0 you can use curly braces to create a set: as well as set comprehensions: For more details:\nhttp://docs.python.org/library/stdtypes.html#set"}, {"id": 143659, "score": 46, "vote": 0, "content": "<p><strong>Built-in base64, zlib, and rot13 codecs</strong></p>\n<p>Strings have <code>encode</code> and <code>decode</code> methods.  Usually this is used for converting <code>str</code> to <code>unicode</code> and vice versa, e.g. with <code>u = s.encode('utf8')</code>.  But there are some other handy builtin codecs.  Compression and decompression with zlib (and bz2) is available without an explicit import:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; s = 'a' * 100\n&gt;&gt;&gt; s.encode('zlib')\n'x\\x9cKL\\xa4=\\x00\\x00zG%\\xe5'\n</code></pre>\n<p>Similarly you can encode and decode base64:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; 'Hello world'.encode('base64')\n'SGVsbG8gd29ybGQ=\\n'\n&gt;&gt;&gt; 'SGVsbG8gd29ybGQ=\\n'.decode('base64')\n'Hello world'\n</code></pre>\n<p>And, of course, you can rot13:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; 'Secret message'.encode('rot13')\n'Frperg zrffntr'\n</code></pre>\n", "abstract": "Built-in base64, zlib, and rot13 codecs Strings have encode and decode methods.  Usually this is used for converting str to unicode and vice versa, e.g. with u = s.encode('utf8').  But there are some other handy builtin codecs.  Compression and decompression with zlib (and bz2) is available without an explicit import: Similarly you can encode and decode base64: And, of course, you can rot13:"}, {"id": 393927, "score": 43, "vote": 0, "content": "<p><strong>An interpreter within the interpreter</strong></p>\n<p>The standard library's <a href=\"http://docs.python.org/library/code.html\" rel=\"nofollow noreferrer\">code</a> module let's you include your own read-eval-print loop inside a program, or run a whole nested interpreter. E.g. (copied my example from <a href=\"https://stackoverflow.com/questions/393871/scripting-inside-a-python-application#393921\">here</a>)</p>\n<pre><code class=\"python\">$ python\nPython 2.5.1 (r251:54863, Jan 17 2008, 19:35:17) \n[GCC 4.0.1 (Apple Inc. build 5465)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; shared_var = \"Set in main console\"\n&gt;&gt;&gt; import code\n&gt;&gt;&gt; ic = code.InteractiveConsole({ 'shared_var': shared_var })\n&gt;&gt;&gt; try:\n...     ic.interact(\"My custom console banner!\")\n... except SystemExit, e:\n...     print \"Got SystemExit!\"\n... \nMy custom console banner!\n&gt;&gt;&gt; shared_var\n'Set in main console'\n&gt;&gt;&gt; shared_var = \"Set in sub-console\"\n&gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.exit()\nGot SystemExit!\n&gt;&gt;&gt; shared_var\n'Set in main console'\n</code></pre>\n<p>This is extremely useful for situations where you want to accept scripted input from the user, or query the state of the VM in real-time.</p>\n<p><a href=\"http://turbogears.com/\" rel=\"nofollow noreferrer\">TurboGears</a> uses this to great effect by having a WebConsole from which you can query the state of you live web app.</p>\n", "abstract": "An interpreter within the interpreter The standard library's code module let's you include your own read-eval-print loop inside a program, or run a whole nested interpreter. E.g. (copied my example from here) This is extremely useful for situations where you want to accept scripted input from the user, or query the state of the VM in real-time. TurboGears uses this to great effect by having a WebConsole from which you can query the state of you live web app."}, {"id": 299781, "score": 40, "vote": 0, "content": "<pre><code class=\"python\">&gt;&gt;&gt; from functools import partial\n&gt;&gt;&gt; bound_func = partial(range, 0, 10)\n&gt;&gt;&gt; bound_func()\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n&gt;&gt;&gt; bound_func(2)\n[0, 2, 4, 6, 8]\n</code></pre>\n<p>not really a hidden feature but partial is extremely useful for having late evaluation of functions.</p>\n<p>you can bind as many or as few parameters in the initial call to partial as you want, and call it with any remaining parameters later (in this example i've bound the begin/end args to range, but call it the second time with a step arg)</p>\n<p>See <a href=\"http://www.python.org/doc//current/library/functools.html\" rel=\"nofollow noreferrer\">the documentation</a>.</p>\n", "abstract": "not really a hidden feature but partial is extremely useful for having late evaluation of functions. you can bind as many or as few parameters in the initial call to partial as you want, and call it with any remaining parameters later (in this example i've bound the begin/end args to range, but call it the second time with a step arg) See the documentation."}, {"id": 261833, "score": 36, "vote": 0, "content": "<p>While debugging complex data structures <em>pprint</em> module comes handy.</p>\n<p>Quoting from the docs..</p>\n<pre><code class=\"python\">&gt;&gt;&gt; import pprint    \n&gt;&gt;&gt; stuff = sys.path[:]\n&gt;&gt;&gt; stuff.insert(0, stuff)\n&gt;&gt;&gt; pprint.pprint(stuff)\n[&lt;Recursion on list with id=869440&gt;,\n '',\n '/usr/local/lib/python1.5',\n '/usr/local/lib/python1.5/test',\n '/usr/local/lib/python1.5/sunos5',\n '/usr/local/lib/python1.5/sharedmodules',\n '/usr/local/lib/python1.5/tkinter']\n</code></pre>\n", "abstract": "While debugging complex data structures pprint module comes handy. Quoting from the docs.."}, {"id": 171767, "score": 34, "vote": 0, "content": "<p><strong>Python has GOTO</strong></p>\n<p>...and it's implemented by <a href=\"http://entrian.com/goto/\" rel=\"nofollow noreferrer\">external pure-Python module</a> :)</p>\n<pre><code class=\"python\">from goto import goto, label\nfor i in range(1, 10):\n    for j in range(1, 20):\n        for k in range(1, 30):\n            print i, j, k\n            if k == 3:\n                goto .end # breaking out from a deeply nested loop\nlabel .end\nprint \"Finished\"\n</code></pre>\n", "abstract": "Python has GOTO ...and it's implemented by external pure-Python module :)"}, {"id": 141900, "score": 32, "vote": 0, "content": "<p>dict's constructor accepts keyword arguments:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; dict(foo=1, bar=2)\n{'foo': 1, 'bar': 2}\n</code></pre>\n", "abstract": "dict's constructor accepts keyword arguments:"}, {"id": 3693838, "score": 29, "vote": 0, "content": "<p><strong>Sequence multiplication and reflected operands</strong></p>\n<pre><code class=\"python\">&gt;&gt;&gt; 'xyz' * 3\n'xyzxyzxyz'\n\n&gt;&gt;&gt; [1, 2] * 3\n[1, 2, 1, 2, 1, 2]\n\n&gt;&gt;&gt; (1, 2) * 3\n(1, 2, 1, 2, 1, 2)\n</code></pre>\n<p>We get the same result with reflected (swapped) operands</p>\n<pre><code class=\"python\">&gt;&gt;&gt; 3 * 'xyz'\n'xyzxyzxyz'\n</code></pre>\n<p>It works like this:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; s = 'xyz'\n&gt;&gt;&gt; num = 3\n</code></pre>\n<p>To evaluate an expression <strong>s * num</strong> interpreter calls <strong>s.___mul___(num)</strong></p>\n<pre><code class=\"python\">&gt;&gt;&gt; s * num\n'xyzxyzxyz'\n\n&gt;&gt;&gt; s.__mul__(num)\n'xyzxyzxyz'\n</code></pre>\n<p>To evaluate an expression <strong>num * s</strong> interpreter calls <strong>num.___mul___(s)</strong></p>\n<pre><code class=\"python\">&gt;&gt;&gt; num * s\n'xyzxyzxyz'\n\n&gt;&gt;&gt; num.__mul__(s)\nNotImplemented\n</code></pre>\n<p>If the call returns <strong><em>NotImplemented</em></strong> then interpreter calls\na reflected operation <strong>s.___rmul___(num)</strong> if operands have different types</p>\n<pre><code class=\"python\">&gt;&gt;&gt; s.__rmul__(num)\n'xyzxyzxyz'\n</code></pre>\n<p>See <a href=\"http://docs.python.org/reference/datamodel.html#object.__rmul__\" rel=\"nofollow noreferrer\">http://docs.python.org/reference/datamodel.html#object.<strong>rmul</strong></a></p>\n", "abstract": "Sequence multiplication and reflected operands We get the same result with reflected (swapped) operands It works like this: To evaluate an expression s * num interpreter calls s.___mul___(num) To evaluate an expression num * s interpreter calls num.___mul___(s) If the call returns NotImplemented then interpreter calls\na reflected operation s.___rmul___(num) if operands have different types See http://docs.python.org/reference/datamodel.html#object.rmul"}, {"id": 101731, "score": 28, "vote": 0, "content": "<p><strong>Getter functions in module operator</strong></p>\n<p>The functions <code>attrgetter()</code> and <code>itemgetter()</code> in module <code>operator</code> can be used to generate fast access functions for use in sorting and search objects and dictionaries</p>\n<p><a href=\"http://docs.python.org/lib/module-operator.html\" rel=\"nofollow noreferrer\">Chapter 6.7</a> in the Python Library Docs</p>\n", "abstract": "Getter functions in module operator The functions attrgetter() and itemgetter() in module operator can be used to generate fast access functions for use in sorting and search objects and dictionaries Chapter 6.7 in the Python Library Docs"}, {"id": 108312, "score": 28, "vote": 0, "content": "<p><strong>Interleaving <code>if</code> and <code>for</code> in list comprehensions</strong></p>\n<pre><code class=\"python\">&gt;&gt;&gt; [(x, y) for x in range(4) if x % 2 == 1 for y in range(4)]\n[(1, 0), (1, 1), (1, 2), (1, 3), (3, 0), (3, 1), (3, 2), (3, 3)]\n</code></pre>\n<p>I never realized this until I learned Haskell.</p>\n", "abstract": "Interleaving if and for in list comprehensions I never realized this until I learned Haskell."}, {"id": 113319, "score": 27, "vote": 0, "content": "<p>Tuple unpacking:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; (a, (b, c), d) = [(1, 2), (3, 4), (5, 6)]\n&gt;&gt;&gt; a\n(1, 2)\n&gt;&gt;&gt; b\n3\n&gt;&gt;&gt; c, d\n(4, (5, 6))\n</code></pre>\n<p>More obscurely, you can do this in function arguments (in Python 2.x; Python 3.x will not allow this anymore):</p>\n<pre><code class=\"python\">&gt;&gt;&gt; def addpoints((x1, y1), (x2, y2)):\n...     return (x1+x2, y1+y2)\n&gt;&gt;&gt; addpoints((5, 0), (3, 5))\n(8, 5)\n</code></pre>\n", "abstract": "Tuple unpacking: More obscurely, you can do this in function arguments (in Python 2.x; Python 3.x will not allow this anymore):"}, {"id": 148211, "score": 27, "vote": 0, "content": "<p>Obviously, the antigravity module.\n<a href=\"http://xkcd.com/353/\" rel=\"nofollow noreferrer\">xkcd #353</a></p>\n", "abstract": "Obviously, the antigravity module.\nxkcd #353"}, {"id": 105325, "score": 26, "vote": 0, "content": "<p><strong>The Python Interpreter</strong></p>\n<pre><code class=\"python\">&gt;&gt;&gt; \n</code></pre>\n<p>Maybe not lesser known, but certainly one of my favorite features of Python.</p>\n", "abstract": "The Python Interpreter Maybe not lesser known, but certainly one of my favorite features of Python."}, {"id": 116440, "score": 25, "vote": 0, "content": "<p>Python sort function sorts tuples correctly (i.e. using the familiar lexicographical order):</p>\n<pre><code class=\"python\">a = [(2, \"b\"), (1, \"a\"), (2, \"a\"), (3, \"c\")]\nprint sorted(a)\n#[(1, 'a'), (2, 'a'), (2, 'b'), (3, 'c')]\n</code></pre>\n<p>Useful if you want to sort a list of persons after age and then name.</p>\n", "abstract": "Python sort function sorts tuples correctly (i.e. using the familiar lexicographical order): Useful if you want to sort a list of persons after age and then name."}, {"id": 221874, "score": 25, "vote": 0, "content": "<h3>Referencing a list comprehension as it is being built...</h3>\n<p>You can reference a list comprehension as it is being built by the symbol '_[1]'.  For example, the following function unique-ifies a list of elements without changing their order by referencing its list comprehension.</p>\n<pre><code class=\"python\">def unique(my_list):\n    return [x for x in my_list if x not in locals()['_[1]']]\n</code></pre>\n", "abstract": "You can reference a list comprehension as it is being built by the symbol '_[1]'.  For example, the following function unique-ifies a list of elements without changing their order by referencing its list comprehension."}, {"id": 1823597, "score": 25, "vote": 0, "content": "<p>The unpacking syntax has been upgraded in the recent version as can be seen in the example.</p>\n<pre><code class=\"python\">&gt;&gt;&gt; a, *b = range(5)\n&gt;&gt;&gt; a, b\n(0, [1, 2, 3, 4])\n&gt;&gt;&gt; *a, b = range(5)\n&gt;&gt;&gt; a, b\n([0, 1, 2, 3], 4)\n&gt;&gt;&gt; a, *b, c = range(5)\n&gt;&gt;&gt; a, b, c\n(0, [1, 2, 3], 4)\n</code></pre>\n", "abstract": "The unpacking syntax has been upgraded in the recent version as can be seen in the example."}, {"id": 4775544, "score": 25, "vote": 0, "content": "<p>The simplicity of :</p>\n<pre><code class=\"python\">&gt;&gt;&gt; 'str' in 'string'\nTrue\n&gt;&gt;&gt; 'no' in 'yes'\nFalse\n&gt;&gt;&gt; \n</code></pre>\n<p>is something i love about Python, I have seen a lot of not very pythonic idiom like that instead :</p>\n<pre><code class=\"python\">if 'yes'.find(\"no\") == -1:\n    pass\n</code></pre>\n", "abstract": "The simplicity of : is something i love about Python, I have seen a lot of not very pythonic idiom like that instead :"}, {"id": 101286, "score": 24, "vote": 0, "content": "<p><strong>Metaclasses</strong></p>\n<p>of course :-) <a href=\"https://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python\">What is a metaclass in Python?</a></p>\n", "abstract": "Metaclasses of course :-) What is a metaclass in Python?"}, {"id": 938602, "score": 24, "vote": 0, "content": "<p>I personally love the <strong>3 different quotes</strong></p>\n<pre><code class=\"python\">str = \"I'm a string 'but still I can use quotes' inside myself!\"\nstr = \"\"\" For some messy multi line strings.\nSuch as\n&lt;html&gt;\n&lt;head&gt; ... &lt;/head&gt;\"\"\"\n</code></pre>\n<p>Also cool: not having to escape regular expressions, avoiding horrible backslash salad by using <strong>raw strings</strong>:</p>\n<pre><code class=\"python\">str2 = r\"\\n\" \nprint str2\n&gt;&gt; \\n\n</code></pre>\n", "abstract": "I personally love the 3 different quotes Also cool: not having to escape regular expressions, avoiding horrible backslash salad by using raw strings:"}, {"id": 165138, "score": 23, "vote": 0, "content": "<p><strong>Generators</strong></p>\n<p>I think that a lot of beginning Python developers pass over generators without really grasping what they're for or getting any sense of their power.  It wasn't until I read David M. Beazley's PyCon presentation on generators (it's available <a href=\"http://www.dabeaz.com/generators/\" rel=\"nofollow noreferrer\">here</a>) that I realized how useful (essential, really) they are.  That presentation illuminated what was for me an entirely new way of programming, and I recommend it to anyone who doesn't have a deep understanding of generators.</p>\n", "abstract": "Generators I think that a lot of beginning Python developers pass over generators without really grasping what they're for or getting any sense of their power.  It wasn't until I read David M. Beazley's PyCon presentation on generators (it's available here) that I realized how useful (essential, really) they are.  That presentation illuminated what was for me an entirely new way of programming, and I recommend it to anyone who doesn't have a deep understanding of generators."}, {"id": 101892, "score": 22, "vote": 0, "content": "<p>Implicit concatenation:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; print \"Hello \" \"World\"\nHello World\n</code></pre>\n<p>Useful when you want to make a long text fit on several lines in a script:</p>\n<pre><code class=\"python\">hello = \"Greaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa Hello \" \\\n        \"Word\"\n</code></pre>\n<p>or</p>\n<pre><code class=\"python\">hello = (\"Greaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa Hello \" \n         \"Word\")\n</code></pre>\n", "abstract": "Implicit concatenation: Useful when you want to make a long text fit on several lines in a script: or"}, {"id": 3254039, "score": 22, "vote": 0, "content": "<p>When using the interactive shell, \"_\" contains the value of the last printed item:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; range(10)\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n&gt;&gt;&gt; _\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n&gt;&gt;&gt;\n</code></pre>\n", "abstract": "When using the interactive shell, \"_\" contains the value of the last printed item:"}, {"id": 3310122, "score": 22, "vote": 0, "content": "<p>The <a href=\"http://docs.python.org/library/textwrap.html#textwrap.dedent\" rel=\"nofollow noreferrer\"><code>textwrap.dedent</code></a> utility function in python can come quite in handy testing that a multiline string returned is equal to the expected output without breaking the indentation of your unittests:</p>\n<pre><code class=\"python\">import unittest, textwrap\n\nclass XMLTests(unittest.TestCase):\n    def test_returned_xml_value(self):\n        returned_xml = call_to_function_that_returns_xml()\n        expected_value = textwrap.dedent(\"\"\"\\\n        &lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n        &lt;root_node&gt;\n            &lt;my_node&gt;my_content&lt;/my_node&gt;\n        &lt;/root_node&gt;\n        \"\"\")\n\n        self.assertEqual(expected_value, returned_xml)\n</code></pre>\n", "abstract": "The textwrap.dedent utility function in python can come quite in handy testing that a multiline string returned is equal to the expected output without breaking the indentation of your unittests:"}, {"id": 3326757, "score": 22, "vote": 0, "content": "<h2>Zero-argument and variable-argument lambdas</h2>\n<p>Lambda functions are usually used for a quick transformation of one value into another, but they can also be used to wrap a value in a function:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; f = lambda: 'foo'\n&gt;&gt;&gt; f()\n'foo'\n</code></pre>\n<p>They can also accept the usual <code>*args</code> and <code>**kwargs</code> syntax:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; g = lambda *args, **kwargs: args[0], kwargs['thing']\n&gt;&gt;&gt; g(1, 2, 3, thing='stuff')\n(1, 'stuff')\n</code></pre>\n", "abstract": "Lambda functions are usually used for a quick transformation of one value into another, but they can also be used to wrap a value in a function: They can also accept the usual *args and **kwargs syntax:"}, {"id": 215326, "score": 21, "vote": 0, "content": "<p><strong>Using keyword arguments as assignments</strong></p>\n<p>Sometimes one wants to build a range of functions depending on one or more parameters. However this might easily lead to closures all referring to the same object and value:</p>\n<pre><code class=\"python\">funcs = [] \nfor k in range(10):\n     funcs.append( lambda: k)\n\n&gt;&gt;&gt; funcs[0]()\n9\n&gt;&gt;&gt; funcs[7]()\n9\n</code></pre>\n<p>This behaviour can be avoided by turning the lambda expression into a function depending only on its arguments. A keyword parameter stores the current value that is bound to it. The function call doesn't have to be altered:</p>\n<pre><code class=\"python\">funcs = [] \nfor k in range(10):\n     funcs.append( lambda k = k: k)\n\n&gt;&gt;&gt; funcs[0]()\n0\n&gt;&gt;&gt; funcs[7]()\n7\n</code></pre>\n", "abstract": "Using keyword arguments as assignments Sometimes one wants to build a range of functions depending on one or more parameters. However this might easily lead to closures all referring to the same object and value: This behaviour can be avoided by turning the lambda expression into a function depending only on its arguments. A keyword parameter stores the current value that is bound to it. The function call doesn't have to be altered:"}, {"id": 1853633, "score": 20, "vote": 0, "content": "<p><strong>Mod works correctly with negative numbers</strong></p>\n<p>-1 % 5 is <strong><em>4</em></strong>, as it should be, not -1 as it is in other languages like JavaScript. This makes \"wraparound windows\" cleaner in Python, you just do this:</p>\n<pre><code class=\"python\">index = (index + increment) % WINDOW_SIZE\n</code></pre>\n", "abstract": "Mod works correctly with negative numbers -1 % 5 is 4, as it should be, not -1 as it is in other languages like JavaScript. This makes \"wraparound windows\" cleaner in Python, you just do this:"}, {"id": 106868, "score": 19, "vote": 0, "content": "<p><strong>First-class functions</strong></p>\n<p>It's not really a hidden feature, but the fact that functions are first class objects is simply great. You can pass them around like any other variable.</p>\n<pre><code class=\"python\">&gt;&gt;&gt; def jim(phrase):\n...   return 'Jim says, \"%s\".' % phrase\n&gt;&gt;&gt; def say_something(person, phrase):\n...   print person(phrase)\n\n&gt;&gt;&gt; say_something(jim, 'hey guys')\n'Jim says, \"hey guys\".'\n</code></pre>\n", "abstract": "First-class functions It's not really a hidden feature, but the fact that functions are first class objects is simply great. You can pass them around like any other variable."}, {"id": 118202, "score": 19, "vote": 0, "content": "<p><strong>Ternary operator</strong></p>\n<pre><code class=\"python\">&gt;&gt;&gt; 'ham' if True else 'spam'\n'ham'\n&gt;&gt;&gt; 'ham' if False else 'spam'\n'spam'\n</code></pre>\n<p>This was added in 2.5, prior to that you could use:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; True and 'ham' or 'spam'\n'ham'\n&gt;&gt;&gt; False and 'ham' or 'spam'\n'spam'\n</code></pre>\n<p>However, if the values you want to work with would be considered false, there is a difference:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; [] if True else 'spam'\n[]\n&gt;&gt;&gt; True and [] or 'spam'\n'spam'\n</code></pre>\n", "abstract": "Ternary operator This was added in 2.5, prior to that you could use: However, if the values you want to work with would be considered false, there is a difference:"}, {"id": 135024, "score": 19, "vote": 0, "content": "<p>Assigning and deleting slices:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; a = range(10)\n&gt;&gt;&gt; a\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n&gt;&gt;&gt; a[:5] = [42]\n&gt;&gt;&gt; a\n[42, 5, 6, 7, 8, 9]\n&gt;&gt;&gt; a[:1] = range(5)\n&gt;&gt;&gt; a\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n&gt;&gt;&gt; del a[::2]\n&gt;&gt;&gt; a\n[1, 3, 5, 7, 9]\n&gt;&gt;&gt; a[::2] = a[::-2]\n&gt;&gt;&gt; a\n[9, 3, 5, 7, 1]\n</code></pre>\n<p><em>Note</em>: when assigning to extended slices (<code>s[start:stop:step]</code>), the assigned iterable must have the same length as the slice.</p>\n", "abstract": "Assigning and deleting slices: Note: when assigning to extended slices (s[start:stop:step]), the assigned iterable must have the same length as the slice."}, {"id": 1013448, "score": 19, "vote": 0, "content": "<p>Not very hidden, but functions have attributes:</p>\n<pre><code class=\"python\">def doNothing():\n    pass\n\ndoNothing.monkeys = 4\nprint doNothing.monkeys\n4\n</code></pre>\n", "abstract": "Not very hidden, but functions have attributes:"}, {"id": 2482459, "score": 19, "vote": 0, "content": "<h2>Passing tuple to builtin functions</h2>\n<p>Much Python functions accept tuples, also it doesn't seem like. For example you want to test if your variable is a number, you could do:  </p>\n<pre><code class=\"python\">if isinstance (number, float) or isinstance (number, int):  \n   print \"yaay\"\n</code></pre>\n<p>But if you pass us tuple this looks much cleaner:  </p>\n<pre><code class=\"python\">if isinstance (number, (float, int)):  \n   print \"yaay\"\n</code></pre>\n", "abstract": "Much Python functions accept tuples, also it doesn't seem like. For example you want to test if your variable is a number, you could do:   But if you pass us tuple this looks much cleaner:  "}, {"id": 2916508, "score": 19, "vote": 0, "content": "<p>Nice treatment of infinite recursion in dictionaries:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; a = {}\n&gt;&gt;&gt; b = {}\n&gt;&gt;&gt; a['b'] = b\n&gt;&gt;&gt; b['a'] = a\n&gt;&gt;&gt; print a\n{'b': {'a': {...}}}\n</code></pre>\n", "abstract": "Nice treatment of infinite recursion in dictionaries:"}, {"id": 3244390, "score": 18, "vote": 0, "content": "<p>reversing an iterable using negative step</p>\n<pre><code class=\"python\">&gt;&gt;&gt; s = \"Hello World\"\n&gt;&gt;&gt; s[::-1]\n'dlroW olleH'\n&gt;&gt;&gt; a = (1,2,3,4,5,6)\n&gt;&gt;&gt; a[::-1]\n(6, 5, 4, 3, 2, 1)\n&gt;&gt;&gt; a = [5,4,3,2,1]\n&gt;&gt;&gt; a[::-1]\n[1, 2, 3, 4, 5]\n</code></pre>\n", "abstract": "reversing an iterable using negative step"}, {"id": 4501451, "score": 18, "vote": 0, "content": "<p>Not \"hidden\" but quite useful and not commonly used </p>\n<p>Creating string joining functions quickly like so</p>\n<pre><code class=\"python\"> comma_join = \",\".join\n semi_join  = \";\".join\n\n print comma_join([\"foo\",\"bar\",\"baz\"])\n 'foo,bar,baz\n</code></pre>\n<p>and</p>\n<p>Ability to create lists of strings more elegantly than the quote, comma mess. </p>\n<pre><code class=\"python\">l = [\"item1\", \"item2\", \"item3\"]\n</code></pre>\n<p>replaced by</p>\n<pre><code class=\"python\">l = \"item1 item2 item3\".split()\n</code></pre>\n", "abstract": "Not \"hidden\" but quite useful and not commonly used  Creating string joining functions quickly like so and Ability to create lists of strings more elegantly than the quote, comma mess.  replaced by"}, {"id": 5251200, "score": 18, "vote": 0, "content": "<p>Arguably, this is not a <em>programming</em> feature per se, but so useful that I'll post it nevertheless.</p>\n<pre><code class=\"python\">$ python -m http.server\n</code></pre>\n<p>...followed by <code>$ wget http://&lt;ipnumber&gt;:8000/filename</code> somewhere else.</p>\n<p>If you are still running an older (2.x) version of Python:</p>\n<pre><code class=\"python\">$ python -m SimpleHTTPServer\n</code></pre>\n<p>You can also specify a port e.g. <code>python -m http.server 80</code> (so you can omit the port in the url if you have the root on the server side)</p>\n", "abstract": "Arguably, this is not a programming feature per se, but so useful that I'll post it nevertheless. ...followed by $ wget http://<ipnumber>:8000/filename somewhere else. If you are still running an older (2.x) version of Python: You can also specify a port e.g. python -m http.server 80 (so you can omit the port in the url if you have the root on the server side)"}, {"id": 3143595, "score": 17, "vote": 0, "content": "<p><strong>Multiple references to an iterator</strong></p>\n<p>You can create multiple references to the same iterator using list multiplication:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; i = (1,2,3,4,5,6,7,8,9,10) # or any iterable object\n&gt;&gt;&gt; iterators = [iter(i)] * 2\n&gt;&gt;&gt; iterators[0].next()\n1\n&gt;&gt;&gt; iterators[1].next()\n2\n&gt;&gt;&gt; iterators[0].next()\n3\n</code></pre>\n<p>This can be used to group an iterable into chunks, for example, as in this example from the <a href=\"http://docs.python.org/library/itertools.html\" rel=\"nofollow noreferrer\"><code>itertools</code> documentation</a></p>\n<pre><code class=\"python\">def grouper(n, iterable, fillvalue=None):\n    \"grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx\"\n    args = [iter(iterable)] * n\n    return izip_longest(fillvalue=fillvalue, *args)\n</code></pre>\n", "abstract": "Multiple references to an iterator You can create multiple references to the same iterator using list multiplication: This can be used to group an iterable into chunks, for example, as in this example from the itertools documentation"}, {"id": 3277236, "score": 17, "vote": 0, "content": "<p>From python 3.1 ( 2.7 ) dictionary and set comprehensions are supported :</p>\n<pre><code class=\"python\">{ a:a for a in range(10) }\n{ a for a in range(10) }\n</code></pre>\n", "abstract": "From python 3.1 ( 2.7 ) dictionary and set comprehensions are supported :"}, {"id": 1687543, "score": 15, "vote": 0, "content": "<p>Python <a href=\"http://bugs.python.org/issue6595\" rel=\"nofollow noreferrer\">can understand any kind of unicode digits</a>, not just the ASCII kind:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; s = u'\uff11\uff10\uff15\uff18\uff15'\n&gt;&gt;&gt; s\nu'\\uff11\\uff10\\uff15\\uff18\\uff15'\n&gt;&gt;&gt; print s\n\uff11\uff10\uff15\uff18\uff15\n&gt;&gt;&gt; int(s)\n10585\n&gt;&gt;&gt; float(s)\n10585.0\n</code></pre>\n", "abstract": "Python can understand any kind of unicode digits, not just the ASCII kind:"}, {"id": 112306, "score": 14, "vote": 0, "content": "<p><code>__slots__</code> is a nice way to save memory, but it's very hard to get a dict of the values of the object.  Imagine the following object:</p>\n<pre><code class=\"python\">class Point(object):\n    __slots__ = ('x', 'y')\n</code></pre>\n<p>Now that object obviously has two attributes.  Now we can create an instance of it and build a dict of it this way:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; p = Point()\n&gt;&gt;&gt; p.x = 3\n&gt;&gt;&gt; p.y = 5\n&gt;&gt;&gt; dict((k, getattr(p, k)) for k in p.__slots__)\n{'y': 5, 'x': 3}\n</code></pre>\n<p>This however won't work if point was subclassed and new slots were added.  However Python automatically implements <code>__reduce_ex__</code> to help the <code>copy</code> module.  This can be abused to get a dict of values:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; p.__reduce_ex__(2)[2][1]\n{'y': 5, 'x': 3}\n</code></pre>\n", "abstract": "__slots__ is a nice way to save memory, but it's very hard to get a dict of the values of the object.  Imagine the following object: Now that object obviously has two attributes.  Now we can create an instance of it and build a dict of it this way: This however won't work if point was subclassed and new slots were added.  However Python automatically implements __reduce_ex__ to help the copy module.  This can be abused to get a dict of values:"}, {"id": 1983095, "score": 14, "vote": 0, "content": "<p><strong>itertools</strong></p>\n<p>This module is often overlooked.  The following example uses <code>itertools.chain()</code>\nto flatten a list:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; from itertools import *\n&gt;&gt;&gt; l = [[1, 2], [3, 4]]\n&gt;&gt;&gt; list(chain(*l))\n[1, 2, 3, 4]\n</code></pre>\n<p>See <a href=\"http://docs.python.org/library/itertools.html#recipes\" rel=\"nofollow noreferrer\">http://docs.python.org/library/itertools.html#recipes</a> for more applications.</p>\n", "abstract": "itertools This module is often overlooked.  The following example uses itertools.chain()\nto flatten a list: See http://docs.python.org/library/itertools.html#recipes for more applications."}, {"id": 2259080, "score": 14, "vote": 0, "content": "<h2>Manipulating sys.modules</h2>\n<p>You can manipulate the modules cache directly, making modules available or unavailable as you wish:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; import sys\n&gt;&gt;&gt; import ham\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nImportError: No module named ham\n\n# Make the 'ham' module available -- as a non-module object even!\n&gt;&gt;&gt; sys.modules['ham'] = 'ham, eggs, saussages and spam.'\n&gt;&gt;&gt; import ham\n&gt;&gt;&gt; ham\n'ham, eggs, saussages and spam.'\n\n# Now remove it again.\n&gt;&gt;&gt; sys.modules['ham'] = None\n&gt;&gt;&gt; import ham\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nImportError: No module named ham\n</code></pre>\n<p>This works even for modules that <em>are</em> available, and to some extent for modules that <em>already are imported</em>:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; import os\n# Stop future imports of 'os'.\n&gt;&gt;&gt; sys.modules['os'] = None\n&gt;&gt;&gt; import os\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nImportError: No module named os\n# Our old imported module is still available.\n&gt;&gt;&gt; os\n&lt;module 'os' from '/usr/lib/python2.5/os.pyc'&gt;\n</code></pre>\n<p>As the last line shows, changing sys.modules only affects future <code>import</code> statements, not past ones, so if you want to affect other modules it's important to make these changes <em>before</em> you give them a chance to try and import the modules -- so before you import them, typically. <code>None</code> is a special value in <code>sys.modules</code>, used for negative caching (indicating the module was not found the first time, so there's no point in looking again.) Any other value will be the result of the <code>import</code> operation -- even when it is not a module object. You can use this to replace modules with objects that behave exactly like you want. Deleting the entry from <code>sys.modules</code> entirely causes the next <code>import</code> to do a normal search for the module, even if it was already imported before.</p>\n", "abstract": "You can manipulate the modules cache directly, making modules available or unavailable as you wish: This works even for modules that are available, and to some extent for modules that already are imported: As the last line shows, changing sys.modules only affects future import statements, not past ones, so if you want to affect other modules it's important to make these changes before you give them a chance to try and import the modules -- so before you import them, typically. None is a special value in sys.modules, used for negative caching (indicating the module was not found the first time, so there's no point in looking again.) Any other value will be the result of the import operation -- even when it is not a module object. You can use this to replace modules with objects that behave exactly like you want. Deleting the entry from sys.modules entirely causes the next import to do a normal search for the module, even if it was already imported before."}, {"id": 3242895, "score": 14, "vote": 0, "content": "<p>You can ask any object which module it came from by looking at its __ module__ property. This is useful, for example, if you're experimenting at the command line and have imported a lot of things.</p>\n<p>Along the same lines, you can ask a module where it came from by looking at its __ file__ property.  This is useful when debugging path issues.</p>\n", "abstract": "You can ask any object which module it came from by looking at its __ module__ property. This is useful, for example, if you're experimenting at the command line and have imported a lot of things. Along the same lines, you can ask a module where it came from by looking at its __ file__ property.  This is useful when debugging path issues."}, {"id": 109194, "score": 13, "vote": 0, "content": "<p>Some of the <strong>builtin</strong> favorites, map(), reduce(), and filter(). All extremely fast and powerful.</p>\n", "abstract": "Some of the builtin favorites, map(), reduce(), and filter(). All extremely fast and powerful."}, {"id": 967971, "score": 13, "vote": 0, "content": "<p>One word: <a href=\"http://ipython.scipy.org/moin/\" rel=\"nofollow noreferrer\">IPython</a></p>\n<p>Tab introspection, pretty-printing, <code>%debug</code>, history management, <code>pylab</code>, ... well worth the time to learn well.</p>\n", "abstract": "One word: IPython Tab introspection, pretty-printing, %debug, history management, pylab, ... well worth the time to learn well."}, {"id": 1983078, "score": 13, "vote": 0, "content": "<p><strong>Guessing integer base</strong></p>\n<pre><code class=\"python\">&gt;&gt;&gt; int('10', 0)\n10\n&gt;&gt;&gt; int('0x10', 0)\n16\n&gt;&gt;&gt; int('010', 0)  # does not work on Python 3.x\n8\n&gt;&gt;&gt; int('0o10', 0)  # Python &gt;=2.6 and Python 3.x\n8\n&gt;&gt;&gt; int('0b10', 0)  # Python &gt;=2.6 and Python 3.x\n2\n</code></pre>\n", "abstract": "Guessing integer base"}, {"id": 118312, "score": 12, "vote": 0, "content": "<p>You can build up a dictionary from a set of length-2 sequences.  Extremely handy when you have a list of values and a list of arrays.</p>\n<pre><code class=\"python\">&gt;&gt;&gt; dict([ ('foo','bar'),('a',1),('b',2) ])\n{'a': 1, 'b': 2, 'foo': 'bar'}\n\n&gt;&gt;&gt; names = ['Bob', 'Marie', 'Alice']\n&gt;&gt;&gt; ages = [23, 27, 36]\n&gt;&gt;&gt; dict(zip(names, ages))\n{'Alice': 36, 'Bob': 23, 'Marie': 27}\n</code></pre>\n", "abstract": "You can build up a dictionary from a set of length-2 sequences.  Extremely handy when you have a list of values and a list of arrays."}, {"id": 1631763, "score": 12, "vote": 0, "content": "<h2>Extending properties (defined as descriptor) in subclasses</h2>\n<p>Sometimes it's useful to extent (modify) value \"returned\" by descriptor in subclass. It can be easily done with <code>super()</code>:</p>\n<pre><code class=\"python\">class A(object):\n    @property\n    def prop(self):\n        return {'a': 1}\n\nclass B(A):\n    @property\n    def prop(self):\n        return dict(super(B, self).prop, b=2)\n</code></pre>\n<p>Store this in <code>test.py</code> and run <code>python -i test.py</code> (<strong>another hidden feature: <code>-i</code> option executed the script and allow you to continue in interactive mode</strong>):</p>\n<pre><code class=\"python\">&gt;&gt;&gt; B().prop\n{'a': 1, 'b': 2}\n</code></pre>\n", "abstract": "Sometimes it's useful to extent (modify) value \"returned\" by descriptor in subclass. It can be easily done with super(): Store this in test.py and run python -i test.py (another hidden feature: -i option executed the script and allow you to continue in interactive mode):"}, {"id": 205889, "score": 11, "vote": 0, "content": "<p>A slight misfeature of python.  The normal fast way to join a list of strings together is,</p>\n<pre><code class=\"python\">''.join(list_of_strings)\n</code></pre>\n", "abstract": "A slight misfeature of python.  The normal fast way to join a list of strings together is,"}, {"id": 2060945, "score": 11, "vote": 0, "content": "<p><strong>Creating enums</strong></p>\n<p>In Python, you can do this to quickly create an enumeration:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; FOO, BAR, BAZ = range(3)\n&gt;&gt;&gt; FOO\n0\n</code></pre>\n<p>But the \"enums\" don't have to have integer values. You can even do this:</p>\n<pre><code class=\"python\">class Colors(object):\n    RED, GREEN, BLUE, YELLOW = (255,0,0), (0,255,0), (0,0,255), (0,255,255)\n\n#now Colors.RED is a 3-tuple that returns the 24-bit 8bpp RGB \n#value for saturated red\n</code></pre>\n", "abstract": "Creating enums In Python, you can do this to quickly create an enumeration: But the \"enums\" don't have to have integer values. You can even do this:"}, {"id": 4544088, "score": 11, "vote": 0, "content": "<p><strong>The Object Data Model</strong></p>\n<p>You can override <em>any</em> operator in the language for your own classes.  See <a href=\"http://docs.python.org/reference/datamodel.html\" rel=\"nofollow\">this page</a> for a complete list.  Some examples:</p>\n<ul>\n<li><p>You can override any operator (<code>* + - / // % ^ == &lt; &gt; &lt;= &gt;= .</code> etc.). All this is done by overriding <code>__mul__</code>, <code>__add__</code>, etc. in your objects.  You can even override things like <code>__rmul__</code> to handle separately <code>your_object*something_else</code> and <code>something_else*your_object</code>.  <code>.</code> is attribute access (<code>a.b</code>), and can be overridden to handle any arbitrary <code>b</code> by using <code>__getattr__</code>.  Also included here is <code>a(\u2026)</code> using <code>__call__</code>.</p></li>\n<li><p>You can create your own slice syntax (<code>a[stuff]</code>), which can be very complicated and quite different from the standard syntax used in lists (numpy has a good example of the power of this in their arrays) using any combination of <code>,</code>, <code>:</code>, and <code>\u2026</code> that you like, using Slice objects.  </p></li>\n<li><p>Handle specially what happens with many keywords in the language.  Included are <code>del</code>, <code>in</code>, <code>import</code>, and <code>not</code>.</p></li>\n<li><p>Handle what happens when many built in functions are called with your object.  The standard <code>__int__</code>, <code>__str__</code>, etc. go here, but so do <code>__len__</code>, <code>__reversed__</code>, <code>__abs__</code>, and the three argument <code>__pow__</code> (for modular exponentiation).  </p></li>\n</ul>\n", "abstract": "The Object Data Model You can override any operator in the language for your own classes.  See this page for a complete list.  Some examples: You can override any operator (* + - / // % ^ == < > <= >= . etc.). All this is done by overriding __mul__, __add__, etc. in your objects.  You can even override things like __rmul__ to handle separately your_object*something_else and something_else*your_object.  . is attribute access (a.b), and can be overridden to handle any arbitrary b by using __getattr__.  Also included here is a(\u2026) using __call__. You can create your own slice syntax (a[stuff]), which can be very complicated and quite different from the standard syntax used in lists (numpy has a good example of the power of this in their arrays) using any combination of ,, :, and \u2026 that you like, using Slice objects.   Handle specially what happens with many keywords in the language.  Included are del, in, import, and not. Handle what happens when many built in functions are called with your object.  The standard __int__, __str__, etc. go here, but so do __len__, __reversed__, __abs__, and the three argument __pow__ (for modular exponentiation).  "}, {"id": 5202620, "score": 11, "vote": 0, "content": "<p>The <code>re.Scanner</code> class. <a href=\"http://code.activestate.com/recipes/457664-hidden-scanner-functionality-in-re-module/\" rel=\"nofollow\">http://code.activestate.com/recipes/457664-hidden-scanner-functionality-in-re-module/</a></p>\n", "abstract": "The re.Scanner class. http://code.activestate.com/recipes/457664-hidden-scanner-functionality-in-re-module/"}, {"id": 120247, "score": 10, "vote": 0, "content": "<p><strong>\"Unpacking\" to function parameters</strong></p>\n<pre><code class=\"python\">def foo(a, b, c):\n        print a, b, c\n\nbar = (3, 14, 15)\nfoo(*bar)\n</code></pre>\n<p>When executed prints:</p>\n<pre><code class=\"python\">3 14 15\n</code></pre>\n", "abstract": "\"Unpacking\" to function parameters When executed prints:"}, {"id": 407695, "score": 10, "vote": 0, "content": "<p>The <code>reversed()</code> builtin. It makes iterating much cleaner in many cases.</p>\n<p>quick example:</p>\n<pre><code class=\"python\">for i in reversed([1, 2, 3]):\n    print(i)\n</code></pre>\n<p>produces:</p>\n<pre><code class=\"python\">3\n2\n1\n</code></pre>\n<p>However, <code>reversed()</code> also works with arbitrary iterators, such as lines in a file, or generator expressions.</p>\n", "abstract": "The reversed() builtin. It makes iterating much cleaner in many cases. quick example: produces: However, reversed() also works with arbitrary iterators, such as lines in a file, or generator expressions."}, {"id": 407754, "score": 10, "vote": 0, "content": "<p><strong>The Zen of Python</strong></p>\n<pre><code class=\"python\">&gt;&gt;&gt; import this\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n</code></pre>\n", "abstract": "The Zen of Python"}, {"id": 4958857, "score": 10, "vote": 0, "content": "<p>Changing function label at run time:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; class foo:\n...   def normal_call(self): print \"normal_call\"\n...   def call(self): \n...     print \"first_call\"\n...     self.call = self.normal_call\n\n&gt;&gt;&gt; y = foo()\n&gt;&gt;&gt; y.call()\nfirst_call\n&gt;&gt;&gt; y.call()\nnormal_call\n&gt;&gt;&gt; y.call()\nnormal_call\n...\n</code></pre>\n", "abstract": "Changing function label at run time:"}, {"id": 6574805, "score": 10, "vote": 0, "content": "<p><strong><code>string-escape</code> and <code>unicode-escape</code> encodings</strong></p>\n<p>Lets say you have a string from outer source, that contains <code>\\n</code>, <code>\\t</code> and so on. How to transform them into new-line or tab? Just decode string using <code>string-escape</code> encoding! </p>\n<pre><code class=\"python\">&gt;&gt;&gt; print s\nHello\\nStack\\toverflow\n&gt;&gt;&gt; print s.decode('string-escape')\nHello\nStack   overflow\n</code></pre>\n<p>Another problem. You have normal string with unicode literals like <code>\\u01245</code>. How to make it work? Just decode string using <code>unicode-escape</code> encoding!</p>\n<pre><code class=\"python\">&gt;&gt;&gt; s = '\\u041f\\u0440\\u0438\\u0432\\u0456\\u0442, \\u0441\\u0432\\u0456\\u0442!'\n&gt;&gt;&gt; print s\n\\u041f\\u0440\\u0438\\u0432\\u0456\\u0442, \\u0441\\u0432\\u0456\\u0442!\n&gt;&gt;&gt; print unicode(s)\n\\u041f\\u0440\\u0438\\u0432\\u0456\\u0442, \\u0441\\u0432\\u0456\\u0442!\n&gt;&gt;&gt; print unicode(s, 'unicode-escape')\n\u041f\u0440\u0438\u0432\u0456\u0442, \u0441\u0432\u0456\u0442!\n</code></pre>\n", "abstract": "string-escape and unicode-escape encodings Lets say you have a string from outer source, that contains \\n, \\t and so on. How to transform them into new-line or tab? Just decode string using string-escape encoding!  Another problem. You have normal string with unicode literals like \\u01245. How to make it work? Just decode string using unicode-escape encoding!"}, {"id": 113472, "score": 9, "vote": 0, "content": "<p><a href=\"http://paddy3118.blogspot.com/2007/02/unzip-un-needed-in-python.html\" rel=\"nofollow noreferrer\">unzip un-needed in Python</a></p>\n<p>Someone blogged about Python not having an unzip function to go with zip(). unzip is straight-forward to calculate because:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; t1 = (0,1,2,3)\n&gt;&gt;&gt; t2 = (7,6,5,4)\n&gt;&gt;&gt; [t1,t2] == zip(*zip(t1,t2))\nTrue\n</code></pre>\n<p>On reflection though, I'd rather have an explicit unzip().</p>\n", "abstract": "unzip un-needed in Python Someone blogged about Python not having an unzip function to go with zip(). unzip is straight-forward to calculate because: On reflection though, I'd rather have an explicit unzip()."}]}, {"link": "https://stackoverflow.com/questions/1093322/how-do-i-check-which-version-of-python-is-running-my-script", "question": {"id": "1093322", "title": "How do I check which version of Python is running my script?", "content": "<p>How do I check which version of the Python interpreter is running my script?</p>\n", "abstract": "How do I check which version of the Python interpreter is running my script?"}, "answers": [{"id": 1093331, "score": 1618, "vote": 0, "content": "<p>This information is available in the <a href=\"http://docs.python.org/library/sys.html#sys.version\" rel=\"noreferrer\"><code>sys.version</code></a> string in the <a href=\"http://docs.python.org/library/sys.html\" rel=\"noreferrer\"><code>sys</code></a> module:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; import sys\n</code></pre>\n<p>Human readable:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; print(sys.version)  # parentheses necessary in python 3.       \n2.5.2 (r252:60911, Jul 31 2008, 17:28:52) \n[GCC 4.2.3 (Ubuntu 4.2.3-2ubuntu7)]\n</code></pre>\n<p>For further processing, use <a href=\"http://docs.python.org/library/sys.html#sys.version_info\" rel=\"noreferrer\"><code>sys.version_info</code></a> or <a href=\"http://docs.python.org/library/sys.html#sys.hexversion\" rel=\"noreferrer\"><code>sys.hexversion</code></a>:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; sys.version_info\n(2, 5, 2, 'final', 0)\n# or\n&gt;&gt;&gt; sys.hexversion\n34014192\n</code></pre>\n<p>To ensure a script runs with a minimal version requirement of the Python interpreter add this to your code:</p>\n<pre><code class=\"python\">assert sys.version_info &gt;= (2, 5)\n</code></pre>\n<p>This compares major and minor version information. Add micro (=<code>0</code>, <code>1</code>, etc) and even releaselevel (=<code>'alpha'</code>,<code>'final'</code>, etc) to the tuple as you like. Note however, that it is almost always better to \"duck\" check if a certain feature is there, and if not, workaround (or bail out). Sometimes features go away in newer releases, being replaced by others.</p>\n", "abstract": "This information is available in the sys.version string in the sys module: Human readable: For further processing, use sys.version_info or sys.hexversion: To ensure a script runs with a minimal version requirement of the Python interpreter add this to your code: This compares major and minor version information. Add micro (=0, 1, etc) and even releaselevel (='alpha','final', etc) to the tuple as you like. Note however, that it is almost always better to \"duck\" check if a certain feature is there, and if not, workaround (or bail out). Sometimes features go away in newer releases, being replaced by others."}, {"id": 17796193, "score": 417, "vote": 0, "content": "<p>From the command line (note the capital 'V'):</p>\n<pre><code class=\"python\">python -V\n</code></pre>\n<p>This is documented in 'man python'.</p>\n<p>From IPython console</p>\n<pre><code class=\"python\">!python -V\n</code></pre>\n", "abstract": "From the command line (note the capital 'V'): This is documented in 'man python'. From IPython console"}, {"id": 25477839, "score": 101, "vote": 0, "content": "<p>Use <a href=\"https://docs.python.org/3/library/platform.html#platform.python_version\" rel=\"noreferrer\"><code>platform</code>'s <code>python_version</code></a> from the stdlib:</p>\n<pre><code class=\"python\">from platform import python_version\nprint(python_version())\n\n# 3.9.2\n</code></pre>\n", "abstract": "Use platform's python_version from the stdlib:"}, {"id": 3018075, "score": 99, "vote": 0, "content": "<p>I like <a href=\"http://docs.python.org/library/sys.html#sys.hexversion\" rel=\"nofollow noreferrer\"><code>sys.hexversion</code></a> for stuff like this.</p>\n<pre><code class=\"python\">&gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.hexversion\n33883376\n&gt;&gt;&gt; '%x' % sys.hexversion\n'20504f0'\n&gt;&gt;&gt; sys.hexversion &lt; 0x02060000\nTrue\n</code></pre>\n", "abstract": "I like sys.hexversion for stuff like this."}, {"id": 3016171, "score": 71, "vote": 0, "content": "<p>Your best bet is probably something like so: </p>\n<pre><code class=\"python\">&gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.version_info\n(2, 6, 4, 'final', 0)\n&gt;&gt;&gt; if not sys.version_info[:2] == (2, 6):\n...    print \"Error, I need python 2.6\"\n... else:\n...    from my_module import twoPointSixCode\n&gt;&gt;&gt; \n</code></pre>\n<p>Additionally, you can always wrap your imports in a simple try, which should catch syntax errors. And, to @Heikki's point, this code will be compatible with much older versions of python: </p>\n<pre><code class=\"python\">&gt;&gt;&gt; try:\n...     from my_module import twoPointSixCode\n... except Exception: \n...     print \"can't import, probably because your python is too old!\"\n&gt;&gt;&gt;\n</code></pre>\n", "abstract": "Your best bet is probably something like so:  Additionally, you can always wrap your imports in a simple try, which should catch syntax errors. And, to @Heikki's point, this code will be compatible with much older versions of python: "}, {"id": 3016198, "score": 49, "vote": 0, "content": "<p>Put something like:</p>\n<pre><code class=\"python\">#!/usr/bin/env/python\nimport sys\nif sys.version_info&lt;(2,6,0):\n  sys.stderr.write(\"You need python 2.6 or later to run this script\\n\")\n  exit(1)\n</code></pre>\n<p>at the top of your script.</p>\n<p>Note that depending on what else is in your script, older versions of python than the target may not be able to even load the script, so won't get far enough to report this error. As a workaround, you can run the above in a script that imports the script with the more modern code.</p>\n", "abstract": "Put something like: at the top of your script. Note that depending on what else is in your script, older versions of python than the target may not be able to even load the script, so won't get far enough to report this error. As a workaround, you can run the above in a script that imports the script with the more modern code."}, {"id": 25631445, "score": 31, "vote": 0, "content": "<p>Here's a short commandline version which exits straight away (handy for scripts and automated execution):</p>\n<pre><code class=\"python\">python -c \"print(__import__('sys').version)\"\n</code></pre>\n<p>Or just the major, minor and micro:</p>\n<pre><code class=\"python\">python -c \"print(__import__('sys').version_info[:1])\" # (2,)\npython -c \"print(__import__('sys').version_info[:2])\" # (2, 7)\npython -c \"print(__import__('sys').version_info[:3])\" # (2, 7, 6)\n</code></pre>\n", "abstract": "Here's a short commandline version which exits straight away (handy for scripts and automated execution): Or just the major, minor and micro:"}, {"id": 46841602, "score": 14, "vote": 0, "content": "<p>With <code>six</code> module, you can do it by:</p>\n<pre><code class=\"python\">import six\n\nif six.PY2:\n  # this is python2.x\nelse:\n  # six.PY3\n  # this is python3.x\n</code></pre>\n", "abstract": "With six module, you can do it by:"}, {"id": 1093336, "score": 8, "vote": 0, "content": "<pre><code class=\"python\">import sys\nsys.version.split(' ')[0]\n</code></pre>\n<p>sys.version gives you what you want, just pick the first number :)</p>\n", "abstract": "sys.version gives you what you want, just pick the first number :)"}, {"id": 3016234, "score": 5, "vote": 0, "content": "<p>Like Seth said, the main script could check <code>sys.version_info</code> (but note that that didn't appear until 2.0, so if you want to support older versions you would need to check another version property of the sys module).</p>\n<p>But you still need to take care of not using any Python language features in the file that are not available in older Python versions. For example, this is allowed in Python 2.5 and later:</p>\n<pre><code class=\"python\">try:\n    pass\nexcept:\n    pass\nfinally:\n    pass\n</code></pre>\n<p>but won't work in older Python versions, because you could only have except OR finally match the try. So for compatibility with older Python versions you need to write:</p>\n<pre><code class=\"python\">try:\n    try:\n        pass\n    except:\n        pass\nfinally:\n    pass\n</code></pre>\n", "abstract": "Like Seth said, the main script could check sys.version_info (but note that that didn't appear until 2.0, so if you want to support older versions you would need to check another version property of the sys module). But you still need to take care of not using any Python language features in the file that are not available in older Python versions. For example, this is allowed in Python 2.5 and later: but won't work in older Python versions, because you could only have except OR finally match the try. So for compatibility with older Python versions you need to write:"}, {"id": 47320541, "score": 4, "vote": 0, "content": "<p>Several answers already suggest how to <em>query</em> the current python version. To <em>check</em> programmatically the version requirements, I'd make use of one of the following two methods:</p>\n<pre><code class=\"python\"># Method 1: (see krawyoti's answer)\nimport sys\nassert(sys.version_info &gt;= (2,6))\n\n# Method 2: \nimport platform\nfrom distutils.version import StrictVersion \nassert(StrictVersion(platform.python_version()) &gt;= \"2.6\")\n</code></pre>\n", "abstract": "Several answers already suggest how to query the current python version. To check programmatically the version requirements, I'd make use of one of the following two methods:"}, {"id": 49311680, "score": 3, "vote": 0, "content": "<p>Just for fun, the following is a way of doing it on CPython 1.0-3.7b2, Pypy, Jython and Micropython.  This is more of a curiosity than a way of doing it in modern code.  I wrote it as part of <a href=\"http://stromberg.dnsalias.org/~strombrg/pythons/\" rel=\"nofollow noreferrer\">http://stromberg.dnsalias.org/~strombrg/pythons/</a> , which is a script for testing a snippet of code on many versions of python at once, so you can easily get a feel for what python features are compatible with what versions of python:</p>\n<pre><code class=\"python\">via_platform = 0\ncheck_sys = 0\nvia_sys_version_info = 0\nvia_sys_version = 0\ntest_sys = 0\ntry:\n    import platform\nexcept (ImportError, NameError):\n    # We have no platform module - try to get the info via the sys module\n    check_sys = 1\n\nif not check_sys:\n    if hasattr(platform, \"python_version\"):\n        via_platform = 1\n    else:\n        check_sys = 1\n\nif check_sys:\n    try:\n        import sys\n        test_sys = 1\n    except (ImportError, NameError):\n        # just let via_sys_version_info and via_sys_version remain False - we have no sys module\n        pass\n\nif test_sys:\n    if hasattr(sys, \"version_info\"):\n        via_sys_version_info = 1\n    elif hasattr(sys, \"version\"):\n        via_sys_version = 1\n    else:\n        # just let via_sys remain False\n        pass\n\nif via_platform:\n    # This gives pretty good info, but is not available in older interpreters.  Also, micropython has a\n    # platform module that does not really contain anything.\n    print(platform.python_version())\nelif via_sys_version_info:\n    # This is compatible with some older interpreters, but does not give quite as much info.\n    print(\"%s.%s.%s\" % sys.version_info[:3])\nelif via_sys_version:\n    import string\n    # This is compatible with some older interpreters, but does not give quite as much info.\n    verbose_version = sys.version\n    version_list = string.split(verbose_version)\n    print(version_list[0])\nelse:\n    print(\"unknown\")\n</code></pre>\n", "abstract": "Just for fun, the following is a way of doing it on CPython 1.0-3.7b2, Pypy, Jython and Micropython.  This is more of a curiosity than a way of doing it in modern code.  I wrote it as part of http://stromberg.dnsalias.org/~strombrg/pythons/ , which is a script for testing a snippet of code on many versions of python at once, so you can easily get a feel for what python features are compatible with what versions of python:"}, {"id": 52825819, "score": 3, "vote": 0, "content": "<h3>If you want to detect pre-Python 3 and don't want to import anything...</h3>\n<p>...you can (ab)use list comprehension scoping changes and do it in a <strong>single expression</strong>:</p>\n<pre><code class=\"python\">is_python_3_or_above = (lambda x: [x for x in [False]] and None or x)(True)\n</code></pre>\n", "abstract": "...you can (ab)use list comprehension scoping changes and do it in a single expression:"}, {"id": 58065607, "score": 3, "vote": 0, "content": "<pre><code class=\"python\">from sys import version_info, api_version, version, hexversion\n\nprint(f\"sys.version: {version}\")\nprint(f\"sys.api_version: {api_version}\")\nprint(f\"sys.version_info: {version_info}\")\nprint(f\"sys.hexversion: {hexversion}\")\n</code></pre>\n<p>output</p>\n<blockquote>\n<pre><code class=\"python\">sys.version: 3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 17:00:18) [MSC v.1900 64 bit (AMD64)]\nsys.api_version: 1013\nsys.version_info: sys.version_info(major=3, minor=6, micro=5, releaselevel='final', serial=0)\nsys.hexversion: 50726384\n</code></pre>\n</blockquote>\n", "abstract": "output"}, {"id": 35294211, "score": 2, "vote": 0, "content": "<h1>The simplest way</h1>\n<p>Just type python in your terminal and you can see the version \n as like following </p>\n<pre><code class=\"python\">desktop:~$ python\nPython 2.7.6 (default, Jun 22 2015, 18:00:18) \n[GCC 4.8.2] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; \n</code></pre>\n", "abstract": "Just type python in your terminal and you can see the version \n as like following "}, {"id": 52678653, "score": 2, "vote": 0, "content": "<p><code>sys.version_info</code> doesn't seem to return a <code>tuple</code> as of 3.7. Rather, it returns a special class, so all of the examples using tuples don't work, for me at least. Here's the output from a python console:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; import sys\n&gt;&gt;&gt; type(sys.version_info)\n&lt;class 'sys.version_info'&gt;\n</code></pre>\n<p>I've found that using a combination of <code>sys.version_info.major</code> and <code>sys.version_info.minor</code> seems to suffice. For example,...</p>\n<pre class=\"lang-python prettyprint-override\"><code class=\"python\">import sys\nif sys.version_info.major &gt; 3:\n    print('Upgrade to Python 3')\n    exit(1)\n</code></pre>\n<p>checks if you're running Python 3.  You can even check for more specific versions with...\n</p>\n<pre><code class=\"python\">import sys\nver = sys.version_info\nif ver.major &gt; 2:\n    if ver.major == 3 and ver.minor &lt;= 4:\n        print('Upgrade to Python 3.5')\n        exit(1)\n</code></pre>\n<p>can check to see if you're running at least Python 3.5.</p>\n", "abstract": "sys.version_info doesn't seem to return a tuple as of 3.7. Rather, it returns a special class, so all of the examples using tuples don't work, for me at least. Here's the output from a python console: I've found that using a combination of sys.version_info.major and sys.version_info.minor seems to suffice. For example,... checks if you're running Python 3.  You can even check for more specific versions with...\n can check to see if you're running at least Python 3.5."}, {"id": 49765349, "score": 1, "vote": 0, "content": "<p>Check Python version: <code>python -V</code> or <code>python --version</code> or <code>apt-cache policy python</code></p>\n<p>you can also run <code>whereis python</code> to see how many versions are installed.</p>\n", "abstract": "Check Python version: python -V or python --version or apt-cache policy python you can also run whereis python to see how many versions are installed."}, {"id": 55480238, "score": 1, "vote": 0, "content": "<p>To verify the Python version for commands on Windows, run the following commands in a command prompt and verify the output </p>\n<pre><code class=\"python\">c:\\&gt;python -V\nPython 2.7.16\n\nc:\\&gt;py -2 -V\nPython 2.7.16\n\nc:\\&gt;py -3 -V\nPython 3.7.3\n</code></pre>\n<p>Also, To see the folder configuration for each Python version, run the following commands:</p>\n<pre><code class=\"python\">For Python 2,'py -2 -m site'\nFor Python 3,'py -3 -m site'\n</code></pre>\n", "abstract": "To verify the Python version for commands on Windows, run the following commands in a command prompt and verify the output  Also, To see the folder configuration for each Python version, run the following commands:"}, {"id": 70758491, "score": 1, "vote": 0, "content": "<h2>This just returns <code>2.7</code>, <code>3.6</code> or <code>3.9</code></h2>\n<pre><code class=\"python\">import sys\ncurrent_version = \".\".join(map(str, sys.version_info[0:2]))\n</code></pre>\n<p>which is what you usually you need...</p>\n", "abstract": "which is what you usually you need..."}, {"id": 61586564, "score": 0, "vote": 0, "content": "<p><strong>The even simpler simplest way:</strong></p>\n<p>In Spyder, start a new \"IPython Console\", then run any of your existing scripts.</p>\n<p>Now the version can be seen in the first output printed in the console window:</p>\n<p>\"Python 3.7.3 (default, Apr 24 2019, 15:29:51)...\"</p>\n<p><a href=\"https://i.stack.imgur.com/rYrao.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/rYrao.png\"/></a></p>\n", "abstract": "The even simpler simplest way: In Spyder, start a new \"IPython Console\", then run any of your existing scripts. Now the version can be seen in the first output printed in the console window: \"Python 3.7.3 (default, Apr 24 2019, 15:29:51)...\" "}, {"id": 61992940, "score": 0, "vote": 0, "content": "<p><strong>To check from the command-line, in one single command, but include major, minor, micro version, releaselevel and serial</strong>, then invoke the same Python interpreter (i.e. same path) as you're using for your script:</p>\n<pre><code class=\"python\">&gt; path/to/your/python -c \"import sys; print('{}.{}.{}-{}-{}'.format(*sys.version_info))\"\n\n3.7.6-final-0\n</code></pre>\n<p>Note: <code>.format()</code> instead of f-strings or <code>'.'.join()</code> allows you to use arbitrary formatting and separator chars, e.g. to make this a greppable one-word string. I put this inside a bash utility script that reports all important versions: python, numpy, pandas, sklearn, MacOS, xcode, clang, brew, conda, anaconda, gcc/g++ etc. Useful for logging, replicability, troubleshootingm bug-reporting etc.</p>\n", "abstract": "To check from the command-line, in one single command, but include major, minor, micro version, releaselevel and serial, then invoke the same Python interpreter (i.e. same path) as you're using for your script: Note: .format() instead of f-strings or '.'.join() allows you to use arbitrary formatting and separator chars, e.g. to make this a greppable one-word string. I put this inside a bash utility script that reports all important versions: python, numpy, pandas, sklearn, MacOS, xcode, clang, brew, conda, anaconda, gcc/g++ etc. Useful for logging, replicability, troubleshootingm bug-reporting etc."}, {"id": 17672432, "score": -1, "vote": 0, "content": "<p>If you are working on linux just give command <code>python</code>  output will be like this</p>\n<blockquote>\n<p>Python 2.4.3 (#1, Jun 11 2009, 14:09:37)</p>\n<p>[GCC 4.1.2 20080704 (Red Hat 4.1.2-44)] on linux2</p>\n<p>Type \"help\", \"copyright\", \"credits\" or \"license\" for more\n  information.</p>\n</blockquote>\n", "abstract": "If you are working on linux just give command python  output will be like this Python 2.4.3 (#1, Jun 11 2009, 14:09:37) [GCC 4.1.2 20080704 (Red Hat 4.1.2-44)] on linux2 Type \"help\", \"copyright\", \"credits\" or \"license\" for more\n  information."}, {"id": 69225850, "score": -1, "vote": 0, "content": "<p>For windows, Go to command prompt and type this command to get the python version:</p>\n<pre><code class=\"python\">python --version\n</code></pre>\n<p>Or</p>\n<pre><code class=\"python\">python -V\n</code></pre>\n", "abstract": "For windows, Go to command prompt and type this command to get the python version: Or"}, {"id": 64424951, "score": -3, "vote": 0, "content": "<p>A attempt using <code>os.popen</code> to read it in a variable:</p>\n<pre><code class=\"python\">import os\nver = os.popen('python -V').read().strip()\nprint(ver)\n</code></pre>\n", "abstract": "A attempt using os.popen to read it in a variable:"}]}, {"link": "https://stackoverflow.com/questions/3289601/null-object-in-python", "question": {"id": "3289601", "title": "Null object in Python", "content": "<p>How do I refer to the <a href=\"https://en.wikipedia.org/wiki/Null_pointer\" rel=\"noreferrer\">null object</a> in Python?</p>\n", "abstract": "How do I refer to the null object in Python?"}, "answers": [{"id": 3289606, "score": 1869, "vote": 0, "content": "<p>In Python, the 'null' object is the singleton <code>None</code>.</p>\n<p>To check if something is <code>None</code>, use the <a href=\"https://docs.python.org/3/reference/expressions.html#is\" rel=\"noreferrer\"><code>is</code></a> identity operator:</p>\n<pre><code class=\"python\">if foo is None:\n    ...\n</code></pre>\n", "abstract": "In Python, the 'null' object is the singleton None. To check if something is None, use the is identity operator:"}, {"id": 48504780, "score": 229, "vote": 0, "content": "<h1><code>None</code>, Python's null?</h1>\n<p>There's no <code>null</code> in Python; instead there's <code>None</code>. As stated already, the most accurate way to test that something has been given <code>None</code> as a value is to use the <code>is</code> identity operator, which tests that two variables refer to the same object.</p>\n<pre><code class=\"python\">&gt;&gt;&gt; foo is None\nTrue\n&gt;&gt;&gt; foo = 'bar'\n&gt;&gt;&gt; foo is None\nFalse\n</code></pre>\n<h1>The basics</h1>\n<h2>There is and can only be one <code>None</code></h2>\n<p><code>None</code> is the sole instance of the class <code>NoneType</code> and any further attempts at instantiating that class will return the same object, which makes <code>None</code> a singleton. Newcomers to Python often see error messages that mention <code>NoneType</code> and wonder what it is. It's my personal opinion that these messages could simply just mention <code>None</code> by name because, as we'll see shortly, <code>None</code> leaves little room to ambiguity. So if you see some <code>TypeError</code> message that mentions that <code>NoneType</code> can't do this or can't do that, just know that it's simply the one <code>None</code> that was being used in a way that it can't.</p>\n<p>Also, <code>None</code> is a built-in constant. As soon as you start Python, it's available to use from everywhere, whether in module, class, or function. <code>NoneType</code> by contrast is not, you'd need to get a reference to it first by querying <code>None</code> for its class.</p>\n<pre><code class=\"python\">&gt;&gt;&gt; NoneType\nNameError: name 'NoneType' is not defined\n&gt;&gt;&gt; type(None)\nNoneType\n</code></pre>\n<p>You can check <code>None</code>'s uniqueness with Python's identity function <code>id()</code>. It returns the unique number assigned to an object, each object has one. If the id of two variables is the same, then they point in fact to the same object.</p>\n<pre><code class=\"python\">&gt;&gt;&gt; NoneType = type(None)\n&gt;&gt;&gt; id(None)\n10748000\n&gt;&gt;&gt; my_none = NoneType()\n&gt;&gt;&gt; id(my_none)\n10748000\n&gt;&gt;&gt; another_none = NoneType()\n&gt;&gt;&gt; id(another_none)\n10748000\n&gt;&gt;&gt; def function_that_does_nothing(): pass\n&gt;&gt;&gt; return_value = function_that_does_nothing()\n&gt;&gt;&gt; id(return_value)\n10748000\n</code></pre>\n<h2><code>None</code> cannot be overwritten</h2>\n<p>In much older versions of Python (before 2.4) it was possible to reassign <code>None</code>, but not any more. Not even as a class attribute or in the confines of a function.</p>\n<pre><code class=\"python\"># In Python 2.7\n&gt;&gt;&gt; class SomeClass(object):\n...     def my_fnc(self):\n...             self.None = 'foo'\nSyntaxError: cannot assign to None\n&gt;&gt;&gt; def my_fnc():\n        None = 'foo'\nSyntaxError: cannot assign to None\n\n# In Python 3.5\n&gt;&gt;&gt; class SomeClass:\n...     def my_fnc(self):\n...             self.None = 'foo'\nSyntaxError: invalid syntax\n&gt;&gt;&gt; def my_fnc():\n        None = 'foo'\nSyntaxError: cannot assign to keyword\n</code></pre>\n<p>It's therefore safe to assume that all <code>None</code> references are the same. There isn't any \"custom\" <code>None</code>.</p>\n<h2>To test for <code>None</code> use the <code>is</code> operator</h2>\n<p>When writing code you might be tempted to test for <em>Noneness</em> like this:</p>\n<pre><code class=\"python\">if value==None:\n    pass\n</code></pre>\n<p>Or to test for falsehood like this</p>\n<pre><code class=\"python\">if not value:\n    pass\n</code></pre>\n<p>You need to understand the implications and why it's often a good idea to be explicit.</p>\n<h3>Case 1: testing if a value is <code>None</code></h3>\n<p>Why do</p>\n<pre><code class=\"python\">value is None\n</code></pre>\n<p>rather than</p>\n<pre><code class=\"python\">value==None\n</code></pre>\n<p>?</p>\n<p>The first is equivalent to:</p>\n<pre><code class=\"python\">id(value)==id(None)\n</code></pre>\n<p>Whereas the expression <code>value==None</code> is in fact applied like this</p>\n<pre><code class=\"python\">value.__eq__(None)\n</code></pre>\n<p>If the value really is <code>None</code> then you'll get what you expected.</p>\n<pre><code class=\"python\">&gt;&gt;&gt; nothing = function_that_does_nothing()\n&gt;&gt;&gt; nothing.__eq__(None)\nTrue\n</code></pre>\n<p>In most common cases the outcome will be the same, but the <code>__eq__()</code> method opens a door that voids any guarantee of accuracy, since it can be overridden in a class to provide special behavior.</p>\n<p>Consider this class.</p>\n<pre><code class=\"python\">&gt;&gt;&gt; class Empty(object):\n...     def __eq__(self, other):\n...         return not other\n</code></pre>\n<p>So you try it on <code>None</code> and it works</p>\n<pre><code class=\"python\">&gt;&gt;&gt; empty = Empty()\n&gt;&gt;&gt; empty==None\nTrue\n</code></pre>\n<p>But then it also works on the empty string</p>\n<pre><code class=\"python\">&gt;&gt;&gt; empty==''\nTrue\n</code></pre>\n<p>And yet</p>\n<pre><code class=\"python\">&gt;&gt;&gt; ''==None\nFalse\n&gt;&gt;&gt; empty is None\nFalse\n</code></pre>\n<h3>Case 2: Using <code>None</code> as a boolean</h3>\n<p>The following two tests</p>\n<pre><code class=\"python\">if value:\n    # Do something\n\nif not value:\n    # Do something\n</code></pre>\n<p>are in fact evaluated as</p>\n<pre><code class=\"python\">if bool(value):\n    # Do something\n\nif not bool(value):\n    # Do something\n</code></pre>\n<p><code>None</code> is a \"falsey\", meaning that if cast to a boolean it will return <code>False</code> and if applied the <code>not</code> operator it will return <code>True</code>. Note however that it's not a property unique to <code>None</code>. In addition to <code>False</code> itself, the property is shared by empty lists, tuples, sets, dicts, strings, as well as 0, and all objects from classes that implement the <code>__bool__()</code> magic method to return <code>False</code>.</p>\n<pre><code class=\"python\">&gt;&gt;&gt; bool(None)\nFalse\n&gt;&gt;&gt; not None\nTrue\n\n&gt;&gt;&gt; bool([])\nFalse\n&gt;&gt;&gt; not []\nTrue\n\n&gt;&gt;&gt; class MyFalsey(object):\n...     def __bool__(self):\n...         return False\n&gt;&gt;&gt; f = MyFalsey()\n&gt;&gt;&gt; bool(f)\nFalse\n&gt;&gt;&gt; not f\nTrue\n</code></pre>\n<p>So when testing for variables in the following way, be extra aware of what you're including or excluding from the test:</p>\n<pre><code class=\"python\">def some_function(value=None):\n    if not value:\n        value = init_value()\n</code></pre>\n<p>In the above, did you mean to call <code>init_value()</code> when the value is set specifically to <code>None</code>, or did you mean that a value set to <code>0</code>, or the empty string, or an empty list should also trigger the initialization? Like I said, be mindful. As it's often the case, in Python <em>explicit is better than implicit</em>.</p>\n<h1><code>None</code> in practice</h1>\n<h2><code>None</code> used as a signal value</h2>\n<p><code>None</code> has a special status in Python. It's a favorite baseline value because many algorithms treat it as an exceptional value. In such scenarios it can be used as a flag to signal that a condition requires some special handling (such as the setting of a default value).</p>\n<p>You can assign <code>None</code> to the keyword arguments of a function and then explicitly test for it.</p>\n<pre><code class=\"python\">def my_function(value, param=None):\n    if param is None:\n        # Do something outrageous!\n</code></pre>\n<p>You can return it as the default when trying to get to an object's attribute and then explicitly test for it before doing something special.</p>\n<pre><code class=\"python\">value = getattr(some_obj, 'some_attribute', None)\nif value is None:\n    # do something spectacular!\n</code></pre>\n<p>By default a dictionary's <code>get()</code> method returns <code>None</code> when trying to access a non-existing key:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; some_dict = {}\n&gt;&gt;&gt; value = some_dict.get('foo')\n&gt;&gt;&gt; value is None\nTrue\n</code></pre>\n<p>If you were to try to access it by using the subscript notation a <code>KeyError</code> would be raised</p>\n<pre><code class=\"python\">&gt;&gt;&gt; value = some_dict['foo']\nKeyError: 'foo'\n</code></pre>\n<p>Likewise if you attempt to pop a non-existing item</p>\n<pre><code class=\"python\">&gt;&gt;&gt; value = some_dict.pop('foo')\nKeyError: 'foo'\n</code></pre>\n<p>which you can suppress with a default value that is usually set to <code>None</code></p>\n<pre><code class=\"python\">value = some_dict.pop('foo', None)\nif value is None:\n    # Booom!\n</code></pre>\n<h2><code>None</code> used as both a flag and valid value</h2>\n<p>The above described uses of <code>None</code> apply when it is not considered a valid value, but more like a signal to do something special. There are situations however where it sometimes matters to know where <code>None</code> came from because even though it's used as a signal it could also be part of the data.</p>\n<p>When you query an object for its attribute with <code>getattr(some_obj, 'attribute_name', None)</code> getting back <code>None</code> doesn't tell you if the attribute you were trying to access was set to <code>None</code> or if it was altogether absent from the object. The same situation when accessing a key from a dictionary, like <code>some_dict.get('some_key')</code>, you don't know if <code>some_dict['some_key']</code> is missing or if it's just set to <code>None</code>. If you need that information, the usual way to handle this is to directly attempt accessing the attribute or key from within a <code>try/except</code> construct:</p>\n<pre><code class=\"python\">try:\n    # Equivalent to getattr() without specifying a default\n    # value = getattr(some_obj, 'some_attribute')\n    value = some_obj.some_attribute\n    # Now you handle `None` the data here\n    if value is None:\n        # Do something here because the attribute was set to None\nexcept AttributeError:\n    # We're now handling the exceptional situation from here.\n    # We could assign None as a default value if required.\n    value = None\n    # In addition, since we now know that some_obj doesn't have the\n    # attribute 'some_attribute' we could do something about that.\n    log_something(some_obj)\n</code></pre>\n<p>Similarly with dict:</p>\n<pre><code class=\"python\">try:\n    value = some_dict['some_key']\n    if value is None:\n        # Do something here because 'some_key' is set to None\nexcept KeyError:\n    # Set a default\n    value = None\n    # And do something because 'some_key' was missing\n    # from the dict.\n    log_something(some_dict)\n</code></pre>\n<p>The above two examples show how to handle object and dictionary cases. What about functions? The same thing, but we use the double asterisks keyword argument to that end:</p>\n<pre><code class=\"python\">def my_function(**kwargs):\n    try:\n        value = kwargs['some_key']\n        if value is None:\n            # Do something because 'some_key' is explicitly\n            # set to None\n    except KeyError:\n        # We assign the default\n        value = None\n        # And since it's not coming from the caller.\n        log_something('did not receive \"some_key\"')\n</code></pre>\n<h2><code>None</code> used only as a valid value</h2>\n<p>If you find that your code is littered with the above <code>try/except</code> pattern simply to differentiate between <code>None</code> flags and <code>None</code> data, then just use another test value. There's a pattern where a value that falls outside the set of valid values is inserted as part of the data in a data structure and is used to control and test special conditions (e.g. boundaries, state, etc.). Such a value is called a <em>sentinel</em> and it can be used the way <code>None</code> is used as a signal. It's trivial to create a sentinel in Python.</p>\n<pre><code class=\"python\">undefined = object()\n</code></pre>\n<p>The <code>undefined</code> object above is unique and doesn't do much of anything that might be of interest to a program, it's thus an excellent replacement for <code>None</code> as a flag. Some caveats apply, more about that after the code.</p>\n<p>With function</p>\n<pre><code class=\"python\">def my_function(value, param1=undefined, param2=undefined):\n    if param1 is undefined:\n        # We know nothing was passed to it, not even None\n        log_something('param1 was missing')\n        param1 = None\n\n\n    if param2 is undefined:\n        # We got nothing here either\n        log_something('param2 was missing')\n        param2 = None\n</code></pre>\n<p>With dict</p>\n<pre><code class=\"python\">value = some_dict.get('some_key', undefined)\nif value is None:\n    log_something(\"'some_key' was set to None\")\n\nif value is undefined:\n    # We know that the dict didn't have 'some_key'\n    log_something(\"'some_key' was not set at all\")\n    value = None\n</code></pre>\n<p>With an object</p>\n<pre><code class=\"python\">value = getattr(obj, 'some_attribute', undefined)\nif value is None:\n    log_something(\"'obj.some_attribute' was set to None\")\nif value is undefined:\n    # We know that there's no obj.some_attribute\n    log_something(\"no 'some_attribute' set on obj\")\n    value = None\n</code></pre>\n<p>As I mentioned earlier, custom sentinels come with some caveats. First, they're not keywords like <code>None</code>, so Python doesn't protect them. You can overwrite your <code>undefined</code> above at any time, anywhere in the module it's defined, so be careful how you expose and use them. Next, the instance returned by <code>object()</code> is not a singleton. If you make that call 10 times you get 10 different objects. Finally, usage of a sentinel is highly idiosyncratic. A sentinel is specific to the library it's used in and as such its scope should generally be limited to the library's internals. It shouldn't \"leak\" out. External code should only become aware of it, if their purpose is to extend or supplement the library's API.</p>\n", "abstract": "There's no null in Python; instead there's None. As stated already, the most accurate way to test that something has been given None as a value is to use the is identity operator, which tests that two variables refer to the same object. None is the sole instance of the class NoneType and any further attempts at instantiating that class will return the same object, which makes None a singleton. Newcomers to Python often see error messages that mention NoneType and wonder what it is. It's my personal opinion that these messages could simply just mention None by name because, as we'll see shortly, None leaves little room to ambiguity. So if you see some TypeError message that mentions that NoneType can't do this or can't do that, just know that it's simply the one None that was being used in a way that it can't. Also, None is a built-in constant. As soon as you start Python, it's available to use from everywhere, whether in module, class, or function. NoneType by contrast is not, you'd need to get a reference to it first by querying None for its class. You can check None's uniqueness with Python's identity function id(). It returns the unique number assigned to an object, each object has one. If the id of two variables is the same, then they point in fact to the same object. In much older versions of Python (before 2.4) it was possible to reassign None, but not any more. Not even as a class attribute or in the confines of a function. It's therefore safe to assume that all None references are the same. There isn't any \"custom\" None. When writing code you might be tempted to test for Noneness like this: Or to test for falsehood like this You need to understand the implications and why it's often a good idea to be explicit. Why do rather than ? The first is equivalent to: Whereas the expression value==None is in fact applied like this If the value really is None then you'll get what you expected. In most common cases the outcome will be the same, but the __eq__() method opens a door that voids any guarantee of accuracy, since it can be overridden in a class to provide special behavior. Consider this class. So you try it on None and it works But then it also works on the empty string And yet The following two tests are in fact evaluated as None is a \"falsey\", meaning that if cast to a boolean it will return False and if applied the not operator it will return True. Note however that it's not a property unique to None. In addition to False itself, the property is shared by empty lists, tuples, sets, dicts, strings, as well as 0, and all objects from classes that implement the __bool__() magic method to return False. So when testing for variables in the following way, be extra aware of what you're including or excluding from the test: In the above, did you mean to call init_value() when the value is set specifically to None, or did you mean that a value set to 0, or the empty string, or an empty list should also trigger the initialization? Like I said, be mindful. As it's often the case, in Python explicit is better than implicit. None has a special status in Python. It's a favorite baseline value because many algorithms treat it as an exceptional value. In such scenarios it can be used as a flag to signal that a condition requires some special handling (such as the setting of a default value). You can assign None to the keyword arguments of a function and then explicitly test for it. You can return it as the default when trying to get to an object's attribute and then explicitly test for it before doing something special. By default a dictionary's get() method returns None when trying to access a non-existing key: If you were to try to access it by using the subscript notation a KeyError would be raised Likewise if you attempt to pop a non-existing item which you can suppress with a default value that is usually set to None The above described uses of None apply when it is not considered a valid value, but more like a signal to do something special. There are situations however where it sometimes matters to know where None came from because even though it's used as a signal it could also be part of the data. When you query an object for its attribute with getattr(some_obj, 'attribute_name', None) getting back None doesn't tell you if the attribute you were trying to access was set to None or if it was altogether absent from the object. The same situation when accessing a key from a dictionary, like some_dict.get('some_key'), you don't know if some_dict['some_key'] is missing or if it's just set to None. If you need that information, the usual way to handle this is to directly attempt accessing the attribute or key from within a try/except construct: Similarly with dict: The above two examples show how to handle object and dictionary cases. What about functions? The same thing, but we use the double asterisks keyword argument to that end: If you find that your code is littered with the above try/except pattern simply to differentiate between None flags and None data, then just use another test value. There's a pattern where a value that falls outside the set of valid values is inserted as part of the data in a data structure and is used to control and test special conditions (e.g. boundaries, state, etc.). Such a value is called a sentinel and it can be used the way None is used as a signal. It's trivial to create a sentinel in Python. The undefined object above is unique and doesn't do much of anything that might be of interest to a program, it's thus an excellent replacement for None as a flag. Some caveats apply, more about that after the code. With function With dict With an object As I mentioned earlier, custom sentinels come with some caveats. First, they're not keywords like None, so Python doesn't protect them. You can overwrite your undefined above at any time, anywhere in the module it's defined, so be careful how you expose and use them. Next, the instance returned by object() is not a singleton. If you make that call 10 times you get 10 different objects. Finally, usage of a sentinel is highly idiosyncratic. A sentinel is specific to the library it's used in and as such its scope should generally be limited to the library's internals. It shouldn't \"leak\" out. External code should only become aware of it, if their purpose is to extend or supplement the library's API."}, {"id": 3289624, "score": 72, "vote": 0, "content": "<p>It's not called null as in other languages, but <a href=\"http://docs.python.org/library/constants.html?highlight=none#None\" rel=\"noreferrer\"><code>None</code></a>. There is always only one instance of this object, so you can check for equivalence with <code>x is None</code> (identity comparison) instead of <code>x == None</code>, if you want.</p>\n", "abstract": "It's not called null as in other languages, but None. There is always only one instance of this object, so you can check for equivalence with x is None (identity comparison) instead of x == None, if you want."}, {"id": 15185044, "score": 29, "vote": 0, "content": "<p>In Python, to represent the absence of a value, you can use the <em>None</em> value (<em>types.NoneType.None</em>) for objects and <em>\"\"</em> (or <em>len() == 0</em>) for strings. Therefore:</p>\n<pre><code class=\"python\">if yourObject is None:  # if yourObject == None:\n    ...\n\nif yourString == \"\":  # if yourString.len() == 0:\n    ...\n</code></pre>\n<p>Regarding the difference between \"==\" and \"is\", testing for object identity using \"==\" should be sufficient. However, since the operation \"is\" is defined as the object identity operation, it is probably more correct to use it, rather than \"==\". Not sure if there is even a speed difference.</p>\n<p>Anyway, you can have a look at:</p>\n<ul>\n<li>Python <a href=\"http://docs.python.org/2/library/constants.html?highlight=none#None\">Built-in Constants</a> doc page.</li>\n<li>Python <a href=\"http://docs.python.org/2/library/stdtypes.html#truth-value-testing\">Truth Value Testing</a> doc page.</li>\n</ul>\n", "abstract": "In Python, to represent the absence of a value, you can use the None value (types.NoneType.None) for objects and \"\" (or len() == 0) for strings. Therefore: Regarding the difference between \"==\" and \"is\", testing for object identity using \"==\" should be sufficient. However, since the operation \"is\" is defined as the object identity operation, it is probably more correct to use it, rather than \"==\". Not sure if there is even a speed difference. Anyway, you can have a look at:"}, {"id": 69148059, "score": 2, "vote": 0, "content": "<p>The above answers only will result <code>True</code> for <code>None</code>, but there is such a thing as <code>float('nan')</code>. You could use pandas <code>isnull</code>:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; pd.isnull(None)\nTrue\n&gt;&gt;&gt; pd.isnull(float('nan'))\nTrue\n&gt;&gt;&gt; pd.isnull('abc')\nFalse\n&gt;&gt;&gt; \n</code></pre>\n<p>Or without <code>pandas</code>:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; a = float('nan')\n&gt;&gt;&gt; (a != a) or (a == None)\nTrue\n&gt;&gt;&gt; a = None\n&gt;&gt;&gt; (a != a) or (a == None)\nTrue\n&gt;&gt;&gt; \n</code></pre>\n<p>The reason this works is because <code>float('nan') != float('nan')</code>:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; float('nan') == float('nan')\nFalse\n&gt;&gt;&gt; float('nan') != float('nan')\nTrue\n&gt;&gt;&gt; \n</code></pre>\n", "abstract": "The above answers only will result True for None, but there is such a thing as float('nan'). You could use pandas isnull: Or without pandas: The reason this works is because float('nan') != float('nan'):"}, {"id": 65742218, "score": 1, "vote": 0, "content": "<p>Use <code>f</code> string for getting this solved.</p>\n<pre><code class=\"python\">year=None\nyear_val= 'null' if year is None else  str(year)\nprint(f'{year_val}')\n\nnull\n</code></pre>\n", "abstract": "Use f string for getting this solved."}, {"id": 72877742, "score": 1, "vote": 0, "content": "<p>Simple function to tackle \"empty\" element in Python:</p>\n<p>Code:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">def is_empty(element) -&gt; bool:\n    \"\"\"\n    Function to check if input `element` is empty.\n\n    Other than some special exclusions and inclusions,\n    this function returns boolean result of Falsy check.\n    \"\"\"\n    if (isinstance(element, int) or isinstance(element, float)) and element == 0:\n        # Exclude 0 and 0.0 from the Falsy set.\n        return False\n    elif isinstance(element, str) and len(element.strip()) == 0:\n        # Include string with one or more empty space(s) into Falsy set.\n        return True\n    elif isinstance(element, bool):\n        # Exclude False from the Falsy set.\n        return False\n    else:\n        # Falsy check.\n        return False if element else True\n</code></pre>\n<p>Test:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">print(\"Is empty?\\n\")\nprint('\"\" -&gt; ', is_empty(\"\"))\nprint('\"      \" -&gt; ', is_empty(\"      \"))\nprint('\"A\" -&gt; ', is_empty(\"A\"))\nprint('\"a\" -&gt; ', is_empty(\"a\"))\nprint('\"0\" -&gt; ', is_empty(\"0\"))\nprint(\"0 -&gt; \", is_empty(0))\nprint(\"0.0 -&gt; \", is_empty(0.0))\nprint(\"[] -&gt; \", is_empty([]))\nprint(\"{} -&gt; \", is_empty({}))\nprint(\"() -&gt; \", is_empty(()))\nprint(\"[1, 2] -&gt; \", is_empty([1, 2]))\nprint(\"(3, 5) -&gt; \", is_empty((3, 5)))\nprint('{\"a\": 1} -&gt; ', is_empty({\"a\": 1}))\nprint(\"None -&gt; \", is_empty(None))\nprint(\"True -&gt; \", is_empty(True))\nprint(\"False -&gt; \", is_empty(False))\nprint(\"NaN -&gt; \", is_empty(float(\"nan\")))\nprint(\"range(0) -&gt; \", is_empty(range(0)))\n</code></pre>\n<p>Output:</p>\n<pre><code class=\"python\">Is empty?\n\n\"\" -&gt;  True\n\"      \" -&gt;  True\n\"A\" -&gt;  False\n\"a\" -&gt;  False\n\"0\" -&gt;  False\n0 -&gt;  False\n0.0 -&gt;  False\n[] -&gt;  True\n{} -&gt;  True\n() -&gt;  True\n[1, 2] -&gt;  False\n(3, 5) -&gt;  False\n{\"a\": 1} -&gt;  False\nNone -&gt;  True\nTrue -&gt;  False\nFalse -&gt;  False\nNaN -&gt;  False\nrange(0) -&gt;  True\n</code></pre>\n", "abstract": "Simple function to tackle \"empty\" element in Python: Code: Test: Output:"}, {"id": 46395732, "score": -1, "vote": 0, "content": "<p>Per <a href=\"https://docs.python.org/2/library/stdtypes.html#truth-value-testing\" rel=\"nofollow noreferrer\">Truth value testing</a>, 'None' directly tests as FALSE, so the simplest expression will suffice:</p>\n<pre><code class=\"python\">if not foo:\n</code></pre>\n", "abstract": "Per Truth value testing, 'None' directly tests as FALSE, so the simplest expression will suffice:"}, {"id": 61159077, "score": -1, "vote": 0, "content": "<p>Null is a special object type like:</p>\n<pre><code class=\"python\">&gt;&gt;&gt;type(None)\n&lt;class 'NoneType'&gt;\n</code></pre>\n<p>You can check if an object is in class 'NoneType':</p>\n<pre><code class=\"python\">&gt;&gt;&gt;variable = None\n&gt;&gt;&gt;variable is None\nTrue\n</code></pre>\n<p>More information is available at <a href=\"https://docs.python.org/3.7/c-api/none.html\" rel=\"nofollow noreferrer\">Python Docs</a></p>\n", "abstract": "Null is a special object type like: You can check if an object is in class 'NoneType': More information is available at Python Docs"}]}, {"link": "https://stackoverflow.com/questions/16981921/relative-imports-in-python-3", "question": {"id": "16981921", "title": "Relative imports in Python 3", "content": "<p>I want to import a function from another file in the same directory.</p>\n<p>Usually, one of the following works:</p>\n<pre><code class=\"python\">from .mymodule import myfunction\n</code></pre>\n<pre><code class=\"python\">from mymodule import myfunction\n</code></pre>\n<p>...but the other one gives me one of these errors:</p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">ImportError: attempted relative import with no known parent package\n</code></pre>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">ModuleNotFoundError: No module named 'mymodule'\n</code></pre>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">SystemError: Parent module '' not loaded, cannot perform relative import\n</code></pre>\n<p>Why is this?</p>\n", "abstract": "I want to import a function from another file in the same directory. Usually, one of the following works: ...but the other one gives me one of these errors: Why is this?"}, "answers": [{"id": 16985066, "score": 1053, "vote": 0, "content": "<blockquote>\n<p>unfortunately, this module needs to be inside the package, and it also\nneeds to be runnable as a script, sometimes. Any idea how I could\nachieve that?</p>\n</blockquote>\n<p>It's quite common to have a layout like this...</p>\n<pre><code class=\"python\">main.py\nmypackage/\n    __init__.py\n    mymodule.py\n    myothermodule.py\n</code></pre>\n<p>...with a <code>mymodule.py</code> like this...</p>\n<pre><code class=\"python\">#!/usr/bin/env python3\n\n# Exported function\ndef as_int(a):\n    return int(a)\n\n# Test function for module  \ndef _test():\n    assert as_int('1') == 1\n\nif __name__ == '__main__':\n    _test()\n</code></pre>\n<p>...a <code>myothermodule.py</code> like this...</p>\n<pre><code class=\"python\">#!/usr/bin/env python3\n\nfrom .mymodule import as_int\n\n# Exported function\ndef add(a, b):\n    return as_int(a) + as_int(b)\n\n# Test function for module  \ndef _test():\n    assert add('1', '1') == 2\n\nif __name__ == '__main__':\n    _test()\n</code></pre>\n<p>...and a <code>main.py</code> like this...</p>\n<pre><code class=\"python\">#!/usr/bin/env python3\n\nfrom mypackage.myothermodule import add\n\ndef main():\n    print(add('1', '1'))\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n<p>...which works fine when you run <code>main.py</code> or <code>mypackage/mymodule.py</code>, but fails with <code>mypackage/myothermodule.py</code>, due to the relative import...</p>\n<pre><code class=\"python\">from .mymodule import as_int\n</code></pre>\n<p>The way you're supposed to run it is...</p>\n<pre><code class=\"python\">python3 -m mypackage.myothermodule\n</code></pre>\n<p>...but it's somewhat verbose, and doesn't mix well with a shebang line like <code>#!/usr/bin/env python3</code>.</p>\n<p>The simplest fix for this case, assuming the name <code>mymodule</code> is globally unique, would be to avoid using relative imports, and just use...</p>\n<pre><code class=\"python\">from mymodule import as_int\n</code></pre>\n<p>...although, if it's not unique, or your package structure is more complex, you'll need to include the directory containing your package directory in <code>PYTHONPATH</code>, and do it like this...</p>\n<pre><code class=\"python\">from mypackage.mymodule import as_int\n</code></pre>\n<p>...or if you want it to work \"out of the box\", you can frob the <code>PYTHONPATH</code> in code first with this...</p>\n<pre><code class=\"python\">import sys\nimport os\n\nSCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))\nsys.path.append(os.path.dirname(SCRIPT_DIR))\n\nfrom mypackage.mymodule import as_int\n</code></pre>\n<p>It's kind of a pain, but there's a clue as to why in <a href=\"http://mail.python.org/pipermail/python-3000/2007-April/006793.html\" rel=\"noreferrer\">an email</a> written by a certain Guido van Rossum...</p>\n<blockquote>\n<p>I'm -1 on this and on any other proposed twiddlings of the <code>__main__</code>\nmachinery. The only use case seems to be running scripts that happen\nto be living inside a module's directory, which I've always seen as an\nantipattern. To make me change my mind you'd have to convince me that\nit isn't.</p>\n</blockquote>\n<p>Whether running scripts inside a package is an antipattern or not is subjective, but personally I find it really useful in a package I have which contains some custom wxPython widgets, so I can run the script for any of the source files to display a <code>wx.Frame</code> containing only that widget for testing purposes.</p>\n", "abstract": "unfortunately, this module needs to be inside the package, and it also\nneeds to be runnable as a script, sometimes. Any idea how I could\nachieve that? It's quite common to have a layout like this... ...with a mymodule.py like this... ...a myothermodule.py like this... ...and a main.py like this... ...which works fine when you run main.py or mypackage/mymodule.py, but fails with mypackage/myothermodule.py, due to the relative import... The way you're supposed to run it is... ...but it's somewhat verbose, and doesn't mix well with a shebang line like #!/usr/bin/env python3. The simplest fix for this case, assuming the name mymodule is globally unique, would be to avoid using relative imports, and just use... ...although, if it's not unique, or your package structure is more complex, you'll need to include the directory containing your package directory in PYTHONPATH, and do it like this... ...or if you want it to work \"out of the box\", you can frob the PYTHONPATH in code first with this... It's kind of a pain, but there's a clue as to why in an email written by a certain Guido van Rossum... I'm -1 on this and on any other proposed twiddlings of the __main__\nmachinery. The only use case seems to be running scripts that happen\nto be living inside a module's directory, which I've always seen as an\nantipattern. To make me change my mind you'd have to convince me that\nit isn't. Whether running scripts inside a package is an antipattern or not is subjective, but personally I find it really useful in a package I have which contains some custom wxPython widgets, so I can run the script for any of the source files to display a wx.Frame containing only that widget for testing purposes."}, {"id": 28154841, "score": 547, "vote": 0, "content": "<h1>Explanation</h1>\n<p>From <a href=\"https://www.python.org/dev/peps/pep-0328/\" rel=\"noreferrer\">PEP 328</a></p>\n<blockquote>\n<p>Relative imports use a module's __name__ attribute to determine that\n  module's position in the package hierarchy. If the module's name does\n  not contain any package information (e.g. it is set to '__main__')\n  <strong>then relative imports are resolved as if the module were a top level\n  module</strong>, regardless of where the module is actually located on the file\n  system.</p>\n</blockquote>\n<p>At some point <a href=\"https://www.python.org/dev/peps/pep-0338/\" rel=\"noreferrer\">PEP 338</a> conflicted with <a href=\"https://www.python.org/dev/peps/pep-0328/\" rel=\"noreferrer\">PEP 328</a>:</p>\n<blockquote>\n<p>... relative imports rely on <em>__name__</em> to determine the current\n  module's position in the package hierarchy. In a main module, the\n  value of <em>__name__</em> is always <em>'__main__'</em>, so explicit relative imports\n  will always fail (as they only work for a module inside a package)</p>\n</blockquote>\n<p>and to address the issue, <a href=\"https://www.python.org/dev/peps/pep-0366/\" rel=\"noreferrer\">PEP 366</a> introduced the top level variable <a href=\"https://docs.python.org/3/reference/import.html#__package__\" rel=\"noreferrer\"><code>__package__</code></a>:</p>\n<blockquote>\n<p>By adding a new module level attribute, this PEP allows relative\n  imports to work automatically if the module is executed using the <em>-m</em>\n  switch. A small amount of boilerplate in the module itself will allow\n  the relative imports to work when the file is executed by name. [...] When it [the attribute] is present, relative imports will be based on this attribute\n  rather than the module <em>__name__</em> attribute. [...] When the main module is specified by its filename, then the <em>__package__</em> attribute will be set to <em>None</em>. [...] <strong>When the import system encounters an explicit relative import in a\n  module without __package__ set (or with it set to None), it will\n  calculate and store the correct value</strong> (<strong>__name__.rpartition('.')[0]\n  for normal modules</strong> and <em>__name__</em> for package initialisation modules)</p>\n</blockquote>\n<p>(emphasis mine)</p>\n<p>If the <code>__name__</code> is <code>'__main__'</code>, <code>__name__.rpartition('.')[0]</code> returns empty string. This is why there's empty string literal in the error description:</p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">SystemError: Parent module '' not loaded, cannot perform relative import\n</code></pre>\n<p>The relevant part of the CPython's <a href=\"https://hg.python.org/cpython/file/9d65a195246b/Python/import.c#l1494\" rel=\"noreferrer\"><code>PyImport_ImportModuleLevelObject</code> function</a>:</p>\n<pre class=\"lang-c prettyprint-override\"><code class=\"python\">if (PyDict_GetItem(interp-&gt;modules, package) == NULL) {\n    PyErr_Format(PyExc_SystemError,\n            \"Parent module %R not loaded, cannot perform relative \"\n            \"import\", package);\n    goto error;\n}\n</code></pre>\n<p>CPython raises this exception if it was unable to find <code>package</code> (the name of the package) in <code>interp-&gt;modules</code> (accessible as <a href=\"https://docs.python.org/3/library/sys.html#sys.modules\" rel=\"noreferrer\"><code>sys.modules</code></a>). Since <code>sys.modules</code> is <em>\"a dictionary that maps module names to modules which have already been loaded\"</em>, it's now clear that <strong>the parent module must be explicitly absolute-imported before performing relative import</strong>.</p>\n<p><strong><em>Note:</em></strong>  The patch from the <a href=\"http://bugs.python.org/issue18018\" rel=\"noreferrer\">issue 18018</a> has added <a href=\"https://hg.python.org/cpython/file/c4e4886c6052/Python/import.c#l1494\" rel=\"noreferrer\">another <code>if</code> block</a>, which will be executed <strong>before</strong> the code above:</p>\n<pre class=\"lang-c prettyprint-override\"><code class=\"python\">if (PyUnicode_CompareWithASCIIString(package, \"\") == 0) {\n    PyErr_SetString(PyExc_ImportError,\n            \"attempted relative import with no known parent package\");\n    goto error;\n} /* else if (PyDict_GetItem(interp-&gt;modules, package) == NULL) {\n    ...\n*/\n</code></pre>\n<p>If <code>package</code> (same as above) is empty string, the error message will be</p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">ImportError: attempted relative import with no known parent package\n</code></pre>\n<p>However, you will only see this in Python 3.6 or newer.</p>\n<h1>Solution #1: Run your script using -m</h1>\n<p>Consider a directory (which is a Python <a href=\"https://docs.python.org/3/glossary.html#term-package\" rel=\"noreferrer\">package</a>):</p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">.\n\u251c\u2500\u2500 package\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 module.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 standalone.py\n</code></pre>\n<p>All of the files in <em>package</em> begin with the same 2 lines of code:</p>\n<pre><code class=\"python\">from pathlib import Path\nprint('Running' if __name__ == '__main__' else 'Importing', Path(__file__).resolve())\n</code></pre>\n<p>I'm including these two lines <em>only</em> to make the order of operations obvious. We can ignore them completely, since they don't affect the execution.</p>\n<p><em>__init__.py</em> and <em>module.py</em> contain only those two lines (i.e., they are effectively empty).</p>\n<p><em>standalone.py</em> additionally attempts to import <em>module.py</em> via relative import:</p>\n<pre><code class=\"python\">from . import module  # explicit relative import\n</code></pre>\n<p>We're well aware that <code>/path/to/python/interpreter package/standalone.py</code> will fail. However, we can run the module with the <a href=\"https://docs.python.org/3/using/cmdline.html?highlight=#cmdoption-m\" rel=\"noreferrer\"><code>-m</code> command line option</a> that will <em>\"search <a href=\"https://docs.python.org/3/library/sys.html#sys.path\" rel=\"noreferrer\"><code>sys.path</code></a> for the named module and execute its contents as the <code>__main__</code> module\"</em>:</p>\n<pre class=\"lang-bash prettyprint-override\"><code class=\"python\">vaultah@base:~$ python3 -i -m package.standalone\nImporting /home/vaultah/package/__init__.py\nRunning /home/vaultah/package/standalone.py\nImporting /home/vaultah/package/module.py\n&gt;&gt;&gt; __file__\n'/home/vaultah/package/standalone.py'\n&gt;&gt;&gt; __package__\n'package'\n&gt;&gt;&gt; # The __package__ has been correctly set and module.py has been imported.\n... # What's inside sys.modules?\n... import sys\n&gt;&gt;&gt; sys.modules['__main__']\n&lt;module 'package.standalone' from '/home/vaultah/package/standalone.py'&gt;\n&gt;&gt;&gt; sys.modules['package.module']\n&lt;module 'package.module' from '/home/vaultah/package/module.py'&gt;\n&gt;&gt;&gt; sys.modules['package']\n&lt;module 'package' from '/home/vaultah/package/__init__.py'&gt;\n</code></pre>\n<p><code>-m</code> does all the importing stuff for you and automatically sets <code>__package__</code>, but you can do that yourself in the</p>\n<h1>Solution #2: Set __package__ manually</h1>\n<p><strong><em>Please treat it as a proof of concept rather than an actual solution. It isn't well-suited for use in real-world code.</em></strong></p>\n<p><a href=\"https://www.python.org/dev/peps/pep-0366/\" rel=\"noreferrer\">PEP 366</a> has a workaround to this problem, however, it's incomplete, because setting <code>__package__</code> alone is not enough. You're going to need to import at least <em>N</em> preceding packages in the module hierarchy, where <em>N</em> is the number of parent directories (relative to the directory of the script) that will be searched for the module being imported.</p>\n<p>Thus,</p>\n<ol>\n<li><p>Add the parent directory of the <em>Nth</em> predecessor of the current module to <code>sys.path</code></p></li>\n<li><p>Remove the current file's directory from <code>sys.path</code></p></li>\n<li><p>Import the parent module of the current module using its fully-qualified name</p></li>\n<li><p>Set <code>__package__</code> to the fully-qualified name from <em>2</em></p></li>\n<li><p>Perform the relative import</p></li>\n</ol>\n<p>I'll borrow files from the <em>Solution #1</em> and add some more subpackages:</p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">package\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 module.py\n\u2514\u2500\u2500 subpackage\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 subsubpackage\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 standalone.py\n</code></pre>\n<p>This time <em>standalone.py</em> will import <em>module.py</em> from the <em>package</em> package using the following relative import</p>\n<pre><code class=\"python\">from ... import module  # N = 3\n</code></pre>\n<p>We'll need to precede that line with the boilerplate code, to make it work.</p>\n<pre><code class=\"python\">import sys\nfrom pathlib import Path\n\nif __name__ == '__main__' and __package__ is None:\n    file = Path(__file__).resolve()\n    parent, top = file.parent, file.parents[3]\n\n    sys.path.append(str(top))\n    try:\n        sys.path.remove(str(parent))\n    except ValueError: # Already removed\n        pass\n\n    import package.subpackage.subsubpackage\n    __package__ = 'package.subpackage.subsubpackage'\n\nfrom ... import module # N = 3\n</code></pre>\n<p>It allows us to execute <em>standalone.py</em> by filename:</p>\n<pre class=\"lang-bash prettyprint-override\"><code class=\"python\">vaultah@base:~$ python3 package/subpackage/subsubpackage/standalone.py\nRunning /home/vaultah/package/subpackage/subsubpackage/standalone.py\nImporting /home/vaultah/package/__init__.py\nImporting /home/vaultah/package/subpackage/__init__.py\nImporting /home/vaultah/package/subpackage/subsubpackage/__init__.py\nImporting /home/vaultah/package/module.py\n</code></pre>\n<p>A more general solution wrapped in a function can be found <a href=\"https://gist.github.com/vaultah/d63cb4c86be2774377aa674b009f759a\" rel=\"noreferrer\">here</a>. Example usage:</p>\n<pre><code class=\"python\">if __name__ == '__main__' and __package__ is None:\n    import_parents(level=3) # N = 3\n\nfrom ... import module\nfrom ...module.submodule import thing\n</code></pre>\n<h1>Solution #3: Use absolute imports and <a href=\"https://setuptools.readthedocs.io/en/latest/\" rel=\"noreferrer\">setuptools</a></h1>\n<p>The steps are -</p>\n<ol>\n<li><p>Replace explicit relative imports with equivalent absolute imports</p></li>\n<li><p>Install <code>package</code> to make it importable</p></li>\n</ol>\n<p>For instance, the directory structure may be as follows</p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">.\n\u251c\u2500\u2500 project\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 package\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 module.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 standalone.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 setup.py\n</code></pre>\n<p>where <em>setup.py</em> is</p>\n<pre><code class=\"python\">from setuptools import setup, find_packages\nsetup(\n    name = 'your_package_name',\n    packages = find_packages(),\n)\n</code></pre>\n<p>The rest of the files were borrowed from the <em>Solution #1</em>.</p>\n<p>Installation will allow you to import the package regardless of your working directory (assuming there'll be no naming issues).</p>\n<p>We can modify <em>standalone.py</em> to use this advantage (step 1):</p>\n<pre><code class=\"python\">from package import module  # absolute import\n</code></pre>\n<p>Change your working directory to <code>project</code> and run <code>/path/to/python/interpreter setup.py install --user</code> (<code>--user</code> installs the package in <a href=\"https://docs.python.org/3/library/site.html#site.USER_SITE\" rel=\"noreferrer\">your site-packages directory</a>) (step 2):</p>\n<pre class=\"lang-bash prettyprint-override\"><code class=\"python\">vaultah@base:~$ cd project\nvaultah@base:~/project$ python3 setup.py install --user\n</code></pre>\n<p>Let's verify that it's now possible to run <em>standalone.py</em> as a script:</p>\n<pre class=\"lang-bash prettyprint-override\"><code class=\"python\">vaultah@base:~/project$ python3 -i package/standalone.py\nRunning /home/vaultah/project/package/standalone.py\nImporting /home/vaultah/.local/lib/python3.6/site-packages/your_package_name-0.0.0-py3.6.egg/package/__init__.py\nImporting /home/vaultah/.local/lib/python3.6/site-packages/your_package_name-0.0.0-py3.6.egg/package/module.py\n&gt;&gt;&gt; module\n&lt;module 'package.module' from '/home/vaultah/.local/lib/python3.6/site-packages/your_package_name-0.0.0-py3.6.egg/package/module.py'&gt;\n&gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.modules['package']\n&lt;module 'package' from '/home/vaultah/.local/lib/python3.6/site-packages/your_package_name-0.0.0-py3.6.egg/package/__init__.py'&gt;\n&gt;&gt;&gt; sys.modules['package.module']\n&lt;module 'package.module' from '/home/vaultah/.local/lib/python3.6/site-packages/your_package_name-0.0.0-py3.6.egg/package/module.py'&gt;\n</code></pre>\n<p><strong><em>Note</em></strong>: If you decide to go down this route, you'd be better off using <a href=\"https://docs.python.org/3/library/venv.html\" rel=\"noreferrer\">virtual environments</a> to install packages in isolation.</p>\n<h1>Solution #4: Use absolute imports and some boilerplate code</h1>\n<p>Frankly, the installation is not necessary - you could add some boilerplate code to your script to make absolute imports work.</p>\n<p>I'm going to borrow files from <em>Solution #1</em> and change <em>standalone.py</em>:</p>\n<ol>\n<li><p>Add the parent directory of <em>package</em> to <code>sys.path</code> <em>before</em> attempting to import anything from <em>package</em> using absolute imports:</p>\n<pre><code class=\"python\">import sys\nfrom pathlib import Path # if you haven't already done so\nfile = Path(__file__).resolve()\nparent, root = file.parent, file.parents[1]\nsys.path.append(str(root))\n\n# Additionally remove the current file's directory from sys.path\ntry:\n    sys.path.remove(str(parent))\nexcept ValueError: # Already removed\n    pass\n</code></pre></li>\n<li><p>Replace the relative import by the absolute import:</p>\n<pre><code class=\"python\">from package import module  # absolute import\n</code></pre></li>\n</ol>\n<p><em>standalone.py</em> runs without problems:</p>\n<pre class=\"lang-bash prettyprint-override\"><code class=\"python\">vaultah@base:~$ python3 -i package/standalone.py\nRunning /home/vaultah/package/standalone.py\nImporting /home/vaultah/package/__init__.py\nImporting /home/vaultah/package/module.py\n&gt;&gt;&gt; module\n&lt;module 'package.module' from '/home/vaultah/package/module.py'&gt;\n&gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.modules['package']\n&lt;module 'package' from '/home/vaultah/package/__init__.py'&gt;\n&gt;&gt;&gt; sys.modules['package.module']\n&lt;module 'package.module' from '/home/vaultah/package/module.py'&gt;\n</code></pre>\n<p>I feel that I should warn you: try not to do this, <em>especially</em> if your project has a complex structure.</p>\n<hr/>\n<p>As a side note, <a href=\"https://www.python.org/dev/peps/pep-0008/#imports\" rel=\"noreferrer\">PEP 8</a> recommends the use of absolute imports, but states that in some scenarios explicit relative imports are acceptable:</p>\n<blockquote>\n<p>Absolute imports are recommended, as they are usually more readable\n  and tend to be better behaved (or at least give better error\n  messages). [...] However, explicit relative imports are an acceptable\n  alternative to absolute imports, especially when dealing with complex\n  package layouts where using absolute imports would be unnecessarily\n  verbose.</p>\n</blockquote>\n", "abstract": "From PEP 328 Relative imports use a module's __name__ attribute to determine that\n  module's position in the package hierarchy. If the module's name does\n  not contain any package information (e.g. it is set to '__main__')\n  then relative imports are resolved as if the module were a top level\n  module, regardless of where the module is actually located on the file\n  system. At some point PEP 338 conflicted with PEP 328: ... relative imports rely on __name__ to determine the current\n  module's position in the package hierarchy. In a main module, the\n  value of __name__ is always '__main__', so explicit relative imports\n  will always fail (as they only work for a module inside a package) and to address the issue, PEP 366 introduced the top level variable __package__: By adding a new module level attribute, this PEP allows relative\n  imports to work automatically if the module is executed using the -m\n  switch. A small amount of boilerplate in the module itself will allow\n  the relative imports to work when the file is executed by name. [...] When it [the attribute] is present, relative imports will be based on this attribute\n  rather than the module __name__ attribute. [...] When the main module is specified by its filename, then the __package__ attribute will be set to None. [...] When the import system encounters an explicit relative import in a\n  module without __package__ set (or with it set to None), it will\n  calculate and store the correct value (__name__.rpartition('.')[0]\n  for normal modules and __name__ for package initialisation modules) (emphasis mine) If the __name__ is '__main__', __name__.rpartition('.')[0] returns empty string. This is why there's empty string literal in the error description: The relevant part of the CPython's PyImport_ImportModuleLevelObject function: CPython raises this exception if it was unable to find package (the name of the package) in interp->modules (accessible as sys.modules). Since sys.modules is \"a dictionary that maps module names to modules which have already been loaded\", it's now clear that the parent module must be explicitly absolute-imported before performing relative import. Note:  The patch from the issue 18018 has added another if block, which will be executed before the code above: If package (same as above) is empty string, the error message will be However, you will only see this in Python 3.6 or newer. Consider a directory (which is a Python package): All of the files in package begin with the same 2 lines of code: I'm including these two lines only to make the order of operations obvious. We can ignore them completely, since they don't affect the execution. __init__.py and module.py contain only those two lines (i.e., they are effectively empty). standalone.py additionally attempts to import module.py via relative import: We're well aware that /path/to/python/interpreter package/standalone.py will fail. However, we can run the module with the -m command line option that will \"search sys.path for the named module and execute its contents as the __main__ module\": -m does all the importing stuff for you and automatically sets __package__, but you can do that yourself in the Please treat it as a proof of concept rather than an actual solution. It isn't well-suited for use in real-world code. PEP 366 has a workaround to this problem, however, it's incomplete, because setting __package__ alone is not enough. You're going to need to import at least N preceding packages in the module hierarchy, where N is the number of parent directories (relative to the directory of the script) that will be searched for the module being imported. Thus, Add the parent directory of the Nth predecessor of the current module to sys.path Remove the current file's directory from sys.path Import the parent module of the current module using its fully-qualified name Set __package__ to the fully-qualified name from 2 Perform the relative import I'll borrow files from the Solution #1 and add some more subpackages: This time standalone.py will import module.py from the package package using the following relative import We'll need to precede that line with the boilerplate code, to make it work. It allows us to execute standalone.py by filename: A more general solution wrapped in a function can be found here. Example usage: The steps are - Replace explicit relative imports with equivalent absolute imports Install package to make it importable For instance, the directory structure may be as follows where setup.py is The rest of the files were borrowed from the Solution #1. Installation will allow you to import the package regardless of your working directory (assuming there'll be no naming issues). We can modify standalone.py to use this advantage (step 1): Change your working directory to project and run /path/to/python/interpreter setup.py install --user (--user installs the package in your site-packages directory) (step 2): Let's verify that it's now possible to run standalone.py as a script: Note: If you decide to go down this route, you'd be better off using virtual environments to install packages in isolation. Frankly, the installation is not necessary - you could add some boilerplate code to your script to make absolute imports work. I'm going to borrow files from Solution #1 and change standalone.py: Add the parent directory of package to sys.path before attempting to import anything from package using absolute imports: Replace the relative import by the absolute import: standalone.py runs without problems: I feel that I should warn you: try not to do this, especially if your project has a complex structure. As a side note, PEP 8 recommends the use of absolute imports, but states that in some scenarios explicit relative imports are acceptable: Absolute imports are recommended, as they are usually more readable\n  and tend to be better behaved (or at least give better error\n  messages). [...] However, explicit relative imports are an acceptable\n  alternative to absolute imports, especially when dealing with complex\n  package layouts where using absolute imports would be unnecessarily\n  verbose."}, {"id": 49375740, "score": 245, "vote": 0, "content": "<p><strong>Put this inside your package's __init__.py file</strong>:</p>\n<pre><code class=\"python\"># For relative imports to work in Python 3.6\nimport os, sys; sys.path.append(os.path.dirname(os.path.realpath(__file__)))\n</code></pre>\n<p>Assuming your package is like this:</p>\n<pre><code class=\"python\">\u251c\u2500\u2500 project\n\u2502   \u251c\u2500\u2500 package\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 module1.py\n\u2502   \u2502   \u2514\u2500\u2500 module2.py\n\u2502   \u2514\u2500\u2500 setup.py\n</code></pre>\n<p>Now use regular imports in you package, like:</p>\n<pre><code class=\"python\"># in module2.py\nfrom module1 import class1\n</code></pre>\n<p>This works in both python 2 and 3.</p>\n", "abstract": "Put this inside your package's __init__.py file: Assuming your package is like this: Now use regular imports in you package, like: This works in both python 2 and 3."}, {"id": 28151907, "score": 63, "vote": 0, "content": "<p>I ran into this issue.  A hack workaround is importing via an if/else block like follows:</p>\n<pre><code class=\"python\">#!/usr/bin/env python3\n#myothermodule\n\nif __name__ == '__main__':\n    from mymodule import as_int\nelse:\n    from .mymodule import as_int\n\n\n# Exported function\ndef add(a, b):\n    return as_int(a) + as_int(b)\n\n# Test function for module  \ndef _test():\n    assert add('1', '1') == 2\n\nif __name__ == '__main__':\n    _test()\n</code></pre>\n", "abstract": "I ran into this issue.  A hack workaround is importing via an if/else block like follows:"}, {"id": 69102148, "score": 36, "vote": 0, "content": "<blockquote>\n<p>SystemError: Parent module '' not loaded, cannot perform relative import</p>\n</blockquote>\n<p>This means you are running a module inside the package as a script. Mixing scripts inside packages is <em>tricky</em> and should be avoided if at all possible. Use a wrapper script that imports the package and runs your <code>scripty</code> function instead.</p>\n<p>If your top-level directory is called <code>foo</code>, which is on your <code>PYTHONPATH</code> module search path, and you have a package <code>bar</code> there (it is a directory you'd expect an <code>__init__.py</code> file in), scripts should <em>not be placed inside <code>bar</code></em>, but should live on in <code>foo</code> <em>at best</em>.</p>\n<p>Note that <em>scripts</em> differ from <em>modules</em> here in that they are used as a filename argument to the <code>python</code> command, either by using <code>python &lt;filename&gt;</code> or via a <code>#!</code> (shebang) line. It is loaded <em>directly</em> as the <a href=\"https://docs.python.org/3/library/__main__.html#module-__main__\" rel=\"noreferrer\"><code>__main__</code> module</a> (this is why <code>if __name__ == \"__main__\":</code> works in scripts), and there is no package context to build on for relative imports.</p>\n<h2>Your options</h2>\n<ul>\n<li><p>If you can, package your project with <code>setuptools</code> (or <code>poetry</code> or <code>flit</code>, which can help simplify packaging), and create <a href=\"https://setuptools.readthedocs.io/en/latest/userguide/entry_point.html#console-scripts\" rel=\"noreferrer\">console script entrypoints</a>; installing your project with <code>pip</code> then creates scripts that know how to import your package properly. You can install your package locally with <code>pip install -e .</code>, so it can still be edited in-place.</p>\n</li>\n<li><p>Otherwise, never, ever, use <code>python path/to/packagename/file.py</code>, always use <code>python path/to/script.py</code> and <code>script.py</code> can use <code>from packagename import ...</code>.</p>\n</li>\n<li><p>As a fallback, you could use the <a href=\"https://docs.python.org/3/using/cmdline.html#cmdoption-m\" rel=\"noreferrer\"><code>-m</code> command-line switch</a> to tell Python to import a module and use that as the <code>__main__</code> file instead. This does not work with a shebang line, as there is no script file any more, however.</p>\n<p>If you use <code>python -m foo.bar</code> and <code>foo/bar.py</code> is found in a <code>sys.path</code> directory, that is then imported and executed as <code>__main__</code> with the right package context. If <code>bar</code> is also a package, inside <code>foo/</code>, it must have a <code>__main__.py</code> file (so <code>foo/bar/__main__.py</code> as the path from the <code>sys.path</code> directory).</p>\n</li>\n<li><p>In extreme circumstances, add the metadata Python uses to resolve relative imports by setting <code>__package__</code> directly; the file <code>foo/bar/spam.py</code>, importable as <code>foo.bar.spam</code>, is given the global <code>__package__ = \"foo.bar\"</code>. It is just another global, like <code>__file__</code> and <code>__name__</code>, set by Python when imported.</p>\n</li>\n</ul>\n<h2>On <code>sys.path</code></h2>\n<p>The above all requires that your package can be imported, which means it needs to be found in one of the directories (or zipfiles) listed in <a href=\"https://docs.python.org/3/library/sys.html#sys.path\" rel=\"noreferrer\"><code>sys.path</code></a>. There are several options here too:</p>\n<ul>\n<li><p>The directory where <code>path/to/script.py</code> was found (so <code>path/to</code>) is automatically added to <code>sys.path</code>. Executing <code>python path/to/foo.py</code> adds <code>path/to</code> to <code>sys.path</code>.</p>\n</li>\n<li><p>If you packaged your project (with <code>setuptools</code>, <code>poetry</code>, <code>flit</code> or another Python packaging tool), and installed it, the package has been added to the right place already.</p>\n</li>\n<li><p>As a last resort, add the right directory to <code>sys.path</code> yourself. If the package can be located relatively to the script file, use the <code>__file__</code> variable in the script global namespace (e.g. using the <a href=\"https://docs.python.org/3/library/pathlib.html#pathlib.Path\" rel=\"noreferrer\"><code>pathlib.Path</code> object</a>, <code>HERE = Path(__file__).resolve().parent</code> is a reference to the directory the file lives in, as absolute path).</p>\n</li>\n</ul>\n", "abstract": "SystemError: Parent module '' not loaded, cannot perform relative import This means you are running a module inside the package as a script. Mixing scripts inside packages is tricky and should be avoided if at all possible. Use a wrapper script that imports the package and runs your scripty function instead. If your top-level directory is called foo, which is on your PYTHONPATH module search path, and you have a package bar there (it is a directory you'd expect an __init__.py file in), scripts should not be placed inside bar, but should live on in foo at best. Note that scripts differ from modules here in that they are used as a filename argument to the python command, either by using python <filename> or via a #! (shebang) line. It is loaded directly as the __main__ module (this is why if __name__ == \"__main__\": works in scripts), and there is no package context to build on for relative imports. If you can, package your project with setuptools (or poetry or flit, which can help simplify packaging), and create console script entrypoints; installing your project with pip then creates scripts that know how to import your package properly. You can install your package locally with pip install -e ., so it can still be edited in-place. Otherwise, never, ever, use python path/to/packagename/file.py, always use python path/to/script.py and script.py can use from packagename import .... As a fallback, you could use the -m command-line switch to tell Python to import a module and use that as the __main__ file instead. This does not work with a shebang line, as there is no script file any more, however. If you use python -m foo.bar and foo/bar.py is found in a sys.path directory, that is then imported and executed as __main__ with the right package context. If bar is also a package, inside foo/, it must have a __main__.py file (so foo/bar/__main__.py as the path from the sys.path directory). In extreme circumstances, add the metadata Python uses to resolve relative imports by setting __package__ directly; the file foo/bar/spam.py, importable as foo.bar.spam, is given the global __package__ = \"foo.bar\". It is just another global, like __file__ and __name__, set by Python when imported. The above all requires that your package can be imported, which means it needs to be found in one of the directories (or zipfiles) listed in sys.path. There are several options here too: The directory where path/to/script.py was found (so path/to) is automatically added to sys.path. Executing python path/to/foo.py adds path/to to sys.path. If you packaged your project (with setuptools, poetry, flit or another Python packaging tool), and installed it, the package has been added to the right place already. As a last resort, add the right directory to sys.path yourself. If the package can be located relatively to the script file, use the __file__ variable in the script global namespace (e.g. using the pathlib.Path object, HERE = Path(__file__).resolve().parent is a reference to the directory the file lives in, as absolute path)."}, {"id": 63161864, "score": 21, "vote": 0, "content": "<p>For PyCharm users:</p>\n<p>I also was getting <code>ImportError: attempted relative import with no known parent package</code> because I was adding the <code>.</code> notation to silence a PyCharm parsing error. PyCharm innaccurately reports not being able to find:</p>\n<p><code>lib.thing import function</code></p>\n<p>If you change it to:</p>\n<p><code>.lib.thing import function</code></p>\n<p>it silences the error but then you get the aforementioned <code>ImportError: attempted relative import with no known parent package</code>. Just ignore PyCharm's parser. It's wrong and the code runs fine despite what it says.</p>\n", "abstract": "For PyCharm users: I also was getting ImportError: attempted relative import with no known parent package because I was adding the . notation to silence a PyCharm parsing error. PyCharm innaccurately reports not being able to find: lib.thing import function If you change it to: .lib.thing import function it silences the error but then you get the aforementioned ImportError: attempted relative import with no known parent package. Just ignore PyCharm's parser. It's wrong and the code runs fine despite what it says."}, {"id": 47670795, "score": 14, "vote": 0, "content": "<p>To obviate this problem, I devised a solution with the <a href=\"https://pypi.python.org/pypi/repackage/0.5\" rel=\"noreferrer\">repackage</a> package, which has worked for me for some time. It adds the upper directory to the lib path:</p>\n<pre><code class=\"python\">import repackage\nrepackage.up()\nfrom mypackage.mymodule import myfunction\n</code></pre>\n<p>Repackage can make relative imports that work in a wide range of cases, using an intelligent strategy (inspecting the call stack).</p>\n", "abstract": "To obviate this problem, I devised a solution with the repackage package, which has worked for me for some time. It adds the upper directory to the lib path: Repackage can make relative imports that work in a wide range of cases, using an intelligent strategy (inspecting the call stack)."}, {"id": 49886240, "score": 11, "vote": 0, "content": "<p>Hopefully, this will be of value to someone out there - I went through half a dozen stackoverflow posts trying to figure out relative imports similar to whats posted above here. I set up everything as suggested but I was still hitting <code>ModuleNotFoundError: No module named 'my_module_name'</code></p>\n<p>Since I was just developing locally and playing around, I hadn't created/run a <code>setup.py</code> file. I also hadn't apparently set my <code>PYTHONPATH</code>. </p>\n<p>I realized that when I ran my code as I had been when the tests were in the same directory as the module, I couldn't find my module:</p>\n<pre><code class=\"python\">$ python3 test/my_module/module_test.py                                                                                                               2.4.0\nTraceback (most recent call last):\n  File \"test/my_module/module_test.py\", line 6, in &lt;module&gt;\n    from my_module.module import *\nModuleNotFoundError: No module named 'my_module'\n</code></pre>\n<p>However, when I explicitly specified the path things started to work:</p>\n<pre><code class=\"python\">$ PYTHONPATH=. python3 test/my_module/module_test.py                                                                                                  2.4.0\n...........\n----------------------------------------------------------------------\nRan 11 tests in 0.001s\n\nOK\n</code></pre>\n<p>So, in the event that anyone has tried a few suggestions, believes their code is structured correctly and still finds themselves in a similar situation as myself try either of the following if you don't export the current directory to your PYTHONPATH:</p>\n<ol>\n<li>Run your code and explicitly include the path like so:\n<code>$ PYTHONPATH=. python3 test/my_module/module_test.py</code> </li>\n<li>To avoid calling <code>PYTHONPATH=.</code>, create a <code>setup.py</code> file with contents like the following and run <code>python setup.py development</code> to add packages to the path:</li>\n</ol>\n<blockquote>\n<pre><code class=\"python\"># setup.py\nfrom setuptools import setup, find_packages\n\nsetup(\n    name='sample',\n    packages=find_packages()\n)\n</code></pre>\n</blockquote>\n", "abstract": "Hopefully, this will be of value to someone out there - I went through half a dozen stackoverflow posts trying to figure out relative imports similar to whats posted above here. I set up everything as suggested but I was still hitting ModuleNotFoundError: No module named 'my_module_name' Since I was just developing locally and playing around, I hadn't created/run a setup.py file. I also hadn't apparently set my PYTHONPATH.  I realized that when I ran my code as I had been when the tests were in the same directory as the module, I couldn't find my module: However, when I explicitly specified the path things started to work: So, in the event that anyone has tried a few suggestions, believes their code is structured correctly and still finds themselves in a similar situation as myself try either of the following if you don't export the current directory to your PYTHONPATH:"}, {"id": 68730946, "score": 11, "vote": 0, "content": "<h3>TL;DR: to @Aya's answer, updated with <code>pathlib</code> library, and working for Jupyter notebooks where <code>__file__</code> is not defined:</h3>\n<p>You want to import <code>my_function</code> defined under <code>../my_Folder_where_the_package_lives/my_package.py</code>\nrespect to where you are writing the code.</p>\n<p>Then do:</p>\n<pre><code class=\"python\">import os\nimport sys\nimport pathlib\n\nPACKAGE_PARENT = pathlib.Path(__file__).parent\n#PACKAGE_PARENT = pathlib.Path.cwd().parent # if on jupyter notebook\nSCRIPT_DIR = PACKAGE_PARENT / \"my_Folder_where_the_package_lives\"\nsys.path.append(str(SCRIPT_DIR))\n\nfrom my_package import my_function\n</code></pre>\n", "abstract": "You want to import my_function defined under ../my_Folder_where_the_package_lives/my_package.py\nrespect to where you are writing the code. Then do:"}, {"id": 52282449, "score": 8, "vote": 0, "content": "<p>I needed to run python3 from the main project directory to make it work.</p>\n<p>For example, if the project has the following structure:</p>\n<pre><code class=\"python\">project_demo/\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 some_package/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 project_configs.py\n\u2514\u2500\u2500 test/\n    \u2514\u2500\u2500 test_project_configs.py\n</code></pre>\n<h3>Solution</h3>\n<p>I would run python3 inside folder <em>project_demo/</em> and then perform a</p>\n<pre><code class=\"python\">from some_package import project_configs\n</code></pre>\n", "abstract": "I needed to run python3 from the main project directory to make it work. For example, if the project has the following structure: I would run python3 inside folder project_demo/ and then perform a"}, {"id": 65780624, "score": 8, "vote": 0, "content": "<p>My boilerplate to make a <code>module</code> with relative imports in a <code>package</code> runnable standalone.</p>\n<p><code>package/module.py</code></p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">## Standalone boilerplate before relative imports\nif __package__ is None:                  \n    DIR = Path(__file__).resolve().parent\n    sys.path.insert(0, str(DIR.parent))\n    __package__ = DIR.name\n\nfrom . import variable_in__init__py\nfrom . import other_module_in_package\n...\n</code></pre>\n<p>Now you can use your module in any fashion:</p>\n<ol>\n<li>Run module as usual: <code>python -m package.module</code></li>\n<li>Use it as a module: <code>python -c 'from package import module'</code></li>\n<li>Run it standalone: <code>python package/module.py</code></li>\n<li>or with shebang (<code>#!/bin/env python</code>) just: <code>package/module.py</code></li>\n</ol>\n<p><strong>NB!</strong> Using <code>sys.path.append</code> instead of <code>sys.path.insert</code> will give you a hard to trace error if your <code>module</code> has the same name as your <code>package</code>. E.g. <code>my_script/my_script.py</code></p>\n<p>Of course if you have relative imports from higher levels in your package hierarchy, than this is not enough, but for most cases, it's just okay.</p>\n", "abstract": "My boilerplate to make a module with relative imports in a package runnable standalone. package/module.py Now you can use your module in any fashion: NB! Using sys.path.append instead of sys.path.insert will give you a hard to trace error if your module has the same name as your package. E.g. my_script/my_script.py Of course if you have relative imports from higher levels in your package hierarchy, than this is not enough, but for most cases, it's just okay."}, {"id": 62369722, "score": 7, "vote": 0, "content": "<p>I was getting this <strong>ImportError: attempted relative import with no known parent package</strong></p>\n<p>In my program I was using the file from current path for importing its function.</p>\n<pre><code class=\"python\">from .filename import function\n</code></pre>\n<p>Then I modified the current path <em>(Dot)</em> with package name. Which resolved my issue.</p>\n<pre><code class=\"python\">from package_name.filename import function\n</code></pre>\n<p>I hope the above answer helps you.</p>\n", "abstract": "I was getting this ImportError: attempted relative import with no known parent package In my program I was using the file from current path for importing its function. Then I modified the current path (Dot) with package name. Which resolved my issue. I hope the above answer helps you."}, {"id": 65351486, "score": 6, "vote": 0, "content": "<p>I tried all of the above to no avail, only to realize I mistakenly had a <code>-</code> in my package name.</p>\n<p>In short, don't have <code>-</code> in the directory where <code>__init__.py</code> is. I've never felt elated after finding out such inanity.</p>\n", "abstract": "I tried all of the above to no avail, only to realize I mistakenly had a - in my package name. In short, don't have - in the directory where __init__.py is. I've never felt elated after finding out such inanity."}, {"id": 69258641, "score": 6, "vote": 0, "content": "<h2>Importing from same directory</h2>\n<p>Firstly, you can import from the same directory.</p>\n<p>Here is the file structure...</p>\n<pre><code class=\"python\">Folder\n |\n \u251c\u2500 Scripts\n |   \u251c\u2500 module123.py\n |\n \u251c\u2500 main.py\n \u251c\u2500 script123.py\n</code></pre>\n<p>Here is main.py</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">from . import script123\nfrom Scripts import module123\n</code></pre>\n<p>As you can see, importing from <code>.</code> imports from current directory.</p>\n<blockquote>\n<p>Note: if running using anything but IDLE, make sure that your terminal is navigated to the same directory as the <code>main.py</code> file before running.</p>\n</blockquote>\n<p>Also, importing from a local folder also works.</p>\n<h2>Importing from parent directory</h2>\n<p>As seen in <a href=\"https://gist.github.com/Password-Classified/711d3cf01032a589b05a1a239ae2179e\" rel=\"noreferrer\">my GitHub gist here</a>,  there is the following method.</p>\n<p>Take the following file tree...</p>\n<pre><code class=\"python\">ParentDirectory\n \u251c\u2500 Folder\n |   |\n |   \u251c\u2500 Scripts\n |   |   \u251c\u2500 module123.py\n |   |\n |   \u251c\u2500 main.py\n |   \u251c\u2500 script123.py\n |\n \u251c\u2500 parentModule.py\n</code></pre>\n<p>Then, just add this code to the top of your <code>main.py</code> file.</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">import inspect\nimport os\nimport sys\n\ncurrent_dir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))\nparent_dir = os.path.dirname(current_dir)\nsys.path.insert(0, parent_dir)\n\nfrom ParentDirectory import Stuff\n</code></pre>\n", "abstract": "Firstly, you can import from the same directory. Here is the file structure... Here is main.py As you can see, importing from . imports from current directory. Note: if running using anything but IDLE, make sure that your terminal is navigated to the same directory as the main.py file before running. Also, importing from a local folder also works. As seen in my GitHub gist here,  there is the following method. Take the following file tree... Then, just add this code to the top of your main.py file."}, {"id": 42706563, "score": 4, "vote": 0, "content": "<p>if both packages are in your import path (sys.path), and the module/class you want is in example/example.py, then to access the class without relative import try:</p>\n<pre><code class=\"python\">from example.example import fkt\n</code></pre>\n", "abstract": "if both packages are in your import path (sys.path), and the module/class you want is in example/example.py, then to access the class without relative import try:"}, {"id": 58429046, "score": 3, "vote": 0, "content": "<p>I think the best solution is to create a package for your module:\n<a href=\"https://packaging.python.org/en/latest/tutorials/packaging-projects/\" rel=\"nofollow noreferrer\">Here</a> is more info on how to do it.</p>\n<p>Once you have a package you don't need to worry about relative import, you can just do absolute imports.</p>\n", "abstract": "I think the best solution is to create a package for your module:\nHere is more info on how to do it. Once you have a package you don't need to worry about relative import, you can just do absolute imports."}, {"id": 64212689, "score": 3, "vote": 0, "content": "<p>If none of the above worked for you, you can specify the module explicitly.</p>\n<p><strong>Directory:</strong></p>\n<pre><code class=\"python\">\u251c\u2500\u2500 Project\n\u2502     \u251c\u2500\u2500 Dir\n\u2502     \u2502    \u251c\u2500\u2500 __init__.py\n\u2502     \u2502    \u251c\u2500\u2500 module.py\n\u2502     \u2502    \u2514\u2500\u2500 standalone.py\n</code></pre>\n<p><strong>Solution:</strong></p>\n<pre><code class=\"python\">#in standalone.py\nfrom Project.Dir.module import ...\n</code></pre>\n<blockquote>\n<p>module - the module to be imported</p>\n</blockquote>\n", "abstract": "If none of the above worked for you, you can specify the module explicitly. Directory: Solution: module - the module to be imported"}, {"id": 68195985, "score": 2, "vote": 0, "content": "<p>I encounter this a lot when I am working with Django, since a lot of functionality is performed from the <code>manage.py</code> script but I also want to have some of my modules runnable directly as scripts as well (ideally you would make them <code>manage.py</code> directives but we're not there yet).</p>\n<p>This is a mock up of what such a project might look like;</p>\n<pre><code class=\"python\">\u251c\u2500\u2500 dj_app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 models.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ops\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 bar.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 foo.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 script.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 tests.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 utils.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 views.py\n\u2514\u2500\u2500 manage.py\n</code></pre>\n<p>The important parts here being <code>manage.py</code>, <code>dj_app/script.py</code>, and <code>dj_app/tests.py</code>. We also have submodules <code>dj_app/ops/bar.py</code> and <code>dj_app/ops/foo.py</code> which contain more items we want to use throughout the project.</p>\n<p>The source of the issue commonly comes from wanting your <code>dj_app/script.py</code> script methods to have test cases in <code>dj_app/tests.py</code> which get invoked when you run <code>manage.py test</code>.</p>\n<p>This is how I set up the project and its <code>import</code>s;</p>\n<pre><code class=\"python\"># dj_app/ops/foo.py\n# Foo operation methods and classes\nfoo_val = \"foo123\"\n</code></pre>\n<p>.</p>\n<pre><code class=\"python\"># dj_app/ops/bar.py\n# Bar operations methods and classes\nbar_val = \"bar123\"\n</code></pre>\n<p>.</p>\n<pre><code class=\"python\"># dj_app/script.py\n# script to run app methods from CLI\n\n# if run directly from command line\nif __name__ == '__main__':\n    from ops.bar import bar_val\n    from ops.foo import foo_val\n\n# otherwise\nelse:\n    from .ops.bar import bar_val\n    from .ops.foo import foo_val\n\ndef script_method1():\n    print(\"this is script_method1\")\n    print(\"bar_val: {}\".format(bar_val))\n    print(\"foo_val: {}\".format(foo_val))\n\n\nif __name__ == '__main__':\n    print(\"running from the script\")\n    script_method1()\n</code></pre>\n<p>.</p>\n<pre><code class=\"python\"># dj_app/tests.py\n# test cases for the app\n# do not run this directly from CLI or the imports will break\nfrom .script import script_method1\nfrom .ops.bar import bar_val\nfrom .ops.foo import foo_val \n\ndef main():\n    print(\"Running the test case\")\n    print(\"testing script method\")\n    script_method1()\n\nif __name__ == '__main__':\n    print(\"running tests from command line\")\n    main()\n</code></pre>\n<p>.</p>\n<pre><code class=\"python\"># manage.py\n# just run the test cases for this example\nimport dj_app.tests\ndj_app.tests.main()\n</code></pre>\n<p>.</p>\n<p>Running the test cases from <code>manage.py</code>;</p>\n<pre><code class=\"python\">$ python3 manage.py\nRunning the test case\ntesting script method\nthis is script_method1\nbar_val: bar123\nfoo_val: foo123\n</code></pre>\n<p>Running the script on its own;</p>\n<pre><code class=\"python\">$ python3 dj_app/script.py\nrunning from the script\nthis is script_method1\nbar_val: bar123\nfoo_val: foo123\n</code></pre>\n<p>Note that you get an error if you try to run the <code>test.py</code> directly however, so don't do that;</p>\n<pre><code class=\"python\">$ python3 dj_app/tests.py\nTraceback (most recent call last):\n  File \"dj_app/tests.py\", line 5, in &lt;module&gt;\n    from .script import script_method1\nModuleNotFoundError: No module named '__main__.script'; '__main__' is not a package\n</code></pre>\n<p>If I run into more complicated situations for imports, I usually end up implementing something like this to hack through it;</p>\n<pre><code class=\"python\">import os\nimport sys\nTHIS_DIR = os.path.dirname(os.path.realpath(__file__))\nsys.path.insert(0, THIS_DIR)\nfrom script import script_method1\nsys.path.pop(0)\n</code></pre>\n", "abstract": "I encounter this a lot when I am working with Django, since a lot of functionality is performed from the manage.py script but I also want to have some of my modules runnable directly as scripts as well (ideally you would make them manage.py directives but we're not there yet). This is a mock up of what such a project might look like; The important parts here being manage.py, dj_app/script.py, and dj_app/tests.py. We also have submodules dj_app/ops/bar.py and dj_app/ops/foo.py which contain more items we want to use throughout the project. The source of the issue commonly comes from wanting your dj_app/script.py script methods to have test cases in dj_app/tests.py which get invoked when you run manage.py test. This is how I set up the project and its imports; . . . . . Running the test cases from manage.py; Running the script on its own; Note that you get an error if you try to run the test.py directly however, so don't do that; If I run into more complicated situations for imports, I usually end up implementing something like this to hack through it;"}, {"id": 68312469, "score": 1, "vote": 0, "content": "<p>This my project structure</p>\n<pre><code class=\"python\">\u251c\u2500\u2500 folder\n|   | \n\u2502   \u251c\u2500\u2500 moduleA.py\n|   |   |\n|   |   \u2514--function1()\n|   |       \u2514~~ uses function2()\n|   | \n\u2502   \u2514\u2500\u2500 moduleB.py\n|       | \n|       \u2514--function2()\n|   \n\u2514\u2500\u2500 main.py\n     \u2514~~ uses function1()\n</code></pre>\n<p>Here my <code>moduleA</code> imports <code>moduleB</code> and <code>main</code> imports <code>moduleA</code></p>\n<p>I added the snippet below in <code>moduleA</code> to import <code>moduleB</code></p>\n<pre><code class=\"python\">try:\n    from .moduleB import function2 \nexcept:\n    from moduleB import function2 \n</code></pre>\n<p>Now I can execute both <code>main.py</code> as well as <code>moduleA.py</code> individually</p>\n<p>Is this a solution ?</p>\n", "abstract": "This my project structure Here my moduleA imports moduleB and main imports moduleA I added the snippet below in moduleA to import moduleB Now I can execute both main.py as well as moduleA.py individually Is this a solution ?"}, {"id": 70616947, "score": 1, "vote": 0, "content": "<p>The below solution is tested on <strong>Python3</strong></p>\n<pre><code class=\"python\">\u251c\u2500\u2500 classes\n|   |\n|   \u251c\u2500\u2500__init__.py\n|   | \n\u2502   \u251c\u2500\u2500 userclass.py\n|   |   |\n|   |   \u2514--viewDetails()\n|   |       \n|   | \n\u2502   \u2514\u2500\u2500 groupclass.py\n|       | \n|       \u2514--viewGroupDetails()\n|   \n\u2514\u2500\u2500 start.py\n     \u2514~~ uses function1()\n</code></pre>\n<p>Now, in order to use viewDetails of userclass or viewGroupDetails of groupclass define that in _ <em>init</em> _.py of classess directory first.</p>\n<p>Ex: In  _ <em>init</em> _.py</p>\n<pre><code class=\"python\">from .userclasss import viewDetails\n\nfrom .groupclass import viewGroupDetails\n</code></pre>\n<p>Step2: Now, in start.py we can directly import viewDetails</p>\n<p>Ex: In start.py</p>\n<pre><code class=\"python\">from classes import viewDetails\nfrom classes import viewGroupDetails\n</code></pre>\n", "abstract": "The below solution is tested on Python3 Now, in order to use viewDetails of userclass or viewGroupDetails of groupclass define that in _ init _.py of classess directory first. Ex: In  _ init _.py Step2: Now, in start.py we can directly import viewDetails Ex: In start.py"}, {"id": 72729181, "score": 1, "vote": 0, "content": "<p>I ran into a similar problem when trying to write a python file that can be loaded either as a module or an executable script.</p>\n<h1>Setup</h1>\n<pre><code class=\"python\">/path/to/project/\n\u251c\u2500\u2500 __init__.py\n\u2514\u2500\u2500 main.py\n    \u2514\u2500\u2500 mylib/\n        \u251c\u2500\u2500 list_util.py\n        \u2514\u2500\u2500 args_util.py\n</code></pre>\n<p>with:</p>\n<p><strong><code>main.py:</code></strong></p>\n<pre><code class=\"python\">#!/usr/bin/env python3\nimport sys\nimport mylib.args_util\n\nif __name__ == '__main__':\n    print(f'{mylib.args_util.parseargs(sys.argv[1:])=}')\n</code></pre>\n<p><strong><code>mylib/list_util.py:</code></strong></p>\n<pre><code class=\"python\">def to_int_list(args):\n    return [int(x) for x in args]\n</code></pre>\n<p><strong><code>mylib/args_util.py:</code></strong></p>\n<pre><code class=\"python\">#!/usr/bin/env python3\nimport sys\nfrom . import list_util as lu\n\ndef parseargs(args):\n    return sum(lu.to_int_list(args))\n\nif __name__ == '__main__':\n    print(f'{parseargs(sys.argv[1:])=}')\n</code></pre>\n<h2>Output</h2>\n<pre><code class=\"python\">$ ./main.py 1 2 3\nmylib.args_util.parseargs(sys.argv[1:])=6\n\n$ mylib/args_util.py 1 2 3\nTraceback (most recent call last):\n  File \"/path/to/project/mylib/args_util.py\", line 10, in &lt;module&gt;\n    from . import list_util as lu\nImportError: attempted relative import with no known parent package\n</code></pre>\n<h1>Solution</h1>\n<p>I settled for a Bash/Python polyglot solution. The Bash version of the program just calls <code>python3 -m mylib.args_util</code> then exits.</p>\n<p>The Python version ignores the Bash code because it's contained in the docstring.</p>\n<p>The Bash version ignores the Python code because it uses <code>exec</code> to stop parsing/running lines.</p>\n<p><strong><code>mylib/args_util.py:</code></strong></p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">#!/bin/bash\n# -*- Mode: python -*-\n''''true\nexec /usr/bin/env python3 -m mylib.args_util \"$@\"\n'''\n\nimport sys\nfrom . import list_util as lu\n\ndef parseargs(args):\n    return sum(lu.to_int_list(args))\n\nif __name__ == '__main__':\n    print(f'{parseargs(sys.argv[1:])=}')\n</code></pre>\n<h2>Output</h2>\n<pre><code class=\"python\">$ ./main.py 1 2 3\nmylib.args_util.parseargs(sys.argv[1:])=6\n\n$ mylib/args_util.py 1 2 3\nparseargs(sys.argv[1:])=6\n</code></pre>\n<h2>Explanation</h2>\n<ul>\n<li>Line 1: <code>#!/bin/bash</code>; this is the \"shebang\" line; it tells the interactive shell how run this script.\n<ul>\n<li>Python: ignored (comment)</li>\n<li>Bash: ignored (comment)</li>\n</ul>\n</li>\n<li>Line 2: <code># -*- Mode: python -*-</code> optional; this is called the \"mode-line\"; it tells Emacs to use Python syntax highlighting instead of guessing that the language is Bash when reading the file.\n<ul>\n<li>Python: ignored (comment)</li>\n<li>Bash: ignored (comment)</li>\n</ul>\n</li>\n<li>Line 3: <code>''''true</code>\n<ul>\n<li>Python: views this as an unassigned docstring starting with <code>'true\\n</code></li>\n<li>Bash: views this as three strings (of which the first two are empty strings) that expand to <code>true</code> (i.e. <code>'' + '' + 'true' = 'true'</code>); it then runs <code>true</code> (which does nothing) and continues to the next line</li>\n</ul>\n</li>\n<li>Line 4: <code>exec /usr/bin/env python3 -m mylib.args_util \"$@\"</code>\n<ul>\n<li>Python: still views this as part of the docstring from line 3.</li>\n<li>Bash: runs <code>python3 -m mylib.args_util</code> then exits (it doesn't parse anything beyond this line)</li>\n</ul>\n</li>\n<li>Line 5: <code>'''</code>\n<ul>\n<li>Python: views this as the end of the docstring from line 3.</li>\n<li>Bash: doesn't parse this line</li>\n</ul>\n</li>\n</ul>\n<h2>Caveats</h2>\n<ul>\n<li>This doesn't work on Windows:\n<ul>\n<li><em>Workaround:</em> Use WSL or a Batch wrapper script to call <code>python -m mylib.args_util</code>.</li>\n</ul>\n</li>\n<li>This only works if the current working directory is set to <code>/path/to/project/</code>.\n<ul>\n<li><em>Workaround:</em> Set <code>PYTHONPATH</code> when calling <code>/usr/bin/env</code>\n<pre><code class=\"python\">#!/bin/bash\n# -*- Mode: python -*-\n''''true\nexec /usr/bin/env python3 \\\n    PYTHONPATH=\"$(cd \"$(dirname \"$0\")/..\" ; pwd)\" \\\n    -m mylib.args_util \"$@\"\n'''\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n", "abstract": "I ran into a similar problem when trying to write a python file that can be loaded either as a module or an executable script. with: main.py: mylib/list_util.py: mylib/args_util.py: I settled for a Bash/Python polyglot solution. The Bash version of the program just calls python3 -m mylib.args_util then exits. The Python version ignores the Bash code because it's contained in the docstring. The Bash version ignores the Python code because it uses exec to stop parsing/running lines. mylib/args_util.py:"}, {"id": 61055271, "score": 0, "vote": 0, "content": "<p>I had a similar problem: I needed a Linux service and cgi plugin which use common constants to cooperate. The 'natural' way to do this is to place them in the <strong>init</strong>.py of the package, but I cannot start the cgi plugin with the -m parameter.</p>\n<p>My final solution was similar to Solution #2 above:</p>\n<pre><code class=\"python\">import sys\nimport pathlib as p\nimport importlib\n\npp = p.Path(sys.argv[0])\npack = pp.resolve().parent\n\npkg = importlib.import_module('__init__', package=str(pack))\n</code></pre>\n<p>The disadvantage is that you must prefix the constants (or common functions) with pkg:</p>\n<pre><code class=\"python\">print(pkg.Glob)\n</code></pre>\n", "abstract": "I had a similar problem: I needed a Linux service and cgi plugin which use common constants to cooperate. The 'natural' way to do this is to place them in the init.py of the package, but I cannot start the cgi plugin with the -m parameter. My final solution was similar to Solution #2 above: The disadvantage is that you must prefix the constants (or common functions) with pkg:"}, {"id": 63692388, "score": 0, "vote": 0, "content": "<p>Moving the file from which you are importing to an outside directory helps.<br/>\nThis is extra useful when your main file makes any other files in its own directory.<br/>\nEx:<br/>\nBefore:</p>\n<pre><code class=\"python\">Project  \n|---dir1  \n|-------main.py  \n|-------module1.py  \n</code></pre>\n<p>After:</p>\n<pre><code class=\"python\">Project  \n|---module1.py  \n|---dir1  \n|-------main.py  \n</code></pre>\n", "abstract": "Moving the file from which you are importing to an outside directory helps.\nThis is extra useful when your main file makes any other files in its own directory.\nEx:\nBefore: After:"}, {"id": 64695373, "score": 0, "vote": 0, "content": "<p><strong>TLDR; Append Script path to the System Path by adding following in the entry point of your python script</strong>.</p>\n<pre><code class=\"python\">import os.path\nimport sys\nPACKAGE_PARENT = '..'\nSCRIPT_DIR = os.path.dirname(os.path.realpath(os.path.join(os.getcwd(), os.path.expanduser(__file__))))\nsys.path.append(os.path.normpath(os.path.join(SCRIPT_DIR, PACKAGE_PARENT)))\n</code></pre>\n<p>Thats it now you can run your project in PyCharma as well as from Terminal!!</p>\n", "abstract": "TLDR; Append Script path to the System Path by adding following in the entry point of your python script. Thats it now you can run your project in PyCharma as well as from Terminal!!"}, {"id": 72668107, "score": 0, "vote": 0, "content": "<p>I've created a new, experimental import library for Python: <a href=\"https://github.com/ronny-rentner/ultraimport/\" rel=\"nofollow noreferrer\">ultraimport</a></p>\n<p>It gives the programmer more control over imports and makes them unambiguous. Also it gives better error messages when an import fails.</p>\n<p>It allows you to do relative, file-system based imports that always work, no matter how you run your code and no matter what is your current working directory. It does not matter if you run a script or module. You also don't have to change sys.path which might have other side effects.</p>\n<p>You would then change</p>\n<pre><code class=\"python\">from .mymodule import myfunction\n</code></pre>\n<p>to</p>\n<pre><code class=\"python\">import ultraimport\nmyfunction = ultraimport('__dir__/mymodule.py', 'myfunction')\n</code></pre>\n<p>This way the import will always work, even if you run the code as script.</p>\n<p>One issue when importing scripts like this is that subsequent relative imports might fail. ultraimport has a builtin preprocessor to automatically rewrite relative imports.</p>\n", "abstract": "I've created a new, experimental import library for Python: ultraimport It gives the programmer more control over imports and makes them unambiguous. Also it gives better error messages when an import fails. It allows you to do relative, file-system based imports that always work, no matter how you run your code and no matter what is your current working directory. It does not matter if you run a script or module. You also don't have to change sys.path which might have other side effects. You would then change to This way the import will always work, even if you run the code as script. One issue when importing scripts like this is that subsequent relative imports might fail. ultraimport has a builtin preprocessor to automatically rewrite relative imports."}, {"id": 65625363, "score": -2, "vote": 0, "content": "<p>I had a similar problem and solved it by creating a <em>symbolic link</em> to the package in the working directory:</p>\n<p><code>ln -s ../../../my_package my_package</code></p>\n<p>and then import it as usual:</p>\n<p><code>import my_package</code></p>\n<p>I know this is more like a \"Linux\" solution rather than a \"Python\" solution. but it's a valid approach nonetheless.</p>\n", "abstract": "I had a similar problem and solved it by creating a symbolic link to the package in the working directory: ln -s ../../../my_package my_package and then import it as usual: import my_package I know this is more like a \"Linux\" solution rather than a \"Python\" solution. but it's a valid approach nonetheless."}]}, {"link": "https://stackoverflow.com/questions/5142418/what-is-the-use-of-assert-in-python", "question": {"id": "5142418", "title": "What is the use of &quot;assert&quot; in Python?", "content": "<p>What does <code>assert</code> mean? How is it used?</p>\n", "abstract": "What does assert mean? How is it used?"}, "answers": [{"id": 5142453, "score": 1605, "vote": 0, "content": "<p>The <code>assert</code> statement exists in almost every programming language. It has two main uses:</p>\n<ol>\n<li><p>It helps detect problems early in your program, where the cause is clear, rather than later when some other operation fails. A type error in Python, for example, can go through several layers of code before actually raising an <code>Exception</code> if not caught early on.</p>\n</li>\n<li><p>It works as documentation for other developers reading the code, who see the <code>assert</code> and can confidently say that its condition holds from now on.</p>\n</li>\n</ol>\n<p>When you do...</p>\n<pre><code class=\"python\">assert condition\n</code></pre>\n<p>... you're telling the program to test that condition, and immediately trigger an error if the condition is false.</p>\n<p>In Python, it's roughly equivalent to this:</p>\n<pre><code class=\"python\">if not condition:\n    raise AssertionError()\n</code></pre>\n<p>Try it in the Python shell:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; assert True # nothing happens\n&gt;&gt;&gt; assert False\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAssertionError\n</code></pre>\n<p>Assertions can include an optional message, and you can disable them when running the interpreter.</p>\n<p>To print a message if the assertion fails:</p>\n<pre><code class=\"python\">assert False, \"Oh no! This assertion failed!\"\n</code></pre>\n<p>Do <strong>not</strong> use parenthesis to call <code>assert</code> like a function. It is a statement. If you do <code>assert(condition, message)</code> you'll be running the <code>assert</code> with a <code>(condition, message)</code> tuple as first parameter.</p>\n<p>As for disabling them, when running <code>python</code> in optimized mode, where <code>__debug__</code> is <code>False</code>, assert statements will be ignored. Just pass the <code>-O</code> flag:</p>\n<pre><code class=\"python\">python -O script.py\n</code></pre>\n<p>See <a href=\"http://docs.python.org/reference/simple_stmts.html#assert\" rel=\"noreferrer\">here</a> for the relevant documentation.</p>\n", "abstract": "The assert statement exists in almost every programming language. It has two main uses: It helps detect problems early in your program, where the cause is clear, rather than later when some other operation fails. A type error in Python, for example, can go through several layers of code before actually raising an Exception if not caught early on. It works as documentation for other developers reading the code, who see the assert and can confidently say that its condition holds from now on. When you do... ... you're telling the program to test that condition, and immediately trigger an error if the condition is false. In Python, it's roughly equivalent to this: Try it in the Python shell: Assertions can include an optional message, and you can disable them when running the interpreter. To print a message if the assertion fails: Do not use parenthesis to call assert like a function. It is a statement. If you do assert(condition, message) you'll be running the assert with a (condition, message) tuple as first parameter. As for disabling them, when running python in optimized mode, where __debug__ is False, assert statements will be ignored. Just pass the -O flag: See here for the relevant documentation."}, {"id": 30770447, "score": 583, "vote": 0, "content": "<p>Watch out for the parentheses. As has been pointed out in other answers, <a href=\"https://docs.python.org/3/reference/simple_stmts.html#assert\" rel=\"noreferrer\">in Python 3, <code>assert</code> is still a statement</a>, so by analogy with <code>print(..)</code>, one may extrapolate the same to <code>assert(..)</code> or <code>raise(..)</code> but you shouldn't.</p>\n<p>This is wrong:</p>\n<pre><code class=\"python\">assert(2 + 2 == 5, \"Houston we've got a problem\")\n</code></pre>\n<p>This is correct:</p>\n<pre><code class=\"python\">assert 2 + 2 == 5, \"Houston we've got a problem\"\n</code></pre>\n<p>The reason the first one will not work is that <code>bool( (False, \"Houston we've got a problem\") )</code> evaluates to <code>True</code>.</p>\n<p>In the statement <code>assert(False)</code>, these are just redundant parentheses around <code>False</code>, which evaluate to their contents. But with <code>assert(False,)</code> the parentheses are now a tuple, and a non-empty tuple evaluates to <code>True</code> in a boolean context.</p>\n", "abstract": "Watch out for the parentheses. As has been pointed out in other answers, in Python 3, assert is still a statement, so by analogy with print(..), one may extrapolate the same to assert(..) or raise(..) but you shouldn't. This is wrong: This is correct: The reason the first one will not work is that bool( (False, \"Houston we've got a problem\") ) evaluates to True. In the statement assert(False), these are just redundant parentheses around False, which evaluate to their contents. But with assert(False,) the parentheses are now a tuple, and a non-empty tuple evaluates to True in a boolean context."}, {"id": 5143044, "score": 176, "vote": 0, "content": "<p>As other answers have noted, <code>assert</code> is similar to throwing an exception if a given condition isn't true. An important difference is that assert statements get ignored if you compile your code with the optimization option <a href=\"https://docs.python.org/3/using/cmdline.html#cmdoption-o\" rel=\"noreferrer\"><code>-O</code></a>. The <a href=\"http://docs.python.org/reference/simple_stmts.html#the-assert-statement\" rel=\"noreferrer\">documentation</a> says that <code>assert expression</code> can better be described as being equivalent to </p>\n<pre><code class=\"python\">if __debug__:\n   if not expression: raise AssertionError\n</code></pre>\n<p>This can be useful if you want to thoroughly test your code, then release an optimized version when you're happy that none of your assertion cases fail - when optimization is on, the <code>__debug__</code> variable becomes False and the conditions will stop getting evaluated. This feature can also catch you out if you're relying on the asserts and don't realize they've disappeared.</p>\n", "abstract": "As other answers have noted, assert is similar to throwing an exception if a given condition isn't true. An important difference is that assert statements get ignored if you compile your code with the optimization option -O. The documentation says that assert expression can better be described as being equivalent to  This can be useful if you want to thoroughly test your code, then release an optimized version when you're happy that none of your assertion cases fail - when optimization is on, the __debug__ variable becomes False and the conditions will stop getting evaluated. This feature can also catch you out if you're relying on the asserts and don't realize they've disappeared."}, {"id": 41721518, "score": 94, "vote": 0, "content": "<p>The goal of an assertion in Python is to inform developers about <strong>unrecoverable</strong> errors in a program.</p>\n<p>Assertions are not intended to signal expected error conditions, like \u201cfile not found\u201d, where a user can take corrective action (or just try again).</p>\n<p>Another way to look at it is to say that assertions are <strong>internal self-checks</strong> in your code. They work by declaring some conditions as <em>impossible</em> in your code. If these conditions don\u2019t hold that means there\u2019s a bug in the program.</p>\n<p>If your program is bug-free, these conditions will never occur. But if one of them <em>does</em> occur the program will crash with an assertion error telling you exactly which \u201cimpossible\u201d condition was triggered. This makes it much easier to track down and fix bugs in your programs.</p>\n<p>Here\u2019s a summary from <a href=\"https://dbader.org/blog/python-assert-tutorial\" rel=\"noreferrer\">a tutorial on Python\u2019s assertions</a> I wrote:</p>\n<blockquote>\n<p><strong>Python\u2019s assert statement is a debugging aid, not a mechanism for handling run-time errors.</strong> The goal of using assertions is to let developers find the likely root cause of a bug more quickly. An assertion error should never be raised unless there\u2019s a bug in your program.</p>\n</blockquote>\n", "abstract": "The goal of an assertion in Python is to inform developers about unrecoverable errors in a program. Assertions are not intended to signal expected error conditions, like \u201cfile not found\u201d, where a user can take corrective action (or just try again). Another way to look at it is to say that assertions are internal self-checks in your code. They work by declaring some conditions as impossible in your code. If these conditions don\u2019t hold that means there\u2019s a bug in the program. If your program is bug-free, these conditions will never occur. But if one of them does occur the program will crash with an assertion error telling you exactly which \u201cimpossible\u201d condition was triggered. This makes it much easier to track down and fix bugs in your programs. Here\u2019s a summary from a tutorial on Python\u2019s assertions I wrote: Python\u2019s assert statement is a debugging aid, not a mechanism for handling run-time errors. The goal of using assertions is to let developers find the likely root cause of a bug more quickly. An assertion error should never be raised unless there\u2019s a bug in your program."}, {"id": 5142480, "score": 56, "vote": 0, "content": "<p>Others have already given you links to documentation.</p>\n<p>You can try the following in a interactive shell:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; assert 5 &gt; 2\n&gt;&gt;&gt; assert 2 &gt; 5\nTraceback (most recent call last):\n  File \"&lt;string&gt;\", line 1, in &lt;fragment&gt;\nbuiltins.AssertionError:\n</code></pre>\n<p>The first statement does nothing, while the second raises an exception. This is the first hint: asserts are useful to check conditions that should be true in a given position of your code (usually, the beginning (preconditions) and the end of a function (postconditions)).</p>\n<p>Asserts are actually highly tied to programming by contract, which is a very useful engineering practice:</p>\n<p><a href=\"http://en.wikipedia.org/wiki/Design_by_contract\" rel=\"noreferrer\">http://en.wikipedia.org/wiki/Design_by_contract</a>.</p>\n", "abstract": "Others have already given you links to documentation. You can try the following in a interactive shell: The first statement does nothing, while the second raises an exception. This is the first hint: asserts are useful to check conditions that should be true in a given position of your code (usually, the beginning (preconditions) and the end of a function (postconditions)). Asserts are actually highly tied to programming by contract, which is a very useful engineering practice: http://en.wikipedia.org/wiki/Design_by_contract."}, {"id": 5142462, "score": 24, "vote": 0, "content": "<p>From docs:</p>\n<blockquote>\n<p>Assert statements are a convenient way to insert debugging assertions into a program</p>\n</blockquote>\n<p>You can read more here: <a href=\"http://docs.python.org/release/2.5.2/ref/assert.html\" rel=\"noreferrer\">http://docs.python.org/release/2.5.2/ref/assert.html</a></p>\n", "abstract": "From docs: Assert statements are a convenient way to insert debugging assertions into a program You can read more here: http://docs.python.org/release/2.5.2/ref/assert.html"}, {"id": 17560982, "score": 21, "vote": 0, "content": "<p>The assert statement has two forms.</p>\n<p>The simple form, <code>assert &lt;expression&gt;</code>, is equivalent to</p>\n<pre><code class=\"python\">if __\u200bdebug__:\n    if not &lt;expression&gt;: raise AssertionError\n</code></pre>\n<p>The extended form, <code>assert &lt;expression1&gt;, &lt;expression2&gt;</code>, is equivalent to</p>\n<pre><code class=\"python\">if __\u200bdebug__:\n    if not &lt;expression1&gt;: raise AssertionError(&lt;expression2&gt;)\n</code></pre>\n", "abstract": "The assert statement has two forms. The simple form, assert <expression>, is equivalent to The extended form, assert <expression1>, <expression2>, is equivalent to"}, {"id": 21887035, "score": 18, "vote": 0, "content": "<p>Assertions are a systematic way to check that the internal state of a program is as the programmer expected, with the goal of catching bugs. See the example below.</p>\n<pre><code class=\"python\">&gt;&gt;&gt; number = input('Enter a positive number:')\nEnter a positive number:-1\n&gt;&gt;&gt; assert (number &gt; 0), 'Only positive numbers are allowed!'\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAssertionError: Only positive numbers are allowed!\n&gt;&gt;&gt; \n</code></pre>\n", "abstract": "Assertions are a systematic way to check that the internal state of a program is as the programmer expected, with the goal of catching bugs. See the example below."}, {"id": 21832218, "score": 8, "vote": 0, "content": "<p>Here is a simple example, save this in file (let's say b.py)</p>\n<pre><code class=\"python\">def chkassert(num):\n    assert type(num) == int\n\n\nchkassert('a')\n</code></pre>\n<p>and the result when <code>$python b.py</code></p>\n<pre><code class=\"python\">Traceback (most recent call last):\n  File \"b.py\", line 5, in &lt;module&gt;\n    chkassert('a')\n  File \"b.py\", line 2, in chkassert\n    assert type(num) == int\nAssertionError\n</code></pre>\n", "abstract": "Here is a simple example, save this in file (let's say b.py) and the result when $python b.py"}, {"id": 53681485, "score": 8, "vote": 0, "content": "<p>As summarized concisely on the <a href=\"http://wiki.c2.com/?WhatAreAssertions\" rel=\"noreferrer\">C2 Wiki</a>:</p>\n<blockquote>\n<p>An assertion is a boolean expression at a specific point in a program which will be true <em>unless there is a bug in the program.</em></p>\n</blockquote>\n<p>You can use an <code>assert</code> statement to document your understanding of the code at a particular program point. For example, you can document assumptions or guarantees about inputs (preconditions), program state (invariants), or outputs (postconditions).</p>\n<p>Should your assertion ever fail, this is an alert for you (or your successor) that your understanding of the program was wrong when you wrote it, and that it likely contains a bug.</p>\n<p>For more information, John Regehr has a wonderful blog post on the <a href=\"https://blog.regehr.org/archives/1091\" rel=\"noreferrer\">Use of Assertions</a>, which applies to the Python <code>assert</code> statement as well.</p>\n", "abstract": "As summarized concisely on the C2 Wiki: An assertion is a boolean expression at a specific point in a program which will be true unless there is a bug in the program. You can use an assert statement to document your understanding of the code at a particular program point. For example, you can document assumptions or guarantees about inputs (preconditions), program state (invariants), or outputs (postconditions). Should your assertion ever fail, this is an alert for you (or your successor) that your understanding of the program was wrong when you wrote it, and that it likely contains a bug. For more information, John Regehr has a wonderful blog post on the Use of Assertions, which applies to the Python assert statement as well."}, {"id": 55773937, "score": 8, "vote": 0, "content": "<p>The <code>assert</code> statement exists in almost every programming language. It helps detect problems early in your program, where the cause is clear, rather than later as a side-effect of some other operation. They always expect a <code>True</code> condition.</p>\n<p>When you do something like:</p>\n<pre><code class=\"python\">assert condition\n</code></pre>\n<p>You're telling the program to test that condition and immediately trigger an error if it is false.</p>\n<p>In Python, <a href=\"https://docs.python.org/2/reference/simple_stmts.html#the-assert-statement\" rel=\"noreferrer\"><code>assert</code> expression</a>, is equivalent to:</p>\n<pre><code class=\"python\">if __debug__:\n    if not &lt;expression&gt;: raise AssertionError\n</code></pre>\n<p>You can use the extended expression to pass an <strong>optional message</strong>:</p>\n<pre><code class=\"python\">if __debug__:\n    if not (expression_1): raise AssertionError(expression_2)\n</code></pre>\n<p>Try it in the Python interpreter:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; assert True # Nothing happens because the condition returns a True value.\n&gt;&gt;&gt; assert False # A traceback is triggered because this evaluation did not yield an expected value.\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAssertionError\n</code></pre>\n<p>There are some caveats to seen before using them mainly for those who deem to toggles between the <code>assert</code> and <code>if</code> statements. The aim to use <code>assert</code> is on occasions when the program verifies a condition and return a value that should stop the program immediately instead of taking some alternative way to bypass the error:</p>\n<h2>1. Parentheses</h2>\n<p>As you may have noticed, the <code>assert</code> statement uses two conditions. Hence, do <strong>not</strong> use parentheses to englobe them as one for obvious advice. If you do such as:</p>\n<pre><code class=\"python\">assert (condition, message)\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; assert (1==2, 1==1)\n&lt;stdin&gt;:1: SyntaxWarning: assertion is always true, perhaps remove parentheses?\n</code></pre>\n<p>You will be running the <code>assert</code> with a <code>(condition, message)</code> which represents a tuple as the first parameter, and this happens cause non-empty tuple in Python is <strong>always <code>True</code></strong>. However, you can do separately without problem:</p>\n<pre><code class=\"python\">assert (condition), \"message\"\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; assert (1==2), (\"This condition returns a %s value.\") % \"False\"\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAssertionError: This condition returns a False value.\n</code></pre>\n<h2>2. Debug purpose</h2>\n<p>If you are wondering regarding when use <code>assert</code> statement. Take an example used in real life:</p>\n<p>* When your program tends to control each parameter entered by the user or whatever else:</p>\n<pre><code class=\"python\">def loremipsum(**kwargs):\n    kwargs.pop('bar') # return 0 if \"bar\" isn't in parameter\n    kwargs.setdefault('foo', type(self)) # returns `type(self)` value by default\n    assert (len(kwargs) == 0), \"unrecognized parameter passed in %s\" % ', '.join(kwargs.keys())\n</code></pre>\n<p>* Another case is on math when 0 or non-positive as a coefficient or constant on a certain equation:</p>\n<pre><code class=\"python\">def discount(item, percent):\n    price = int(item['price'] * (1.0 - percent))\n    print(price)\n    assert (0 &lt;= price &lt;= item['price']),\\\n            \"Discounted prices cannot be lower than 0 \"\\\n            \"and they cannot be higher than the original price.\"\n\n    return price\n</code></pre>\n<p>* or even a simple example of a boolean implementation:</p>\n<pre><code class=\"python\">def true(a, b):\n    assert (a == b), \"False\"\n    return 1\n\ndef false(a, b):\n    assert (a != b), \"True\"\n    return 0\n</code></pre>\n<h2>3. Data processing or data validation</h2>\n<p>The utmost importance is to not rely on the <code>assert</code> statement to execute data processing or data validation because this statement can be turned off on the Python initialization with <code>-O</code> or <code>-OO</code> flag \u2013 meaning value 1, 2, and 0 (as default), respectively \u2013 or <code>PYTHONOPTIMIZE</code> environment variable.</p>\n<p><strong>Value 1:</strong></p>\n<p>* asserts are disabled;</p>\n<p>* bytecode files are generated using <a href=\"https://www.python.org/dev/peps/pep-0488/\" rel=\"noreferrer\"><code>.pyo</code></a> extension instead of <code>.pyc</code>;</p>\n<p>* <code>sys.flags.optimize</code> is set to 1 (<code>True</code>);</p>\n<p>* and, <code>__debug__</code> is set to <code>False</code>;</p>\n<p><strong>Value 2:</strong> disables one more stuff</p>\n<p>* docstrings are disabled;</p>\n<p>Therefore, using the <code>assert</code> statement to validate a sort of expected data is extremely dangerous, implying even to some security issues. Then, if you need to validate some permission I recommend you <code>raise AuthError</code> instead. As a preconditional effective, an <code>assert</code> is commonly used by programmers on libraries or modules that do not have a user interact directly.</p>\n", "abstract": "The assert statement exists in almost every programming language. It helps detect problems early in your program, where the cause is clear, rather than later as a side-effect of some other operation. They always expect a True condition. When you do something like: You're telling the program to test that condition and immediately trigger an error if it is false. In Python, assert expression, is equivalent to: You can use the extended expression to pass an optional message: Try it in the Python interpreter: There are some caveats to seen before using them mainly for those who deem to toggles between the assert and if statements. The aim to use assert is on occasions when the program verifies a condition and return a value that should stop the program immediately instead of taking some alternative way to bypass the error: As you may have noticed, the assert statement uses two conditions. Hence, do not use parentheses to englobe them as one for obvious advice. If you do such as: Example: You will be running the assert with a (condition, message) which represents a tuple as the first parameter, and this happens cause non-empty tuple in Python is always True. However, you can do separately without problem: Example: If you are wondering regarding when use assert statement. Take an example used in real life: * When your program tends to control each parameter entered by the user or whatever else: * Another case is on math when 0 or non-positive as a coefficient or constant on a certain equation: * or even a simple example of a boolean implementation: The utmost importance is to not rely on the assert statement to execute data processing or data validation because this statement can be turned off on the Python initialization with -O or -OO flag \u2013 meaning value 1, 2, and 0 (as default), respectively \u2013 or PYTHONOPTIMIZE environment variable. Value 1: * asserts are disabled; * bytecode files are generated using .pyo extension instead of .pyc; * sys.flags.optimize is set to 1 (True); * and, __debug__ is set to False; Value 2: disables one more stuff * docstrings are disabled; Therefore, using the assert statement to validate a sort of expected data is extremely dangerous, implying even to some security issues. Then, if you need to validate some permission I recommend you raise AuthError instead. As a preconditional effective, an assert is commonly used by programmers on libraries or modules that do not have a user interact directly."}, {"id": 26686348, "score": 7, "vote": 0, "content": "<p>if the statement after assert  is true then the program continues , but if the statement after assert is false then the program gives an error. Simple as that.</p>\n<p>e.g.:</p>\n<pre><code class=\"python\">assert 1&gt;0   #normal execution\nassert 0&gt;1   #Traceback (most recent call last):\n             #File \"&lt;pyshell#11&gt;\", line 1, in &lt;module&gt;\n             #assert 0&gt;1\n             #AssertionError\n</code></pre>\n", "abstract": "if the statement after assert  is true then the program continues , but if the statement after assert is false then the program gives an error. Simple as that. e.g.:"}, {"id": 61735222, "score": 5, "vote": 0, "content": "<p>In Pycharm, if you use <code>assert</code> along with <code>isinstance</code> to declare an object's type, it will let you access the methods and attributes of the parent object while you are coding, it will auto-complete automatically.</p>\n<p>For example, let's say <code>self.object1.object2</code> is a <code>MyClass</code> object.</p>\n<pre><code class=\"python\">import MyClasss\n\ndef code_it(self):\n    testObject = self.object1.object2 # at this point, program doesn't know that testObject  is a MyClass object yet\n    assert isinstance(testObject , MyClasss) # now the program knows testObject is a MyClass object\n    testObject.do_it() # from this point on, PyCharm will be able to auto-complete when you are working on testObject\n</code></pre>\n", "abstract": "In Pycharm, if you use assert along with isinstance to declare an object's type, it will let you access the methods and attributes of the parent object while you are coding, it will auto-complete automatically. For example, let's say self.object1.object2 is a MyClass object."}, {"id": 73455285, "score": 5, "vote": 0, "content": "<blockquote>\n<p>What does assert mean? How is it used?</p>\n</blockquote>\n<p>There are great answers here, but not to the second part of the question. Despite many years of practical experience, I only understood the purpose of asserts recently.</p>\n<p>Others have already explained how <code>assert</code> is used, so I am super brief. This is how you use it:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">assert condition, \"error message\"\n</code></pre>\n<p>And do not use parentheses, assert is a keyword, not a function.</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">assert (condition, \"error message\")  # wrong: this never fails!\n</code></pre>\n<p>A good explanation of how to use assert is given here: <a href=\"http://wiki.c2.com/?WhatAreAssertions\" rel=\"nofollow noreferrer\">http://wiki.c2.com/?WhatAreAssertions</a>\nThe point of <code>assert</code> is to declare <strong>invariants</strong> in your code. An invariant is a condition that should never be violated unless there is a bug in the code. <strong>Think of them as executable documentation.</strong> This is deeply connected to how object-oriented programming encapsulates code from the outside world.</p>\n<p>In plain English: You should use an assert like a comment in your code for other developers. But it is better than a comment, the \"comment\" is actually checked in debug mode! If your program cannot be expected to work correctly if the assert is removed, you are using it wrong. In fact, Python will ignore all <code>assert</code>s if you turn on optimizations (<code>python -O</code>). So don't rely on them to be there. In particular, <strong>do not use asserts to validate user input</strong>. Raise exceptions instead.</p>\n<p>Here is a nice example to tie it all together. Let's assume you want to have a special number class in your code which represents positive integers called <code>PositiveInt</code>. Why would you want that? You have many functions that use positive integers as parameters. By using <code>PositiveInt</code> in your code, you don't have to check again and again in every function whether the input is valid. It is guaranteed by <code>PositiveInt</code>. A crude implementation looks like this</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">class PositiveInt(int):\n    # int is immutable, so we have to override new and not init\n    def __new__(cls, value):\n        if value &lt;= 0:\n            raise ValueError(f\"{value} is not positive\")\n        assert value &gt; 0, \"value must be positive\"\n        return super(PositiveInt, cls).__new__(cls, value)   \n</code></pre>\n<p>As you can see, I use both an <code>if ...: raise ...</code> for input validation <strong>and</strong> an <code>assert</code> at the end of the function. This seems superfluous, but only in this trivial example! Imagine that the function is a bit longer and more complex, so it is not obvious that you have validated the input correctly. The assert at the end makes sure that a bug in your validation code is detected. It also makes the intend of the validation code clear to another programmer, more so than a simple comment.</p>\n<p><strong>In summary</strong>: use <code>assert</code> like a comment. Use it everywhere! It is cheap and if it ever becomes a performance problem for your users, you can turn it off in releases with <code>python -O</code>.</p>\n", "abstract": "What does assert mean? How is it used? There are great answers here, but not to the second part of the question. Despite many years of practical experience, I only understood the purpose of asserts recently. Others have already explained how assert is used, so I am super brief. This is how you use it: And do not use parentheses, assert is a keyword, not a function. A good explanation of how to use assert is given here: http://wiki.c2.com/?WhatAreAssertions\nThe point of assert is to declare invariants in your code. An invariant is a condition that should never be violated unless there is a bug in the code. Think of them as executable documentation. This is deeply connected to how object-oriented programming encapsulates code from the outside world. In plain English: You should use an assert like a comment in your code for other developers. But it is better than a comment, the \"comment\" is actually checked in debug mode! If your program cannot be expected to work correctly if the assert is removed, you are using it wrong. In fact, Python will ignore all asserts if you turn on optimizations (python -O). So don't rely on them to be there. In particular, do not use asserts to validate user input. Raise exceptions instead. Here is a nice example to tie it all together. Let's assume you want to have a special number class in your code which represents positive integers called PositiveInt. Why would you want that? You have many functions that use positive integers as parameters. By using PositiveInt in your code, you don't have to check again and again in every function whether the input is valid. It is guaranteed by PositiveInt. A crude implementation looks like this As you can see, I use both an if ...: raise ... for input validation and an assert at the end of the function. This seems superfluous, but only in this trivial example! Imagine that the function is a bit longer and more complex, so it is not obvious that you have validated the input correctly. The assert at the end makes sure that a bug in your validation code is detected. It also makes the intend of the validation code clear to another programmer, more so than a simple comment. In summary: use assert like a comment. Use it everywhere! It is cheap and if it ever becomes a performance problem for your users, you can turn it off in releases with python -O."}, {"id": 31445076, "score": 3, "vote": 0, "content": "<p>If you ever want to know exactly what a reserved function does in python, type in <code>help(enter_keyword)</code></p>\n<p>Make sure if you are entering a reserved keyword that you enter it as a string. </p>\n", "abstract": "If you ever want to know exactly what a reserved function does in python, type in help(enter_keyword) Make sure if you are entering a reserved keyword that you enter it as a string. "}, {"id": 49844675, "score": 3, "vote": 0, "content": "<p>Python <strong>assert</strong> is basically a debugging aid which test condition for internal self-check of your code.\nAssert makes debugging really easy when your code gets into impossible edge cases. Assert check those impossible cases.</p>\n<p>Let's say there is a function to calculate price of item after discount :</p>\n<pre><code class=\"python\">def calculate_discount(price, discount):\n    discounted_price = price - [discount*price]\n    assert 0 &lt;= discounted_price &lt;= price\n    return discounted_price\n</code></pre>\n<p>here, discounted_price can never be less than 0 and greater than actual price. So, in case the above condition is violated assert raises an Assertion Error, which helps the developer to identify that something impossible had happened.</p>\n<p>Hope it helps :)</p>\n", "abstract": "Python assert is basically a debugging aid which test condition for internal self-check of your code.\nAssert makes debugging really easy when your code gets into impossible edge cases. Assert check those impossible cases. Let's say there is a function to calculate price of item after discount : here, discounted_price can never be less than 0 and greater than actual price. So, in case the above condition is violated assert raises an Assertion Error, which helps the developer to identify that something impossible had happened. Hope it helps :)"}, {"id": 52463393, "score": 3, "vote": 0, "content": "<p>My short explanation is:</p>\n<ul>\n<li><code>assert</code> raises <code>AssertionError</code> if expression is false, otherwise just continues the code, and if there's a comma whatever it is it will be <code>AssertionError: whatever after comma</code>, and to code is like: <code>raise AssertionError(whatever after comma)</code></li>\n</ul>\n<p>A related tutorial about this:</p>\n<blockquote>\n<p><a href=\"https://www.tutorialspoint.com/python/assertions_in_python.htm\" rel=\"nofollow noreferrer\">https://www.tutorialspoint.com/python/assertions_in_python.htm</a></p>\n</blockquote>\n", "abstract": "My short explanation is: A related tutorial about this: https://www.tutorialspoint.com/python/assertions_in_python.htm"}, {"id": 61509021, "score": 2, "vote": 0, "content": "<p>As written in other answers, <code>assert</code> statements are used to check the state of\nthe program at a given point.</p>\n<p>I won't repeat what was said about associated\nmessage, parentheses, or <code>-O</code> option and <code>__debug__</code> constant. Check also <a href=\"https://docs.python.org/3/reference/simple_stmts.html#assert\" rel=\"nofollow noreferrer\">the\ndoc</a> for first\nhand information. I will focus on your question: what is the use of <code>assert</code>?\nMore precisely, when (and when not) should one use <code>assert</code>?</p>\n<p>The <code>assert</code> statements are useful to debug a program, but discouraged to check user\ninput. I use the following rule of thumb: keep assertions to detect a <em>this\nshould not happen</em> situation. A user\ninput may be incorrect, e.g. a password too short, but this is not a <em>this\nshould not happen</em> case. If the diameter of a circle is not twice as large as its\nradius, you are in a <em>this should not happen</em> case.</p>\n<p>The most interesting, in my mind, use of <code>assert</code> is inspired by the\n<a href=\"https://en.wikipedia.org/wiki/Design_by_contract\" rel=\"nofollow noreferrer\">programming by contract</a> as\ndescribed by B. Meyer in [Object-Oriented Software Construction](\n<a href=\"https://www.eiffel.org/doc/eiffel/Object-Oriented_Software_Construction%2C_2nd_Edition\" rel=\"nofollow noreferrer\">https://www.eiffel.org/doc/eiffel/Object-Oriented_Software_Construction%2C_2nd_Edition</a>\n) and implemented in the [Eiffel programming language](\n<a href=\"https://en.wikipedia.org/wiki/Eiffel_(programming_language)\" rel=\"nofollow noreferrer\">https://en.wikipedia.org/wiki/Eiffel_(programming_language)</a>). You can't fully\nemulate programming by contract using the <code>assert</code> statement, but it's\ninteresting to keep the intent.</p>\n<p>Here's an example. Imagine you have to write a <code>head</code> function (like the\n[<code>head</code> function in Haskell](\n<a href=\"http://www.zvon.org/other/haskell/Outputprelude/head_f.html\" rel=\"nofollow noreferrer\">http://www.zvon.org/other/haskell/Outputprelude/head_f.html</a>)). The\nspecification you are given is: \"if the list is not empty, return the\nfirst item of a list\". Look at the following implementations:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; def head1(xs): return xs[0]\n</code></pre>\n<p>And</p>\n<pre><code class=\"python\">&gt;&gt;&gt; def head2(xs):\n...     if len(xs) &gt; 0:\n...         return xs[0]\n...     else:\n...         return None\n</code></pre>\n<p><sub>(Yes, this can be written as <code>return xs[0] if xs else None</code>, but that's not the point)</sub>.</p>\n<p>If the list is not empty, both functions have the same result and this result\nis correct:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; head1([1, 2, 3]) == head2([1, 2, 3]) == 1\nTrue\n</code></pre>\n<p>Hence, both implementations are (I hope) correct. They differ when you try to\ntake the head item of an empty list:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; head1([])\nTraceback (most recent call last):\n...\nIndexError: list index out of range\n</code></pre>\n<p>But:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; head2([]) is None\nTrue\n</code></pre>\n<p>Again, both implementations are correct, because no one should pass an empty\nlist to these functions (we are <em>out of the specification</em>). That's an\nincorrect call, but if you do such a call, anything can happen.\nOne function raises an exception, the other returns a special value.\nThe most important is: <strong>we can't rely on this behavior</strong>. If <code>xs</code> is empty,\nthis will work:</p>\n<pre><code class=\"python\">print(head2(xs))\n</code></pre>\n<p>But this will crash the program:</p>\n<pre><code class=\"python\">print(head1(xs))\n</code></pre>\n<p>To avoid some surprises, I would like to know when I'm passing some unexpected\nargument to a function. In other words: I would like to know when the observable\nbehavior is not reliable, because it depends on the implementation, not on the specification.\nOf course, I can read the specification, but programmers do not always read carefully\nthe docs.</p>\n<p>Imagine if I had a way to insert the specification into the code to get the\nfollowing effect: when I violate the specification, e.g by passing an empty\nlist to <code>head</code>, I get a warning. That would be a great help to write a correct\n(i.e. compliant with the specification) program. And that's where <code>assert</code>\nenters on the scene:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; def head1(xs):\n...     assert len(xs) &gt; 0, \"The list must not be empty\"\n...     return xs[0]\n</code></pre>\n<p>And</p>\n<pre><code class=\"python\">&gt;&gt;&gt; def head2(xs):\n...     assert len(xs) &gt; 0, \"The list must not be empty\"\n...     if len(xs) &gt; 0:\n...         return xs[0]\n...     else:\n...         return None\n</code></pre>\n<p>Now, we have:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; head1([])\nTraceback (most recent call last):\n...\nAssertionError: The list must not be empty\n</code></pre>\n<p>And:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; head2([])\nTraceback (most recent call last):\n...\nAssertionError: The list must not be empty\n</code></pre>\n<p>Note that <code>head1</code> throws an <code>AssertionError</code>, not an <code>IndexError</code>. That's\nimportant because an <code>AssertionError</code> is not <em>any</em> runtime error: it signals a\nviolation of the specification. I wanted a warning, but I get an error.\nFortunately, I can disable the check (using the <code>-O</code> option),\nbut at my own risks. I will do it a crash is really expensive, and hope for the\nbest. Imagine my program is embedded in a spaceship that travels through a\nblack hole. I will disable assertions and hope the program is robust enough\nto not crash as long as possible.</p>\n<p>This example was only about preconditions, be you can use <code>assert</code> to check\npostconditions (the return value and/or the state) and invariants (state of a\nclass). Note that checking postconditions and invariants with <code>assert</code> can be\ncumbersome:</p>\n<ul>\n<li>for postconditions, you need to assign the return value to a variable, and\nmaybe to store the iniial state of the object if you are dealing with a method;</li>\n<li>for invariants, you have to check the state before and after a method call.</li>\n</ul>\n<p>You won't have something as sophisticated as Eiffel, but you can however\nimprove the overall quality of a program.</p>\n<hr/>\n<p>To summarize, the <code>assert</code> statement is a convenient way to detect a <em>this\nshould not happen</em> situation. Violations of the specification (e.g. passing\nan empty list to <code>head</code>) are first class <em>this should not happen</em> situations.\nHence, while the <code>assert</code> statement may be used to detect any unexpected situation,\nit is a privilegied way to ensure that the specification is fulfilled.\nOnce you have inserted <code>assert</code> statements into the code to represent the\nspecification, we can hope you have improved the quality of the program because\nincorrect arguments, incorrect return values, incorrect states of a class...,\nwill be reported.</p>\n", "abstract": "As written in other answers, assert statements are used to check the state of\nthe program at a given point. I won't repeat what was said about associated\nmessage, parentheses, or -O option and __debug__ constant. Check also the\ndoc for first\nhand information. I will focus on your question: what is the use of assert?\nMore precisely, when (and when not) should one use assert? The assert statements are useful to debug a program, but discouraged to check user\ninput. I use the following rule of thumb: keep assertions to detect a this\nshould not happen situation. A user\ninput may be incorrect, e.g. a password too short, but this is not a this\nshould not happen case. If the diameter of a circle is not twice as large as its\nradius, you are in a this should not happen case. The most interesting, in my mind, use of assert is inspired by the\nprogramming by contract as\ndescribed by B. Meyer in [Object-Oriented Software Construction](\nhttps://www.eiffel.org/doc/eiffel/Object-Oriented_Software_Construction%2C_2nd_Edition\n) and implemented in the [Eiffel programming language](\nhttps://en.wikipedia.org/wiki/Eiffel_(programming_language)). You can't fully\nemulate programming by contract using the assert statement, but it's\ninteresting to keep the intent. Here's an example. Imagine you have to write a head function (like the\n[head function in Haskell](\nhttp://www.zvon.org/other/haskell/Outputprelude/head_f.html)). The\nspecification you are given is: \"if the list is not empty, return the\nfirst item of a list\". Look at the following implementations: And (Yes, this can be written as return xs[0] if xs else None, but that's not the point). If the list is not empty, both functions have the same result and this result\nis correct: Hence, both implementations are (I hope) correct. They differ when you try to\ntake the head item of an empty list: But: Again, both implementations are correct, because no one should pass an empty\nlist to these functions (we are out of the specification). That's an\nincorrect call, but if you do such a call, anything can happen.\nOne function raises an exception, the other returns a special value.\nThe most important is: we can't rely on this behavior. If xs is empty,\nthis will work: But this will crash the program: To avoid some surprises, I would like to know when I'm passing some unexpected\nargument to a function. In other words: I would like to know when the observable\nbehavior is not reliable, because it depends on the implementation, not on the specification.\nOf course, I can read the specification, but programmers do not always read carefully\nthe docs. Imagine if I had a way to insert the specification into the code to get the\nfollowing effect: when I violate the specification, e.g by passing an empty\nlist to head, I get a warning. That would be a great help to write a correct\n(i.e. compliant with the specification) program. And that's where assert\nenters on the scene: And Now, we have: And: Note that head1 throws an AssertionError, not an IndexError. That's\nimportant because an AssertionError is not any runtime error: it signals a\nviolation of the specification. I wanted a warning, but I get an error.\nFortunately, I can disable the check (using the -O option),\nbut at my own risks. I will do it a crash is really expensive, and hope for the\nbest. Imagine my program is embedded in a spaceship that travels through a\nblack hole. I will disable assertions and hope the program is robust enough\nto not crash as long as possible. This example was only about preconditions, be you can use assert to check\npostconditions (the return value and/or the state) and invariants (state of a\nclass). Note that checking postconditions and invariants with assert can be\ncumbersome: You won't have something as sophisticated as Eiffel, but you can however\nimprove the overall quality of a program. To summarize, the assert statement is a convenient way to detect a this\nshould not happen situation. Violations of the specification (e.g. passing\nan empty list to head) are first class this should not happen situations.\nHence, while the assert statement may be used to detect any unexpected situation,\nit is a privilegied way to ensure that the specification is fulfilled.\nOnce you have inserted assert statements into the code to represent the\nspecification, we can hope you have improved the quality of the program because\nincorrect arguments, incorrect return values, incorrect states of a class...,\nwill be reported."}, {"id": 45333579, "score": 1, "vote": 0, "content": "<p>The <code>assert</code> keyword in Python raises an <code>AssertionError</code> if the code following the <code>assert</code> keyword is <code>False</code>. If not, it continues as nothing happened.</p>\n<p><strong>Example 1</strong>:</p>\n<pre><code class=\"python\">a = 5\nb = 6\n\nassert a == b\n</code></pre>\n<p>OUTPUT:</p>\n<pre><code class=\"python\">AssertionError\n</code></pre>\n<p>This is because, obviously, <code>a</code> does not equal <code>b</code>.\nThis is particularly useful if you want to raise an <code>Exception</code> in your code.</p>\n<pre><code class=\"python\">def get_dict_key(d, k):\n    try:\n        assert k in d\n        return d[k]\n    except Exception:\n        print(\"Key must be in dict.\")\n</code></pre>\n<p>The above example is practically useless, but remember, it is mostly used for debugging purposes, so you can track down your bugs.</p>\n", "abstract": "The assert keyword in Python raises an AssertionError if the code following the assert keyword is False. If not, it continues as nothing happened. Example 1: OUTPUT: This is because, obviously, a does not equal b.\nThis is particularly useful if you want to raise an Exception in your code. The above example is practically useless, but remember, it is mostly used for debugging purposes, so you can track down your bugs."}, {"id": 64568077, "score": 1, "vote": 0, "content": "<p><strong>Assertions</strong> are statements that state a fact confidently in our program.</p>\n<p>Syntax :   <code>assert &lt;condition&gt;</code> or <code>assert &lt;condition&gt;,&lt;error message&gt;</code></p>\n<p>It has a condition/expression which is supposed to be always true. If the condition is false, the <code>assert</code> statement will halt the program and throw an error message saying <code>AssertionError</code>. So your assertion expression will be something that you don't want in your program.</p>\n<p>e.g.</p>\n<ol>\n<li><p><code>assert &lt;condition&gt;</code> -- using assert without <code>&lt;error message&gt;</code></p>\n<pre><code class=\"python\">var = int(input(\"Enter value 1-9 inclusive:\"))                                 \nassert var!=0 \nprint(var)\n</code></pre>\n<p>Output :</p>\n<p>If input is 0 :</p>\n<pre><code class=\"python\">AssertionError\n</code></pre>\n<p>If input is 1 :</p>\n<pre><code class=\"python\">1\n</code></pre>\n</li>\n<li><p><code>assert &lt;condition&gt;,&lt;error message&gt;</code> -- using assert with an <code>&lt;error message&gt;</code></p>\n<pre><code class=\"python\">var = int(input(\"Enter value 1-9 inclusive:\"))                                 \nassert var!=0,\"Input cannot be zero\"\nprint(var)\n</code></pre>\n<p>Output :</p>\n<p>If input is 0 :</p>\n<pre><code class=\"python\">AssertionError: Input cannot be zero\n</code></pre>\n<p>If input is 1 :</p>\n<pre><code class=\"python\">1\n</code></pre>\n</li>\n</ol>\n<p><strong>Key Points :</strong></p>\n<ol>\n<li>It is used as a debugging tool.</li>\n<li>It takes an expression and an optional message.</li>\n<li>It exists in almost every programming language</li>\n</ol>\n", "abstract": "Assertions are statements that state a fact confidently in our program. Syntax :   assert <condition> or assert <condition>,<error message> It has a condition/expression which is supposed to be always true. If the condition is false, the assert statement will halt the program and throw an error message saying AssertionError. So your assertion expression will be something that you don't want in your program. e.g. assert <condition> -- using assert without <error message> Output : If input is 0 : If input is 1 : assert <condition>,<error message> -- using assert with an <error message> Output : If input is 0 : If input is 1 : Key Points :"}, {"id": 27658790, "score": -2, "vote": 0, "content": "<p>format :\n  assert Expression[,arguments]\nWhen assert encounters a statement,Python evaluates the expression.If the statement is not true,an exception is raised(assertionError).\nIf the assertion fails, Python uses ArgumentExpression as the argument for the AssertionError. AssertionError exceptions can be caught and handled like any other exception using the try-except statement, but if not handled, they will terminate the program and produce a traceback.\nExample:</p>\n<pre><code class=\"python\">def KelvinToFahrenheit(Temperature):    \n    assert (Temperature &gt;= 0),\"Colder than absolute zero!\"    \n    return ((Temperature-273)*1.8)+32    \nprint KelvinToFahrenheit(273)    \nprint int(KelvinToFahrenheit(505.78))    \nprint KelvinToFahrenheit(-5)    \n</code></pre>\n<p>When the above code is executed, it produces the following result:</p>\n<pre><code class=\"python\">32.0\n451\nTraceback (most recent call last):    \n  File \"test.py\", line 9, in &lt;module&gt;    \n    print KelvinToFahrenheit(-5)    \n  File \"test.py\", line 4, in KelvinToFahrenheit    \n    assert (Temperature &gt;= 0),\"Colder than absolute zero!\"    \nAssertionError: Colder than absolute zero!    \n</code></pre>\n", "abstract": "format :\n  assert Expression[,arguments]\nWhen assert encounters a statement,Python evaluates the expression.If the statement is not true,an exception is raised(assertionError).\nIf the assertion fails, Python uses ArgumentExpression as the argument for the AssertionError. AssertionError exceptions can be caught and handled like any other exception using the try-except statement, but if not handled, they will terminate the program and produce a traceback.\nExample: When the above code is executed, it produces the following result:"}, {"id": 29232013, "score": -4, "vote": 0, "content": "<pre><code class=\"python\">def getUser(self, id, Email):\n\n    user_key = id and id or Email\n\n    assert user_key\n</code></pre>\n<p>Can be used to ensure parameters are passed in the function call.</p>\n", "abstract": "Can be used to ensure parameters are passed in the function call."}, {"id": 43602018, "score": -5, "vote": 0, "content": "<pre><code class=\"python\">&gt;&gt;&gt;this_is_very_complex_function_result = 9\n&gt;&gt;&gt;c = this_is_very_complex_function_result\n&gt;&gt;&gt;test_us = (c &lt; 4)\n\n&gt;&gt;&gt; #first we try without assert\n&gt;&gt;&gt;if test_us == True:\n    print(\"YES! I am right!\")\nelse:\n    print(\"I am Wrong, but the program still RUNS!\")\n\nI am Wrong, but the program still RUNS!\n\n\n&gt;&gt;&gt; #now we try with assert\n&gt;&gt;&gt; assert test_us\nTraceback (most recent call last):\n  File \"&lt;pyshell#52&gt;\", line 1, in &lt;module&gt;\n    assert test_us\nAssertionError\n&gt;&gt;&gt; \n</code></pre>\n", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/9001509/how-do-i-sort-a-dictionary-by-key", "question": {"id": "9001509", "title": "How do I sort a dictionary by key?", "content": "<p>How do I sort a dictionary by its keys?</p>\n<p>Example input:</p>\n<pre><code class=\"python\">{2:3, 1:89, 4:5, 3:0}\n</code></pre>\n<p>Desired output:</p>\n<pre><code class=\"python\">{1:89, 2:3, 3:0, 4:5}\n</code></pre>\n", "abstract": "How do I sort a dictionary by its keys? Example input: Desired output:"}, "answers": [{"id": 9001529, "score": 1225, "vote": 0, "content": "<blockquote>\n<p><strong>Note:</strong> for Python 3.7+, see <a href=\"https://stackoverflow.com/a/47017849\">this answer</a></p>\n</blockquote>\n<p>Standard Python dictionaries are unordered (until Python 3.7). Even if you sorted the (key,value) pairs, you wouldn't be able to store them in a <code>dict</code> in a way that would preserve the ordering.</p>\n<p>The easiest way is to use <a href=\"http://docs.python.org/library/collections.html#collections.OrderedDict\" rel=\"noreferrer\"><code>OrderedDict</code></a>, which remembers the order in which the elements have been inserted:</p>\n<pre><code class=\"python\">In [1]: import collections\n\nIn [2]: d = {2:3, 1:89, 4:5, 3:0}\n\nIn [3]: od = collections.OrderedDict(sorted(d.items()))\n\nIn [4]: od\nOut[4]: OrderedDict([(1, 89), (2, 3), (3, 0), (4, 5)])\n</code></pre>\n<p>Never mind the way <code>od</code> is printed out; it'll work as expected:</p>\n<pre><code class=\"python\">In [11]: od[1]\nOut[11]: 89\n\nIn [12]: od[3]\nOut[12]: 0\n\nIn [13]: for k, v in od.iteritems(): print k, v\n   ....: \n1 89\n2 3\n3 0\n4 5\n</code></pre>\n<h2>Python 3</h2>\n<p>For Python 3 users, one needs to use the <code>.items()</code> instead of <code>.iteritems()</code>:</p>\n<pre><code class=\"python\">In [13]: for k, v in od.items(): print(k, v)\n   ....: \n1 89\n2 3\n3 0\n4 5\n</code></pre>\n", "abstract": "Note: for Python 3.7+, see this answer Standard Python dictionaries are unordered (until Python 3.7). Even if you sorted the (key,value) pairs, you wouldn't be able to store them in a dict in a way that would preserve the ordering. The easiest way is to use OrderedDict, which remembers the order in which the elements have been inserted: Never mind the way od is printed out; it'll work as expected: For Python 3 users, one needs to use the .items() instead of .iteritems():"}, {"id": 13990710, "score": 501, "vote": 0, "content": "<p>Dictionaries themselves do not have ordered items as such, should you want to print them etc to some order, here are some examples:</p>\n<p><strong>In Python 2.4 and above:</strong></p>\n<pre><code class=\"python\">mydict = {'carl':40,\n          'alan':2,\n          'bob':1,\n          'danny':3}\n\nfor key in sorted(mydict):\n    print \"%s: %s\" % (key, mydict[key])\n</code></pre>\n<p>gives:</p>\n<pre><code class=\"python\">alan: 2\nbob: 1\ncarl: 40\ndanny: 3\n</code></pre>\n<p><strong>(Python below 2.4:)</strong></p>\n<pre><code class=\"python\">keylist = mydict.keys()\nkeylist.sort()\nfor key in keylist:\n    print \"%s: %s\" % (key, mydict[key])\n</code></pre>\n<p>Source: <a href=\"http://www.saltycrane.com/blog/2007/09/how-to-sort-python-dictionary-by-keys/\">http://www.saltycrane.com/blog/2007/09/how-to-sort-python-dictionary-by-keys/</a></p>\n", "abstract": "Dictionaries themselves do not have ordered items as such, should you want to print them etc to some order, here are some examples: In Python 2.4 and above: gives: (Python below 2.4:) Source: http://www.saltycrane.com/blog/2007/09/how-to-sort-python-dictionary-by-keys/"}, {"id": 47017849, "score": 410, "vote": 0, "content": "<p>For CPython/PyPy 3.6, and any Python 3.7 or higher, this is easily done with:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; d = {2:3, 1:89, 4:5, 3:0}\n&gt;&gt;&gt; dict(sorted(d.items()))\n{1: 89, 2: 3, 3: 0, 4: 5}\n</code></pre>\n", "abstract": "For CPython/PyPy 3.6, and any Python 3.7 or higher, this is easily done with:"}, {"id": 15179418, "score": 226, "vote": 0, "content": "<p>From <a href=\"http://docs.python.org/2/library/collections.html?highlight=ordereddict#ordereddict-examples-and-recipes\" rel=\"noreferrer\">Python's <code>collections</code> library documentation</a>:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; from collections import OrderedDict\n\n&gt;&gt;&gt; # regular unsorted dictionary\n&gt;&gt;&gt; d = {'banana': 3, 'apple':4, 'pear': 1, 'orange': 2}\n\n&gt;&gt;&gt; # dictionary sorted by key -- OrderedDict(sorted(d.items()) also works\n&gt;&gt;&gt; OrderedDict(sorted(d.items(), key=lambda t: t[0]))\nOrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])\n\n&gt;&gt;&gt; # dictionary sorted by value\n&gt;&gt;&gt; OrderedDict(sorted(d.items(), key=lambda t: t[1]))\nOrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])\n\n&gt;&gt;&gt; # dictionary sorted by length of the key string\n&gt;&gt;&gt; OrderedDict(sorted(d.items(), key=lambda t: len(t[0])))\nOrderedDict([('pear', 1), ('apple', 4), ('orange', 2), ('banana', 3)])\n</code></pre>\n", "abstract": "From Python's collections library documentation:"}, {"id": 22718254, "score": 52, "vote": 0, "content": "<p>There are a number of Python modules that provide dictionary implementations which automatically maintain the keys in sorted order. Consider the <a href=\"http://www.grantjenks.com/docs/sortedcontainers/\">sortedcontainers</a> module which is pure-Python and fast-as-C implementations. There is also a <a href=\"http://www.grantjenks.com/docs/sortedcontainers/performance.html\">performance comparison</a> with other popular options benchmarked against one another.</p>\n<p>Using an ordered dict is an inadequate solution if you need to constantly add and remove key/value pairs while also iterating.</p>\n<pre><code class=\"python\">&gt;&gt;&gt; from sortedcontainers import SortedDict\n&gt;&gt;&gt; d = {2:3, 1:89, 4:5, 3:0}\n&gt;&gt;&gt; s = SortedDict(d)\n&gt;&gt;&gt; s.items()\n[(1, 89), (2, 3), (3, 0), (4, 5)]\n</code></pre>\n<p>The SortedDict type also supports indexed location lookups and deletion which isn't possible with the built-in dict type.</p>\n<pre><code class=\"python\">&gt;&gt;&gt; s.iloc[-1]\n4\n&gt;&gt;&gt; del s.iloc[2]\n&gt;&gt;&gt; s.keys()\nSortedSet([1, 2, 4])\n</code></pre>\n", "abstract": "There are a number of Python modules that provide dictionary implementations which automatically maintain the keys in sorted order. Consider the sortedcontainers module which is pure-Python and fast-as-C implementations. There is also a performance comparison with other popular options benchmarked against one another. Using an ordered dict is an inadequate solution if you need to constantly add and remove key/value pairs while also iterating. The SortedDict type also supports indexed location lookups and deletion which isn't possible with the built-in dict type."}, {"id": 33681720, "score": 45, "vote": 0, "content": "<p>Simply:</p>\n<pre><code class=\"python\">d = {2:3, 1:89, 4:5, 3:0}\nsd = sorted(d.items())\n\nfor k,v in sd:\n    print k, v\n</code></pre>\n<p>Output:</p>\n<pre><code class=\"python\">1 89\n2 3\n3 0\n4 5\n</code></pre>\n", "abstract": "Simply: Output:"}, {"id": 48155267, "score": 29, "vote": 0, "content": "<p>Python dictionary was unordered before Python 3.6. In CPython implementation of Python 3.6, the dictionary keeps the insertion order.\nFrom Python 3.7, this will become a language feature.</p>\n<p>In changelog of Python 3.6 (<a href=\"https://docs.python.org/3.6/whatsnew/3.6.html#whatsnew36-compactdict\" rel=\"nofollow noreferrer\">https://docs.python.org/3.6/whatsnew/3.6.html#whatsnew36-compactdict</a>):</p>\n<blockquote>\n<p>The order-preserving aspect of this new implementation is considered\nan implementation detail and should not be relied upon (this may\nchange in the future, but it is desired to have this new dict\nimplementation in the language for a few releases before changing the\nlanguage spec to mandate order-preserving semantics for all current\nand future Python implementations; this also helps preserve\nbackward-compatibility with older versions of the language where\nrandom iteration order is still in effect, e.g. Python 3.5).</p>\n</blockquote>\n<p>In the document of Python 3.7 (<a href=\"https://docs.python.org/3.7/tutorial/datastructures.html#dictionaries\" rel=\"nofollow noreferrer\">https://docs.python.org/3.7/tutorial/datastructures.html#dictionaries</a>):</p>\n<blockquote>\n<p>Performing list(d) on a dictionary returns a list of all the keys used\nin the dictionary, <strong>in insertion order</strong> (if you want it sorted, just use\nsorted(d) instead).</p>\n</blockquote>\n<p>So unlike previous versions, you can sort a dict after Python 3.6/3.7. If you want to sort a nested dict including the sub-dict inside, you can do:</p>\n<pre><code class=\"python\">test_dict = {'a': 1, 'c': 3, 'b': {'b2': 2, 'b1': 1}}\n\ndef dict_reorder(item):\n    return {k: dict_reoder(v) if isinstance(v, dict) else v for k, v in sorted(item.items())}\n\nreordered_dict = dict_reorder(test_dict)\n</code></pre>\n<p><a href=\"https://gist.github.com/ligyxy/f60f0374defc383aa098d44cfbd318eb\" rel=\"nofollow noreferrer\">https://gist.github.com/ligyxy/f60f0374defc383aa098d44cfbd318eb</a></p>\n", "abstract": "Python dictionary was unordered before Python 3.6. In CPython implementation of Python 3.6, the dictionary keeps the insertion order.\nFrom Python 3.7, this will become a language feature. In changelog of Python 3.6 (https://docs.python.org/3.6/whatsnew/3.6.html#whatsnew36-compactdict): The order-preserving aspect of this new implementation is considered\nan implementation detail and should not be relied upon (this may\nchange in the future, but it is desired to have this new dict\nimplementation in the language for a few releases before changing the\nlanguage spec to mandate order-preserving semantics for all current\nand future Python implementations; this also helps preserve\nbackward-compatibility with older versions of the language where\nrandom iteration order is still in effect, e.g. Python 3.5). In the document of Python 3.7 (https://docs.python.org/3.7/tutorial/datastructures.html#dictionaries): Performing list(d) on a dictionary returns a list of all the keys used\nin the dictionary, in insertion order (if you want it sorted, just use\nsorted(d) instead). So unlike previous versions, you can sort a dict after Python 3.6/3.7. If you want to sort a nested dict including the sub-dict inside, you can do: https://gist.github.com/ligyxy/f60f0374defc383aa098d44cfbd318eb"}, {"id": 9002555, "score": 27, "vote": 0, "content": "<p>As others have mentioned, dictionaries are inherently unordered.  However, if the issue is merely <strong>displaying</strong> dictionaries in an ordered fashion, you can override the <code>__str__</code> method in a dictionary subclass, and use this dictionary class rather than the builtin <code>dict</code>.  Eg.</p>\n<pre><code class=\"python\">class SortedDisplayDict(dict):\n   def __str__(self):\n       return \"{\" + \", \".join(\"%r: %r\" % (key, self[key]) for key in sorted(self)) + \"}\"\n\n\n&gt;&gt;&gt; d = SortedDisplayDict({2:3, 1:89, 4:5, 3:0})\n&gt;&gt;&gt; d\n{1: 89, 2: 3, 3: 0, 4: 5}\n</code></pre>\n<p>Note, this changes nothing about how the keys are stored, the order they will come back when you iterate over them etc, just how they're displayed with <code>print</code> or at the python console.</p>\n", "abstract": "As others have mentioned, dictionaries are inherently unordered.  However, if the issue is merely displaying dictionaries in an ordered fashion, you can override the __str__ method in a dictionary subclass, and use this dictionary class rather than the builtin dict.  Eg. Note, this changes nothing about how the keys are stored, the order they will come back when you iterate over them etc, just how they're displayed with print or at the python console."}, {"id": 22364504, "score": 26, "vote": 0, "content": "<p>Found another way:</p>\n<pre><code class=\"python\">import json\nprint json.dumps(d, sort_keys = True)\n</code></pre>\n<p><strong>upd:</strong><br/>\n1. this also sorts nested objects (thanks @DanielF).<br/>\n2. python dictionaries are unordered therefore this is sutable for print or assign to str only.</p>\n", "abstract": "Found another way: upd:\n1. this also sorts nested objects (thanks @DanielF).\n2. python dictionaries are unordered therefore this is sutable for print or assign to str only."}, {"id": 60579401, "score": 21, "vote": 0, "content": "<p>An easy way to do this:</p>\n<pre><code class=\"python\">d = {2:3, 1:89, 4:5, 3:0}\n\ns = {k : d[k] for k in sorted(d)}\n\ns\n</code></pre>\n<pre><code class=\"python\">Out[1]: {1: 89, 2: 3, 3: 0, 4: 5} \n</code></pre>\n", "abstract": "An easy way to do this:"}, {"id": 20624774, "score": 20, "vote": 0, "content": "<p>In Python 3. </p>\n<pre><code class=\"python\">&gt;&gt;&gt; D1 = {2:3, 1:89, 4:5, 3:0}\n&gt;&gt;&gt; for key in sorted(D1):\n    print (key, D1[key])\n</code></pre>\n<p>gives</p>\n<pre><code class=\"python\">1 89\n2 3\n3 0\n4 5\n</code></pre>\n", "abstract": "In Python 3.  gives"}, {"id": 68105488, "score": 18, "vote": 0, "content": "<p>There are plenty of answers here already showcasing popular ways to sort a Python dictionary. I thought I'd add a few more less-obvious ways for those coming here from Google looking for non-standard ideas.</p>\n<p>Sample Dictionary: <code>d = {2: 'c', 1: 'b', 0: 'a', 3: 'd'}</code></p>\n<h2>Dictionary Comprehension</h2>\n<pre><code class=\"python\"># Converts to list, sorts, re-converts to dict\n{k: v for k, v in sorted(list(d.items()))}\n</code></pre>\n<h2>Using Lambdas</h2>\n<p>Sorting isn't always intended to order strictly in ascending or descending order. For more conditional sorting, use the above method combined with lamdas:</p>\n<pre><code class=\"python\">{k: v for k, v in sorted(d.items(), key=lambda v: ord(v[1]))}\n</code></pre>\n<h2>More Examples</h2>\n<p>This thread is already full enough of good examples. For some more examples, as well as edge-cases and oddities <a href=\"https://www.overcoded.net/sorting-python-dictionary-291211/\" rel=\"noreferrer\">check out this article</a> on sorting dictionaries in Python.</p>\n", "abstract": "There are plenty of answers here already showcasing popular ways to sort a Python dictionary. I thought I'd add a few more less-obvious ways for those coming here from Google looking for non-standard ideas. Sample Dictionary: d = {2: 'c', 1: 'b', 0: 'a', 3: 'd'} Sorting isn't always intended to order strictly in ascending or descending order. For more conditional sorting, use the above method combined with lamdas: This thread is already full enough of good examples. For some more examples, as well as edge-cases and oddities check out this article on sorting dictionaries in Python."}, {"id": 50886547, "score": 15, "vote": 0, "content": "<p>You can create a new dictionary by sorting the current dictionary by key as per your question.</p>\n<p>This is your dictionary</p>\n<pre><code class=\"python\">d = {2:3, 1:89, 4:5, 3:0}\n</code></pre>\n<p>Create a new dictionary d1 by sorting this d using lambda function</p>\n<pre><code class=\"python\">d1 = dict(sorted(d.items(), key = lambda x:x[0]))\n</code></pre>\n<p>d1 should be {1: 89, 2: 3, 3: 0, 4: 5}, sorted based on keys in d.</p>\n", "abstract": "You can create a new dictionary by sorting the current dictionary by key as per your question. This is your dictionary Create a new dictionary d1 by sorting this d using lambda function d1 should be {1: 89, 2: 3, 3: 0, 4: 5}, sorted based on keys in d."}, {"id": 68121283, "score": 14, "vote": 0, "content": "<p>A simple way I found to sort a dictionary is to create a new one, based on the sorted key:value items of the one you're trying to sort.\nIf you want to sort <code>dict = {}</code>, retrieve all its items using the associated method, sort them using the <code>sorted()</code> function then create the new dictionary.</p>\n<p>Here's the code using dictionary comprehension :</p>\n<pre><code class=\"python\">sorted_dict = {k:v for k,v in sorted(dict.items())}\n</code></pre>\n", "abstract": "A simple way I found to sort a dictionary is to create a new one, based on the sorted key:value items of the one you're trying to sort.\nIf you want to sort dict = {}, retrieve all its items using the associated method, sort them using the sorted() function then create the new dictionary. Here's the code using dictionary comprehension :"}, {"id": 21525817, "score": 13, "vote": 0, "content": "<p>Here I found some simplest solution to sort the python dict by key using <code>pprint</code>.\neg. </p>\n<pre><code class=\"python\">&gt;&gt;&gt; x = {'a': 10, 'cd': 20, 'b': 30, 'az': 99} \n&gt;&gt;&gt; print x\n{'a': 10, 'b': 30, 'az': 99, 'cd': 20}\n</code></pre>\n<p>but while using pprint it will return sorted dict</p>\n<pre><code class=\"python\">&gt;&gt;&gt; import pprint \n&gt;&gt;&gt; pprint.pprint(x)\n{'a': 10, 'az': 99, 'b': 30, 'cd': 20}\n</code></pre>\n", "abstract": "Here I found some simplest solution to sort the python dict by key using pprint.\neg.  but while using pprint it will return sorted dict"}, {"id": 41733771, "score": 13, "vote": 0, "content": "<p>There is an easy way to sort a dictionary.</p>\n<p>According to your question,</p>\n<p>The solution is :</p>\n<pre><code class=\"python\">c={2:3, 1:89, 4:5, 3:0}\ny=sorted(c.items())\nprint y\n</code></pre>\n<p>(Where c,is the name of your dictionary.)</p>\n<p>This program gives the following output:</p>\n<pre><code class=\"python\">[(1, 89), (2, 3), (3, 0), (4, 5)]\n</code></pre>\n<p>like u wanted.</p>\n<p>Another example is:</p>\n<pre><code class=\"python\">d={\"John\":36,\"Lucy\":24,\"Albert\":32,\"Peter\":18,\"Bill\":41}\nx=sorted(d.keys())\nprint x\n</code></pre>\n<p>Gives the output:<code>['Albert', 'Bill', 'John', 'Lucy', 'Peter']</code></p>\n<pre><code class=\"python\">y=sorted(d.values())\nprint y\n</code></pre>\n<p>Gives the output:<code>[18, 24, 32, 36, 41]</code></p>\n<pre><code class=\"python\">z=sorted(d.items())\nprint z\n</code></pre>\n<p>Gives the output:</p>\n<pre><code class=\"python\">[('Albert', 32), ('Bill', 41), ('John', 36), ('Lucy', 24), ('Peter', 18)]\n</code></pre>\n<p>Hence by changing it into keys, values and items , you can print like what u wanted.Hope this helps!</p>\n", "abstract": "There is an easy way to sort a dictionary. According to your question, The solution is : (Where c,is the name of your dictionary.) This program gives the following output: like u wanted. Another example is: Gives the output:['Albert', 'Bill', 'John', 'Lucy', 'Peter'] Gives the output:[18, 24, 32, 36, 41] Gives the output: Hence by changing it into keys, values and items , you can print like what u wanted.Hope this helps!"}, {"id": 42554028, "score": 9, "vote": 0, "content": "<p>Will generate exactly what you want: </p>\n<pre><code class=\"python\"> D1 = {2:3, 1:89, 4:5, 3:0}\n\n sort_dic = {}\n\n for i in sorted(D1):\n     sort_dic.update({i:D1[i]})\n print sort_dic\n\n\n{1: 89, 2: 3, 3: 0, 4: 5}\n</code></pre>\n<p>But this is not the correct way to do this, because, It could show a distinct behavior with different dictionaries, which I have learned recently. Hence perfect way has been suggested by Tim In the response of my Query which I am sharing here.</p>\n<pre><code class=\"python\">from collections import OrderedDict\nsorted_dict = OrderedDict(sorted(D1.items(), key=lambda t: t[0]))\n</code></pre>\n", "abstract": "Will generate exactly what you want:  But this is not the correct way to do this, because, It could show a distinct behavior with different dictionaries, which I have learned recently. Hence perfect way has been suggested by Tim In the response of my Query which I am sharing here."}, {"id": 69297482, "score": 8, "vote": 0, "content": "<p>Here is the performance of the suggested solutions:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">from collections import OrderedDict\nfrom sortedcontainers import SortedDict\nimport json\n\nkeys = np.random.rand(100000)\nvals = np.random.rand(100000)\n\nd = dict(zip(keys, vals))\n\ntimeit SortedDict(d)\n#45.8 ms \u00b1 780 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)\n\ntimeit sorted(d.items())\n#91.9 ms \u00b1 707 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)\n\ntimeit OrderedDict(sorted(d.items(), key=lambda x: x[0]))\n#93.7 ms \u00b1 1.52 ms per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)\n\ntimeit dict(sorted(dic.items()))\n#113 ms \u00b1 824 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)\n\ntimeit OrderedDict(sorted(dic.items()))\n#122 ms \u00b1 2.65 ms per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)\n\ntimeit json.dumps(d, sort_keys=True)\n#259 ms \u00b1 9.42 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\n</code></pre>\n<p>As we see, <a href=\"http://www.grantjenks.com/docs/sortedcontainers/\" rel=\"noreferrer\">Grant Jenks's solution</a> is by far the fastest.</p>\n", "abstract": "Here is the performance of the suggested solutions: As we see, Grant Jenks's solution is by far the fastest."}, {"id": 42789098, "score": 6, "vote": 0, "content": "<p>I think the easiest thing is to sort the dict by key and save the sorted key:value pair in a new dict.</p>\n<pre><code class=\"python\">dict1 = {'renault': 3, 'ford':4, 'volvo': 1, 'toyota': 2} \ndict2 = {}                  # create an empty dict to store the sorted values\nfor key in sorted(dict1.keys()):\n    if not key in dict2:    # Depending on the goal, this line may not be neccessary\n        dict2[key] = dict1[key]\n</code></pre>\n<p>To make it clearer:</p>\n<pre><code class=\"python\">dict1 = {'renault': 3, 'ford':4, 'volvo': 1, 'toyota': 2} \ndict2 = {}                  # create an empty dict to store the sorted     values\nfor key in sorted(dict1.keys()):\n    if not key in dict2:    # Depending on the goal, this line may not be  neccessary\n        value = dict1[key]\n        dict2[key] = value\n</code></pre>\n", "abstract": "I think the easiest thing is to sort the dict by key and save the sorted key:value pair in a new dict. To make it clearer:"}, {"id": 53755500, "score": 6, "vote": 0, "content": "<p>I come up with single line dict sorting. </p>\n<pre><code class=\"python\">&gt;&gt; a = {2:3, 1:89, 4:5, 3:0}\n&gt;&gt; c = {i:a[i] for i in sorted(a.keys())}\n&gt;&gt; print(c)\n{1: 89, 2: 3, 3: 0, 4: 5}\n[Finished in 0.4s]\n</code></pre>\n<p>Hope this will be helpful. </p>\n", "abstract": "I come up with single line dict sorting.  Hope this will be helpful. "}, {"id": 22704094, "score": 5, "vote": 0, "content": "<p>Python dicts are un-ordered. Usually, this is not a problem since the most common use case is to do a lookup. </p>\n<p>The simplest way to do what you want would be to create a <code>collections.OrderedDict</code> inserting the elements in sorted order.</p>\n<pre><code class=\"python\">ordered_dict = collections.OrderedDict([(k, d[k]) for k in sorted(d.keys())])\n</code></pre>\n<p>If you need to iterated, as others above have suggested, the simplest way would be to iterate over sorted keys. Examples-</p>\n<p>Print values sorted by keys:</p>\n<pre><code class=\"python\"># create the dict\nd = {k1:v1, k2:v2,...}\n# iterate by keys in sorted order\nfor k in sorted(d.keys()):\n    value = d[k]\n    # do something with k, value like print\n    print k, value\n</code></pre>\n<p>Get list of values sorted by keys:</p>\n<pre><code class=\"python\">values = [d[k] for k in sorted(d.keys())]\n</code></pre>\n", "abstract": "Python dicts are un-ordered. Usually, this is not a problem since the most common use case is to do a lookup.  The simplest way to do what you want would be to create a collections.OrderedDict inserting the elements in sorted order. If you need to iterated, as others above have suggested, the simplest way would be to iterate over sorted keys. Examples- Print values sorted by keys: Get list of values sorted by keys:"}, {"id": 57788693, "score": 5, "vote": 0, "content": "<p>This function will sort any dictionary <em>recursively</em> by its key. That is, if any value in the dictionary is also a dictionary, it too will be sorted by its key. If you are running on CPython 3.6 or greater, than a simple change to use a <code>dict</code> rather than an <code>OrderedDict</code> can be made.</p>\n<pre><code class=\"python\">from collections import OrderedDict\n\ndef sort_dict(d):\n    items = [[k, v] for k, v in sorted(d.items(), key=lambda x: x[0])]\n    for item in items:\n        if isinstance(item[1], dict):\n            item[1] = sort_dict(item[1])\n    return OrderedDict(items)\n    #return dict(items)\n</code></pre>\n", "abstract": "This function will sort any dictionary recursively by its key. That is, if any value in the dictionary is also a dictionary, it too will be sorted by its key. If you are running on CPython 3.6 or greater, than a simple change to use a dict rather than an OrderedDict can be made."}, {"id": 41866806, "score": 4, "vote": 0, "content": "<p>Simplest solution is that you should get a list of dict key is sorted order and then iterate over dict. For example</p>\n<pre><code class=\"python\">a1 = {'a':1, 'b':13, 'd':4, 'c':2, 'e':30}\na1_sorted_keys = sorted(a1, key=a1.get, reverse=True)\nfor r in a1_sorted_keys:\n    print r, a1[r]\n</code></pre>\n<p>Following will be the output (desending order)</p>\n<pre><code class=\"python\">e 30\nb 13\nd 4\nc 2\na 1\n</code></pre>\n", "abstract": "Simplest solution is that you should get a list of dict key is sorted order and then iterate over dict. For example Following will be the output (desending order)"}, {"id": 62250893, "score": 3, "vote": 0, "content": "<p>For the way how question is formulated, the most answers here are answering it correctly.</p>\n<p>However, considering how the things <strong>should</strong> be really done, taking to acount decades and decades of computer science, it comes to my total suprise that there is actually only <a href=\"https://stackoverflow.com/a/22718254/10058683\">one answer</a> here (from <a href=\"https://stackoverflow.com/users/232571/grantj\">GrantJ</a> user) suggesting usage of sorted associative containers (sortedcontainers) which sorts elements based on key at their insertions point. </p>\n<p>That will avoid <strong>massive</strong> performance impact per each calling of <code>sort(...)</code> (at minimum <code>O(N*log(N))</code>, where <code>N</code> is in number of elements (logically, this applies for all such solutions here which suggest to use the <code>sort(...)</code>). Take to account that for all such solutions, the <code>sort(...)</code> will need to be called every time when  colletion needs to be accessed as sorted <strong>AFTER</strong> it was modified by adding/removing elements ...</p>\n", "abstract": "For the way how question is formulated, the most answers here are answering it correctly. However, considering how the things should be really done, taking to acount decades and decades of computer science, it comes to my total suprise that there is actually only one answer here (from GrantJ user) suggesting usage of sorted associative containers (sortedcontainers) which sorts elements based on key at their insertions point.  That will avoid massive performance impact per each calling of sort(...) (at minimum O(N*log(N)), where N is in number of elements (logically, this applies for all such solutions here which suggest to use the sort(...)). Take to account that for all such solutions, the sort(...) will need to be called every time when  colletion needs to be accessed as sorted AFTER it was modified by adding/removing elements ..."}, {"id": 39503680, "score": 2, "vote": 0, "content": "<p>Guys you are making things complicated ... it's really simple</p>\n<pre><code class=\"python\">from pprint import pprint\nDict={'B':1,'A':2,'C':3}\npprint(Dict)\n</code></pre>\n<p>The output is:</p>\n<pre><code class=\"python\">{'A':2,'B':1,'C':3}\n</code></pre>\n", "abstract": "Guys you are making things complicated ... it's really simple The output is:"}, {"id": 40811181, "score": 2, "vote": 0, "content": "<pre><code class=\"python\">from operator import itemgetter\n# if you would like to play with multiple dictionaries then here you go:\n# Three dictionaries that are composed of first name and last name.\nuser = [\n    {'fname': 'Mo', 'lname': 'Mahjoub'},\n    {'fname': 'Abdo', 'lname': 'Al-hebashi'},\n    {'fname': 'Ali', 'lname': 'Muhammad'}\n]\n#  This loop will sort by the first and the last names.\n# notice that in a dictionary order doesn't matter. So it could put the first name first or the last name first. \nfor k in sorted (user, key=itemgetter ('fname', 'lname')):\n    print (k)\n\n# This one will sort by the first name only.\nfor x in sorted (user, key=itemgetter ('fname')):\n    print (x)\n</code></pre>\n", "abstract": ""}, {"id": 46696857, "score": 2, "vote": 0, "content": "<pre><code class=\"python\">dictionary = {1:[2],2:[],5:[4,5],4:[5],3:[1]}\n\ntemp=sorted(dictionary)\nsorted_dict = dict([(k,dictionary[k]) for i,k in enumerate(temp)])\n\nsorted_dict:\n         {1: [2], 2: [], 3: [1], 4: [5], 5: [4, 5]}\n</code></pre>\n", "abstract": ""}, {"id": 39714110, "score": 1, "vote": 0, "content": "<p>A timing comparison of the two methods in 2.7 shows them to be virtually identical:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; setup_string = \"a = sorted(dict({2:3, 1:89, 4:5, 3:0}).items())\"\n&gt;&gt;&gt; timeit.timeit(stmt=\"[(k, val) for k, val in a]\", setup=setup_string, number=10000)\n0.003599141953657181\n\n&gt;&gt;&gt; setup_string = \"from collections import OrderedDict\\n\"\n&gt;&gt;&gt; setup_string += \"a = OrderedDict({1:89, 2:3, 3:0, 4:5})\\n\"\n&gt;&gt;&gt; setup_string += \"b = a.items()\"\n&gt;&gt;&gt; timeit.timeit(stmt=\"[(k, val) for k, val in b]\", setup=setup_string, number=10000)\n0.003581275490432745 \n</code></pre>\n", "abstract": "A timing comparison of the two methods in 2.7 shows them to be virtually identical:"}, {"id": 52848708, "score": 1, "vote": 0, "content": "<p>Or use <code>pandas</code>,</p>\n<p><strong>Demo:</strong></p>\n<pre><code class=\"python\">&gt;&gt;&gt; d={'B':1,'A':2,'C':3}\n&gt;&gt;&gt; df=pd.DataFrame(d,index=[0]).sort_index(axis=1)\n   A  B  C\n0  2  1  3\n&gt;&gt;&gt; df.to_dict('int')[0]\n{'A': 2, 'B': 1, 'C': 3}\n&gt;&gt;&gt; \n</code></pre>\n<p>See:</p>\n<blockquote>\n<p><a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.sort_index.html\" rel=\"nofollow noreferrer\">Docs of this</a></p>\n<p><a href=\"https://pandas.pydata.org/pandas-docs/stable/10min.html\" rel=\"nofollow noreferrer\">Documentation of whole pandas</a></p>\n</blockquote>\n", "abstract": "Or use pandas, Demo: See: Docs of this Documentation of whole pandas"}, {"id": 40243983, "score": 0, "vote": 0, "content": "<pre><code class=\"python\">l = dict.keys()\nl2 = l\nl2.append(0)\nl3 = []\nfor repeater in range(0, len(l)):\n    smallnum = float(\"inf\")\n    for listitem in l2:\n        if listitem &lt; smallnum:\n            smallnum = listitem\n    l2.remove(smallnum)\n    l3.append(smallnum)\nl3.remove(0)\nl = l3\n\nfor listitem in l:\n    print(listitem)\n</code></pre>\n", "abstract": ""}, {"id": 61527577, "score": 0, "vote": 0, "content": "<p>My suggestion is this as it allows you to sort a dict or keep a dict sorted as you are adding items and might need to add items in the future:</p>\n<p>Build a <code>dict</code> from scratch as you go along.  Have a second data structure, a list, with your list of keys.  The bisect package has an insort function which allows inserting into a sorted list, or sort your list after completely populating your dict.  Now, when you iterate over your dict, you instead iterate over the list to access each key in an in-order fashion without worrying about the representation of the dict structure (which was not made for sorting).</p>\n", "abstract": "My suggestion is this as it allows you to sort a dict or keep a dict sorted as you are adding items and might need to add items in the future: Build a dict from scratch as you go along.  Have a second data structure, a list, with your list of keys.  The bisect package has an insort function which allows inserting into a sorted list, or sort your list after completely populating your dict.  Now, when you iterate over your dict, you instead iterate over the list to access each key in an in-order fashion without worrying about the representation of the dict structure (which was not made for sorting)."}, {"id": 69241104, "score": 0, "vote": 0, "content": "<p>If you know all your keys are of same type or have types which support '&lt; ' (less than, python's <code>__lt__</code>) then you can use <code>dict(sorted(your_dict.items(), key=lambda _: _[0]))</code> an easy to understand one-liner</p>\n", "abstract": "If you know all your keys are of same type or have types which support '< ' (less than, python's __lt__) then you can use dict(sorted(your_dict.items(), key=lambda _: _[0])) an easy to understand one-liner"}]}, {"link": "https://stackoverflow.com/questions/192109/is-there-a-built-in-function-to-print-all-the-current-properties-and-values-of-a", "question": {"id": "192109", "title": "Is there a built-in function to print all the current properties and values of an object?", "content": "<p>So what I'm looking for here is something like PHP's <a href=\"http://us2.php.net/print_r\" rel=\"noreferrer\">print_r</a> function.</p>\n<p>This is so I can debug my scripts by seeing what's the state of the object in question.</p>\n", "abstract": "So what I'm looking for here is something like PHP's print_r function. This is so I can debug my scripts by seeing what's the state of the object in question."}, "answers": [{"id": 193539, "score": 1252, "vote": 0, "content": "<p>You want <code>vars()</code> mixed with <code>pprint()</code>:</p>\n<pre><code class=\"python\">from pprint import pprint\npprint(vars(your_object))\n</code></pre>\n", "abstract": "You want vars() mixed with pprint():"}, {"id": 192365, "score": 770, "vote": 0, "content": "<p>You are really mixing together two different things.</p>\n<p>Use <a href=\"https://docs.python.org/3/library/functions.html#dir\" rel=\"noreferrer\"><code>dir()</code></a>, <a href=\"https://docs.python.org/3/library/functions.html#vars\" rel=\"noreferrer\"><code>vars()</code></a> or the <a href=\"https://docs.python.org/3/library/inspect.html\" rel=\"noreferrer\"><code>inspect</code></a> module to get what you are interested in (I use <code>__builtins__</code> as an example; you can use any object instead).</p>\n<pre><code class=\"python\">&gt;&gt;&gt; l = dir(__builtins__)\n&gt;&gt;&gt; d = __builtins__.__dict__\n</code></pre>\n<p>Print that dictionary however fancy you like:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; print l\n['ArithmeticError', 'AssertionError', 'AttributeError',...\n</code></pre>\n<p>or</p>\n<pre><code class=\"python\">&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; pprint(l)\n['ArithmeticError',\n 'AssertionError',\n 'AttributeError',\n 'BaseException',\n 'DeprecationWarning',\n...\n\n&gt;&gt;&gt; pprint(d, indent=2)\n{ 'ArithmeticError': &lt;type 'exceptions.ArithmeticError'&gt;,\n  'AssertionError': &lt;type 'exceptions.AssertionError'&gt;,\n  'AttributeError': &lt;type 'exceptions.AttributeError'&gt;,\n...\n  '_': [ 'ArithmeticError',\n         'AssertionError',\n         'AttributeError',\n         'BaseException',\n         'DeprecationWarning',\n...\n</code></pre>\n<p>Pretty printing is also available in the interactive debugger as a command:</p>\n<pre><code class=\"python\">(Pdb) pp vars()\n{'__builtins__': {'ArithmeticError': &lt;type 'exceptions.ArithmeticError'&gt;,\n                  'AssertionError': &lt;type 'exceptions.AssertionError'&gt;,\n                  'AttributeError': &lt;type 'exceptions.AttributeError'&gt;,\n                  'BaseException': &lt;type 'exceptions.BaseException'&gt;,\n                  'BufferError': &lt;type 'exceptions.BufferError'&gt;,\n                  ...\n                  'zip': &lt;built-in function zip&gt;},\n '__file__': 'pass.py',\n '__name__': '__main__'}\n</code></pre>\n", "abstract": "You are really mixing together two different things. Use dir(), vars() or the inspect module to get what you are interested in (I use __builtins__ as an example; you can use any object instead). Print that dictionary however fancy you like: or Pretty printing is also available in the interactive debugger as a command:"}, {"id": 192184, "score": 288, "vote": 0, "content": "<pre><code class=\"python\">def dump(obj):\n  for attr in dir(obj):\n    print(\"obj.%s = %r\" % (attr, getattr(obj, attr)))\n</code></pre>\n<p>There are many 3rd-party functions out there that add things like exception handling, national/special character printing, recursing into nested objects etc. according to their authors' preferences. But they all basically boil down to this.</p>\n", "abstract": "There are many 3rd-party functions out there that add things like exception handling, national/special character printing, recursing into nested objects etc. according to their authors' preferences. But they all basically boil down to this."}, {"id": 192207, "score": 94, "vote": 0, "content": "<p><code>dir</code> has been mentioned, but that'll only give you the attributes' names.  If you want their values as well, try <code>__dict__</code>.</p>\n<pre><code class=\"python\">class O:\n   def __init__ (self):\n      self.value = 3\n\no = O()\n</code></pre>\n<p>Here is the output:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; o.__dict__\n\n{'value': 3}\n</code></pre>\n", "abstract": "dir has been mentioned, but that'll only give you the attributes' names.  If you want their values as well, try __dict__. Here is the output:"}, {"id": 59128615, "score": 61, "vote": 0, "content": "<blockquote>\n<h2>Is there a built-in function to print all the current properties and values of an object?</h2>\n</blockquote>\n<p>No. The most upvoted answer excludes some kinds of attributes, and the accepted answer shows how to get <em>all</em> attributes, including methods and parts of the non-public api. But there is no good complete <em>builtin</em> function for this.</p>\n<p>So the short corollary is that you can write your own, but it will calculate properties and other calculated data-descriptors that are part of the public API, and you might not want that:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">from pprint import pprint\nfrom inspect import getmembers\nfrom types import FunctionType\n\ndef attributes(obj):\n    disallowed_names = {\n      name for name, value in getmembers(type(obj)) \n        if isinstance(value, FunctionType)}\n    return {\n      name: getattr(obj, name) for name in dir(obj) \n        if name[0] != '_' and name not in disallowed_names and hasattr(obj, name)}\n\ndef print_attributes(obj):\n    pprint(attributes(obj))\n</code></pre>\n<h2>Problems with other answers</h2>\n<p>Observe the application of the currently top voted answer on a class with a lot of different kinds of data members:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">from pprint import pprint\n\nclass Obj:\n    __slots__ = 'foo', 'bar', '__dict__'\n    def __init__(self, baz):\n        self.foo = ''\n        self.bar = 0\n        self.baz = baz\n    @property\n    def quux(self):\n        return self.foo * self.bar\n\nobj = Obj('baz')\npprint(vars(obj))\n</code></pre>\n<p>only prints:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">{'baz': 'baz'}\n</code></pre>\n<p>Because <code>vars</code> <em>only</em> returns the <code>__dict__</code> of an object, and it's not a copy, so if you modify the dict returned by vars, you're also modifying the <code>__dict__</code> of the object itself.</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">vars(obj)['quux'] = 'WHAT?!'\nvars(obj)\n</code></pre>\n<p>returns:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">{'baz': 'baz', 'quux': 'WHAT?!'}\n</code></pre>\n<p>-- which is bad because quux is a property that we shouldn't be setting and shouldn't be in the namespace...</p>\n<p>Applying the advice in the currently accepted answer (and others) is not much better:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; dir(obj)\n['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', 'bar', 'baz', 'foo', 'quux']\n</code></pre>\n<p>As we can see, <code>dir</code> only returns <em>all</em> (actually just most) of the names associated with an object.</p>\n<p><code>inspect.getmembers</code>, mentioned in the comments, is similarly flawed - it returns all names <em>and</em> values.</p>\n<h3>From class</h3>\n<p>When teaching I have my students create a function that provides the semantically public API of an object:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">def api(obj):\n    return [name for name in dir(obj) if name[0] != '_']\n</code></pre>\n<p>We can extend this to provide a <em>copy</em> of the semantic namespace of an object, but we need to exclude <code>__slots__</code> that aren't assigned, and if we're taking the request for \"current properties\" seriously, we need to exclude calculated properties (as they could become expensive, and could be interpreted as not \"current\"):</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">from types import FunctionType\nfrom inspect import getmembers\n\ndef attrs(obj):\n    disallowed_properties = {\n        name for name, value in getmembers(type(obj)) \n        if isinstance(value, (property, FunctionType))\n    }\n    return {\n        name: getattr(obj, name) for name in api(obj) \n        if name not in disallowed_properties and hasattr(obj, name)\n    }\n\n</code></pre>\n<p>And now we do not calculate or show the property, quux:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; attrs(obj)\n{'bar': 0, 'baz': 'baz', 'foo': ''}\n</code></pre>\n<h3>Caveats</h3>\n<p>But perhaps we do know our properties aren't expensive. We may want to alter the logic to include them as well. And perhaps we want to exclude <em>other</em> <strong>custom</strong> data descriptors instead.</p>\n<p>Then we need to further customize this function. And so it makes sense that we cannot have a built-in function that magically knows exactly what we want and provides it. This is functionality we need to create ourselves.</p>\n<h2>Conclusion</h2>\n<p>There is no built-in function that does this, and you should do what is most semantically appropriate for your situation.</p>\n", "abstract": "No. The most upvoted answer excludes some kinds of attributes, and the accepted answer shows how to get all attributes, including methods and parts of the non-public api. But there is no good complete builtin function for this. So the short corollary is that you can write your own, but it will calculate properties and other calculated data-descriptors that are part of the public API, and you might not want that: Observe the application of the currently top voted answer on a class with a lot of different kinds of data members: only prints: Because vars only returns the __dict__ of an object, and it's not a copy, so if you modify the dict returned by vars, you're also modifying the __dict__ of the object itself. returns: -- which is bad because quux is a property that we shouldn't be setting and shouldn't be in the namespace... Applying the advice in the currently accepted answer (and others) is not much better: As we can see, dir only returns all (actually just most) of the names associated with an object. inspect.getmembers, mentioned in the comments, is similarly flawed - it returns all names and values. When teaching I have my students create a function that provides the semantically public API of an object: We can extend this to provide a copy of the semantic namespace of an object, but we need to exclude __slots__ that aren't assigned, and if we're taking the request for \"current properties\" seriously, we need to exclude calculated properties (as they could become expensive, and could be interpreted as not \"current\"): And now we do not calculate or show the property, quux: But perhaps we do know our properties aren't expensive. We may want to alter the logic to include them as well. And perhaps we want to exclude other custom data descriptors instead. Then we need to further customize this function. And so it makes sense that we cannot have a built-in function that magically knows exactly what we want and provides it. This is functionality we need to create ourselves. There is no built-in function that does this, and you should do what is most semantically appropriate for your situation."}, {"id": 192116, "score": 30, "vote": 0, "content": "<p>You can use the \"dir()\" function to do this.</p>\n<pre><code class=\"python\">&gt;&gt;&gt; import sys\n&gt;&gt;&gt; dir(sys)\n['__displayhook__', '__doc__', '__excepthook__', '__name__', '__stderr__', '__stdin__', '__stdo\nt__', '_current_frames', '_getframe', 'api_version', 'argv', 'builtin_module_names', 'byteorder\n, 'call_tracing', 'callstats', 'copyright', 'displayhook', 'dllhandle', 'exc_clear', 'exc_info'\n 'exc_type', 'excepthook', 'exec_prefix', 'executable', 'exit', 'getcheckinterval', 'getdefault\nncoding', 'getfilesystemencoding', 'getrecursionlimit', 'getrefcount', 'getwindowsversion', 'he\nversion', 'maxint', 'maxunicode', 'meta_path', 'modules', 'path', 'path_hooks', 'path_importer_\nache', 'platform', 'prefix', 'ps1', 'ps2', 'setcheckinterval', 'setprofile', 'setrecursionlimit\n, 'settrace', 'stderr', 'stdin', 'stdout', 'subversion', 'version', 'version_info', 'warnoption\n', 'winver']\n&gt;&gt;&gt;\n</code></pre>\n<p>Another useful feature is help.</p>\n<pre><code class=\"python\">&gt;&gt;&gt; help(sys)\nHelp on built-in module sys:\n\nNAME\n    sys\n\nFILE\n    (built-in)\n\nMODULE DOCS\n    http://www.python.org/doc/current/lib/module-sys.html\n\nDESCRIPTION\n    This module provides access to some objects used or maintained by the\n    interpreter and to functions that interact strongly with the interpreter.\n\n    Dynamic objects:\n\n    argv -- command line arguments; argv[0] is the script pathname if known\n</code></pre>\n", "abstract": "You can use the \"dir()\" function to do this. Another useful feature is help."}, {"id": 193808, "score": 24, "vote": 0, "content": "<p>To print the current state of the object you might: </p>\n<pre><code class=\"python\">&gt;&gt;&gt; obj # in an interpreter\n</code></pre>\n<p>or </p>\n<pre><code class=\"python\">print repr(obj) # in a script\n</code></pre>\n<p>or</p>\n<pre><code class=\"python\">print obj\n</code></pre>\n<p>For your classes define <code>__str__</code> or <code>__repr__</code> methods. From the <a href=\"http://www.python.org/doc/2.5.2/ref/customization.html\" rel=\"noreferrer\">Python documentation</a>:</p>\n<blockquote>\n<p><code>__repr__(self)</code> Called by the <code>repr()</code> built-in function and by string\n  conversions (reverse quotes) to\n  compute the \"official\" string\n  representation of an object. If at all\n  possible, this should look like a\n  valid Python expression that could be\n  used to recreate an object with the\n  same value (given an appropriate\n  environment). If this is not possible,\n  a string of the form \"&lt;...some useful\n  description...&gt;\" should be returned.\n  The return value must be a string\n  object. If a class defines <strong>repr</strong>()\n  but not <code>__str__()</code>, then <code>__repr__()</code> is\n  also used when an \"informal\" string\n  representation of instances of that\n  class is required. This is typically\n  used for debugging, so it is important\n  that the representation is\n  information-rich and unambiguous.</p>\n<p><code>__str__(self)</code> Called by the <code>str()</code> built-in function and by the print\n  statement to compute the \"informal\"\n  string representation of an object.\n  This differs from <code>__repr__()</code> in that\n  it does not have to be a valid Python\n  expression: a more convenient or\n  concise representation may be used\n  instead. The return value must be a\n  string object.</p>\n</blockquote>\n", "abstract": "To print the current state of the object you might:  or  or For your classes define __str__ or __repr__ methods. From the Python documentation: __repr__(self) Called by the repr() built-in function and by string\n  conversions (reverse quotes) to\n  compute the \"official\" string\n  representation of an object. If at all\n  possible, this should look like a\n  valid Python expression that could be\n  used to recreate an object with the\n  same value (given an appropriate\n  environment). If this is not possible,\n  a string of the form \"<...some useful\n  description...>\" should be returned.\n  The return value must be a string\n  object. If a class defines repr()\n  but not __str__(), then __repr__() is\n  also used when an \"informal\" string\n  representation of instances of that\n  class is required. This is typically\n  used for debugging, so it is important\n  that the representation is\n  information-rich and unambiguous. __str__(self) Called by the str() built-in function and by the print\n  statement to compute the \"informal\"\n  string representation of an object.\n  This differs from __repr__() in that\n  it does not have to be a valid Python\n  expression: a more convenient or\n  concise representation may be used\n  instead. The return value must be a\n  string object."}, {"id": 13391460, "score": 18, "vote": 0, "content": "<p>Might be worth checking out --</p>\n<p><a href=\"https://stackoverflow.com/questions/2540567/is-there-a-python-equivalent-to-perls-datadumper\">Is there a Python equivalent to Perl's Data::Dumper?</a></p>\n<p>My recommendation is this --</p>\n<p><a href=\"https://gist.github.com/1071857\" rel=\"noreferrer\">https://gist.github.com/1071857</a></p>\n<p>Note that perl has a module called Data::Dumper which translates object data back to perl source code (NB: it does NOT translate code back to source, and almost always you don't want to the object method functions in the output). This can be used for persistence, but the common purpose is for debugging.</p>\n<p>There are a number of things standard python pprint fails to achieve, in particular it just stops descending when it sees an instance of an object and gives you the internal hex pointer of the object (errr, that pointer is not a whole lot of use by the way). So in a nutshell, python is all about this great object oriented paradigm, but the tools you get out of the box are designed for working with something other than objects.</p>\n<p>The perl Data::Dumper allows you to control how deep you want to go, and also detects circular linked structures (that's really important). This process is fundamentally easier to achieve in perl because objects have no particular magic beyond their blessing (a universally well defined process).</p>\n", "abstract": "Might be worth checking out -- Is there a Python equivalent to Perl's Data::Dumper? My recommendation is this -- https://gist.github.com/1071857 Note that perl has a module called Data::Dumper which translates object data back to perl source code (NB: it does NOT translate code back to source, and almost always you don't want to the object method functions in the output). This can be used for persistence, but the common purpose is for debugging. There are a number of things standard python pprint fails to achieve, in particular it just stops descending when it sees an instance of an object and gives you the internal hex pointer of the object (errr, that pointer is not a whole lot of use by the way). So in a nutshell, python is all about this great object oriented paradigm, but the tools you get out of the box are designed for working with something other than objects. The perl Data::Dumper allows you to control how deep you want to go, and also detects circular linked structures (that's really important). This process is fundamentally easier to achieve in perl because objects have no particular magic beyond their blessing (a universally well defined process)."}, {"id": 53668012, "score": 18, "vote": 0, "content": "<p>I recommend using <code>help(your_object)</code>.</p>\n<p><code>help(dir)</code></p>\n<blockquote>\n<pre><code class=\"python\"> If called without an argument, return the names in the current scope.\n Else, return an alphabetized list of names comprising (some of) the attributes\n of the given object, and of attributes reachable from it.\n If the object supplies a method named __dir__, it will be used; otherwise\n the default dir() logic is used and returns:\n for a module object: the module's attributes.\n for a class object:  its attributes, and recursively the attributes\n of its bases.\n for any other object: its attributes, its class's attributes, and\n recursively the attributes of its class's base classes.\n</code></pre>\n</blockquote>\n<p><code>help(vars)</code></p>\n<blockquote>\n<pre><code class=\"python\">Without arguments, equivalent to locals().\nWith an argument, equivalent to object.__dict__.\n</code></pre>\n</blockquote>\n", "abstract": "I recommend using help(your_object). help(dir) help(vars)"}, {"id": 205037, "score": 13, "vote": 0, "content": "<p>In most cases, using <code>__dict__</code> or <code>dir()</code> will get you the info you're wanting. If you should happen to need more details, the standard library includes the <a href=\"https://docs.python.org/2/library/inspect.html\" rel=\"noreferrer\">inspect</a> module, which allows you to get some impressive amount of detail. Some of the real nuggests of info include:</p>\n<ul>\n<li>names of function and method parameters</li>\n<li>class hierarchies</li>\n<li>source code of the implementation of a functions/class objects</li>\n<li>local variables out of a frame object</li>\n</ul>\n<p>If you're just looking for \"what attribute values does my object have?\", then <code>dir()</code> and <code>__dict__</code> are probably sufficient. If you're really looking to dig into the current state of arbitrary objects (keeping in mind that in python almost everything is an object), then <code>inspect</code> is worthy of consideration.</p>\n", "abstract": "In most cases, using __dict__ or dir() will get you the info you're wanting. If you should happen to need more details, the standard library includes the inspect module, which allows you to get some impressive amount of detail. Some of the real nuggests of info include: If you're just looking for \"what attribute values does my object have?\", then dir() and __dict__ are probably sufficient. If you're really looking to dig into the current state of arbitrary objects (keeping in mind that in python almost everything is an object), then inspect is worthy of consideration."}, {"id": 27094448, "score": 11, "vote": 0, "content": "<p>If you're using this for debugging, and you just want a recursive dump of everything, the accepted answer is unsatisfying because it requires that your classes have good <code>__str__</code> implementations already. If that's not the case, this works much better:</p>\n<pre><code class=\"python\">import json\nprint(json.dumps(YOUR_OBJECT, \n                 default=lambda obj: vars(obj),\n                 indent=1))\n</code></pre>\n", "abstract": "If you're using this for debugging, and you just want a recursive dump of everything, the accepted answer is unsatisfying because it requires that your classes have good __str__ implementations already. If that's not the case, this works much better:"}, {"id": 38629453, "score": 9, "vote": 0, "content": "<p>Try <a href=\"https://github.com/symonsoft/ppretty\" rel=\"noreferrer\">ppretty</a></p>\n<pre><code class=\"python\">from ppretty import ppretty\n\n\nclass A(object):\n    s = 5\n\n    def __init__(self):\n        self._p = 8\n\n    @property\n    def foo(self):\n        return range(10)\n\n\nprint ppretty(A(), show_protected=True, show_static=True, show_properties=True)\n</code></pre>\n<p>Output:</p>\n<pre><code class=\"python\">__main__.A(_p = 8, foo = [0, 1, ..., 8, 9], s = 5)\n</code></pre>\n", "abstract": "Try ppretty Output:"}, {"id": 193827, "score": 7, "vote": 0, "content": "<p>A metaprogramming example <a href=\"http://www.ibm.com/developerworks/linux/library/l-pymeta.html\" rel=\"noreferrer\">Dump object with magic</a>:</p>\n<pre>\n$ cat dump.py\n</pre>\n<pre><code class=\"python\">#!/usr/bin/python\nimport sys\nif len(sys.argv) &gt; 2:\n    module, metaklass  = sys.argv[1:3]\n    m = __import__(module, globals(), locals(), [metaklass])\n    __metaclass__ = getattr(m, metaklass)\n\nclass Data:\n    def __init__(self):\n        self.num = 38\n        self.lst = ['a','b','c']\n        self.str = 'spam'\n    dumps   = lambda self: repr(self)\n    __str__ = lambda self: self.dumps()\n\ndata = Data()\nprint data\n</code></pre>\n<p>Without arguments:</p>\n<pre>\n$ python dump.py\n</pre>\n<pre><code class=\"python\">&lt;__main__.Data instance at 0x00A052D8&gt;\n</code></pre>\n<p>With <a href=\"http://www.gnosis.cx/download/Gnosis_Utils.More/\" rel=\"noreferrer\">Gnosis Utils</a>:</p>\n<pre>\n$ python dump.py gnosis.magic MetaXMLPickler\n</pre>\n<pre><code class=\"python\">&lt;?xml version=\"1.0\"?&gt;\n&lt;!DOCTYPE PyObject SYSTEM \"PyObjects.dtd\"&gt;\n&lt;PyObject module=\"__main__\" class=\"Data\" id=\"11038416\"&gt;\n&lt;attr name=\"lst\" type=\"list\" id=\"11196136\" &gt;\n  &lt;item type=\"string\" value=\"a\" /&gt;\n  &lt;item type=\"string\" value=\"b\" /&gt;\n  &lt;item type=\"string\" value=\"c\" /&gt;\n&lt;/attr&gt;\n&lt;attr name=\"num\" type=\"numeric\" value=\"38\" /&gt;\n&lt;attr name=\"str\" type=\"string\" value=\"spam\" /&gt;\n&lt;/PyObject&gt;\n</code></pre>\n<p>It is a bit outdated but still working.</p>\n", "abstract": "A metaprogramming example Dump object with magic: Without arguments: With Gnosis Utils: It is a bit outdated but still working."}, {"id": 35804583, "score": 6, "vote": 0, "content": "<p>This prints out all the object contents recursively in json or yaml indented format:</p>\n<pre><code class=\"python\">import jsonpickle # pip install jsonpickle\nimport json\nimport yaml # pip install pyyaml\n\nserialized = jsonpickle.encode(obj, max_depth=2) # max_depth is optional\nprint json.dumps(json.loads(serialized), indent=4)\nprint yaml.dump(yaml.load(serialized), indent=4)\n</code></pre>\n", "abstract": "This prints out all the object contents recursively in json or yaml indented format:"}, {"id": 24739571, "score": 5, "vote": 0, "content": "<pre><code class=\"python\">from pprint import pprint\n\ndef print_r(the_object):\n    print (\"CLASS: \", the_object.__class__.__name__, \" (BASE CLASS: \", the_object.__class__.__bases__,\")\")\n    pprint(vars(the_object))\n</code></pre>\n", "abstract": ""}, {"id": 17105170, "score": 4, "vote": 0, "content": "<p>Why not something simple:</p>\n<pre><code class=\"python\">for key,value in obj.__dict__.iteritems():\n    print key,value\n</code></pre>\n", "abstract": "Why not something simple:"}, {"id": 46461051, "score": 4, "vote": 0, "content": "<p>If you want to see all the <em>values</em> in a complex data structure, then do something like:</p>\n<pre><code class=\"python\">from pprint import pprint\npprint(my_var)\n</code></pre>\n<p>Where <em>my_var</em> is your variable of interest. When I used <code>pprint(vars(my_var))</code> I got nothing, and other answers here didn't help or the method looked unnecessarily long. By the way, in my particular case, the code I was inspecting had a dictionary of dictionaries.</p>\n<p>Worth pointing out that with some custom classes you may just end up with an unhelpful <code>&lt;someobject.ExampleClass object at 0x7f739267f400&gt;</code> kind of output. In that case, you might have to implement a <code>__str__</code> method, or try some of the other solutions.</p>\n<p>I also found that in one instance where I got this <code>object</code> type of output, <code>vars()</code> showed me what I wanted. So a better solution to cover both cases would be to try both individually. But using <code>vars()</code> can sometimes throw an exception, for example, <code>TypeError: vars() argument must have __dict__ attribute</code>.</p>\n<p>I'd still like to find something simple that works in all scenarios, without third party libraries.</p>\n", "abstract": "If you want to see all the values in a complex data structure, then do something like: Where my_var is your variable of interest. When I used pprint(vars(my_var)) I got nothing, and other answers here didn't help or the method looked unnecessarily long. By the way, in my particular case, the code I was inspecting had a dictionary of dictionaries. Worth pointing out that with some custom classes you may just end up with an unhelpful <someobject.ExampleClass object at 0x7f739267f400> kind of output. In that case, you might have to implement a __str__ method, or try some of the other solutions. I also found that in one instance where I got this object type of output, vars() showed me what I wanted. So a better solution to cover both cases would be to try both individually. But using vars() can sometimes throw an exception, for example, TypeError: vars() argument must have __dict__ attribute. I'd still like to find something simple that works in all scenarios, without third party libraries."}, {"id": 60033193, "score": 4, "vote": 0, "content": "<p>This works no matter how your varibles are defined within a class, inside __init__ or outside.</p>\n<pre><code class=\"python\">your_obj = YourObj()\nattrs_with_value = {attr: getattr(your_obj, attr) for attr in dir(your_obj)}\n</code></pre>\n", "abstract": "This works no matter how your varibles are defined within a class, inside __init__ or outside."}, {"id": 17372369, "score": 3, "vote": 0, "content": "<p>I was needing to print DEBUG info in some logs and was unable to use pprint because it would break it.  Instead I did this and got virtually the same thing.</p>\n<pre><code class=\"python\">DO = DemoObject()\n\nitemDir = DO.__dict__\n\nfor i in itemDir:\n    print '{0}  :  {1}'.format(i, itemDir[i])\n</code></pre>\n", "abstract": "I was needing to print DEBUG info in some logs and was unable to use pprint because it would break it.  Instead I did this and got virtually the same thing."}, {"id": 24435471, "score": 3, "vote": 0, "content": "<p>To dump \"myObject\":</p>\n<pre><code class=\"python\">from bson import json_util\nimport json\n\nprint(json.dumps(myObject, default=json_util.default, sort_keys=True, indent=4, separators=(',', ': ')))\n</code></pre>\n<p>I tried vars() and dir(); both failed for what I was looking for. vars() didn't work because the object didn't have __dict__ (exceptions.TypeError: vars() argument must have __dict__ attribute). dir() wasn't what I was looking for: it's just a listing of field names, doesn't give the values or the object structure.</p>\n<p>I think json.dumps() would work for most objects without the default=json_util.default, but I had a datetime field in the object so the standard json serializer failed. See <a href=\"https://stackoverflow.com/questions/11875770/how-to-overcome-datetime-datetime-not-json-serializable-in-python\">How to overcome \"datetime.datetime not JSON serializable\" in python?</a></p>\n", "abstract": "To dump \"myObject\": I tried vars() and dir(); both failed for what I was looking for. vars() didn't work because the object didn't have __dict__ (exceptions.TypeError: vars() argument must have __dict__ attribute). dir() wasn't what I was looking for: it's just a listing of field names, doesn't give the values or the object structure. I think json.dumps() would work for most objects without the default=json_util.default, but I had a datetime field in the object so the standard json serializer failed. See How to overcome \"datetime.datetime not JSON serializable\" in python?"}, {"id": 3697940, "score": 2, "vote": 0, "content": "<p><a href=\"https://pymotw.com/3/pprint/index.html\" rel=\"nofollow noreferrer\">pprint</a> contains a \u201cpretty printer\u201d for producing aesthetically pleasing representations of your data structures. The formatter produces representations of data structures that can be parsed correctly by the interpreter, and are also easy for a human to read. The output is kept on a single line, if possible, and indented when split across multiple lines.</p>\n", "abstract": "pprint contains a \u201cpretty printer\u201d for producing aesthetically pleasing representations of your data structures. The formatter produces representations of data structures that can be parsed correctly by the interpreter, and are also easy for a human to read. The output is kept on a single line, if possible, and indented when split across multiple lines."}, {"id": 39535966, "score": 2, "vote": 0, "content": "<p>Just try <a href=\"https://github.com/panyanyany/beeprint\" rel=\"nofollow noreferrer\">beeprint</a>.</p>\n<p>It will help you not only with printing object variables, but beautiful output as well, like this:</p>\n<pre><code class=\"python\">class(NormalClassNewStyle):\n  dicts: {\n  },\n  lists: [],\n  static_props: 1,\n  tupl: (1, 2)\n</code></pre>\n", "abstract": "Just try beeprint. It will help you not only with printing object variables, but beautiful output as well, like this:"}, {"id": 46095449, "score": 2, "vote": 0, "content": "<p>For everybody struggling with </p>\n<ul>\n<li><code>vars()</code> not returning all attributes. </li>\n<li><code>dir()</code> not returning the attributes' values.</li>\n</ul>\n<p>The following code prints <strong>all</strong> attributes of <code>obj</code> with their values:</p>\n<pre><code class=\"python\">for attr in dir(obj):\n        try:\n            print(\"obj.{} = {}\".format(attr, getattr(obj, attr)))\n        except AttributeError:\n            print(\"obj.{} = ?\".format(attr))\n</code></pre>\n", "abstract": "For everybody struggling with  The following code prints all attributes of obj with their values:"}, {"id": 69432736, "score": 2, "vote": 0, "content": "<p>While there are many good answers, here is a 1-liner that can give the attributes AS WELL AS values:</p>\n<pre><code class=\"python\">(str(vars(config)).split(\",\")[1:])\n</code></pre>\n<p>where 'config' is the object in question. I am listing this as a separate answer because I just wanted to simply print the relevant values of the object (excl the __main etc) without using loops or pretty print and didn't find a convenient answer.</p>\n", "abstract": "While there are many good answers, here is a 1-liner that can give the attributes AS WELL AS values: where 'config' is the object in question. I am listing this as a separate answer because I just wanted to simply print the relevant values of the object (excl the __main etc) without using loops or pretty print and didn't find a convenient answer."}, {"id": 70403363, "score": 1, "vote": 0, "content": "<p>vars() seems to show the attributes of this object, but dir() seems to show attributes of parent class(es) as well. You don't usually need to see inherited attributes such as <strong>str</strong>, <strong>doc</strong>. <strong>dict</strong> etc.</p>\n<pre><code class=\"python\">In [1]: class Aaa():\n...:     def __init__(self, name, age):\n...:         self.name = name\n...:         self.age = age\n...:\nIn [2]: class Bbb(Aaa):\n...:     def __init__(self, name, age, job):\n...:         super().__init__(name, age)\n...:         self.job = job\n...:\nIn [3]: a = Aaa('Pullayya',42)\n\nIn [4]: b = Bbb('Yellayya',41,'Cop')\n\nIn [5]: vars(a)\nOut[5]: {'name': 'Pullayya', 'age': 42}\n\nIn [6]: vars(b)\nOut[6]: {'name': 'Yellayya', 'age': 41, 'job': 'Cop'}\n\nIn [7]: dir(a)\nOut[7]:\n['__class__',\n '__delattr__',\n '__dict__',\n '__dir__',\n '__doc__',\n '__eq__',\n ...\n ...\n '__subclasshook__',\n '__weakref__',\n 'age',\n 'name']\n</code></pre>\n", "abstract": "vars() seems to show the attributes of this object, but dir() seems to show attributes of parent class(es) as well. You don't usually need to see inherited attributes such as str, doc. dict etc."}, {"id": 35849201, "score": 0, "vote": 0, "content": "<p>You can try the Flask Debug Toolbar.<br/>\n<a href=\"https://pypi.python.org/pypi/Flask-DebugToolbar\" rel=\"nofollow\">https://pypi.python.org/pypi/Flask-DebugToolbar</a></p>\n<pre><code class=\"python\">from flask import Flask\nfrom flask_debugtoolbar import DebugToolbarExtension\n\napp = Flask(__name__)\n\n# the toolbar is only enabled in debug mode:\napp.debug = True\n\n# set a 'SECRET_KEY' to enable the Flask session cookies\napp.config['SECRET_KEY'] = '&lt;replace with a secret key&gt;'\n\ntoolbar = DebugToolbarExtension(app)\n</code></pre>\n", "abstract": "You can try the Flask Debug Toolbar.\nhttps://pypi.python.org/pypi/Flask-DebugToolbar"}, {"id": 68827085, "score": 0, "vote": 0, "content": "<p>From the <a href=\"https://stackoverflow.com/a/59128615/1779027\">answer</a>, it can be slightly modified to get only 'Attributes' of an object as below:</p>\n<pre><code class=\"python\">def getAttributes(obj):\n    from pprint import pprint\n    from inspect import getmembers\n    from types import FunctionType\n    \n    def attributes(obj):\n        disallowed_names = {\n          name for name, value in getmembers(type(obj)) \n            if isinstance(value, FunctionType)}\n        return {\n          name for name in dir(obj) \n            if name[0] != '_' and name not in disallowed_names and hasattr(obj, name)}\n    pprint(attributes(obj))\n</code></pre>\n<p>It is helpful when adding this function temporary and can be removed without many changes in existing source code</p>\n", "abstract": "From the answer, it can be slightly modified to get only 'Attributes' of an object as below: It is helpful when adding this function temporary and can be removed without many changes in existing source code"}, {"id": 69186290, "score": 0, "vote": 0, "content": "<p>This project modifies pprint to show all object field values, it ignores he objects <code>__repr__</code> member function, it also recurses into nested objects. It works with python3, see <a href=\"https://github.com/MoserMichael/pprintex\" rel=\"nofollow noreferrer\">https://github.com/MoserMichael/pprintex</a>\nYou can install it via pip: <code>pip install printex</code></p>\n", "abstract": "This project modifies pprint to show all object field values, it ignores he objects __repr__ member function, it also recurses into nested objects. It works with python3, see https://github.com/MoserMichael/pprintex\nYou can install it via pip: pip install printex"}, {"id": 43783454, "score": -1, "vote": 0, "content": "<p>I like working with python object built-in types <a href=\"https://docs.python.org/2/library/stdtypes.html?highlight=keys#dict.keys\" rel=\"nofollow noreferrer\">keys</a> or <a href=\"https://docs.python.org/2/library/stdtypes.html?highlight=keys#dict.values\" rel=\"nofollow noreferrer\">values</a>.  </p>\n<p>For attributes regardless they are methods or variables: </p>\n<pre><code class=\"python\">o.keys()\n</code></pre>\n<p>For values of those attributes:</p>\n<pre><code class=\"python\">o.values()\n</code></pre>\n", "abstract": "I like working with python object built-in types keys or values.   For attributes regardless they are methods or variables:  For values of those attributes:"}]}, {"link": "https://stackoverflow.com/questions/7696924/how-do-i-create-multiline-comments-in-python", "question": {"id": "7696924", "title": "How do I create multiline comments in Python?", "content": "<p>How do I make multi-line comments? Most languages have block comment symbols like:</p>\n<pre><code class=\"python\">/*\n\n*/\n</code></pre>\n", "abstract": "How do I make multi-line comments? Most languages have block comment symbols like:"}, "answers": [{"id": 7696966, "score": 2083, "vote": 0, "content": "<p>You can use triple-quoted strings. When they're not a docstring (the first thing in a class/function/module), they are ignored.</p>\n<pre><code class=\"python\">'''\nThis is a multiline\ncomment.\n'''\n</code></pre>\n<p>(Make sure to indent the leading <code>'''</code> appropriately to avoid an <code>IndentationError</code>.)</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Guido_van_Rossum\" rel=\"noreferrer\">Guido van Rossum</a> (creator of Python) <a href=\"https://twitter.com/gvanrossum/status/112670605505077248\" rel=\"noreferrer\">tweeted this</a> as a \"pro tip\".</p>\n<p>However, Python's style guide, PEP8, <a href=\"http://www.python.org/dev/peps/pep-0008/#block-comments\" rel=\"noreferrer\">favors using consecutive single-line comments</a>, like this:</p>\n<pre><code class=\"python\"># This is a multiline\n# comment.\n</code></pre>\n<p>...and this is also what you'll find in many projects. Text editors usually have a shortcut to do this easily.</p>\n", "abstract": "You can use triple-quoted strings. When they're not a docstring (the first thing in a class/function/module), they are ignored. (Make sure to indent the leading ''' appropriately to avoid an IndentationError.) Guido van Rossum (creator of Python) tweeted this as a \"pro tip\". However, Python's style guide, PEP8, favors using consecutive single-line comments, like this: ...and this is also what you'll find in many projects. Text editors usually have a shortcut to do this easily."}, {"id": 7696949, "score": 97, "vote": 0, "content": "<p>Python does have a <a href=\"https://stackoverflow.com/questions/7696924/is-there-a-way-to-create-multiline-comments-in-python/7696966#7696966\">multiline string/comment syntax</a> in the sense that unless used as docstrings, <a href=\"https://twitter.com/gvanrossum/status/112670605505077248\" rel=\"noreferrer\">multiline strings <em>generate no bytecode</em></a> -- just like <code>#</code>-prepended comments. In effect, it acts exactly like a comment.</p>\n<p>On the other hand, if you say this behavior must be documented in the official documentation to be a true comment syntax, then yes, you would be right to say it is not guaranteed as part of the language specification.</p>\n<p>In any case, your text editor should also be able to easily comment-out a selected region (by placing a <code>#</code> in front of each line individually). If not, switch to a text editor that does.</p>\n<p>Programming in Python without certain text editing features can be a painful experience. Finding the right editor (and knowing how to use it) can make a big difference in how the Python programming experience is perceived.</p>\n<p>Not only should the text editor be able to comment-out selected regions, it should also be able to shift blocks of code to the left and right easily, and it should automatically place the cursor at the current indentation level when you press <kbd>Enter</kbd>. Code folding can also be useful.</p>\n<hr/>\n<p>To protect against link decay, here is the content of <a href=\"https://twitter.com/gvanrossum/status/112670605505077248\" rel=\"noreferrer\">Guido van Rossum's tweet</a>:</p>\n<blockquote>\n<p><a href=\"https://twitter.com/BSUCSClub\" rel=\"noreferrer\">@BSUCSClub</a> Python tip: You can use multi-line strings as multi-line comments. Unless used as docstrings, they generate no code! :-)</p>\n</blockquote>\n", "abstract": "Python does have a multiline string/comment syntax in the sense that unless used as docstrings, multiline strings generate no bytecode -- just like #-prepended comments. In effect, it acts exactly like a comment. On the other hand, if you say this behavior must be documented in the official documentation to be a true comment syntax, then yes, you would be right to say it is not guaranteed as part of the language specification. In any case, your text editor should also be able to easily comment-out a selected region (by placing a # in front of each line individually). If not, switch to a text editor that does. Programming in Python without certain text editing features can be a painful experience. Finding the right editor (and knowing how to use it) can make a big difference in how the Python programming experience is perceived. Not only should the text editor be able to comment-out selected regions, it should also be able to shift blocks of code to the left and right easily, and it should automatically place the cursor at the current indentation level when you press Enter. Code folding can also be useful. To protect against link decay, here is the content of Guido van Rossum's tweet: @BSUCSClub Python tip: You can use multi-line strings as multi-line comments. Unless used as docstrings, they generate no code! :-)"}, {"id": 38100436, "score": 66, "vote": 0, "content": "<p>From the accepted answer...</p>\n<blockquote>\n<p>You can use triple-quoted strings. When they're not a docstring (first thing in a class/function/module), they are ignored.</p>\n</blockquote>\n<p>This is simply not true. Unlike comments, triple-quoted strings are still parsed and must be syntactically valid, regardless of where they appear in the source code.</p>\n<p>If you try to run this code...</p>\n<pre><code class=\"python\">def parse_token(token):\n    \"\"\"\n    This function parses a token.\n    TODO: write a decent docstring :-)\n    \"\"\"\n\n    if token == '\\\\and':\n        do_something()\n\n    elif token == '\\\\or':\n        do_something_else()\n\n    elif token == '\\\\xor':\n        '''\n        Note that we still need to provide support for the deprecated\n        token \\xor. Hopefully we can drop support in libfoo 2.0.\n        '''\n        do_a_different_thing()\n\n    else:\n        raise ValueError\n</code></pre>\n<p>You'll get either...</p>\n<pre><code class=\"python\">ValueError: invalid \\x escape\n</code></pre>\n<p>...on Python 2.x or...</p>\n<pre><code class=\"python\">SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 79-80: truncated \\xXX escape\n</code></pre>\n<p>...on Python 3.x.</p>\n<p>The only way to do multi-line comments which are ignored by the parser is...</p>\n<pre><code class=\"python\">elif token == '\\\\xor':\n    # Note that we still need to provide support for the deprecated\n    # token \\xor. Hopefully we can drop support in libfoo 2.0.\n    do_a_different_thing()\n</code></pre>\n", "abstract": "From the accepted answer... You can use triple-quoted strings. When they're not a docstring (first thing in a class/function/module), they are ignored. This is simply not true. Unlike comments, triple-quoted strings are still parsed and must be syntactically valid, regardless of where they appear in the source code. If you try to run this code... You'll get either... ...on Python 2.x or... ...on Python 3.x. The only way to do multi-line comments which are ignored by the parser is..."}, {"id": 28543125, "score": 41, "vote": 0, "content": "<p>In Python 2.7 the multiline comment is:</p>\n<pre><code class=\"python\">\"\"\"\nThis is a\nmultilline comment\n\"\"\"\n</code></pre>\n<p>In case you are inside a class you should tab it properly.</p>\n<p>For example:</p>\n<pre><code class=\"python\">class weather2():\n   \"\"\"\n   def getStatus_code(self, url):\n       world.url = url\n       result = requests.get(url)\n       return result.status_code\n   \"\"\"\n</code></pre>\n", "abstract": "In Python 2.7 the multiline comment is: In case you are inside a class you should tab it properly. For example:"}, {"id": 7696951, "score": 29, "vote": 0, "content": "<p>AFAIK, Python doesn't have block comments. For commenting individual lines, you can use the <code>#</code> character.</p>\n<p>If you are using <a href=\"https://en.wikipedia.org/wiki/Notepad++\" rel=\"noreferrer\">Notepad++</a>, <a href=\"https://stackoverflow.com/questions/1022261/commenting-code-in-notepad\">there is a shortcut for block commenting</a>. I'm sure others like <a href=\"http://en.wikipedia.org/wiki/Vim_%28text_editor%29#Interface\" rel=\"noreferrer\">gVim</a> and <a href=\"http://en.wikipedia.org/wiki/Emacs\" rel=\"noreferrer\">Emacs</a> have similar features.</p>\n", "abstract": "AFAIK, Python doesn't have block comments. For commenting individual lines, you can use the # character. If you are using Notepad++, there is a shortcut for block commenting. I'm sure others like gVim and Emacs have similar features."}, {"id": 7696947, "score": 16, "vote": 0, "content": "<p>I think it doesn't, except that a multiline string isn't processed. However, most, if not all Python IDEs have a shortkey for 'commenting out' multiple lines of code.</p>\n", "abstract": "I think it doesn't, except that a multiline string isn't processed. However, most, if not all Python IDEs have a shortkey for 'commenting out' multiple lines of code."}, {"id": 52678915, "score": 15, "vote": 0, "content": "<p>There is no such feature as a multi-line comment. <code>#</code> is the only way to comment a single line of code.\nMany of you answered ''' a comment ''' this as their solution.</p>\n<p>It seems to work, but internally <code>'''</code> in Python takes the lines enclosed as a regular strings which the interpreter does not ignores like comment using <code>#</code>.</p>\n<p><a href=\"https://www.python.org/dev/peps/pep-0008/#block-comments\" rel=\"noreferrer\">Check the official documentation here</a></p>\n", "abstract": "There is no such feature as a multi-line comment. # is the only way to comment a single line of code.\nMany of you answered ''' a comment ''' this as their solution. It seems to work, but internally ''' in Python takes the lines enclosed as a regular strings which the interpreter does not ignores like comment using #. Check the official documentation here"}, {"id": 48548892, "score": 14, "vote": 0, "content": "<p>If you put a comment in</p>\n<pre><code class=\"python\">\"\"\"\nlong comment here\n\"\"\"\n</code></pre>\n<p>in the middle of a script, Python/linters won't recognize that. Folding will be messed up, as the above comment is not part of the standard recommendations. It's better to use</p>\n<pre><code class=\"python\"># Long comment\n# here.\n</code></pre>\n<p>If you use <a href=\"https://en.wikipedia.org/wiki/Vim_%28text_editor%29\" rel=\"nofollow noreferrer\">Vim</a>, you can plugins like <a href=\"https://github.com/tpope/vim-commentary\" rel=\"nofollow noreferrer\">commentary.vim</a>, to automatically comment out long lines of comments by pressing <code>Vjgcc</code>. Where <code>Vj</code> selects two lines of code, and <code>gcc</code> comments them out.</p>\n<p>If you don\u2019t want to use plugins like the above you can use search and replace like</p>\n<pre><code class=\"python\">:.,.+1s/^/# /g\n</code></pre>\n<p>This will replace the first character on the current and next line with <code>#</code>.</p>\n", "abstract": "If you put a comment in in the middle of a script, Python/linters won't recognize that. Folding will be messed up, as the above comment is not part of the standard recommendations. It's better to use If you use Vim, you can plugins like commentary.vim, to automatically comment out long lines of comments by pressing Vjgcc. Where Vj selects two lines of code, and gcc comments them out. If you don\u2019t want to use plugins like the above you can use search and replace like This will replace the first character on the current and next line with #."}, {"id": 57702803, "score": 9, "vote": 0, "content": "<p><a href=\"https://code.visualstudio.com\" rel=\"nofollow noreferrer\">Visual Studio Code</a> universal official multi-line comment toggle. Similar to Xcode shortcut.\n<br/></p>\n<p>macOS: Select code-block and then <kbd>\u2318</kbd>+<kbd>/</kbd>\n<br/></p>\n<p>Windows: Select code-block and then <kbd>Ctrl</kbd>+<kbd>/</kbd></p>\n", "abstract": "Visual Studio Code universal official multi-line comment toggle. Similar to Xcode shortcut.\n macOS: Select code-block and then \u2318+/\n Windows: Select code-block and then Ctrl+/"}, {"id": 51065700, "score": 7, "vote": 0, "content": "<p>Unfortunately stringification can <strong>not always</strong> be used as commenting out! So it is safer to stick to the standard prepending each line with a <code>#</code>.</p>\n<p>Here is an example:</p>\n<pre><code class=\"python\">test1 = [1, 2, 3, 4,]       # test1 contains 4 integers\n\ntest2 = [1, 2, '''3, 4,'''] # test2 contains 2 integers **and the string** '3, 4,'\n</code></pre>\n", "abstract": "Unfortunately stringification can not always be used as commenting out! So it is safer to stick to the standard prepending each line with a #. Here is an example:"}, {"id": 58157662, "score": 7, "vote": 0, "content": "<p>I would advise against using <code>\"\"\"</code> for multi line comments!</p>\n<p>Here is a simple example to highlight what might be considered an unexpected behavior:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">print('{}\\n{}'.format(\n    'I am a string',\n    \"\"\"\n    Some people consider me a\n    multi-line comment, but\n    \"\"\"\n    'clearly I am also a string'\n    )\n)\n</code></pre>\n<p>Now have a look at the output:</p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">I am a string\n\n    Some people consider me a\n    multi-line comment, but\n    clearly I am also a string\n</code></pre>\n<p>The multi line string was not treated as comment, but it was concatenated with <code>'clearly I'm also a string'</code> to form a single string.</p>\n<p><strong>If you want to comment multiple lines do so according to <a href=\"https://legacy.python.org/dev/peps/pep-0008/#block-comments\" rel=\"noreferrer\">PEP\u00a08</a> guidelines</strong>:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">print('{}\\n{}'.format(\n    'I am a string',\n    # Some people consider me a\n    # multi-line comment, but\n    'clearly I am also a string'\n    )\n)\n</code></pre>\n<p>Output:</p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">I am a string\nclearly I am also a string\n</code></pre>\n", "abstract": "I would advise against using \"\"\" for multi line comments! Here is a simple example to highlight what might be considered an unexpected behavior: Now have a look at the output: The multi line string was not treated as comment, but it was concatenated with 'clearly I'm also a string' to form a single string. If you want to comment multiple lines do so according to PEP\u00a08 guidelines: Output:"}, {"id": 46232212, "score": 5, "vote": 0, "content": "<p>Well, you can try this (when running the quoted, the input to the first question should quoted with <code>'</code>):</p>\n<pre><code class=\"python\">\"\"\"\nprint(\"What's your name? \")\nmyName = input()\nprint(\"It's nice to meet you \" + myName)\nprint(\"Number of characters is \")\nprint(len(myName))\nage = input(\"What's your age? \")\nprint(\"You will be \" + str(int(age)+1) + \" next year.\")\n\n\"\"\"\na = input()\nprint(a)\nprint(a*5)\n</code></pre>\n<p>Whatever enclosed between <code>\"\"\"</code> will be commented.</p>\n<p>If you are looking for single-line comments then it's <code>#</code>.</p>\n", "abstract": "Well, you can try this (when running the quoted, the input to the first question should quoted with '): Whatever enclosed between \"\"\" will be commented. If you are looking for single-line comments then it's #."}, {"id": 52092656, "score": 4, "vote": 0, "content": "<p>Multiline comment in Python:</p>\n<p>For me, both ''' and \"\"\" worked.</p>\n<p>Example:</p>\n<pre><code class=\"python\">a = 10\nb = 20\nc = a+b\n'''\nprint ('hello')\n'''\nprint ('Addition is: ', a+b)\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"python\">a = 10\nb = 20\nc = a+b\n\"\"\"\nprint('hello')\n\"\"\"\nprint('Addition is: ', a+b)\n</code></pre>\n", "abstract": "Multiline comment in Python: For me, both ''' and \"\"\" worked. Example: Example:"}, {"id": 43920192, "score": 3, "vote": 0, "content": "<p>On Python 2.7.13:</p>\n<p>Single:</p>\n<pre><code class=\"python\">\"A sample single line comment \"\n</code></pre>\n<p>Multiline:</p>\n<pre><code class=\"python\">\"\"\"\nA sample\nmultiline comment\non PyCharm\n\"\"\"\n</code></pre>\n", "abstract": "On Python 2.7.13: Single: Multiline:"}, {"id": 53789520, "score": 3, "vote": 0, "content": "<p>The inline comments in Python starts with a hash character.</p>\n<pre><code class=\"python\">hello = \"Hello!\" # This is an inline comment\nprint(hello)\n</code></pre>\n<blockquote>\n<p>Hello!</p>\n</blockquote>\n<p>Note that a hash character within a string literal is just a hash character.</p>\n<pre><code class=\"python\">dial = \"Dial #100 to make an emergency call.\"\nprint(dial)\n</code></pre>\n<blockquote>\n<p>Dial #100 to make an emergency call.</p>\n</blockquote>\n<p>A hash character can also be used for single or multiple lines comments.</p>\n<pre><code class=\"python\">hello = \"Hello\"\nworld = \"World\"\n# First print hello\n# And print world\nprint(hello)\nprint(world)\n</code></pre>\n<blockquote>\n<p>Hello</p>\n<p>World</p>\n</blockquote>\n<p>Enclose the text with triple double quotes to support docstring.</p>\n<pre><code class=\"python\">def say_hello(name):\n    \"\"\"\n    This is docstring comment and\n    it's support multi line.\n    :param name it's your name\n    :type name str\n    \"\"\"\n    return \"Hello \" + name + '!'\n\n\nprint(say_hello(\"John\"))\n</code></pre>\n<blockquote>\n<p>Hello John!</p>\n</blockquote>\n<p>Enclose the text with triple single quotes for block comments.</p>\n<pre><code class=\"python\">'''\nI don't care the parameters and\ndocstrings here.\n'''\n</code></pre>\n", "abstract": "The inline comments in Python starts with a hash character. Hello! Note that a hash character within a string literal is just a hash character. Dial #100 to make an emergency call. A hash character can also be used for single or multiple lines comments. Hello World Enclose the text with triple double quotes to support docstring. Hello John! Enclose the text with triple single quotes for block comments."}, {"id": 63797321, "score": 3, "vote": 0, "content": "<p>If you write a comment in a line with a code, you must write a comment, leaving 2 spaces before the # sign and 1 space before the # sign</p>\n<pre><code class=\"python\">print(\"Hello World\")  # printing\n</code></pre>\n<p>If you write a comment on a new line, you must write a comment, leaving 1 space kn in the # sign</p>\n<pre><code class=\"python\"># single line comment\n</code></pre>\n<p>To write comments longer than 1 line, you use 3 quotes</p>\n<pre><code class=\"python\">\"\"\"\nThis is a comment\nwritten in\nmore than just one line\n\"\"\"\n</code></pre>\n", "abstract": "If you write a comment in a line with a code, you must write a comment, leaving 2 spaces before the # sign and 1 space before the # sign If you write a comment on a new line, you must write a comment, leaving 1 space kn in the # sign To write comments longer than 1 line, you use 3 quotes"}, {"id": 55157400, "score": 2, "vote": 0, "content": "<p>Using PyCharm IDE.</p>\n<blockquote>\n<p>You can <strong><code>comment</code></strong> and <strong><code>uncomment</code></strong> lines of code using <strong>Ctrl+/.\n  Ctrl+/</strong> comments or uncomments the current line or several selected lines with single line comments <strong><code>({# in Django templates, or # in Python scripts)</code></strong>.\n  <strong><code>Pressing Ctrl+Shift+/</code></strong> for a selected block of source code in a Django template surrounds the block with <strong><code>{% comment %} and {% endcomment %}</code></strong> tags.</p>\n<hr/>\n</blockquote>\n<pre><code class=\"python\">n = 5\nwhile n &gt; 0:\n    n -= 1\n    if n == 2:\n        break\n    print(n)\n\nprint(\"Loop ended.\")\n</code></pre>\n<p><em>Select all lines then press <strong><kbd>Ctrl + /</kbd></strong></em></p>\n<hr/>\n<pre><code class=\"python\"># n = 5\n# while n &gt; 0:\n#     n -= 1\n#     if n == 2:\n#         break\n#     print(n)\n\n# print(\"Loop ended.\")\n</code></pre>\n", "abstract": "Using PyCharm IDE. You can comment and uncomment lines of code using Ctrl+/.\n  Ctrl+/ comments or uncomments the current line or several selected lines with single line comments ({# in Django templates, or # in Python scripts).\n  Pressing Ctrl+Shift+/ for a selected block of source code in a Django template surrounds the block with {% comment %} and {% endcomment %} tags. Select all lines then press Ctrl + /"}, {"id": 56544002, "score": 2, "vote": 0, "content": "<p>Yes, it is fine to use both:</p>\n<pre><code class=\"python\">'''\nComments\n'''\n</code></pre>\n<p>and</p>\n<pre><code class=\"python\">\"\"\"\nComments\n\"\"\"\n</code></pre>\n<p>But, the only thing you all need to remember while running in an IDE, is you have to 'RUN' the entire file to be accepted as multiple lines codes. Line by line 'RUN' won't work properly and will show an error.</p>\n", "abstract": "Yes, it is fine to use both: and But, the only thing you all need to remember while running in an IDE, is you have to 'RUN' the entire file to be accepted as multiple lines codes. Line by line 'RUN' won't work properly and will show an error."}, {"id": 58750967, "score": 1, "vote": 0, "content": "<p>Among other answers, I find the easiest way is to use the IDE comment functions which use the Python comment support of <code>#</code>.</p>\n<p>I am using Anaconda Spyder and it has:</p>\n<ul>\n<li><kbd>Ctrl</kbd> + <kbd>1</kbd> - Comment/uncomment</li>\n<li><kbd>Ctrl</kbd> + <kbd>4</kbd> - Comment a block of code</li>\n<li><kbd>Ctrl</kbd> + <kbd>5</kbd> - Uncomment a block of code</li>\n</ul>\n<p>It would comment/uncomment a single/multi line/s of code with <code>#</code>.</p>\n<p>I find it the easiest.</p>\n<p>For example, a block comment:</p>\n<pre><code class=\"python\"># =============================================================================\n#     Sample Commented code in spyder\n#  Hello, World!\n# =============================================================================\n</code></pre>\n", "abstract": "Among other answers, I find the easiest way is to use the IDE comment functions which use the Python comment support of #. I am using Anaconda Spyder and it has: It would comment/uncomment a single/multi line/s of code with #. I find it the easiest. For example, a block comment:"}, {"id": 73431575, "score": 1, "vote": 0, "content": "<p>This can be done in Vim text editor.</p>\n<p>Go to the beginning of the first line in the comment area.</p>\n<p>Press Ctrl+V to enter the visual mode.</p>\n<p>Use arrow keys to select all the lines to be commented.</p>\n<p>Press Shift+I.</p>\n<p>Press # (or Shift+3).</p>\n<p>Press Esc.</p>\n", "abstract": "This can be done in Vim text editor. Go to the beginning of the first line in the comment area. Press Ctrl+V to enter the visual mode. Use arrow keys to select all the lines to be commented. Press Shift+I. Press # (or Shift+3). Press Esc."}, {"id": 53702619, "score": 0, "vote": 0, "content": "<p>A multiline comment doesn't actually exist in Python. The below example consists of an unassigned string, which is validated by Python for syntactical errors.</p>\n<p>A few text editors, like <a href=\"https://en.wikipedia.org/wiki/Notepad%2B%2B\" rel=\"nofollow noreferrer\">Notepad++</a>, provide us shortcuts to comment out a written piece of code or words.</p>\n<pre><code class=\"python\">def foo():\n    \"This is a doc string.\"\n    # A single line comment\n    \"\"\"\n       This\n       is a multiline\n       comment/String\n    \"\"\"\n    \"\"\"\n    print \"This is a sample foo function\"\n    print \"This function has no arguments\"\n    \"\"\"\n    return True\n</code></pre>\n<p>Also, <kbd>Ctrl</kbd> + <kbd>K</kbd> is a shortcut in Notepad++ to block comment. It adds a <code>#</code> in front of every line under the selection. <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>K</kbd> is for block uncomment.</p>\n", "abstract": "A multiline comment doesn't actually exist in Python. The below example consists of an unassigned string, which is validated by Python for syntactical errors. A few text editors, like Notepad++, provide us shortcuts to comment out a written piece of code or words. Also, Ctrl + K is a shortcut in Notepad++ to block comment. It adds a # in front of every line under the selection. Ctrl + Shift + K is for block uncomment."}, {"id": 54306885, "score": 0, "vote": 0, "content": "<p>Select the lines that you want to comment and then use <kbd>Ctrl</kbd> + <kbd>?</kbd> to comment or uncomment the Python code in the <a href=\"https://en.wikipedia.org/wiki/Sublime_Text\" rel=\"nofollow noreferrer\">Sublime Text</a> editor.</p>\n<p>For single line you can use <kbd>Shift</kbd> + <kbd>#</kbd>.</p>\n", "abstract": "Select the lines that you want to comment and then use Ctrl + ? to comment or uncomment the Python code in the Sublime Text editor. For single line you can use Shift + #."}, {"id": 56928108, "score": 0, "vote": 0, "content": "<p>For commenting out multiple lines of code in Python is to simply use a <code>#</code> single-line comment on every line:</p>\n<pre><code class=\"python\"># This is comment 1\n# This is comment 2 \n# This is comment 3\n</code></pre>\n<p>For writing \u201cproper\u201d multi-line comments in Python is to use multi-line strings with the <code>\"\"\"</code> syntax\nPython has the documentation strings (or docstrings) feature. It gives programmers an easy way of adding quick notes with every Python module, function, class, and method.</p>\n<pre><code class=\"python\">'''\nThis is\nmultiline\ncomment\n'''\n</code></pre>\n<p>Also, mention that you can access docstring by a class object like this</p>\n<pre><code class=\"python\">myobj.__doc__\n</code></pre>\n", "abstract": "For commenting out multiple lines of code in Python is to simply use a # single-line comment on every line: For writing \u201cproper\u201d multi-line comments in Python is to use multi-line strings with the \"\"\" syntax\nPython has the documentation strings (or docstrings) feature. It gives programmers an easy way of adding quick notes with every Python module, function, class, and method. Also, mention that you can access docstring by a class object like this"}, {"id": 59846886, "score": 0, "vote": 0, "content": "<p>You can use the following. This is called DockString.</p>\n<pre><code class=\"python\">def my_function(arg1):\n    \"\"\"\n    Summary line.\n    Extended description of function.\n    Parameters:\n    arg1 (int): Description of arg1\n    Returns:\n    int: Description of return value\n    \"\"\"\n    return arg1\n\nprint my_function.__doc__\n</code></pre>\n", "abstract": "You can use the following. This is called DockString."}, {"id": 72644803, "score": 0, "vote": 0, "content": "<p>Yes, you can simply use</p>\n<pre><code class=\"python\">'''\nMultiline!\n(?)\n'''\n</code></pre>\n<p>or</p>\n<pre><code class=\"python\">\"\"\"\nHello\nWorld!\n\"\"\"\n</code></pre>\n<p><strong>BONUS:</strong> It's a little bit harder, but it's safer to use in older versions, <code>print</code> functions or GUIs:</p>\n<pre><code class=\"python\"># This is also\n# a multiline comment.\n</code></pre>\n<p>For this one, you can select the text you want to comment and press <code>Ctrl</code> <code>/</code> (or <code>\u2318</code> <code>/</code>), in <em>PyCharm</em> and <em>VS Code</em>.</p>\n<p>But you can edit them. For example, you can change the shortcut from <code>Ctrl</code> <code>/</code>\nto <code>Ctrl</code> <code>Shift</code> <code>C</code>.</p>\n<p><strong><strong>WARNING!</strong></strong></p>\n<ol>\n<li>Be careful, don't overwrite other shortcuts!</li>\n<li>Comments have to be correctly indented!</li>\n</ol>\n<p>Hope this answer helped. Good luck next time when you'll write other answers!</p>\n", "abstract": "Yes, you can simply use or BONUS: It's a little bit harder, but it's safer to use in older versions, print functions or GUIs: For this one, you can select the text you want to comment and press Ctrl / (or \u2318 /), in PyCharm and VS Code. But you can edit them. For example, you can change the shortcut from Ctrl /\nto Ctrl Shift C. WARNING! Hope this answer helped. Good luck next time when you'll write other answers!"}, {"id": 73344728, "score": 0, "vote": 0, "content": "<p>in windows: you can also select the text or code chunks and press <code>ctr + /</code> and do the same if you want to remove the comments.\nin mac: it should be <code>comment + /</code></p>\n", "abstract": "in windows: you can also select the text or code chunks and press ctr + / and do the same if you want to remove the comments.\nin mac: it should be comment + /"}, {"id": 73830314, "score": 0, "vote": 0, "content": "<p>I read about all of the drawbacks of the various ways of doing this, and I came up with this way, in an attempt to check all the boxes:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">block_comment_style = '#[]#'\n'''#[\nclass ExampleEventSource():\n    def __init__(self):\n        # create the event object inside raising class\n        self.on_thing_happening = Event()\n\n    def doing_something(self):\n        # raise the event inside the raising class\n        self.on_thing_happening()        \n        \n        \nclass ExampleEventHandlingClass():\n    def __init__(self):\n        self.event_generating_thing = ExampleEventSource()\n        # add event handler in consuming class\n        event_generating_thing.on_thing_happening += my_event_handler\n        \n    def my_event_handler(self):\n        print('handle the event')\n]#'''\n\n\nclass Event():\n \n    def __init__(self):\n        self.__eventhandlers = []\n \n    def __iadd__(self, handler):\n        self.__eventhandlers.append(handler)\n        return self\n \n    def __isub__(self, handler):\n        self.__eventhandlers.remove(handler)\n        return self\n \n    def __call__(self, *args, **keywargs):\n        for eventhandler in self.__eventhandlers:\n            eventhandler(*args, **keywargs)\n</code></pre>\n<p><strong>Pros</strong></p>\n<ol>\n<li>It is obvious to any other programmer this is a comment. It's self-descriptive.</li>\n<li>It compiles</li>\n<li>It doesn't show up as a doc comment in <code>help()</code></li>\n<li>It can be at the top of the module if desired</li>\n<li>It can be automated with a macro.</li>\n<li>[The comment] is not part of the code. It doesn't end up in the <code>pyc</code>. (Except the one line of code that enables pros #1 and #4)</li>\n<li>If multi-line comment syntax was ever added to Python, the code files could be fixed with find and replace. Simply using <code>'''</code> doesn't have this advantage.</li>\n</ol>\n<p><strong>Cons</strong></p>\n<ol>\n<li>It's hard to remember. It's a lot of typing. This con can be eliminated with a macro.</li>\n<li>It might confuse newbies into thinking this is the only way to do block comments. That can be a pro, just depends on your perspective. It might make newbies think the line of code is magically connected to the comment \"working\".</li>\n<li>It doesn't colorize as a comment. But then again, none of the answers that actually address the spirit of the OP's question would.</li>\n<li>It's not the official way, so <code>Pylint</code> might complain about it. I don't know. Maybe; maybe not.</li>\n</ol>\n<p>Here's an attempt at the VS Code macro, although I haven't tested it yet:</p>\n<pre class=\"lang-json prettyprint-override\"><code class=\"python\">{\n    \"key\": \"ctrl+shift+/\",\n    \"command\": \"editor.action.insertSnippet\",\n    \"when\": \"editorHasSelection\"\n    \"args\": {\n        \"snippet\": \"block_comment_style = '#[]#'\\n'''#[{TM_SELECTED_TEXT}]#'''\"\n    }\n}\n</code></pre>\n", "abstract": "I read about all of the drawbacks of the various ways of doing this, and I came up with this way, in an attempt to check all the boxes: Pros Cons Here's an attempt at the VS Code macro, although I haven't tested it yet:"}]}, {"link": "https://stackoverflow.com/questions/7961363/removing-duplicates-in-lists", "question": {"id": "7961363", "title": "Removing duplicates in lists", "content": "<p>Pretty much I need to write a program to check if a list has any duplicates and if it does it removes them and returns a new list with the items that weren't duplicated/removed. This is what I have but to be honest I do not know what to do.</p>\n<pre><code class=\"python\">def remove_duplicates():\n    t = ['a', 'b', 'c', 'd']\n    t2 = ['a', 'c', 'd']\n    for t in t2:\n        t.append(t.remove())\n    return t\n</code></pre>\n", "abstract": "Pretty much I need to write a program to check if a list has any duplicates and if it does it removes them and returns a new list with the items that weren't duplicated/removed. This is what I have but to be honest I do not know what to do."}, "answers": [{"id": 7961390, "score": 2121, "vote": 0, "content": "<p>The common approach to get a unique collection of items is to use a <a href=\"http://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset\" rel=\"noreferrer\"><code>set</code></a>. Sets are <em>unordered</em> collections of <em>distinct</em> objects. To create a set from any iterable, you can simply pass it to the built-in <a href=\"http://docs.python.org/3/library/functions.html#func-set\" rel=\"noreferrer\"><code>set()</code></a> function. If you later need a real list again, you can similarly pass the set to the <a href=\"http://docs.python.org/3/library/functions.html#func-list\" rel=\"noreferrer\"><code>list()</code></a> function.</p>\n<p>The following example should cover whatever you are trying to do:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; t = [1, 2, 3, 1, 2, 3, 5, 6, 7, 8]\n&gt;&gt;&gt; list(set(t))\n[1, 2, 3, 5, 6, 7, 8]\n&gt;&gt;&gt; s = [1, 2, 3]\n&gt;&gt;&gt; list(set(t) - set(s))\n[8, 5, 6, 7]\n</code></pre>\n<p>As you can see from the example result, <em>the original order is not maintained</em>. As mentioned above, sets themselves are unordered collections, so the order is lost. When converting a set back to a list, an arbitrary order is created.</p>\n<h3>Maintaining order</h3>\n<p>If order is important to you, then you will have to use a different mechanism. A very common solution for this is to rely on <a href=\"https://docs.python.org/3/library/collections.html#collections.OrderedDict\" rel=\"noreferrer\"><code>OrderedDict</code></a> to keep the order of keys during insertion:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; from collections import OrderedDict\n&gt;&gt;&gt; list(OrderedDict.fromkeys(t))\n[1, 2, 3, 5, 6, 7, 8]\n</code></pre>\n<p><a href=\"https://mail.python.org/pipermail/python-dev/2017-December/151283.html\" rel=\"noreferrer\">Starting with Python 3.7</a>, the built-in dictionary is guaranteed to maintain the insertion order as well, so you can also use that directly if you are on Python 3.7 or later (or CPython 3.6):</p>\n<pre><code class=\"python\">&gt;&gt;&gt; list(dict.fromkeys(t))\n[1, 2, 3, 5, 6, 7, 8]\n</code></pre>\n<p>Note that this may have some overhead of creating a dictionary first, and then creating a list from it. If you don\u2019t actually need to preserve the order, you\u2019re often better off using a set, especially because it gives you a lot more operations to work with. Check out <a href=\"https://stackoverflow.com/q/480214/216074\">this question</a> for more details and alternative ways to preserve the order when removing duplicates.</p>\n<hr/>\n<p>Finally note that both the <code>set</code> as well as the <code>OrderedDict</code>/<code>dict</code> solutions require your items to be <em>hashable</em>. This usually means that they have to be immutable. If you have to deal with items that are not hashable (e.g. list objects), then you will have to use a slow approach in which you will basically have to compare every item with every other item in a nested loop.</p>\n", "abstract": "The common approach to get a unique collection of items is to use a set. Sets are unordered collections of distinct objects. To create a set from any iterable, you can simply pass it to the built-in set() function. If you later need a real list again, you can similarly pass the set to the list() function. The following example should cover whatever you are trying to do: As you can see from the example result, the original order is not maintained. As mentioned above, sets themselves are unordered collections, so the order is lost. When converting a set back to a list, an arbitrary order is created. If order is important to you, then you will have to use a different mechanism. A very common solution for this is to rely on OrderedDict to keep the order of keys during insertion: Starting with Python 3.7, the built-in dictionary is guaranteed to maintain the insertion order as well, so you can also use that directly if you are on Python 3.7 or later (or CPython 3.6): Note that this may have some overhead of creating a dictionary first, and then creating a list from it. If you don\u2019t actually need to preserve the order, you\u2019re often better off using a set, especially because it gives you a lot more operations to work with. Check out this question for more details and alternative ways to preserve the order when removing duplicates. Finally note that both the set as well as the OrderedDict/dict solutions require your items to be hashable. This usually means that they have to be immutable. If you have to deal with items that are not hashable (e.g. list objects), then you will have to use a slow approach in which you will basically have to compare every item with every other item in a nested loop."}, {"id": 7961425, "score": 476, "vote": 0, "content": "<p><strong>In Python 2.7</strong>, the new way of removing duplicates from an iterable while keeping it in the original order is:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; from collections import OrderedDict\n&gt;&gt;&gt; list(OrderedDict.fromkeys('abracadabra'))\n['a', 'b', 'r', 'c', 'd']\n</code></pre>\n<p><strong>In Python 3.5</strong>, the OrderedDict has a C implementation. My timings show that this is now both the fastest and shortest of the various approaches for Python 3.5.</p>\n<p><strong>In Python 3.6</strong>, the regular dict became both ordered and compact.  (This feature is holds for CPython and PyPy but may not present in other implementations).  That gives us a new fastest way of deduping while retaining order:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; list(dict.fromkeys('abracadabra'))\n['a', 'b', 'r', 'c', 'd']\n</code></pre>\n<p><strong>In Python 3.7</strong>, the regular dict is guaranteed to both ordered across all implementations.  <strong>So, the shortest and fastest solution is:</strong></p>\n<pre><code class=\"python\">&gt;&gt;&gt; list(dict.fromkeys('abracadabra'))\n['a', 'b', 'r', 'c', 'd']\n</code></pre>\n", "abstract": "In Python 2.7, the new way of removing duplicates from an iterable while keeping it in the original order is: In Python 3.5, the OrderedDict has a C implementation. My timings show that this is now both the fastest and shortest of the various approaches for Python 3.5. In Python 3.6, the regular dict became both ordered and compact.  (This feature is holds for CPython and PyPy but may not present in other implementations).  That gives us a new fastest way of deduping while retaining order: In Python 3.7, the regular dict is guaranteed to both ordered across all implementations.  So, the shortest and fastest solution is:"}, {"id": 7961393, "score": 215, "vote": 0, "content": "<p>It's a one-liner: <code>list(set(source_list))</code> will do the trick.</p>\n<p>A <code>set</code> is something that can't possibly have duplicates.</p>\n<p>Update: an order-preserving approach is two lines:</p>\n<pre><code class=\"python\">from collections import OrderedDict\nOrderedDict((x, True) for x in source_list).keys()\n</code></pre>\n<p>Here we use the fact that <code>OrderedDict</code> remembers the insertion order of keys, and does not change it when a value at a particular key is updated. We insert <code>True</code> as values, but we could insert anything, values are just not used. (<code>set</code> works a lot like a <code>dict</code> with ignored values, too.)</p>\n", "abstract": "It's a one-liner: list(set(source_list)) will do the trick. A set is something that can't possibly have duplicates. Update: an order-preserving approach is two lines: Here we use the fact that OrderedDict remembers the insertion order of keys, and does not change it when a value at a particular key is updated. We insert True as values, but we could insert anything, values are just not used. (set works a lot like a dict with ignored values, too.)"}, {"id": 16543406, "score": 116, "vote": 0, "content": "<pre><code class=\"python\">&gt;&gt;&gt; t = [1, 2, 3, 1, 2, 5, 6, 7, 8]\n&gt;&gt;&gt; t\n[1, 2, 3, 1, 2, 5, 6, 7, 8]\n&gt;&gt;&gt; s = []\n&gt;&gt;&gt; for i in t:\n       if i not in s:\n          s.append(i)\n&gt;&gt;&gt; s\n[1, 2, 3, 5, 6, 7, 8]\n</code></pre>\n", "abstract": ""}, {"id": 7961391, "score": 103, "vote": 0, "content": "<p>If you don't care about the order, just do this:</p>\n<pre><code class=\"python\">def remove_duplicates(l):\n    return list(set(l))\n</code></pre>\n<p>A <code>set</code> is guaranteed to not have duplicates.</p>\n", "abstract": "If you don't care about the order, just do this: A set is guaranteed to not have duplicates."}, {"id": 24582741, "score": 48, "vote": 0, "content": "<p>To make a new list  retaining the order of first elements of duplicates in <code>L</code>:</p>\n<pre><code class=\"python\">newlist = [ii for n,ii in enumerate(L) if ii not in L[:n]]\n</code></pre>\n<p>For example: if <code>L = [1, 2, 2, 3, 4, 2, 4, 3, 5]</code>, then <code>newlist</code> will be <code>[1, 2, 3, 4, 5]</code></p>\n<p>This checks each new element has not appeared previously in the list before adding it.\nAlso it does not need imports.</p>\n", "abstract": "To make a new list  retaining the order of first elements of duplicates in L: For example: if L = [1, 2, 2, 3, 4, 2, 4, 3, 5], then newlist will be [1, 2, 3, 4, 5] This checks each new element has not appeared previously in the list before adding it.\nAlso it does not need imports."}, {"id": 24554087, "score": 37, "vote": 0, "content": "<p>There are also solutions using Pandas and Numpy. They both return numpy array so you have to use the function <a href=\"https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.ndarray.tolist.html\" rel=\"noreferrer\"><code>.tolist()</code></a> if you want a list.</p>\n<pre><code class=\"python\">t=['a','a','b','b','b','c','c','c']\nt2= ['c','c','b','b','b','a','a','a']\n</code></pre>\n<h2>Pandas solution</h2>\n<p>Using Pandas function <a href=\"https://pandas.pydata.org/pandas-docs/version/0.21/generated/pandas.unique.html\" rel=\"noreferrer\"><code>unique()</code></a>:</p>\n<pre><code class=\"python\">import pandas as pd\npd.unique(t).tolist()\n&gt;&gt;&gt;['a','b','c']\npd.unique(t2).tolist()\n&gt;&gt;&gt;['c','b','a']\n</code></pre>\n<h2>Numpy solution</h2>\n<p>Using numpy function <a href=\"https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.unique.html\" rel=\"noreferrer\"><code>unique()</code></a>.</p>\n<pre><code class=\"python\">import numpy as np\nnp.unique(t).tolist()\n&gt;&gt;&gt;['a','b','c']\nnp.unique(t2).tolist()\n&gt;&gt;&gt;['a','b','c']\n</code></pre>\n<p><strong>Note that numpy.unique() also sort the values</strong>. So the list <code>t2</code> is returned sorted. If you want to have the order preserved use as in <a href=\"https://stackoverflow.com/questions/15637336/numpy-unique-with-order-preserved\">this answer</a>:</p>\n<pre><code class=\"python\">_, idx = np.unique(t2, return_index=True)\nt2[np.sort(idx)].tolist()\n&gt;&gt;&gt;['c','b','a']\n</code></pre>\n<p>The solution is not so elegant compared to the others, however, compared to pandas.unique(), numpy.unique() allows you also to check if nested arrays are unique along one selected axis.</p>\n", "abstract": "There are also solutions using Pandas and Numpy. They both return numpy array so you have to use the function .tolist() if you want a list. Using Pandas function unique(): Using numpy function unique(). Note that numpy.unique() also sort the values. So the list t2 is returned sorted. If you want to have the order preserved use as in this answer: The solution is not so elegant compared to the others, however, compared to pandas.unique(), numpy.unique() allows you also to check if nested arrays are unique along one selected axis."}, {"id": 58253898, "score": 33, "vote": 0, "content": "<p>In this answer, there will be two sections: Two unique solutions, and a graph of speed for specific solutions.</p>\n<h2>Removing Duplicate Items</h2>\n<p>Most of these answers only remove duplicate items which are <em>hashable</em>, but this question doesn't imply it doesn't just need <em>hashable</em> items, meaning I'll offer some solutions which don't require <em>hashable</em> items.</p>\n<p><code>collections.Counter</code> is a powerful tool in the standard library which could be perfect for this. There's only one other solution which even has Counter in it. However, that solution is also limited to <em>hashable</em> keys.</p>\n<p>To allow unhashable keys in Counter, I made a Container class, which will try to get the object's default hash function, but if it fails, it will try its identity function. It also defines an <strong>eq</strong> and a <strong>hash</strong> method. This should be enough to allow <em>unhashable</em> items in our solution. Unhashable objects will be treated as if they are hashable. However, this hash function uses identity for unhashable objects, meaning two equal objects that are both unhashable won't work. I suggest you override this, and changing it to use the hash of an equivalent mutable type (like using <code>hash(tuple(my_list))</code> if <code>my_list</code> is a list).</p>\n<p>I also made two solutions. Another solution which keeps the order of the items, using a subclass of both OrderedDict and Counter which is named 'OrderedCounter'. Now, here are the functions:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">from collections import OrderedDict, Counter\n\nclass Container:\n    def __init__(self, obj):\n        self.obj = obj\n    def __eq__(self, obj):\n        return self.obj == obj\n    def __hash__(self):\n        try:\n            return hash(self.obj)\n        except:\n            return id(self.obj)\n\nclass OrderedCounter(Counter, OrderedDict):\n     'Counter that remembers the order elements are first encountered'\n\n     def __repr__(self):\n         return '%s(%r)' % (self.__class__.__name__, OrderedDict(self))\n\n     def __reduce__(self):\n         return self.__class__, (OrderedDict(self),)\n    \ndef remd(sequence):\n    cnt = Counter()\n    for x in sequence:\n        cnt[Container(x)] += 1\n    return [item.obj for item in cnt]\n\ndef oremd(sequence):\n    cnt = OrderedCounter()\n    for x in sequence:\n        cnt[Container(x)] += 1\n    return [item.obj for item in cnt]\n</code></pre>\n<p><code>remd</code> is non-ordered sorting, while <code>oremd</code> is ordered sorting. You can clearly tell which one is faster, but I'll explain anyways. The non-ordered sorting is slightly faster, since it doesn't store the order of the items.</p>\n<p>Now, I also wanted to show the speed comparisons of each answer. So, I'll do that now.</p>\n<h2>Which Function is the Fastest?</h2>\n<p>For removing duplicates, I gathered 10 functions from a few answers. I calculated the speed of each function and put it into a graph using <em>matplotlib.pyplot</em>.</p>\n<p>I divided this into three rounds of graphing. A hashable is any object which can be hashed, an unhashable is any object which cannot be hashed. An ordered sequence is a sequence which preserves order, an unordered sequence does not preserve order. Now, here are a few more terms:</p>\n<p><em>Unordered Hashable</em> was for any method which removed duplicates, which didn't necessarily have to keep the order. It didn't have to work for unhashables, but it could.</p>\n<p><em>Ordered Hashable</em> was for any method which kept the order of the items in the list, but it didn't have to work for unhashables, but it could.</p>\n<p><em>Ordered Unhashable</em> was any method which kept the order of the items in the list, and worked for unhashables.</p>\n<p>On the y-axis is the amount of seconds it took.</p>\n<p>On the x-axis is the number the function was applied to.</p>\n<p>I generated sequences for unordered hashables and ordered hashables with the following comprehension: <code>[list(range(x)) + list(range(x)) for x in range(0, 1000, 10)]</code></p>\n<p>For ordered unhashables: <code>[[list(range(y)) + list(range(y)) for y in range(x)] for x in range(0, 1000, 10)]</code></p>\n<p>Note there is a <code>step</code> in the range because without it, this would've taken 10x as long. Also because in my personal opinion, I thought it might've looked a little easier to read.</p>\n<p>Also note the keys on the legend are what I tried to guess as the most vital parts of the implementation of the function. As for what function does the worst or best? The graph speaks for itself.</p>\n<p>With that settled, here are the graphs.</p>\n<h3>Unordered Hashables</h3>\n<p><a href=\"https://i.stack.imgur.com/KlFmQ.png\" rel=\"noreferrer\"><img alt=\"Unordered Hashables\" src=\"https://i.stack.imgur.com/KlFmQ.png\"/></a>\n(Zoomed in)\n<a href=\"https://i.stack.imgur.com/aB1uu.png\" rel=\"noreferrer\"><img alt=\"Unordered Hashables Zoomed\" src=\"https://i.stack.imgur.com/aB1uu.png\"/></a></p>\n<h3>Ordered Hashables</h3>\n<p><a href=\"https://i.stack.imgur.com/n3OMu.png\" rel=\"noreferrer\"><img alt=\"Ordered Hashables\" src=\"https://i.stack.imgur.com/n3OMu.png\"/></a>\n(Zoomed in)\n<a href=\"https://i.stack.imgur.com/sKVo6.png\" rel=\"noreferrer\"><img alt=\"Ordered Hashables Zoomed\" src=\"https://i.stack.imgur.com/sKVo6.png\"/></a></p>\n<h2>Ordered Unhashables</h2>\n<p><a href=\"https://i.stack.imgur.com/Va9c6.png\" rel=\"noreferrer\"><img alt=\"Ordered Unhashables\" src=\"https://i.stack.imgur.com/Va9c6.png\"/></a>\n(Zoomed in)\n<a href=\"https://i.stack.imgur.com/WQN46.png\" rel=\"noreferrer\"><img alt=\"Ordered Unhashables Zoomed\" src=\"https://i.stack.imgur.com/WQN46.png\"/></a></p>\n", "abstract": "In this answer, there will be two sections: Two unique solutions, and a graph of speed for specific solutions. Most of these answers only remove duplicate items which are hashable, but this question doesn't imply it doesn't just need hashable items, meaning I'll offer some solutions which don't require hashable items. collections.Counter is a powerful tool in the standard library which could be perfect for this. There's only one other solution which even has Counter in it. However, that solution is also limited to hashable keys. To allow unhashable keys in Counter, I made a Container class, which will try to get the object's default hash function, but if it fails, it will try its identity function. It also defines an eq and a hash method. This should be enough to allow unhashable items in our solution. Unhashable objects will be treated as if they are hashable. However, this hash function uses identity for unhashable objects, meaning two equal objects that are both unhashable won't work. I suggest you override this, and changing it to use the hash of an equivalent mutable type (like using hash(tuple(my_list)) if my_list is a list). I also made two solutions. Another solution which keeps the order of the items, using a subclass of both OrderedDict and Counter which is named 'OrderedCounter'. Now, here are the functions: remd is non-ordered sorting, while oremd is ordered sorting. You can clearly tell which one is faster, but I'll explain anyways. The non-ordered sorting is slightly faster, since it doesn't store the order of the items. Now, I also wanted to show the speed comparisons of each answer. So, I'll do that now. For removing duplicates, I gathered 10 functions from a few answers. I calculated the speed of each function and put it into a graph using matplotlib.pyplot. I divided this into three rounds of graphing. A hashable is any object which can be hashed, an unhashable is any object which cannot be hashed. An ordered sequence is a sequence which preserves order, an unordered sequence does not preserve order. Now, here are a few more terms: Unordered Hashable was for any method which removed duplicates, which didn't necessarily have to keep the order. It didn't have to work for unhashables, but it could. Ordered Hashable was for any method which kept the order of the items in the list, but it didn't have to work for unhashables, but it could. Ordered Unhashable was any method which kept the order of the items in the list, and worked for unhashables. On the y-axis is the amount of seconds it took. On the x-axis is the number the function was applied to. I generated sequences for unordered hashables and ordered hashables with the following comprehension: [list(range(x)) + list(range(x)) for x in range(0, 1000, 10)] For ordered unhashables: [[list(range(y)) + list(range(y)) for y in range(x)] for x in range(0, 1000, 10)] Note there is a step in the range because without it, this would've taken 10x as long. Also because in my personal opinion, I thought it might've looked a little easier to read. Also note the keys on the legend are what I tried to guess as the most vital parts of the implementation of the function. As for what function does the worst or best? The graph speaks for itself. With that settled, here are the graphs. \n(Zoomed in)\n \n(Zoomed in)\n \n(Zoomed in)\n"}, {"id": 25887387, "score": 31, "vote": 0, "content": "<p>A colleague have sent the accepted answer as part of his code to me for a codereview today.\nWhile I certainly admire the elegance of the answer in question, I am not happy with the performance.\nI have tried this solution (I use <em>set</em> to reduce lookup time)</p>\n<pre><code class=\"python\">def ordered_set(in_list):\n    out_list = []\n    added = set()\n    for val in in_list:\n        if not val in added:\n            out_list.append(val)\n            added.add(val)\n    return out_list\n</code></pre>\n<p>To compare efficiency, I used a random sample of 100 integers - 62 were unique</p>\n<pre><code class=\"python\">from random import randint\nx = [randint(0,100) for _ in xrange(100)]\n\nIn [131]: len(set(x))\nOut[131]: 62\n</code></pre>\n<p>Here are the results of the measurements</p>\n<pre><code class=\"python\">In [129]: %timeit list(OrderedDict.fromkeys(x))\n10000 loops, best of 3: 86.4 us per loop\n\nIn [130]: %timeit ordered_set(x)\n100000 loops, best of 3: 15.1 us per loop\n</code></pre>\n<p>Well, what happens if set is removed from the solution?</p>\n<pre><code class=\"python\">def ordered_set(inlist):\n    out_list = []\n    for val in inlist:\n        if not val in out_list:\n            out_list.append(val)\n    return out_list\n</code></pre>\n<p>The result is not as bad as with the <em>OrderedDict</em>, but still more than 3 times of the original solution</p>\n<pre><code class=\"python\">In [136]: %timeit ordered_set(x)\n10000 loops, best of 3: 52.6 us per loop\n</code></pre>\n", "abstract": "A colleague have sent the accepted answer as part of his code to me for a codereview today.\nWhile I certainly admire the elegance of the answer in question, I am not happy with the performance.\nI have tried this solution (I use set to reduce lookup time) To compare efficiency, I used a random sample of 100 integers - 62 were unique Here are the results of the measurements Well, what happens if set is removed from the solution? The result is not as bad as with the OrderedDict, but still more than 3 times of the original solution"}, {"id": 60518033, "score": 30, "vote": 0, "content": "<p>Very late answer.<br/>\nIf you don't care about the list order, you can use <code>*arg</code> expansion with <code>set</code> uniqueness to remove dupes, i.e.:</p>\n<pre><code class=\"python\">l = [*{*l}]\n</code></pre>\n<p><a href=\"https://trinket.io/python3/f6271c5be5\" rel=\"nofollow noreferrer\">Python3 Demo</a></p>\n", "abstract": "Very late answer.\nIf you don't care about the list order, you can use *arg expansion with set uniqueness to remove dupes, i.e.: Python3 Demo"}, {"id": 20870217, "score": 24, "vote": 0, "content": "<p>Another way of doing:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; seq = [1,2,3,'a', 'a', 1,2]\n&gt;&gt; dict.fromkeys(seq).keys()\n['a', 1, 2, 3]\n</code></pre>\n", "abstract": "Another way of doing:"}, {"id": 29639138, "score": 22, "vote": 0, "content": "<p>Simple and easy:</p>\n<pre><code class=\"python\">myList = [1, 2, 3, 1, 2, 5, 6, 7, 8]\ncleanlist = []\n[cleanlist.append(x) for x in myList if x not in cleanlist]\n</code></pre>\n<p>Output:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; cleanlist \n[1, 2, 3, 5, 6, 7, 8]\n</code></pre>\n", "abstract": "Simple and easy: Output:"}, {"id": 24085464, "score": 16, "vote": 0, "content": "<p>I had a dict in my list, so I could not use the above approach. I got the error:</p>\n<pre><code class=\"python\">TypeError: unhashable type:\n</code></pre>\n<p>So if you care about <strong>order</strong> and/or some items are <strong>unhashable</strong>. Then you might find this useful:</p>\n<pre><code class=\"python\">def make_unique(original_list):\n    unique_list = []\n    [unique_list.append(obj) for obj in original_list if obj not in unique_list]\n    return unique_list\n</code></pre>\n<p>Some may consider list comprehension with a side effect to not be a good solution. Here's an alternative:</p>\n<pre><code class=\"python\">def make_unique(original_list):\n    unique_list = []\n    map(lambda x: unique_list.append(x) if (x not in unique_list) else False, original_list)\n    return unique_list\n</code></pre>\n", "abstract": "I had a dict in my list, so I could not use the above approach. I got the error: So if you care about order and/or some items are unhashable. Then you might find this useful: Some may consider list comprehension with a side effect to not be a good solution. Here's an alternative:"}, {"id": 34775128, "score": 13, "vote": 0, "content": "<p>All the order-preserving approaches I've seen here so far either use naive  comparison (with O(n^2) time-complexity at best) or heavy-weight <code>OrderedDicts</code>/<code>set</code>+<code>list</code> combinations that are limited to hashable inputs. Here is a hash-independent O(nlogn) solution:</p>\n<p><strong>Update</strong> added the <code>key</code> argument, documentation and Python 3 compatibility.</p>\n<pre><code class=\"python\"># from functools import reduce &lt;-- add this import on Python 3\n\ndef uniq(iterable, key=lambda x: x):\n    \"\"\"\n    Remove duplicates from an iterable. Preserves order. \n    :type iterable: Iterable[Ord =&gt; A]\n    :param iterable: an iterable of objects of any orderable type\n    :type key: Callable[A] -&gt; (Ord =&gt; B)\n    :param key: optional argument; by default an item (A) is discarded \n    if another item (B), such that A == B, has already been encountered and taken. \n    If you provide a key, this condition changes to key(A) == key(B); the callable \n    must return orderable objects.\n    \"\"\"\n    # Enumerate the list to restore order lately; reduce the sorted list; restore order\n    def append_unique(acc, item):\n        return acc if key(acc[-1][1]) == key(item[1]) else acc.append(item) or acc \n    srt_enum = sorted(enumerate(iterable), key=lambda item: key(item[1]))\n    return [item[1] for item in sorted(reduce(append_unique, srt_enum, [srt_enum[0]]))] \n</code></pre>\n", "abstract": "All the order-preserving approaches I've seen here so far either use naive  comparison (with O(n^2) time-complexity at best) or heavy-weight OrderedDicts/set+list combinations that are limited to hashable inputs. Here is a hash-independent O(nlogn) solution: Update added the key argument, documentation and Python 3 compatibility."}, {"id": 54846038, "score": 12, "vote": 0, "content": "<p>If you want to preserve the order, and not use any external modules here is an easy way to do this:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">&gt;&gt;&gt; t = [1, 9, 2, 3, 4, 5, 3, 6, 7, 5, 8, 9]\n&gt;&gt;&gt; list(dict.fromkeys(t))\n[1, 9, 2, 3, 4, 5, 6, 7, 8]\n</code></pre>\n<p>Note: This method preserves the order of appearance, so, as seen above, nine will come after one because it was the first time it appeared. This however, is the same result as you would get with doing</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">from collections import OrderedDict\nulist=list(OrderedDict.fromkeys(l))\n</code></pre>\n<p>but it is much shorter, and runs faster.</p>\n<p>This works because each time the <code>fromkeys</code> function tries to create a new key, if the value already exists it will simply overwrite it. This wont affect the dictionary at all however, as <code>fromkeys</code> creates a dictionary where all keys have the value <code>None</code>, so effectively it eliminates all duplicates this way.</p>\n", "abstract": "If you want to preserve the order, and not use any external modules here is an easy way to do this: Note: This method preserves the order of appearance, so, as seen above, nine will come after one because it was the first time it appeared. This however, is the same result as you would get with doing but it is much shorter, and runs faster. This works because each time the fromkeys function tries to create a new key, if the value already exists it will simply overwrite it. This wont affect the dictionary at all however, as fromkeys creates a dictionary where all keys have the value None, so effectively it eliminates all duplicates this way."}, {"id": 44385914, "score": 10, "vote": 0, "content": "<p>You could also do this:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; t = [1, 2, 3, 3, 2, 4, 5, 6]\n&gt;&gt;&gt; s = [x for i, x in enumerate(t) if i == t.index(x)]\n&gt;&gt;&gt; s\n[1, 2, 3, 4, 5, 6]\n</code></pre>\n<p>The reason that above works is that <code>index</code> method returns only the first index of an element. Duplicate elements have higher indices. Refer to <a href=\"https://docs.python.org/3/tutorial/datastructures.html#more-on-lists\" rel=\"noreferrer\">here</a>:</p>\n<blockquote>\n<p><strong>list.index(x[, start[, end]])</strong><br/>\n  Return zero-based index in the list of\n  the first item whose value is x.    Raises a ValueError if there is no\n  such item.</p>\n</blockquote>\n", "abstract": "You could also do this: The reason that above works is that index method returns only the first index of an element. Duplicate elements have higher indices. Refer to here: list.index(x[, start[, end]])\n  Return zero-based index in the list of\n  the first item whose value is x.    Raises a ValueError if there is no\n  such item."}, {"id": 45729214, "score": 10, "vote": 0, "content": "<p>Best approach of removing duplicates from a list is using <strong>set()</strong> function, available in python, again converting that <strong>set into list</strong></p>\n<pre><code class=\"python\">In [2]: some_list = ['a','a','v','v','v','c','c','d']\nIn [3]: list(set(some_list))\nOut[3]: ['a', 'c', 'd', 'v']\n</code></pre>\n", "abstract": "Best approach of removing duplicates from a list is using set() function, available in python, again converting that set into list"}, {"id": 52387111, "score": 10, "vote": 0, "content": "<p>You can use <code>set</code> to remove duplicates:</p>\n<pre><code class=\"python\">mylist = list(set(mylist))\n</code></pre>\n<p>But note the results will be unordered. If that's an issue:</p>\n<pre><code class=\"python\">mylist.sort()\n</code></pre>\n", "abstract": "You can use set to remove duplicates: But note the results will be unordered. If that's an issue:"}, {"id": 68669586, "score": 10, "vote": 0, "content": "<p>I've compared the various suggestions with <a href=\"https://github.com/nschloe/perfplot\" rel=\"noreferrer\">perfplot</a>. It turns out that, if the input array doesn't have duplicate elements, all methods are more or less equally fast, independently of whether the input data is a Python list or a NumPy array.</p>\n<p><a href=\"https://i.stack.imgur.com/bM7Qf.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/bM7Qf.png\"/></a></p>\n<p>If the input array is large, but contains just one unique element, then the <code>set</code>, <code>dict</code> and <code>np.unique</code> methods are costant-time <em>if the input data is a list</em>. If it's a NumPy array, <code>np.unique</code> is about 10 times faster than the other alternatives.</p>\n<p><a href=\"https://i.stack.imgur.com/giJyZ.png\" rel=\"noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/giJyZ.png\"/></a></p>\n<p>It's somewhat surprising to me that those are not constant-time operations, too.</p>\n<hr/>\n<p>Code to reproduce the plots:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">import perfplot\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef setup_list(n):\n    # return list(np.random.permutation(np.arange(n)))\n    return [0] * n\n\n\ndef setup_np_array(n):\n    # return np.random.permutation(np.arange(n))\n    return np.zeros(n, dtype=int)\n\n\ndef list_set(data):\n    return list(set(data))\n\n\ndef numpy_unique(data):\n    return np.unique(data)\n\n\ndef list_dict(data):\n    return list(dict.fromkeys(data))\n\n\nb = perfplot.bench(\n    setup=[\n        setup_list,\n        setup_list,\n        setup_list,\n        setup_np_array,\n        setup_np_array,\n        setup_np_array,\n    ],\n    kernels=[list_set, numpy_unique, list_dict, list_set, numpy_unique, list_dict],\n    labels=[\n        \"list(set(lst))\",\n        \"np.unique(lst)\",\n        \"list(dict(lst))\",\n        \"list(set(arr))\",\n        \"np.unique(arr)\",\n        \"list(dict(arr))\",\n    ],\n    n_range=[2 ** k for k in range(23)],\n    xlabel=\"len(array)\",\n    equality_check=None,\n)\n# plt.title(\"input array = [0, 1, 2,..., n]\")\nplt.title(\"input array = [0, 0,..., 0]\")\nb.save(\"out.png\")\nb.show()\n</code></pre>\n", "abstract": "I've compared the various suggestions with perfplot. It turns out that, if the input array doesn't have duplicate elements, all methods are more or less equally fast, independently of whether the input data is a Python list or a NumPy array.  If the input array is large, but contains just one unique element, then the set, dict and np.unique methods are costant-time if the input data is a list. If it's a NumPy array, np.unique is about 10 times faster than the other alternatives.  It's somewhat surprising to me that those are not constant-time operations, too. Code to reproduce the plots:"}, {"id": 7961428, "score": 8, "vote": 0, "content": "<p>Try using sets:</p>\n<pre><code class=\"python\">import sets\nt = sets.Set(['a', 'b', 'c', 'd'])\nt1 = sets.Set(['a', 'b', 'c'])\n\nprint t | t1\nprint t - t1\n</code></pre>\n", "abstract": "Try using sets:"}, {"id": 25622503, "score": 7, "vote": 0, "content": "<p>This one cares about the order without too much hassle (OrderdDict &amp; others). Probably not the most Pythonic way, nor shortest way, but does the trick:</p>\n<pre><code class=\"python\">def remove_duplicates(item_list):\n    ''' Removes duplicate items from a list '''\n    singles_list = []\n    for element in item_list:\n        if element not in singles_list:\n            singles_list.append(element)\n    return singles_list\n</code></pre>\n", "abstract": "This one cares about the order without too much hassle (OrderdDict & others). Probably not the most Pythonic way, nor shortest way, but does the trick:"}, {"id": 52676102, "score": 7, "vote": 0, "content": "<p>One more better approach could be,</p>\n<pre><code class=\"python\">import pandas as pd\n\nmyList = [1, 2, 3, 1, 2, 5, 6, 7, 8]\ncleanList = pd.Series(myList).drop_duplicates().tolist()\nprint(cleanList)\n\n#&gt; [1, 2, 3, 5, 6, 7, 8]\n</code></pre>\n<p>and the order remains preserved.</p>\n", "abstract": "One more better approach could be, and the order remains preserved."}, {"id": 29898868, "score": 6, "vote": 0, "content": "<p>Reduce variant with ordering preserve:</p>\n<p>Assume that we have list:</p>\n<pre><code class=\"python\">l = [5, 6, 6, 1, 1, 2, 2, 3, 4]\n</code></pre>\n<p>Reduce variant (unefficient):</p>\n<pre><code class=\"python\">&gt;&gt;&gt; reduce(lambda r, v: v in r and r or r + [v], l, [])\n[5, 6, 1, 2, 3, 4]\n</code></pre>\n<p>5 x faster but more sophisticated</p>\n<pre><code class=\"python\">&gt;&gt;&gt; reduce(lambda r, v: v in r[1] and r or (r[0].append(v) or r[1].add(v)) or r, l, ([], set()))[0]\n[5, 6, 1, 2, 3, 4]\n</code></pre>\n<p>Explanation:</p>\n<pre><code class=\"python\">default = (list(), set())\n# user list to keep order\n# use set to make lookup faster\n\ndef reducer(result, item):\n    if item not in result[1]:\n        result[0].append(item)\n        result[1].add(item)\n    return result\n\nreduce(reducer, l, default)[0]\n</code></pre>\n", "abstract": "Reduce variant with ordering preserve: Assume that we have list: Reduce variant (unefficient): 5 x faster but more sophisticated Explanation:"}, {"id": 32215911, "score": 6, "vote": 0, "content": "<p>There are many other answers suggesting different ways to do this, but they're all batch operations, and some of them throw away the original order. That might be okay depending on what you need, but if you want to iterate over the values in the order of the first instance of each value, and you want to remove the duplicates on-the-fly versus all at once, you could use this generator:</p>\n<pre><code class=\"python\">def uniqify(iterable):\n    seen = set()\n    for item in iterable:\n        if item not in seen:\n            seen.add(item)\n            yield item\n</code></pre>\n<p>This returns a generator/iterator, so you can use it anywhere that you can use an iterator.</p>\n<pre><code class=\"python\">for unique_item in uniqify([1, 2, 3, 4, 3, 2, 4, 5, 6, 7, 6, 8, 8]):\n    print(unique_item, end=' ')\n\nprint()\n</code></pre>\n<p>Output:</p>\n<pre><code class=\"python\">1 2 3 4 5 6 7 8\n</code></pre>\n<hr/>\n<p>If you do want a <code>list</code>, you can do this:</p>\n<pre><code class=\"python\">unique_list = list(uniqify([1, 2, 3, 4, 3, 2, 4, 5, 6, 7, 6, 8, 8]))\n\nprint(unique_list)\n</code></pre>\n<p>Output:</p>\n<pre><code class=\"python\">[1, 2, 3, 4, 5, 6, 7, 8]\n</code></pre>\n", "abstract": "There are many other answers suggesting different ways to do this, but they're all batch operations, and some of them throw away the original order. That might be okay depending on what you need, but if you want to iterate over the values in the order of the first instance of each value, and you want to remove the duplicates on-the-fly versus all at once, you could use this generator: This returns a generator/iterator, so you can use it anywhere that you can use an iterator. Output: If you do want a list, you can do this: Output:"}, {"id": 52956105, "score": 6, "vote": 0, "content": "<p>You can use the following function: </p>\n<pre><code class=\"python\">def rem_dupes(dup_list): \n    yooneeks = [] \n    for elem in dup_list: \n        if elem not in yooneeks: \n            yooneeks.append(elem) \n    return yooneeks\n</code></pre>\n<p><strong>Example</strong>: </p>\n<pre><code class=\"python\">my_list = ['this','is','a','list','with','dupicates','in', 'the', 'list']\n</code></pre>\n<p><strong>Usage:</strong></p>\n<pre><code class=\"python\">rem_dupes(my_list)\n</code></pre>\n<p>['this', 'is', 'a', 'list', 'with', 'dupicates', 'in', 'the']</p>\n", "abstract": "You can use the following function:  Example:  Usage: ['this', 'is', 'a', 'list', 'with', 'dupicates', 'in', 'the']"}, {"id": 45384125, "score": 5, "vote": 0, "content": "<p>Using <strong><em>set</em></strong> :</p>\n<pre><code class=\"python\">a = [0,1,2,3,4,3,3,4]\na = list(set(a))\nprint a\n</code></pre>\n<p>Using <strong><em>unique</em></strong> :</p>\n<pre><code class=\"python\">import numpy as np\na = [0,1,2,3,4,3,3,4]\na = np.unique(a).tolist()\nprint a\n</code></pre>\n", "abstract": "Using set : Using unique :"}, {"id": 46707294, "score": 5, "vote": 0, "content": "<p>Without using set </p>\n<pre><code class=\"python\">data=[1, 2, 3, 1, 2, 5, 6, 7, 8]\nuni_data=[]\nfor dat in data:\n    if dat not in uni_data:\n        uni_data.append(dat)\n\nprint(uni_data) \n</code></pre>\n", "abstract": "Without using set "}, {"id": 57983930, "score": 5, "vote": 0, "content": "<h1>The Magic of Python Built-in type</h1>\n<p>In python, it is very easy to process the complicated cases like this and only by python's built-in type. </p>\n<p>Let me show you how to do ! </p>\n<p><strong>Method 1: General Case</strong> </p>\n<p>The way (<em>1 line code</em>) to remove duplicated element in list and still keep sorting order</p>\n<pre><code class=\"python\">line = [1, 2, 3, 1, 2, 5, 6, 7, 8]\nnew_line = sorted(set(line), key=line.index) # remove duplicated element\nprint(new_line)\n</code></pre>\n<p>You will get the result</p>\n<pre><code class=\"python\">[1, 2, 3, 5, 6, 7, 8]\n</code></pre>\n<p><strong>Method 2: Special Case</strong> </p>\n<pre><code class=\"python\">TypeError: unhashable type: 'list'\n</code></pre>\n<p>The special case to process unhashable (<em>3 line codes</em>)</p>\n<pre><code class=\"python\">line=[['16.4966155686595', '-27.59776154691', '52.3786295521147']\n,['16.4966155686595', '-27.59776154691', '52.3786295521147']\n,['17.6508629295574', '-27.143305738671', '47.534955022564']\n,['17.6508629295574', '-27.143305738671', '47.534955022564']\n,['18.8051102904552', '-26.688849930432', '42.6912804930134']\n,['18.8051102904552', '-26.688849930432', '42.6912804930134']\n,['19.5504702331098', '-26.205884452727', '37.7709192714727']\n,['19.5504702331098', '-26.205884452727', '37.7709192714727']\n,['20.2929416861422', '-25.722717575124', '32.8500163147157']\n,['20.2929416861422', '-25.722717575124', '32.8500163147157']]\n\ntuple_line = [tuple(pt) for pt in line] # convert list of list into list of tuple\ntuple_new_line = sorted(set(tuple_line),key=tuple_line.index) # remove duplicated element\nnew_line = [list(t) for t in tuple_new_line] # convert list of tuple into list of list\n\nprint (new_line)\n</code></pre>\n<p>You will get the result : </p>\n<pre><code class=\"python\">[\n  ['16.4966155686595', '-27.59776154691', '52.3786295521147'], \n  ['17.6508629295574', '-27.143305738671', '47.534955022564'], \n  ['18.8051102904552', '-26.688849930432', '42.6912804930134'], \n  ['19.5504702331098', '-26.205884452727', '37.7709192714727'], \n  ['20.2929416861422', '-25.722717575124', '32.8500163147157']\n]\n</code></pre>\n<p>Because tuple is hashable and you can convert data between list and tuple easily     </p>\n", "abstract": "In python, it is very easy to process the complicated cases like this and only by python's built-in type.  Let me show you how to do !  Method 1: General Case  The way (1 line code) to remove duplicated element in list and still keep sorting order You will get the result Method 2: Special Case  The special case to process unhashable (3 line codes) You will get the result :  Because tuple is hashable and you can convert data between list and tuple easily     "}, {"id": 31999082, "score": 4, "vote": 0, "content": "<p>below code is simple for removing duplicate in list</p>\n<pre><code class=\"python\">def remove_duplicates(x):\n    a = []\n    for i in x:\n        if i not in a:\n            a.append(i)\n    return a\n\nprint remove_duplicates([1,2,2,3,3,4])\n</code></pre>\n<p>it returns [1,2,3,4]</p>\n", "abstract": "below code is simple for removing duplicate in list it returns [1,2,3,4]"}, {"id": 43161258, "score": 4, "vote": 0, "content": "<p>Here's the fastest pythonic solution comaring to others listed in replies.</p>\n<p>Using implementation details of short-circuit evaluation allows to use list comprehension, which is fast enough. <code>visited.add(item)</code> always returns <code>None</code> as a result, which is evaluated as <code>False</code>, so the right-side of <code>or</code> would always be the result of such an expression.</p>\n<p>Time it yourself</p>\n<pre><code class=\"python\">def deduplicate(sequence):\n    visited = set()\n    adder = visited.add  # get rid of qualification overhead\n    out = [adder(item) or item for item in sequence if item not in visited]\n    return out\n</code></pre>\n", "abstract": "Here's the fastest pythonic solution comaring to others listed in replies. Using implementation details of short-circuit evaluation allows to use list comprehension, which is fast enough. visited.add(item) always returns None as a result, which is evaluated as False, so the right-side of or would always be the result of such an expression. Time it yourself"}, {"id": 50948607, "score": 4, "vote": 0, "content": "<p>Very simple way in Python 3:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; n = [1, 2, 3, 4, 1, 1]\n&gt;&gt;&gt; n\n[1, 2, 3, 4, 1, 1]\n&gt;&gt;&gt; m = sorted(list(set(n)))\n&gt;&gt;&gt; m\n[1, 2, 3, 4]\n</code></pre>\n", "abstract": "Very simple way in Python 3:"}, {"id": 52067330, "score": 4, "vote": 0, "content": "<p>Unfortunately. Most answers here either do not preserve the order or are too long. Here is a simple, order preserving answer.</p>\n<pre><code class=\"python\">s = [1,2,3,4,5,2,5,6,7,1,3,9,3,5]\nx=[]\n\n[x.append(i) for i in s if i not in x]\nprint(x)\n</code></pre>\n<p>This will give you x with duplicates removed but preserving the order. </p>\n", "abstract": "Unfortunately. Most answers here either do not preserve the order or are too long. Here is a simple, order preserving answer. This will give you x with duplicates removed but preserving the order. "}, {"id": 24118409, "score": 2, "vote": 0, "content": "<p>Here is an example, returning list without repetiotions preserving order. Does not need any external imports.</p>\n<pre><code class=\"python\">def GetListWithoutRepetitions(loInput):\n    # return list, consisting of elements of list/tuple loInput, without repetitions.\n    # Example: GetListWithoutRepetitions([None,None,1,1,2,2,3,3,3])\n    # Returns: [None, 1, 2, 3]\n\n    if loInput==[]:\n        return []\n\n    loOutput = []\n\n    if loInput[0] is None:\n        oGroupElement=1\n    else: # loInput[0]&lt;&gt;None\n        oGroupElement=None\n\n    for oElement in loInput:\n        if oElement&lt;&gt;oGroupElement:\n            loOutput.append(oElement)\n            oGroupElement = oElement\n    return loOutput\n</code></pre>\n", "abstract": "Here is an example, returning list without repetiotions preserving order. Does not need any external imports."}, {"id": 33830196, "score": 2, "vote": 0, "content": "<p>Check this if you want to remove duplicates (in-place edit rather than returning new list) without using inbuilt set, dict.keys, uniqify, counter</p>\n<pre><code class=\"python\">&gt;&gt;&gt; t = [1, 2, 3, 1, 2, 5, 6, 7, 8]\n&gt;&gt;&gt; for i in t:\n...     if i in t[t.index(i)+1:]:\n...         t.remove(i)\n... \n&gt;&gt;&gt; t\n[3, 1, 2, 5, 6, 7, 8]\n</code></pre>\n", "abstract": "Check this if you want to remove duplicates (in-place edit rather than returning new list) without using inbuilt set, dict.keys, uniqify, counter"}, {"id": 45384089, "score": 2, "vote": 0, "content": "<p>I think converting to set is the easiest way to remove duplicate:</p>\n<pre><code class=\"python\">list1 = [1,2,1]\nlist1 = list(set(list1))\nprint list1\n</code></pre>\n", "abstract": "I think converting to set is the easiest way to remove duplicate:"}, {"id": 61816615, "score": 2, "vote": 0, "content": "<p>I did this with pure python function. This works when your <code>items</code> value is JSON.</p>\n<pre><code class=\"python\">[i for n, i in enumerate(items) if i not in items[n + 1 :]]\n</code></pre>\n", "abstract": "I did this with pure python function. This works when your items value is JSON."}, {"id": 63623578, "score": 2, "vote": 0, "content": "<p>I didn't see answers for non-hashable values, one liner, n log n, standard-library only, so here's my answer:</p>\n<pre><code class=\"python\">list(map(operator.itemgetter(0), itertools.groupby(sorted(items))))\n</code></pre>\n<p>Or as a generator function:</p>\n<pre><code class=\"python\">def unique(items: Iterable[T]) -&gt; Iterable[T]:\n    \"\"\"For unhashable items (can't use set to unique) with a partial order\"\"\"\n    yield from map(operator.itemgetter(0), itertools.groupby(sorted(items)))\n</code></pre>\n", "abstract": "I didn't see answers for non-hashable values, one liner, n log n, standard-library only, so here's my answer: Or as a generator function:"}, {"id": 32199313, "score": 1, "vote": 0, "content": "<p>To remove the duplicates, make it a SET and then again make it a LIST and print/use it.\nA set is guaranteed to have unique elements. For example : </p>\n<pre><code class=\"python\">a = [1,2,3,4,5,9,11,15]\nb = [4,5,6,7,8]\nc=a+b\nprint c\nprint list(set(c)) #one line for getting unique elements of c\n</code></pre>\n<p>The output will be as follows (checked in python 2.7)</p>\n<pre><code class=\"python\">[1, 2, 3, 4, 5, 9, 11, 15, 4, 5, 6, 7, 8]  #simple list addition with duplicates\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 15] #duplicates removed!!\n</code></pre>\n", "abstract": "To remove the duplicates, make it a SET and then again make it a LIST and print/use it.\nA set is guaranteed to have unique elements. For example :  The output will be as follows (checked in python 2.7)"}, {"id": 40499263, "score": 1, "vote": 0, "content": "<p>It requires installing a 3rd-party module but the package <code>iteration_utilities</code> contains a <a href=\"http://iteration-utilities.readthedocs.io/en/latest/api/cfuncs.html#iteration_utilities.unique_everseen\" rel=\"nofollow noreferrer\"><code>unique_everseen</code></a><sup>1</sup> function that can remove all duplicates while preserving the order:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; from iteration_utilities import unique_everseen\n\n&gt;&gt;&gt; list(unique_everseen(['a', 'b', 'c', 'd'] + ['a', 'c', 'd']))\n['a', 'b', 'c', 'd']\n</code></pre>\n<p>In case you want to avoid the overhead of the list addition operation you can use <a href=\"https://docs.python.org/library/itertools.html#itertools.chain\" rel=\"nofollow noreferrer\"><code>itertools.chain</code></a> instead:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; from itertools import chain\n&gt;&gt;&gt; list(unique_everseen(chain(['a', 'b', 'c', 'd'], ['a', 'c', 'd'])))\n['a', 'b', 'c', 'd']\n</code></pre>\n<p>The <code>unique_everseen</code> also works if you have unhashable items (for example lists) in the lists:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; from iteration_utilities import unique_everseen\n&gt;&gt;&gt; list(unique_everseen([['a'], ['b'], 'c', 'd'] + ['a', 'c', 'd']))\n[['a'], ['b'], 'c', 'd', 'a']\n</code></pre>\n<p>However that will be (much) slower than if the items are hashable.</p>\n<hr/>\n<p><sup>1</sup> Disclosure: I'm the author of the <code>iteration_utilities</code>-library.</p>\n", "abstract": "It requires installing a 3rd-party module but the package iteration_utilities contains a unique_everseen1 function that can remove all duplicates while preserving the order: In case you want to avoid the overhead of the list addition operation you can use itertools.chain instead: The unique_everseen also works if you have unhashable items (for example lists) in the lists: However that will be (much) slower than if the items are hashable. 1 Disclosure: I'm the author of the iteration_utilities-library."}, {"id": 45755275, "score": 1, "vote": 0, "content": "<p>You can do this simply by using sets.</p>\n<p><strong>Step1:</strong> Get Different elements of lists <br/>\n<strong>Step2</strong> Get Common elements of lists <br/>\n<strong>Step3</strong> Combine them</p>\n<pre><code class=\"python\">In [1]: a = [\"apples\", \"bananas\", \"cucumbers\"]\n\nIn [2]: b = [\"pears\", \"apples\", \"watermelons\"]\n\nIn [3]: set(a).symmetric_difference(b).union(set(a).intersection(b))\nOut[3]: {'apples', 'bananas', 'cucumbers', 'pears', 'watermelons'}\n</code></pre>\n", "abstract": "You can do this simply by using sets. Step1: Get Different elements of lists \nStep2 Get Common elements of lists \nStep3 Combine them"}, {"id": 45900479, "score": 1, "vote": 0, "content": "<pre><code class=\"python\">def remove_duplicates(A):\n   [A.pop(count) for count,elem in enumerate(A) if A.count(elem)!=1]\n   return A\n</code></pre>\n<p>A list comprehesion to remove duplicates</p>\n", "abstract": "A list comprehesion to remove duplicates"}, {"id": 46272738, "score": 1, "vote": 0, "content": "<p>If you don't care about order and want something different than the pythonic ways suggested above (that is, it can be used in interviews) then : </p>\n<pre><code class=\"python\">def remove_dup(arr):\n    size = len(arr)\n    j = 0    # To store index of next unique element\n    for i in range(0, size-1):\n        # If current element is not equal\n        # to next element then store that\n        # current element\n        if(arr[i] != arr[i+1]):\n            arr[j] = arr[i]\n            j+=1\n\n    arr[j] = arr[size-1] # Store the last element as whether it is unique or repeated, it hasn't stored previously\n\n    return arr[0:j+1]\n\nif __name__ == '__main__':\n    arr = [10, 10, 1, 1, 1, 3, 3, 4, 5, 6, 7, 8, 8, 9]\n    print(remove_dup(sorted(arr)))\n</code></pre>\n<p>Time Complexity : O(n)</p>\n<p>Auxiliary Space : O(n)</p>\n<p>Reference: <a href=\"http://www.geeksforgeeks.org/remove-duplicates-sorted-array/\" rel=\"nofollow noreferrer\">http://www.geeksforgeeks.org/remove-duplicates-sorted-array/</a></p>\n", "abstract": "If you don't care about order and want something different than the pythonic ways suggested above (that is, it can be used in interviews) then :  Time Complexity : O(n) Auxiliary Space : O(n) Reference: http://www.geeksforgeeks.org/remove-duplicates-sorted-array/"}, {"id": 47885660, "score": 1, "vote": 0, "content": "<p>There are a lot of answers here that use a <code>set(..)</code> (which is fast given the elements are <em>hashable</em>), or a list (which has the downside that it results in an <em>O(n<sup>2</sup>)</em> algorithm.</p>\n<p>The function I propose is a hybrid one: we use a <code>set(..)</code> for items that <em>are</em> hashable, and a <code>list(..)</code> for the ones that are not. Furthermore it is implemented as a <em>generator</em> such that we can for instance limit the number of items, or do some additional filtering.</p>\n<p>Finally we also can use a <code>key</code> argument to specify in what way the elements should be unique. For instance we can use this if we want to filter a list of strings such that every string in the output has a different length.</p>\n<pre><code class=\"python\">def uniq(iterable, key=lambda x: x):\n    seens = set()\n    seenl = []\n    for item in iterable:\n        k = key(item)\n        try:\n            seen = k in seens\n        except TypeError:\n            seen = k in seenl\n        if not seen:\n            yield item\n            try:\n                seens.add(k)\n            except TypeError:\n                seenl.append(k)</code></pre>\n<p>We can now for instance use this like:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; list(uniq([\"apple\", \"pear\", \"banana\", \"lemon\"], len))\n['apple', 'pear', 'banana']\n&gt;&gt;&gt; list(uniq([\"apple\", \"pear\", \"lemon\", \"banana\"], len))\n['apple', 'pear', 'banana']\n&gt;&gt;&gt; list(uniq([\"apple\", \"pear\", {}, \"lemon\", [], \"banana\"], len))\n['apple', 'pear', {}, 'banana']\n&gt;&gt;&gt; list(uniq([\"apple\", \"pear\", {}, \"lemon\", [], \"banana\"]))\n['apple', 'pear', {}, 'lemon', [], 'banana']\n&gt;&gt;&gt; list(uniq([\"apple\", \"pear\", {}, \"lemon\", {}, \"banana\"]))\n['apple', 'pear', {}, 'lemon', 'banana']\n</code></pre>\n<p>It is thus a uniqeness filter that can work on any iterable and filter out uniques, regardless whether these are hashable or not.</p>\n<p>It makes one assumption: that if one object is hashable, and another one is not, the two objects are never equal. This can strictly speaking happen, although it would be very uncommon.</p>\n", "abstract": "There are a lot of answers here that use a set(..) (which is fast given the elements are hashable), or a list (which has the downside that it results in an O(n2) algorithm. The function I propose is a hybrid one: we use a set(..) for items that are hashable, and a list(..) for the ones that are not. Furthermore it is implemented as a generator such that we can for instance limit the number of items, or do some additional filtering. Finally we also can use a key argument to specify in what way the elements should be unique. For instance we can use this if we want to filter a list of strings such that every string in the output has a different length. We can now for instance use this like: It is thus a uniqeness filter that can work on any iterable and filter out uniques, regardless whether these are hashable or not. It makes one assumption: that if one object is hashable, and another one is not, the two objects are never equal. This can strictly speaking happen, although it would be very uncommon."}, {"id": 48933395, "score": 1, "vote": 0, "content": "<p>Another solution might be the following. Create a dictionary out of the list with item as key and index as value, and then print the dictionary keys.</p>\n<pre><code class=\"python\">&gt;&gt;&gt; lst = [1, 3, 4, 2, 1, 21, 1, 32, 21, 1, 6, 5, 7, 8, 2]\n&gt;&gt;&gt;\n&gt;&gt;&gt; dict_enum = {item:index for index, item in enumerate(lst)}\n&gt;&gt;&gt; print dict_enum.keys()\n[32, 1, 2, 3, 4, 5, 6, 7, 8, 21]\n</code></pre>\n", "abstract": "Another solution might be the following. Create a dictionary out of the list with item as key and index as value, and then print the dictionary keys."}, {"id": 68389146, "score": 1, "vote": 0, "content": "<ul>\n<li><p>You can <strong>remove duplicates</strong> using a Python <strong>set or the dict.fromkeys()</strong> method.</p>\n</li>\n<li><p>The <strong>dict.fromkeys()</strong> method <strong>converts</strong> a <strong>list into a dictionary</strong>. <strong>Dictionaries</strong> cannot contain <strong>duplicate</strong> values so a dictionary with only unique values is returned by dict.fromkeys().</p>\n</li>\n<li><p><strong>Sets</strong>, like dictionaries, cannot contain <strong>duplicate values</strong>. If we convert a <strong>list to a set</strong>, all the <strong>duplicates are removed</strong>.</p>\n</li>\n</ul>\n<h5 id=\"method-1-the-naive-approach-q81m\"><strong>Method 1: The naive approach</strong></h5>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">mylist = [5, 10, 15, 20, 3, 15, 25, 20, 30, 10, 100]\n\nuniques = []\n\nfor i in mylist:\n\n    if i not in uniques:\n\n       uniques.append(i)\n\nprint(uniques)\n</code></pre>\n<h5 id=\"method-2-using-set-9lke\"><strong>Method 2: Using set()</strong></h5>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">mylist = [5, 10, 15, 20, 3, 15, 25, 20, 30, 10, 100]\n\nmyset = set(mylist)\n\nprint(list(myset))\n</code></pre>\n", "abstract": "You can remove duplicates using a Python set or the dict.fromkeys() method. The dict.fromkeys() method converts a list into a dictionary. Dictionaries cannot contain duplicate values so a dictionary with only unique values is returned by dict.fromkeys(). Sets, like dictionaries, cannot contain duplicate values. If we convert a list to a set, all the duplicates are removed."}, {"id": 70463265, "score": 1, "vote": 0, "content": "<p>Using set, but preserving order</p>\n<pre><code class=\"python\">unique = set()\n[unique.add(n) or n for n in l if n not in unique]\n</code></pre>\n", "abstract": "Using set, but preserving order"}, {"id": 42694683, "score": 0, "vote": 0, "content": "<p>For completeness, and since this is a very popular question, the <a href=\"http://toolz.readthedocs.io/en/latest/\" rel=\"nofollow noreferrer\">toolz</a> library offers a <a href=\"http://toolz.readthedocs.io/en/latest/api.html#toolz.itertoolz.unique\" rel=\"nofollow noreferrer\"><code>unique</code></a> function:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; tuple(unique((1, 2, 3)))\n(1, 2, 3)\n&gt;&gt;&gt; tuple(unique((1, 2, 1, 3)))\n(1, 2, 3)\n</code></pre>\n", "abstract": "For completeness, and since this is a very popular question, the toolz library offers a unique function:"}, {"id": 49467226, "score": 0, "vote": 0, "content": "<pre><code class=\"python\">def remove_duplicates(input_list):\n  if input_list == []:\n    return []\n  #sort list from smallest to largest\n  input_list=sorted(input_list)\n  #initialize ouput list with first element of the       sorted input list\n  output_list = [input_list[0]]\n  for item in input_list:\n    if item &gt;output_list[-1]:\n      output_list.append(item)\n  return output_list   \n</code></pre>\n", "abstract": ""}, {"id": 52308906, "score": 0, "vote": 0, "content": "<p>this is just a readable funtion ,easily understandable ,and i have used the dict data structure,i have used some builtin funtions and a better complexity of O(n)</p>\n<pre><code class=\"python\">def undup(dup_list):\n    b={}\n    for i in dup_list:\n        b.update({i:1})\n    return b.keys()\na=[\"a\",'b','a']\nprint undup(a)\n</code></pre>\n<p>disclamer: u may get an indentation error(if copy and paste) ,use the above code with proper indentation before pasting</p>\n", "abstract": "this is just a readable funtion ,easily understandable ,and i have used the dict data structure,i have used some builtin funtions and a better complexity of O(n) disclamer: u may get an indentation error(if copy and paste) ,use the above code with proper indentation before pasting"}, {"id": 52888265, "score": 0, "vote": 0, "content": "<p>Python has built-in many functions You can use set() to remove the duplicate inside the list.\nAs per your example there are below two lists t and t2</p>\n<pre><code class=\"python\">t = ['a', 'b', 'c', 'd']\nt2 = ['a', 'c', 'd']\nresult = list(set(t) - set(t2))\nresult\n</code></pre>\n<p>Answer: ['b']</p>\n", "abstract": "Python has built-in many functions You can use set() to remove the duplicate inside the list.\nAs per your example there are below two lists t and t2 Answer: ['b']"}, {"id": 53845558, "score": 0, "vote": 0, "content": "<p>Sometimes you need to remove the duplicate items in-place, without creating new list. For example, the list is big, or keep it as a shadow copy</p>\n<pre><code class=\"python\">from collections import Counter\ncntDict = Counter(t)\nfor item,cnt in cntDict.items():\n    for _ in range(cnt-1):\n        t.remove(item)\n</code></pre>\n", "abstract": "Sometimes you need to remove the duplicate items in-place, without creating new list. For example, the list is big, or keep it as a shadow copy"}, {"id": 56260800, "score": 0, "vote": 0, "content": "<p>If your list is ordered, you can use the following approach to iterate over it skipping the repeated values. This is especially useful to handle big lists with low memory consumption evading the cost of building a <code>dict</code> or a <code>set</code>:</p>\n<pre><code class=\"python\">def uniq(iterator):\n    prev = None\n    for item in iterator:\n        if item != prev:\n            prev = item\n            yield item\n</code></pre>\n<p>Then:</p>\n<pre><code class=\"python\">for item in uniq([1, 1, 3, 5, 5, 6]):\n    print(item, end=' ')\n</code></pre>\n<p>The output is going to be: <code>1 3 5 6</code></p>\n<p>To return a list object, you could do:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; print(list(uniq([1, 1, 3, 5, 5, 6])))\n[1, 3, 5, 6]\n</code></pre>\n", "abstract": "If your list is ordered, you can use the following approach to iterate over it skipping the repeated values. This is especially useful to handle big lists with low memory consumption evading the cost of building a dict or a set: Then: The output is going to be: 1 3 5 6 To return a list object, you could do:"}, {"id": 70583675, "score": 0, "vote": 0, "content": "<p>You can compare the length of the set and the list and save the set items to list.</p>\n<pre><code class=\"python\">if len(t) != len(set(t)):\n    t = [x for x in set(t)]\n     \n</code></pre>\n", "abstract": "You can compare the length of the set and the list and save the set items to list."}, {"id": 51917186, "score": -1, "vote": 0, "content": "<pre><code class=\"python\">list_with_unique_items = list(set(list_with_duplicates))\n</code></pre>\n", "abstract": ""}, {"id": 64998826, "score": -1, "vote": 0, "content": "<pre><code class=\"python\">Test = [1,8,2,7,3,4,5,1,2,3,6]\nTest.sort()\ni=1\nwhile i&lt; len(Test):\n  if Test[i] == Test[i-1]:\n    Test.remove(Test[i])\n  i= i+1\nprint(Test)\n</code></pre>\n", "abstract": ""}, {"id": 66116598, "score": -1, "vote": 0, "content": "<h1>Check for the string 'a' and 'b'</h1>\n<pre><code class=\"python\">clean_list = []\n    for ele in raw_list:\n        if 'b' in ele or 'a' in ele:\n            pass\n        else:\n            clean_list.append(ele)\n</code></pre>\n", "abstract": ""}, {"id": 67086655, "score": -2, "vote": 0, "content": "<pre><code class=\"python\">Write a Python program to create a list of numbers by taking input from the user and then remove  the duplicates from the list. You can take input of non-zero numbers, with an appropriate  prompt, from the user until the user enters a zero to create the list assuming that the numbers  are non-zero.  \nSample Input: [10, 34, 18, 10, 12, 34, 18, 20, 25, 20]  \nOutput: [10, 34, 18, 12, 20, 25] \n\n lst = []\nprint(\"ENTER ZERO NUMBER FOR EXIT !!!!!!!!!!!!\")\nprint(\"ENTER LIST ELEMENTS  :: \")\nwhile True:\n    n = int(input())\n    if n == 0 :\n       print(\"!!!!!!!!!!! EXIT !!!!!!!!!!!!\")\n       break\n    else :\n        lst.append(n)\nprint(\"LIST ELEMENR ARE :: \",lst)\n#dup = set()\nuniq = []\nfor x in lst:\n    if x not in uniq:\n        uniq.append(x)\n       # dup.add(x)\nprint(\"UNIQUE ELEMENTS IN LIST ARE :: \",uniq)\n</code></pre>\n", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/15891038/change-column-type-in-pandas", "question": {"id": "15891038", "title": "Change column type in pandas", "content": "<p>I created a DataFrame from a list of lists:</p>\n<pre><code class=\"python\">table = [\n    ['a',  '1.2',  '4.2' ],\n    ['b',  '70',   '0.03'],\n    ['x',  '5',    '0'   ],\n]\n\ndf = pd.DataFrame(table)\n</code></pre>\n<p>How do I convert the columns to specific types? In this case, I want to convert columns 2 and 3 into floats.</p>\n<p>Is there a way to specify the types while converting to DataFrame? Or is it better to create the DataFrame first and then loop through the columns to change the type for each column? Ideally I would like to do this in a dynamic way because there can be hundreds of columns, and I don't want to specify exactly which columns are of which type. All I can guarantee is that each column contains values of the same type.</p>\n", "abstract": "I created a DataFrame from a list of lists: How do I convert the columns to specific types? In this case, I want to convert columns 2 and 3 into floats. Is there a way to specify the types while converting to DataFrame? Or is it better to create the DataFrame first and then loop through the columns to change the type for each column? Ideally I would like to do this in a dynamic way because there can be hundreds of columns, and I don't want to specify exactly which columns are of which type. All I can guarantee is that each column contains values of the same type."}, "answers": [{"id": 28648923, "score": 2228, "vote": 0, "content": "<p>You have four main options for converting types in pandas:</p>\n<ol>\n<li><p><a href=\"https://pandas.pydata.org/docs/reference/api/pandas.to_numeric.html\" rel=\"noreferrer\"><code>to_numeric()</code></a> - provides functionality to safely convert non-numeric types (e.g. strings) to a suitable numeric type. (See also <a href=\"https://pandas.pydata.org/docs/reference/api/pandas.to_datetime.html\" rel=\"noreferrer\"><code>to_datetime()</code></a> and <a href=\"https://pandas.pydata.org/docs/reference/api/pandas.to_timedelta.html\" rel=\"noreferrer\"><code>to_timedelta()</code></a>.)</p>\n</li>\n<li><p><a href=\"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.astype.html\" rel=\"noreferrer\"><code>astype()</code></a> - convert (almost) any type to (almost) any other type (even if it's not necessarily sensible to do so). Also allows you to convert to <a href=\"https://pandas.pydata.org/docs/user_guide/categorical.html\" rel=\"noreferrer\">categorial</a> types (very useful).</p>\n</li>\n<li><p><a href=\"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.infer_objects.html\" rel=\"noreferrer\"><code>infer_objects()</code></a> - a utility method to convert object columns holding Python objects to a pandas type if possible.</p>\n</li>\n<li><p><a href=\"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.convert_dtypes.html\" rel=\"noreferrer\"><code>convert_dtypes()</code></a> - convert DataFrame columns to the \"best possible\"  dtype that supports <code>pd.NA</code> (pandas' object to indicate a missing value).</p>\n</li>\n</ol>\n<p>Read on for more detailed explanations and usage of each of these methods.</p>\n<hr/>\n<h1>1. <code>to_numeric()</code></h1>\n<p>The best way to convert one or more columns of a DataFrame to numeric values is to use <a href=\"https://pandas.pydata.org/docs/reference/api/pandas.to_numeric.html\" rel=\"noreferrer\"><code>pandas.to_numeric()</code></a>.</p>\n<p>This function will try to change non-numeric objects (such as strings) into integers or floating-point numbers as appropriate.</p>\n<h2>Basic usage</h2>\n<p>The input to <a href=\"https://pandas.pydata.org/docs/reference/api/pandas.to_numeric.html\" rel=\"noreferrer\"><code>to_numeric()</code></a> is a Series or a single column of a DataFrame.</p>\n<pre><code class=\"python\">&gt;&gt;&gt; s = pd.Series([\"8\", 6, \"7.5\", 3, \"0.9\"]) # mixed string and numeric values\n&gt;&gt;&gt; s\n0      8\n1      6\n2    7.5\n3      3\n4    0.9\ndtype: object\n\n&gt;&gt;&gt; pd.to_numeric(s) # convert everything to float values\n0    8.0\n1    6.0\n2    7.5\n3    3.0\n4    0.9\ndtype: float64\n</code></pre>\n<p>As you can see, a new Series is returned. Remember to assign this output to a variable or column name to continue using it:</p>\n<pre><code class=\"python\"># convert Series\nmy_series = pd.to_numeric(my_series)\n\n# convert column \"a\" of a DataFrame\ndf[\"a\"] = pd.to_numeric(df[\"a\"])\n</code></pre>\n<p>You can also use it to convert multiple columns of a DataFrame via the <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.apply.html\" rel=\"noreferrer\"><code>apply()</code></a> method:</p>\n<pre><code class=\"python\"># convert all columns of DataFrame\ndf = df.apply(pd.to_numeric) # convert all columns of DataFrame\n\n# convert just columns \"a\" and \"b\"\ndf[[\"a\", \"b\"]] = df[[\"a\", \"b\"]].apply(pd.to_numeric)\n</code></pre>\n<p>As long as your values can all be converted, that's probably all you need.</p>\n<h2>Error handling</h2>\n<p>But what if some values can't be converted to a numeric type?</p>\n<p><a href=\"https://pandas.pydata.org/docs/reference/api/pandas.to_numeric.html\" rel=\"noreferrer\"><code>to_numeric()</code></a> also takes an <code>errors</code> keyword argument that allows you to force non-numeric values to be <code>NaN</code>, or simply ignore columns containing these values.</p>\n<p>Here's an example using a Series of strings <code>s</code> which has the object dtype:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; s = pd.Series(['1', '2', '4.7', 'pandas', '10'])\n&gt;&gt;&gt; s\n0         1\n1         2\n2       4.7\n3    pandas\n4        10\ndtype: object\n</code></pre>\n<p>The default behaviour is to raise if it can't convert a value. In this case, it can't cope with the string 'pandas':</p>\n<pre><code class=\"python\">&gt;&gt;&gt; pd.to_numeric(s) # or pd.to_numeric(s, errors='raise')\nValueError: Unable to parse string\n</code></pre>\n<p>Rather than fail, we might want 'pandas' to be considered a missing/bad numeric value. We can coerce invalid values to <code>NaN</code> as follows using the <code>errors</code> keyword argument:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; pd.to_numeric(s, errors='coerce')\n0     1.0\n1     2.0\n2     4.7\n3     NaN\n4    10.0\ndtype: float64\n</code></pre>\n<p>The third option for <code>errors</code> is just to ignore the operation if an invalid value is encountered:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; pd.to_numeric(s, errors='ignore')\n# the original Series is returned untouched\n</code></pre>\n<p>This last option is particularly useful for converting your entire DataFrame, but don't know which of our columns can be converted reliably to a numeric type. In that case, just write:</p>\n<pre><code class=\"python\">df.apply(pd.to_numeric, errors='ignore')\n</code></pre>\n<p>The function will be applied to each column of the DataFrame. Columns that can be converted to a numeric type will be converted, while columns that cannot (e.g. they contain non-digit strings or dates) will be left alone.</p>\n<h2>Downcasting</h2>\n<p>By default, conversion with <a href=\"https://pandas.pydata.org/docs/reference/api/pandas.to_numeric.html\" rel=\"noreferrer\"><code>to_numeric()</code></a> will give you either an <code>int64</code> or <code>float64</code> dtype (or whatever integer width is native to your platform).</p>\n<p>That's usually what you want, but what if you wanted to save some memory and use a more compact dtype, like <code>float32</code>, or <code>int8</code>?</p>\n<p><a href=\"https://pandas.pydata.org/docs/reference/api/pandas.to_numeric.html\" rel=\"noreferrer\"><code>to_numeric()</code></a> gives you the option to downcast to either <code>'integer'</code>, <code>'signed'</code>, <code>'unsigned'</code>, <code>'float'</code>. Here's an example for a simple series <code>s</code> of integer type:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; s = pd.Series([1, 2, -7])\n&gt;&gt;&gt; s\n0    1\n1    2\n2   -7\ndtype: int64\n</code></pre>\n<p>Downcasting to <code>'integer'</code> uses the smallest possible integer that can hold the values:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; pd.to_numeric(s, downcast='integer')\n0    1\n1    2\n2   -7\ndtype: int8\n</code></pre>\n<p>Downcasting to <code>'float'</code> similarly picks a smaller than normal floating type:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; pd.to_numeric(s, downcast='float')\n0    1.0\n1    2.0\n2   -7.0\ndtype: float32\n</code></pre>\n<hr/>\n<h1>2. <code>astype()</code></h1>\n<p>The <a href=\"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.astype.html\" rel=\"noreferrer\"><code>astype()</code></a> method enables you to be explicit about the dtype you want your DataFrame or Series to have. It's very versatile in that you can try and go from one type to any other.</p>\n<h2>Basic usage</h2>\n<p>Just pick a type: you can use a NumPy dtype (e.g. <code>np.int16</code>), some Python types (e.g. bool), or pandas-specific types (like the categorical dtype).</p>\n<p>Call the method on the object you want to convert and <a href=\"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.astype.html\" rel=\"noreferrer\"><code>astype()</code></a> will try and convert it for you:</p>\n<pre><code class=\"python\"># convert all DataFrame columns to the int64 dtype\ndf = df.astype(int)\n\n# convert column \"a\" to int64 dtype and \"b\" to complex type\ndf = df.astype({\"a\": int, \"b\": complex})\n\n# convert Series to float16 type\ns = s.astype(np.float16)\n\n# convert Series to Python strings\ns = s.astype(str)\n\n# convert Series to categorical type - see docs for more details\ns = s.astype('category')\n</code></pre>\n<p>Notice I said \"try\" - if <a href=\"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.astype.html\" rel=\"noreferrer\"><code>astype()</code></a> does not know how to convert a value in the Series or DataFrame, it will raise an error. For example, if you have a <code>NaN</code> or <code>inf</code> value you'll get an error trying to convert it to an integer.</p>\n<p>As of pandas 0.20.0, this error can be suppressed by passing <code>errors='ignore'</code>. Your original object will be returned untouched.</p>\n<h2>Be careful</h2>\n<p><a href=\"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.astype.html\" rel=\"noreferrer\"><code>astype()</code></a> is powerful, but it will sometimes convert values \"incorrectly\". For example:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; s = pd.Series([1, 2, -7])\n&gt;&gt;&gt; s\n0    1\n1    2\n2   -7\ndtype: int64\n</code></pre>\n<p>These are small integers, so how about converting to an unsigned 8-bit type to save memory?</p>\n<pre><code class=\"python\">&gt;&gt;&gt; s.astype(np.uint8)\n0      1\n1      2\n2    249\ndtype: uint8\n</code></pre>\n<p>The conversion worked, but the -7 was wrapped round to become 249 (i.e. 2<sup>8</sup> - 7)!</p>\n<p>Trying to downcast using <code>pd.to_numeric(s, downcast='unsigned')</code> instead could help prevent this error.</p>\n<hr/>\n<h1>3. <code>infer_objects()</code></h1>\n<p>Version 0.21.0 of pandas introduced the method <a href=\"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.infer_objects.html\" rel=\"noreferrer\"><code>infer_objects()</code></a> for converting columns of a DataFrame that have an object datatype to a more specific type (soft conversions).</p>\n<p>For example, here's a DataFrame with two columns of object type. One holds actual integers and the other holds strings representing integers:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; df = pd.DataFrame({'a': [7, 1, 5], 'b': ['3','2','1']}, dtype='object')\n&gt;&gt;&gt; df.dtypes\na    object\nb    object\ndtype: object\n</code></pre>\n<p>Using <a href=\"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.infer_objects.html\" rel=\"noreferrer\"><code>infer_objects()</code></a>, you can change the type of column 'a' to int64:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; df = df.infer_objects()\n&gt;&gt;&gt; df.dtypes\na     int64\nb    object\ndtype: object\n</code></pre>\n<p>Column 'b' has been left alone since its values were strings, not integers. If you wanted to force both columns to an integer type, you could use <code>df.astype(int)</code> instead.</p>\n<hr/>\n<h1>4. <code>convert_dtypes()</code></h1>\n<p>Version 1.0 and above includes a method <a href=\"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.convert_dtypes.html\" rel=\"noreferrer\"><code>convert_dtypes()</code></a> to convert Series and DataFrame columns to the best possible dtype that supports the <code>pd.NA</code> missing value.</p>\n<p>Here \"best possible\" means the type most suited to hold the values. For example, this a pandas integer type, if all of the values are integers (or missing values): an object column of Python integer objects are converted to <code>Int64</code>, a column of NumPy <code>int32</code> values, will become the pandas dtype <code>Int32</code>.</p>\n<p>With our <code>object</code> DataFrame <code>df</code>, we get the following result:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; df.convert_dtypes().dtypes                                             \na     Int64\nb    string\ndtype: object\n</code></pre>\n<p>Since column 'a' held integer values, it was converted to the <code>Int64</code> type (which is capable of holding missing values, unlike <code>int64</code>).</p>\n<p>Column 'b' contained string objects, so was changed to pandas' <code>string</code> dtype.</p>\n<p>By default, this method will infer the type from object values in each column. We can change this by passing <code>infer_objects=False</code>:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; df.convert_dtypes(infer_objects=False).dtypes                          \na    object\nb    string\ndtype: object\n</code></pre>\n<p>Now column 'a' remained an object column: pandas knows it can be described as an 'integer' column (internally it ran <a href=\"https://github.com/pandas-dev/pandas/blob/6b2d0260c818e62052eaf535767f3a8c4b446c69/pandas/_libs/lib.pyx#L1188-L1434\" rel=\"noreferrer\"><code>infer_dtype</code></a>) but didn't infer exactly what dtype of integer it should have so did not convert it. Column 'b' was again converted to 'string' dtype as it was recognised as holding 'string' values.</p>\n", "abstract": "You have four main options for converting types in pandas: to_numeric() - provides functionality to safely convert non-numeric types (e.g. strings) to a suitable numeric type. (See also to_datetime() and to_timedelta().) astype() - convert (almost) any type to (almost) any other type (even if it's not necessarily sensible to do so). Also allows you to convert to categorial types (very useful). infer_objects() - a utility method to convert object columns holding Python objects to a pandas type if possible. convert_dtypes() - convert DataFrame columns to the \"best possible\"  dtype that supports pd.NA (pandas' object to indicate a missing value). Read on for more detailed explanations and usage of each of these methods. The best way to convert one or more columns of a DataFrame to numeric values is to use pandas.to_numeric(). This function will try to change non-numeric objects (such as strings) into integers or floating-point numbers as appropriate. The input to to_numeric() is a Series or a single column of a DataFrame. As you can see, a new Series is returned. Remember to assign this output to a variable or column name to continue using it: You can also use it to convert multiple columns of a DataFrame via the apply() method: As long as your values can all be converted, that's probably all you need. But what if some values can't be converted to a numeric type? to_numeric() also takes an errors keyword argument that allows you to force non-numeric values to be NaN, or simply ignore columns containing these values. Here's an example using a Series of strings s which has the object dtype: The default behaviour is to raise if it can't convert a value. In this case, it can't cope with the string 'pandas': Rather than fail, we might want 'pandas' to be considered a missing/bad numeric value. We can coerce invalid values to NaN as follows using the errors keyword argument: The third option for errors is just to ignore the operation if an invalid value is encountered: This last option is particularly useful for converting your entire DataFrame, but don't know which of our columns can be converted reliably to a numeric type. In that case, just write: The function will be applied to each column of the DataFrame. Columns that can be converted to a numeric type will be converted, while columns that cannot (e.g. they contain non-digit strings or dates) will be left alone. By default, conversion with to_numeric() will give you either an int64 or float64 dtype (or whatever integer width is native to your platform). That's usually what you want, but what if you wanted to save some memory and use a more compact dtype, like float32, or int8? to_numeric() gives you the option to downcast to either 'integer', 'signed', 'unsigned', 'float'. Here's an example for a simple series s of integer type: Downcasting to 'integer' uses the smallest possible integer that can hold the values: Downcasting to 'float' similarly picks a smaller than normal floating type: The astype() method enables you to be explicit about the dtype you want your DataFrame or Series to have. It's very versatile in that you can try and go from one type to any other. Just pick a type: you can use a NumPy dtype (e.g. np.int16), some Python types (e.g. bool), or pandas-specific types (like the categorical dtype). Call the method on the object you want to convert and astype() will try and convert it for you: Notice I said \"try\" - if astype() does not know how to convert a value in the Series or DataFrame, it will raise an error. For example, if you have a NaN or inf value you'll get an error trying to convert it to an integer. As of pandas 0.20.0, this error can be suppressed by passing errors='ignore'. Your original object will be returned untouched. astype() is powerful, but it will sometimes convert values \"incorrectly\". For example: These are small integers, so how about converting to an unsigned 8-bit type to save memory? The conversion worked, but the -7 was wrapped round to become 249 (i.e. 28 - 7)! Trying to downcast using pd.to_numeric(s, downcast='unsigned') instead could help prevent this error. Version 0.21.0 of pandas introduced the method infer_objects() for converting columns of a DataFrame that have an object datatype to a more specific type (soft conversions). For example, here's a DataFrame with two columns of object type. One holds actual integers and the other holds strings representing integers: Using infer_objects(), you can change the type of column 'a' to int64: Column 'b' has been left alone since its values were strings, not integers. If you wanted to force both columns to an integer type, you could use df.astype(int) instead. Version 1.0 and above includes a method convert_dtypes() to convert Series and DataFrame columns to the best possible dtype that supports the pd.NA missing value. Here \"best possible\" means the type most suited to hold the values. For example, this a pandas integer type, if all of the values are integers (or missing values): an object column of Python integer objects are converted to Int64, a column of NumPy int32 values, will become the pandas dtype Int32. With our object DataFrame df, we get the following result: Since column 'a' held integer values, it was converted to the Int64 type (which is capable of holding missing values, unlike int64). Column 'b' contained string objects, so was changed to pandas' string dtype. By default, this method will infer the type from object values in each column. We can change this by passing infer_objects=False: Now column 'a' remained an object column: pandas knows it can be described as an 'integer' column (internally it ran infer_dtype) but didn't infer exactly what dtype of integer it should have so did not convert it. Column 'b' was again converted to 'string' dtype as it was recognised as holding 'string' values."}, {"id": 16134561, "score": 515, "vote": 0, "content": "<p>Use this:</p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">a = [['a', '1.2', '4.2'], ['b', '70', '0.03'], ['x', '5', '0']]\ndf = pd.DataFrame(a, columns=['one', 'two', 'three'])\ndf\n\nOut[16]:\n  one  two three\n0   a  1.2   4.2\n1   b   70  0.03\n2   x    5     0\n\ndf.dtypes\n\nOut[17]:\none      object\ntwo      object\nthree    object\n\ndf[['two', 'three']] = df[['two', 'three']].astype(float)\n\ndf.dtypes\n\nOut[19]:\none       object\ntwo      float64\nthree    float64\n</code></pre>\n", "abstract": "Use this:"}, {"id": 47303880, "score": 50, "vote": 0, "content": "<p>This below code will change the datatype of a column.</p>\n<pre><code class=\"python\">df[['col.name1', 'col.name2'...]] = df[['col.name1', 'col.name2'..]].astype('data_type')\n</code></pre>\n<p>In place of the data type, you can give your datatype what you want, like, str, float, int, etc.</p>\n", "abstract": "This below code will change the datatype of a column. In place of the data type, you can give your datatype what you want, like, str, float, int, etc."}, {"id": 52786962, "score": 31, "vote": 0, "content": "<p>When I've only needed to specify specific columns, and I want to be explicit, I've used (per <em><a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.astype.html\" rel=\"nofollow noreferrer\">pandas.DataFrame.astype</a></em>):</p>\n<pre><code class=\"python\">dataframe = dataframe.astype({'col_name_1':'int','col_name_2':'float64', etc. ...})\n</code></pre>\n<p>So, using the original question, but providing column names to it...</p>\n<pre><code class=\"python\">a = [['a', '1.2', '4.2'], ['b', '70', '0.03'], ['x', '5', '0']]\ndf = pd.DataFrame(a, columns=['col_name_1', 'col_name_2', 'col_name_3'])\ndf = df.astype({'col_name_2':'float64', 'col_name_3':'float64'})\n</code></pre>\n", "abstract": "When I've only needed to specify specific columns, and I want to be explicit, I've used (per pandas.DataFrame.astype): So, using the original question, but providing column names to it..."}, {"id": 60278450, "score": 18, "vote": 0, "content": "<h1>pandas &gt;= 1.0</h1>\n<p>Here's a chart that summarises some of the most important conversions in pandas.</p>\n<p><a href=\"https://i.stack.imgur.com/tUcdp.jpg\" rel=\"nofollow noreferrer\"><img alt=\"Enter image description here\" src=\"https://i.stack.imgur.com/tUcdp.jpg\"/></a></p>\n<p>Conversions to string are trivial <code>.astype(str)</code> and are not shown in the figure.</p>\n<h3>\"Hard\" versus \"Soft\" conversions</h3>\n<p>Note that \"conversions\" in this context could either refer to converting text data into their actual data type (hard conversion), or inferring more appropriate data types for data in object columns (soft conversion). To illustrate the difference, take a look at</p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">df = pd.DataFrame({'a': ['1', '2', '3'], 'b': [4, 5, 6]}, dtype=object)\ndf.dtypes\n\na    object\nb    object\ndtype: object\n\n# Actually converts string to numeric - hard conversion\ndf.apply(pd.to_numeric).dtypes\n\na    int64\nb    int64\ndtype: object\n\n# Infers better data types for object data - soft conversion\ndf.infer_objects().dtypes\n\na    object  # no change\nb     int64\ndtype: object\n\n# Same as infer_objects, but converts to equivalent ExtensionType\n    df.convert_dtypes().dtypes\n</code></pre>\n", "abstract": "Here's a chart that summarises some of the most important conversions in pandas.  Conversions to string are trivial .astype(str) and are not shown in the figure. Note that \"conversions\" in this context could either refer to converting text data into their actual data type (hard conversion), or inferring more appropriate data types for data in object columns (soft conversion). To illustrate the difference, take a look at"}, {"id": 44536326, "score": 17, "vote": 0, "content": "<p>Here is a function that takes as its arguments a DataFrame and a list of columns and coerces all data in the columns to numbers.</p>\n<pre><code class=\"python\"># df is the DataFrame, and column_list is a list of columns as strings (e.g [\"col1\",\"col2\",\"col3\"])\n# dependencies: pandas\n\ndef coerce_df_columns_to_numeric(df, column_list):\n    df[column_list] = df[column_list].apply(pd.to_numeric, errors='coerce')\n</code></pre>\n<p>So, for your example:</p>\n<pre><code class=\"python\">import pandas as pd\n\ndef coerce_df_columns_to_numeric(df, column_list):\n    df[column_list] = df[column_list].apply(pd.to_numeric, errors='coerce')\n\na = [['a', '1.2', '4.2'], ['b', '70', '0.03'], ['x', '5', '0']]\ndf = pd.DataFrame(a, columns=['col1','col2','col3'])\n\ncoerce_df_columns_to_numeric(df, ['col2','col3'])\n</code></pre>\n", "abstract": "Here is a function that takes as its arguments a DataFrame and a list of columns and coerces all data in the columns to numbers. So, for your example:"}, {"id": 69345157, "score": 14, "vote": 0, "content": "<pre><code class=\"python\">df = df.astype({\"columnname\": str})\n</code></pre>\n<p>#e.g - for changing the column type to string\n#df is your dataframe</p>\n", "abstract": "#e.g - for changing the column type to string\n#df is your dataframe"}, {"id": 45026465, "score": 11, "vote": 0, "content": "<p>Create two dataframes, each with different data types for their columns, and then appending them together:</p>\n<pre><code class=\"python\">d1 = pd.DataFrame(columns=[ 'float_column' ], dtype=float)\nd1 = d1.append(pd.DataFrame(columns=[ 'string_column' ], dtype=str))\n</code></pre>\n<p><strong>Results</strong></p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">In[8}:  d1.dtypes\nOut[8]:\nfloat_column     float64\nstring_column     object\ndtype: object\n</code></pre>\n<p>After the dataframe is created, you can populate it with floating point variables in the 1st column, and strings (or any data type you desire) in the 2nd column.</p>\n", "abstract": "Create two dataframes, each with different data types for their columns, and then appending them together: Results After the dataframe is created, you can populate it with floating point variables in the 1st column, and strings (or any data type you desire) in the 2nd column."}, {"id": 66778882, "score": 9, "vote": 0, "content": "<p>df.info() gives us initial datatype of temp which is float64</p>\n<pre><code class=\"python\"> #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   date    132 non-null    object \n 1   temp    132 non-null    float64\n</code></pre>\n<p>Now, use this code to change the datatype to int64:</p>\n<pre><code class=\"python\">df['temp'] = df['temp'].astype('int64')\n</code></pre>\n<p>if you do df.info() again, you will see:</p>\n<pre><code class=\"python\">  #   Column  Non-Null Count  Dtype \n ---  ------  --------------  ----- \n  0   date    132 non-null    object\n  1   temp    132 non-null    int64 \n</code></pre>\n<p>This shows you have successfully changed the datatype of column temp. Happy coding!</p>\n", "abstract": "df.info() gives us initial datatype of temp which is float64 Now, use this code to change the datatype to int64: if you do df.info() again, you will see: This shows you have successfully changed the datatype of column temp. Happy coding!"}, {"id": 61062085, "score": 4, "vote": 0, "content": "<p>Starting pandas 1.0.0, we have <code>pandas.DataFrame.convert_dtypes</code>. You can even control what types to convert!</p>\n<pre><code class=\"python\">In [40]: df = pd.DataFrame(\n    ...:     {\n    ...:         \"a\": pd.Series([1, 2, 3], dtype=np.dtype(\"int32\")),\n    ...:         \"b\": pd.Series([\"x\", \"y\", \"z\"], dtype=np.dtype(\"O\")),\n    ...:         \"c\": pd.Series([True, False, np.nan], dtype=np.dtype(\"O\")),\n    ...:         \"d\": pd.Series([\"h\", \"i\", np.nan], dtype=np.dtype(\"O\")),\n    ...:         \"e\": pd.Series([10, np.nan, 20], dtype=np.dtype(\"float\")),\n    ...:         \"f\": pd.Series([np.nan, 100.5, 200], dtype=np.dtype(\"float\")),\n    ...:     }\n    ...: )\n\nIn [41]: dff = df.copy()\n\nIn [42]: df \nOut[42]: \n   a  b      c    d     e      f\n0  1  x   True    h  10.0    NaN\n1  2  y  False    i   NaN  100.5\n2  3  z    NaN  NaN  20.0  200.0\n\nIn [43]: df.dtypes\nOut[43]: \na      int32\nb     object\nc     object\nd     object\ne    float64\nf    float64\ndtype: object\n\nIn [44]: df = df.convert_dtypes()\n\nIn [45]: df.dtypes\nOut[45]: \na      Int32\nb     string\nc    boolean\nd     string\ne      Int64\nf    float64\ndtype: object\n\nIn [46]: dff = dff.convert_dtypes(convert_boolean = False)\n\nIn [47]: dff.dtypes\nOut[47]: \na      Int32\nb     string\nc     object\nd     string\ne      Int64\nf    float64\ndtype: object\n</code></pre>\n", "abstract": "Starting pandas 1.0.0, we have pandas.DataFrame.convert_dtypes. You can even control what types to convert!"}, {"id": 70887673, "score": 2, "vote": 0, "content": "<p>In case you have various objects columns like this Dataframe of 74 Objects columns and 2 Int columns where each value have letters representing units:</p>\n<pre><code class=\"python\">import pandas as pd \nimport numpy as np\n\ndataurl = 'https://raw.githubusercontent.com/RubenGavidia/Pandas_Portfolio.py/main/Wes_Mckinney.py/nutrition.csv'\nnutrition = pd.read_csv(dataurl,index_col=[0])\nnutrition.head(3)\n</code></pre>\n<p>Output:</p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">    name    serving_size    calories    total_fat    saturated_fat    cholesterol    sodium    choline    folate    folic_acid    ...    fat    saturated_fatty_acids    monounsaturated_fatty_acids    polyunsaturated_fatty_acids    fatty_acids_total_trans    alcohol    ash    caffeine    theobromine    water\n0    Cornstarch    100 g    381    0.1g    NaN    0    9.00 mg    0.4 mg    0.00 mcg    0.00 mcg    ...    0.05 g    0.009 g    0.016 g    0.025 g    0.00 mg    0.0 g    0.09 g    0.00 mg    0.00 mg    8.32 g\n1    Nuts, pecans    100 g    691    72g    6.2g    0    0.00 mg    40.5 mg    22.00 mcg    0.00 mcg    ...    71.97 g    6.180 g    40.801 g    21.614 g    0.00 mg    0.0 g    1.49 g    0.00 mg    0.00 mg    3.52 g\n2    Eggplant, raw    100 g    25    0.2g    NaN    0    2.00 mg    6.9 mg    22.00 mcg    0.00 mcg    ...    0.18 g    0.034 g    0.016 g    0.076 g    0.00 mg    0.0 g    0.66 g    0.00 mg    0.00 mg    92.30 g\n3 rows \u00d7 76 columns\n\nnutrition.dtypes\nname             object\nserving_size     object\ncalories          int64\ntotal_fat        object\nsaturated_fat    object\n                  ...\nalcohol          object\nash              object\ncaffeine         object\ntheobromine      object\nwater            object\nLength: 76, dtype: object\n\nnutrition.dtypes.value_counts()\nobject    74\nint64      2\ndtype: int64\n</code></pre>\n<p>A good way to convert to numeric all columns is using regular expressions to replace the units for nothing and astype(float) for change the columns data type to float:</p>\n<pre><code class=\"python\">nutrition.index = pd.RangeIndex(start = 0, stop = 8789, step= 1)\nnutrition.set_index('name',inplace = True)\nnutrition.replace('[a-zA-Z]','', regex= True, inplace=True)\nnutrition=nutrition.astype(float)\nnutrition.head(3)\n</code></pre>\n<p>Output:</p>\n<pre class=\"lang-none prettyprint-override\"><code class=\"python\">serving_size    calories    total_fat    saturated_fat    cholesterol    sodium    choline    folate    folic_acid    niacin    ...    fat    saturated_fatty_acids    monounsaturated_fatty_acids    polyunsaturated_fatty_acids    fatty_acids_total_trans    alcohol    ash    caffeine    theobromine    water\nname\nCornstarch    100.0    381.0    0.1    NaN    0.0    9.0    0.4    0.0    0.0    0.000    ...    0.05    0.009    0.016    0.025    0.0    0.0    0.09    0.0    0.0    8.32\nNuts, pecans    100.0    691.0    72.0    6.2    0.0    0.0    40.5    22.0    0.0    1.167    ...    71.97    6.180    40.801    21.614    0.0    0.0    1.49    0.0    0.0    3.52\nEggplant, raw    100.0    25.0    0.2    NaN    0.0    2.0    6.9    22.0    0.0    0.649    ...    0.18    0.034    0.016    0.076    0.0    0.0    0.66    0.0    0.0    92.30\n3 rows \u00d7 75 columns\n\nnutrition.dtypes\nserving_size     float64\ncalories         float64\ntotal_fat        float64\nsaturated_fat    float64\ncholesterol      float64\n                  ...\nalcohol          float64\nash              float64\ncaffeine         float64\ntheobromine      float64\nwater            float64\nLength: 75, dtype: object\n\nnutrition.dtypes.value_counts()\nfloat64    75\ndtype: int64\n</code></pre>\n<p>Now the dataset is clean and you are able to do numeric operations with this Dataframe only with regex and astype().</p>\n<p>If you want to collect the units and paste on the headers like <code>cholesterol_mg</code> you can use this code:</p>\n<pre><code class=\"python\">nutrition.index = pd.RangeIndex(start = 0, stop = 8789, step= 1)\nnutrition.set_index('name',inplace = True)\nnutrition.astype(str).replace('[^a-zA-Z]','', regex= True)\nunits = nutrition.astype(str).replace('[^a-zA-Z]','', regex= True)\nunits = units.mode()\nunits = units.replace('', np.nan).dropna(axis=1)\nmapper = { k: k + \"_\" + units[k].at[0] for k in units}\nnutrition.rename(columns=mapper, inplace=True)\nnutrition.replace('[a-zA-Z]','', regex= True, inplace=True)\nnutrition=nutrition.astype(float)\n</code></pre>\n", "abstract": "In case you have various objects columns like this Dataframe of 74 Objects columns and 2 Int columns where each value have letters representing units: Output: A good way to convert to numeric all columns is using regular expressions to replace the units for nothing and astype(float) for change the columns data type to float: Output: Now the dataset is clean and you are able to do numeric operations with this Dataframe only with regex and astype(). If you want to collect the units and paste on the headers like cholesterol_mg you can use this code:"}, {"id": 71504740, "score": 2, "vote": 0, "content": "<blockquote>\n<p>Is there a way to specify the types while converting to DataFrame?</p>\n</blockquote>\n<p>Yes. The other answers convert the dtypes after creating the DataFrame, but we can specify the types at creation. Use either <code>DataFrame.from_records</code> or <code>read_csv(dtype=...)</code> depending on the input format.</p>\n<p>The latter is sometimes necessary to <a href=\"https://stackoverflow.com/a/66672335/13138364\">avoid memory errors with big data</a>.</p>\n<hr/>\n<h2>1. <a href=\"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.from_records.html\" rel=\"nofollow noreferrer\"><code>DataFrame.from_records</code></a></h2>\n<p>Create the DataFrame from a <a href=\"https://numpy.org/doc/stable/user/basics.rec.html#structured-arrays\" rel=\"nofollow noreferrer\">structured array</a> of the desired column types:</p>\n<pre><code class=\"python\">x = [['foo', '1.2', '70'], ['bar', '4.2', '5']]\n\ndf = pd.DataFrame.from_records(np.array(\n    [tuple(row) for row in x], # pass a list-of-tuples (x can be a list-of-lists or 2D array)\n    'object, float, int'       # define the column types\n))\n</code></pre>\n<p>Output:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; df.dtypes\n# f0     object\n# f1    float64\n# f2      int64\n# dtype: object\n</code></pre>\n<hr/>\n<h2>2. <a href=\"https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html\" rel=\"nofollow noreferrer\"><code>read_csv(dtype=...)</code></a></h2>\n<p>If you're reading the data from a file, use the <code>dtype</code> parameter of <code>read_csv</code> to set the column types at load time.</p>\n<p>For example, here we read 30M rows with <code>rating</code> as 8-bit integers and <code>genre</code> as categorical:</p>\n<pre><code class=\"python\">lines = '''\nfoo,biography,5\nbar,crime,4\nbaz,fantasy,3\nqux,history,2\nquux,horror,1\n'''\ncolumns = ['name', 'genre', 'rating']\ncsv = io.StringIO(lines * 6_000_000) # 30M lines\n\ndf = pd.read_csv(csv, names=columns, dtype={'rating': 'int8', 'genre': 'category'})\n</code></pre>\n<p>In this case, we halve the memory usage upon load:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; df.info(memory_usage='deep')\n# memory usage: 1.8 GB\n</code></pre>\n<pre><code class=\"python\">&gt;&gt;&gt; pd.read_csv(io.StringIO(lines * 6_000_000)).info(memory_usage='deep')\n# memory usage: 3.7 GB\n</code></pre>\n<p>This is one way to <a href=\"https://stackoverflow.com/a/66672335/13138364\">avoid memory errors with big data</a>. It's not always possible to change the dtypes <em>after</em> loading since we might not have enough memory to load the default-typed data in the first place.</p>\n", "abstract": "Is there a way to specify the types while converting to DataFrame? Yes. The other answers convert the dtypes after creating the DataFrame, but we can specify the types at creation. Use either DataFrame.from_records or read_csv(dtype=...) depending on the input format. The latter is sometimes necessary to avoid memory errors with big data. Create the DataFrame from a structured array of the desired column types: Output: If you're reading the data from a file, use the dtype parameter of read_csv to set the column types at load time. For example, here we read 30M rows with rating as 8-bit integers and genre as categorical: In this case, we halve the memory usage upon load: This is one way to avoid memory errors with big data. It's not always possible to change the dtypes after loading since we might not have enough memory to load the default-typed data in the first place."}, {"id": 54476875, "score": 1, "vote": 0, "content": "<p>I thought I had the same problem, but actually I have a slight difference that makes the problem easier to solve. For others looking at this question, it's worth checking the format of your input list. In my case the numbers are initially floats, not strings as in the question:</p>\n<pre><code class=\"python\">a = [['a', 1.2, 4.2], ['b', 70, 0.03], ['x', 5, 0]]\n</code></pre>\n<p>But by processing the list too much before creating the dataframe, I lose the types and everything becomes a string.</p>\n<p>Creating the data frame via a <a href=\"https://en.wikipedia.org/wiki/NumPy\" rel=\"nofollow noreferrer\">NumPy</a> array:</p>\n<pre><code class=\"python\">df = pd.DataFrame(np.array(a))\ndf\n\nOut[5]:\n   0    1     2\n0  a  1.2   4.2\n1  b   70  0.03\n2  x    5     0\n\ndf[1].dtype\nOut[7]: dtype('O')\n</code></pre>\n<p>gives the same data frame as in the question, where the entries in columns 1 and 2 are considered as strings. However doing</p>\n<pre><code class=\"python\">df = pd.DataFrame(a)\n\ndf\nOut[10]:\n   0     1     2\n0  a   1.2  4.20\n1  b  70.0  0.03\n2  x   5.0  0.00\n\ndf[1].dtype\nOut[11]: dtype('float64')\n</code></pre>\n<p>does actually give a data frame with the columns in the correct format.</p>\n", "abstract": "I thought I had the same problem, but actually I have a slight difference that makes the problem easier to solve. For others looking at this question, it's worth checking the format of your input list. In my case the numbers are initially floats, not strings as in the question: But by processing the list too much before creating the dataframe, I lose the types and everything becomes a string. Creating the data frame via a NumPy array: gives the same data frame as in the question, where the entries in columns 1 and 2 are considered as strings. However doing does actually give a data frame with the columns in the correct format."}, {"id": 72880108, "score": 0, "vote": 0, "content": "<p>I had the same issue.</p>\n<p>I could not find any solution that was satisfying. My solution was simply to convert those float into str and remove the '.0' this way.</p>\n<p>In my case, I just apply it on the first column:</p>\n<pre><code class=\"python\">firstCol = list(df.columns)[0]\ndf[firstCol] = df[firstCol].fillna('').astype(str).apply(lambda x: x.replace('.0', ''))\n</code></pre>\n", "abstract": "I had the same issue. I could not find any solution that was satisfying. My solution was simply to convert those float into str and remove the '.0' this way. In my case, I just apply it on the first column:"}]}, {"link": "https://stackoverflow.com/questions/7585435/best-way-to-convert-string-to-bytes-in-python-3", "question": {"id": "7585435", "title": "Best way to convert string to bytes in Python 3?", "content": "<p><a href=\"https://stackoverflow.com/questions/5471158/typeerror-str-does-not-support-the-buffer-interface\">TypeError: 'str' does not support the buffer interface</a> suggests two possible methods to convert a string to bytes:</p>\n<pre><code class=\"python\">b = bytes(mystring, 'utf-8')\n\nb = mystring.encode('utf-8')\n</code></pre>\n<p>Which method is more Pythonic?</p>\n", "abstract": "TypeError: 'str' does not support the buffer interface suggests two possible methods to convert a string to bytes: Which method is more Pythonic?"}, "answers": [{"id": 7585619, "score": 809, "vote": 0, "content": "<p>If you look at the docs for <code>bytes</code>, it points you to <a href=\"https://docs.python.org/3/library/functions.html#func-bytearray\" rel=\"noreferrer\"><code>bytearray</code></a>:</p>\n<blockquote>\n<p>bytearray([source[, encoding[, errors]]])</p>\n<p>Return a new array of bytes. The bytearray type is a mutable sequence of integers in the range 0 &lt;= x &lt; 256. It has most of the usual methods of mutable sequences, described in Mutable Sequence Types, as well as most methods that the bytes type has, see Bytes and Byte Array Methods.</p>\n<p>The optional source parameter can be used to initialize the array in a few different ways:</p>\n<p><strong>If it is a string, you must also give the encoding (and optionally, errors) parameters; bytearray() then converts the string to bytes using str.encode().</strong></p>\n<p><strong>If it is an integer, the array will have that size and will be initialized with null bytes.</strong></p>\n<p><strong>If it is an object conforming to the buffer interface, a read-only buffer of the object will be used to initialize the bytes array.</strong></p>\n<p><strong>If it is an iterable, it must be an iterable of integers in the range 0 &lt;= x &lt; 256, which are used as the initial contents of the array.</strong></p>\n<p><strong>Without an argument, an array of size 0 is created.</strong></p>\n</blockquote>\n<p>So <code>bytes</code> can do much more than just encode a string. It's Pythonic that it would allow you to call the constructor with any type of source parameter that makes sense.</p>\n<p>For  encoding a string, I think that <code>some_string.encode(encoding)</code> is more Pythonic than using the constructor, because it is the most self documenting -- \"take this string and encode it with this encoding\" is clearer than <code>bytes(some_string, encoding)</code> -- there is no explicit verb when you use the constructor.</p>\n<p>I checked the Python source. If you pass a unicode string to <code>bytes</code> using CPython, it calls <a href=\"http://hg.python.org/cpython/file/5a12416890c0/Objects/unicodeobject.c#l2328\" rel=\"noreferrer\">PyUnicode_AsEncodedString</a>, which is the implementation of <code>encode</code>; so you're just skipping a level of indirection if you call <code>encode</code> yourself.</p>\n<p>Also, see Serdalis' comment -- <code>unicode_string.encode(encoding)</code> is also more Pythonic because its inverse is <code>byte_string.decode(encoding)</code> and symmetry is nice.</p>\n", "abstract": "If you look at the docs for bytes, it points you to bytearray: bytearray([source[, encoding[, errors]]]) Return a new array of bytes. The bytearray type is a mutable sequence of integers in the range 0 <= x < 256. It has most of the usual methods of mutable sequences, described in Mutable Sequence Types, as well as most methods that the bytes type has, see Bytes and Byte Array Methods. The optional source parameter can be used to initialize the array in a few different ways: If it is a string, you must also give the encoding (and optionally, errors) parameters; bytearray() then converts the string to bytes using str.encode(). If it is an integer, the array will have that size and will be initialized with null bytes. If it is an object conforming to the buffer interface, a read-only buffer of the object will be used to initialize the bytes array. If it is an iterable, it must be an iterable of integers in the range 0 <= x < 256, which are used as the initial contents of the array. Without an argument, an array of size 0 is created. So bytes can do much more than just encode a string. It's Pythonic that it would allow you to call the constructor with any type of source parameter that makes sense. For  encoding a string, I think that some_string.encode(encoding) is more Pythonic than using the constructor, because it is the most self documenting -- \"take this string and encode it with this encoding\" is clearer than bytes(some_string, encoding) -- there is no explicit verb when you use the constructor. I checked the Python source. If you pass a unicode string to bytes using CPython, it calls PyUnicode_AsEncodedString, which is the implementation of encode; so you're just skipping a level of indirection if you call encode yourself. Also, see Serdalis' comment -- unicode_string.encode(encoding) is also more Pythonic because its inverse is byte_string.decode(encoding) and symmetry is nice."}, {"id": 17500651, "score": 623, "vote": 0, "content": "<p>It's easier than it is thought:</p>\n<pre><code class=\"python\">my_str = \"hello world\"\nmy_str_as_bytes = str.encode(my_str)\nprint(type(my_str_as_bytes)) # ensure it is byte representation\nmy_decoded_str = my_str_as_bytes.decode()\nprint(type(my_decoded_str)) # ensure it is string representation\n</code></pre>\n<p>you can verify by printing the types. Refer to output below.</p>\n<pre><code class=\"python\">&lt;class 'bytes'&gt;\n&lt;class 'str'&gt;\n</code></pre>\n", "abstract": "It's easier than it is thought: you can verify by printing the types. Refer to output below."}, {"id": 45269679, "score": 247, "vote": 0, "content": "<p>The <em>absolutely</em> best way is neither of the 2, but the 3rd. The first parameter to <a href=\"https://docs.python.org/3/library/stdtypes.html#str.encode\" rel=\"noreferrer\"><code>encode</code></a> <em>defaults to</em> <code>'utf-8'</code> ever since Python 3.0. Thus the best way is </p>\n<pre><code class=\"python\">b = mystring.encode()\n</code></pre>\n<p>This will also be faster, because the default argument results not in the string <code>\"utf-8\"</code> in the C code, but <em><code>NULL</code></em>, which is <em>much</em> faster to check!</p>\n<p>Here be some timings:</p>\n<pre><code class=\"python\">In [1]: %timeit -r 10 'abc'.encode('utf-8')\nThe slowest run took 38.07 times longer than the fastest. \nThis could mean that an intermediate result is being cached.\n10000000 loops, best of 10: 183 ns per loop\n\nIn [2]: %timeit -r 10 'abc'.encode()\nThe slowest run took 27.34 times longer than the fastest. \nThis could mean that an intermediate result is being cached.\n10000000 loops, best of 10: 137 ns per loop\n</code></pre>\n<p>Despite the warning the times were very stable after repeated runs - the deviation was just ~2 per cent.</p>\n<hr/>\n<p>Using <code>encode()</code> without an argument is not Python 2 compatible, as in Python 2 the default character encoding is <em>ASCII</em>.</p>\n<pre><code class=\"python\">&gt;&gt;&gt; '\u00e4\u00f6\u00e4'.encode()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 0: ordinal not in range(128)\n</code></pre>\n", "abstract": "The absolutely best way is neither of the 2, but the 3rd. The first parameter to encode defaults to 'utf-8' ever since Python 3.0. Thus the best way is  This will also be faster, because the default argument results not in the string \"utf-8\" in the C code, but NULL, which is much faster to check! Here be some timings: Despite the warning the times were very stable after repeated runs - the deviation was just ~2 per cent. Using encode() without an argument is not Python 2 compatible, as in Python 2 the default character encoding is ASCII."}, {"id": 65874499, "score": 57, "vote": 0, "content": "<p>Answer for a slightly different problem:</p>\n<p>You have a sequence of raw unicode that was saved into a str variable:</p>\n<pre><code class=\"python\">s_str: str = \"\\x00\\x01\\x00\\xc0\\x01\\x00\\x00\\x00\\x04\"\n</code></pre>\n<p>You need to be able to get the byte literal of that unicode (for struct.unpack(), etc.)</p>\n<pre><code class=\"python\">s_bytes: bytes = b'\\x00\\x01\\x00\\xc0\\x01\\x00\\x00\\x00\\x04'\n</code></pre>\n<p>Solution:</p>\n<pre><code class=\"python\">s_new: bytes = bytes(s, encoding=\"raw_unicode_escape\")\n</code></pre>\n<p>Reference (scroll up for standard encodings):</p>\n<p><a href=\"https://docs.python.org/3/library/codecs.html#text-encodings\" rel=\"noreferrer\">Python Specific Encodings</a></p>\n", "abstract": "Answer for a slightly different problem: You have a sequence of raw unicode that was saved into a str variable: You need to be able to get the byte literal of that unicode (for struct.unpack(), etc.) Solution: Reference (scroll up for standard encodings): Python Specific Encodings"}, {"id": 71620936, "score": 0, "vote": 0, "content": "<p>How about the Python 3 <a href=\"https://docs.python.org/3/library/stdtypes.html#binaryseq\" rel=\"nofollow noreferrer\">'<em><strong>memoryview</strong></em>'</a> way.</p>\n<p>Memoryview is a sort of mishmash of the byte/bytearray and struct modules, with several benefits.</p>\n<ul>\n<li>Not limited to just text and bytes, handles 16 and 32 bit words too</li>\n<li>Copes with endianness</li>\n<li>Provides a very low overhead interface to linked C/C++ functions and data</li>\n</ul>\n<p>Simplest example, for a byte array:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">memoryview(b\"some bytes\").tolist()\n\n[115, 111, 109, 101, 32, 98, 121, 116, 101, 115]\n</code></pre>\n<p>Or for a unicode string, (which is converted to a byte array)</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">memoryview(bytes(\"\\u0075\\u006e\\u0069\\u0063\\u006f\\u0064\\u0065\\u0020\", \"UTF-16\")).tolist()\n\n[255, 254, 117, 0, 110, 0, 105, 0, 99, 0, 111, 0, 100, 0, 101, 0, 32, 0]\n\n#Another way to do the same\nmemoryview(\"\\u0075\\u006e\\u0069\\u0063\\u006f\\u0064\\u0065\\u0020\".encode(\"UTF-16\")).tolist()\n\n[255, 254, 117, 0, 110, 0, 105, 0, 99, 0, 111, 0, 100, 0, 101, 0, 32, 0]\n</code></pre>\n<p>Perhaps you need words rather than bytes?</p>\n<pre><code class=\"python\">memoryview(bytes(\"\\u0075\\u006e\\u0069\\u0063\\u006f\\u0064\\u0065\\u0020\", \"UTF-16\")).cast(\"H\").tolist()\n\n[65279, 117, 110, 105, 99, 111, 100, 101, 32]\n\nmemoryview(b\"some  more  data\").cast(\"L\").tolist()\n\n[1701670771, 1869422624, 538994034, 1635017060]\n\n</code></pre>\n<p><strong>Word of caution.</strong> Be careful of multiple interpretations of byte order with data of more than one byte:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">txt = \"\\u0075\\u006e\\u0069\\u0063\\u006f\\u0064\\u0065\\u0020\"\nfor order in (\"\", \"BE\", \"LE\"):\n    mv = memoryview(bytes(txt, f\"UTF-16{order}\"))\n    print(mv.cast(\"H\").tolist())\n\n[65279, 117, 110, 105, 99, 111, 100, 101, 32]\n[29952, 28160, 26880, 25344, 28416, 25600, 25856, 8192]\n[117, 110, 105, 99, 111, 100, 101, 32]\n</code></pre>\n<p>Not sure if that's intentional or a bug but it caught me out!!</p>\n<p>The example used UTF-16, for a full list of codecs see <a href=\"https://docs.python.org/3/library/codecs.html#standard-encodings\" rel=\"nofollow noreferrer\">Codec registry in Python 3.10</a></p>\n", "abstract": "How about the Python 3 'memoryview' way. Memoryview is a sort of mishmash of the byte/bytearray and struct modules, with several benefits. Simplest example, for a byte array: Or for a unicode string, (which is converted to a byte array) Perhaps you need words rather than bytes? Word of caution. Be careful of multiple interpretations of byte order with data of more than one byte: Not sure if that's intentional or a bug but it caught me out!! The example used UTF-16, for a full list of codecs see Codec registry in Python 3.10"}]}, {"link": "https://stackoverflow.com/questions/1952464/in-python-how-do-i-determine-if-an-object-is-iterable", "question": {"id": "1952464", "title": "In Python, how do I determine if an object is iterable?", "content": "<p>Is there a method like <code>isiterable</code>? The only solution I have found so far is to call</p>\n<pre><code class=\"python\">hasattr(myObj, '__iter__')\n</code></pre>\n<p>But I am not sure how fool-proof this is.</p>\n", "abstract": "Is there a method like isiterable? The only solution I have found so far is to call But I am not sure how fool-proof this is."}, "answers": [{"id": 1952481, "score": 977, "vote": 0, "content": "<ol>\n<li><p>Checking for <code>__iter__</code> works on sequence types, but it would fail on e.g. strings <strong>in Python 2</strong>. I would like to know the right answer too, until then, here is one possibility (which would work on strings, too):</p>\n<pre><code class=\"python\"> try:\n     some_object_iterator = iter(some_object)\n except TypeError as te:\n     print(some_object, 'is not iterable')\n</code></pre>\n</li>\n</ol>\n<p>The <code>iter</code> built-in checks for the <code>__iter__</code> method or in the case of strings the <code>__getitem__</code> method.</p>\n<ol start=\"2\">\n<li>Another general pythonic approach is to assume an iterable, then fail gracefully if it does not work on the given object. The Python glossary:</li>\n</ol>\n<blockquote>\n<p>Pythonic programming style that determines an object's type by inspection of its method or attribute signature rather than by explicit relationship to some type object (\"If it looks like a <strong>duck</strong> and quacks like a <strong>duck</strong>, it must be a <strong>duck</strong>.\") By emphasizing interfaces rather than specific types, well-designed code improves its flexibility by allowing polymorphic substitution. Duck-typing avoids tests using type() or isinstance(). <strong>Instead, it typically employs the EAFP (Easier to Ask Forgiveness than Permission) style of programming.</strong></p>\n</blockquote>\n<blockquote>\n<p>...</p>\n</blockquote>\n<blockquote>\n<pre><code class=\"python\">try:\n   _ = (e for e in my_object)\nexcept TypeError:\n   print my_object, 'is not iterable'\n</code></pre>\n</blockquote>\n<ol start=\"3\">\n<li><p>The <a href=\"https://docs.python.org/3/library/collections.abc.html\" rel=\"noreferrer\"><code>collections</code></a> module provides some abstract base classes, which allow to ask classes or instances if they provide particular functionality, for example:</p>\n<pre><code class=\"python\"> from collections.abc import Iterable\n\n if isinstance(e, Iterable):\n     # e is iterable\n</code></pre>\n</li>\n</ol>\n<p>However, this does not check for classes that are iterable through <code>__getitem__</code>.</p>\n", "abstract": "Checking for __iter__ works on sequence types, but it would fail on e.g. strings in Python 2. I would like to know the right answer too, until then, here is one possibility (which would work on strings, too): The iter built-in checks for the __iter__ method or in the case of strings the __getitem__ method. Pythonic programming style that determines an object's type by inspection of its method or attribute signature rather than by explicit relationship to some type object (\"If it looks like a duck and quacks like a duck, it must be a duck.\") By emphasizing interfaces rather than specific types, well-designed code improves its flexibility by allowing polymorphic substitution. Duck-typing avoids tests using type() or isinstance(). Instead, it typically employs the EAFP (Easier to Ask Forgiveness than Permission) style of programming. ... The collections module provides some abstract base classes, which allow to ask classes or instances if they provide particular functionality, for example: However, this does not check for classes that are iterable through __getitem__."}, {"id": 1952655, "score": 671, "vote": 0, "content": "<h2>Duck typing</h2>\n<pre><code class=\"python\">try:\n    iterator = iter(the_element)\nexcept TypeError:\n    # not iterable\nelse:\n    # iterable\n\n# for obj in iterator:\n#     pass\n</code></pre>\n<h2>Type checking</h2>\n<p>Use the <a href=\"https://docs.python.org/library/abc.html\" rel=\"noreferrer\">Abstract Base Classes</a>. They need at least Python 2.6 and work only for new-style classes.</p>\n<pre><code class=\"python\">from collections.abc import Iterable   # import directly from collections for Python &lt; 3.3\n\nif isinstance(the_element, Iterable):\n    # iterable\nelse:\n    # not iterable\n</code></pre>\n<p>However, <code>iter()</code> is a bit more reliable as described <a href=\"https://docs.python.org/library/collections.abc.html#collections.abc.Iterable\" rel=\"noreferrer\">by the documentation</a>:</p>\n<blockquote>\n<p>Checking <code>isinstance(obj, Iterable)</code> detects classes that are\nregistered as Iterable or that have an <code>__iter__()</code> method, but\nit does not detect classes that iterate with the <code>__getitem__()</code>\nmethod. The only reliable way to determine whether an object\nis iterable is to call <code>iter(obj)</code>.</p>\n</blockquote>\n", "abstract": "Use the Abstract Base Classes. They need at least Python 2.6 and work only for new-style classes. However, iter() is a bit more reliable as described by the documentation: Checking isinstance(obj, Iterable) detects classes that are\nregistered as Iterable or that have an __iter__() method, but\nit does not detect classes that iterate with the __getitem__()\nmethod. The only reliable way to determine whether an object\nis iterable is to call iter(obj)."}, {"id": 36407550, "score": 199, "vote": 0, "content": "<p>I'd like to shed a little bit more light on the interplay of <code>iter</code>, <code>__iter__</code> and <code>__getitem__</code> and what happens behind the curtains. Armed with that knowledge, you will be able to understand why the best you can do is</p>\n<pre><code class=\"python\">try:\n    iter(maybe_iterable)\n    print('iteration will probably work')\nexcept TypeError:\n    print('not iterable')\n</code></pre>\n<p>I will list the facts first and then follow up with a quick reminder of what happens when you employ a <code>for</code> loop in python, followed by a discussion to illustrate the facts.</p>\n<h1>Facts</h1>\n<ol>\n<li><p>You can get an iterator from any object <code>o</code> by calling <code>iter(o)</code> if at least one of the following conditions holds true: <br/><br/>a) <code>o</code> has an <code>__iter__</code> method which returns an iterator object. An iterator is any object with an <code>__iter__</code> and a <code>__next__</code> (Python 2: <code>next</code>) method. <br/><br/>b) <code>o</code> has a <code>__getitem__</code> method.</p>\n</li>\n<li><p>Checking for an instance of <code>Iterable</code> or <code>Sequence</code>, or checking for the\nattribute <code>__iter__</code> is not enough.</p>\n</li>\n<li><p>If an object <code>o</code> implements only <code>__getitem__</code>, but not <code>__iter__</code>, <code>iter(o)</code> will construct\nan iterator that tries to fetch items from <code>o</code> by integer index, starting at index 0. The iterator will catch any <code>IndexError</code> (but no other errors) that is raised and then raises <code>StopIteration</code> itself.</p>\n</li>\n<li><p>In the most general sense, there's no way to check whether the iterator returned by <code>iter</code> is sane other than to try it out.</p>\n</li>\n<li><p>If an object <code>o</code> implements <code>__iter__</code>, the <code>iter</code> function will make sure\nthat the object returned by <code>__iter__</code> is an iterator. There is no sanity check\nif an object only implements <code>__getitem__</code>.</p>\n</li>\n<li><p><code>__iter__</code> wins. If an object <code>o</code> implements both <code>__iter__</code> and <code>__getitem__</code>, <code>iter(o)</code> will call <code>__iter__</code>.</p>\n</li>\n<li><p>If you want to make your own objects iterable, always implement the <code>__iter__</code> method.</p>\n</li>\n</ol>\n<h1><code>for</code> loops</h1>\n<p>In order to follow along, you need an understanding of what happens when you employ a <code>for</code> loop in Python. Feel free to skip right to the next section if you already know.</p>\n<p>When you use <code>for item in o</code> for some iterable object <code>o</code>, Python calls <code>iter(o)</code> and expects an iterator object as the return value. An iterator is any object which implements a <code>__next__</code> (or <code>next</code> in Python 2) method and an <code>__iter__</code> method.</p>\n<p>By convention, the <code>__iter__</code> method of an iterator should return the object itself (i.e. <code>return self</code>). Python then calls <code>next</code> on the iterator until <code>StopIteration</code> is raised. All of this happens implicitly, but the following demonstration makes it visible:</p>\n<pre><code class=\"python\">import random\n\nclass DemoIterable(object):\n    def __iter__(self):\n        print('__iter__ called')\n        return DemoIterator()\n\nclass DemoIterator(object):\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        print('__next__ called')\n        r = random.randint(1, 10)\n        if r == 5:\n            print('raising StopIteration')\n            raise StopIteration\n        return r\n</code></pre>\n<p>Iteration over a <code>DemoIterable</code>:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; di = DemoIterable()\n&gt;&gt;&gt; for x in di:\n...     print(x)\n...\n__iter__ called\n__next__ called\n9\n__next__ called\n8\n__next__ called\n10\n__next__ called\n3\n__next__ called\n10\n__next__ called\nraising StopIteration\n</code></pre>\n<h1>Discussion and illustrations</h1>\n<p><strong>On point 1 and 2: getting an iterator and unreliable checks</strong></p>\n<p>Consider the following class:</p>\n<pre><code class=\"python\">class BasicIterable(object):\n    def __getitem__(self, item):\n        if item == 3:\n            raise IndexError\n        return item\n</code></pre>\n<p>Calling <code>iter</code> with an instance of <code>BasicIterable</code> will return an iterator without any problems because <code>BasicIterable</code> implements <code>__getitem__</code>.</p>\n<pre><code class=\"python\">&gt;&gt;&gt; b = BasicIterable()\n&gt;&gt;&gt; iter(b)\n&lt;iterator object at 0x7f1ab216e320&gt;\n</code></pre>\n<p>However, it is important to note that <code>b</code> does not have the <code>__iter__</code> attribute and is not considered an instance of <code>Iterable</code> or <code>Sequence</code>:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; from collections import Iterable, Sequence\n&gt;&gt;&gt; hasattr(b, '__iter__')\nFalse\n&gt;&gt;&gt; isinstance(b, Iterable)\nFalse\n&gt;&gt;&gt; isinstance(b, Sequence)\nFalse\n</code></pre>\n<p>This is why <a href=\"http://shop.oreilly.com/product/0636920032519.do\" rel=\"noreferrer\">Fluent Python</a> by Luciano Ramalho recommends calling <code>iter</code> and handling the potential <code>TypeError</code> as the most accurate way to check whether an object is iterable. Quoting directly from the book:</p>\n<blockquote>\n<p>As of Python 3.4, the most accurate way to check whether an object <code>x</code> is iterable is to call <code>iter(x)</code> and handle a <code>TypeError</code> exception if it isn\u2019t. This is more accurate than using <code>isinstance(x, abc.Iterable)</code> , because <code>iter(x)</code> also considers the legacy <code>__getitem__</code> method, while the <code>Iterable</code> ABC does not.</p>\n</blockquote>\n<p><strong>On point 3: Iterating over objects which only provide <code>__getitem__</code>, but not <code>__iter__</code></strong></p>\n<p>Iterating over an instance of <code>BasicIterable</code> works as expected: Python\nconstructs an iterator that tries to fetch items by index, starting at zero, until an <code>IndexError</code> is raised. The demo object's <code>__getitem__</code> method simply returns the <code>item</code> which was supplied as the argument to <code>__getitem__(self, item)</code> by the iterator returned by <code>iter</code>.</p>\n<pre><code class=\"python\">&gt;&gt;&gt; b = BasicIterable()\n&gt;&gt;&gt; it = iter(b)\n&gt;&gt;&gt; next(it)\n0\n&gt;&gt;&gt; next(it)\n1\n&gt;&gt;&gt; next(it)\n2\n&gt;&gt;&gt; next(it)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nStopIteration\n</code></pre>\n<p>Note that the iterator raises <code>StopIteration</code> when it cannot return the next item and that the <code>IndexError</code> which is raised for <code>item == 3</code> is handled internally. This is why looping over a <code>BasicIterable</code> with a <code>for</code> loop works as expected:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; for x in b:\n...     print(x)\n...\n0\n1\n2\n</code></pre>\n<p>Here's another example in order to drive home the concept of how the iterator returned by <code>iter</code> tries to access items by index. <code>WrappedDict</code> does not inherit from <code>dict</code>, which means instances won't have an <code>__iter__</code> method.</p>\n<pre><code class=\"python\">class WrappedDict(object): # note: no inheritance from dict!\n    def __init__(self, dic):\n        self._dict = dic\n\n    def __getitem__(self, item):\n        try:\n            return self._dict[item] # delegate to dict.__getitem__\n        except KeyError:\n            raise IndexError\n</code></pre>\n<p>Note that calls to <code>__getitem__</code> are delegated to <code>dict.__getitem__</code> for which the square bracket notation is simply a shorthand.</p>\n<pre><code class=\"python\">&gt;&gt;&gt; w = WrappedDict({-1: 'not printed',\n...                   0: 'hi', 1: 'StackOverflow', 2: '!',\n...                   4: 'not printed', \n...                   'x': 'not printed'})\n&gt;&gt;&gt; for x in w:\n...     print(x)\n... \nhi\nStackOverflow\n!\n</code></pre>\n<p><strong>On point 4 and 5: <code>iter</code> checks for an iterator when it calls <code>__iter__</code></strong>:</p>\n<p>When <code>iter(o)</code> is called for an object <code>o</code>, <code>iter</code> will make sure that the return value of <code>__iter__</code>, if the method is present, is an iterator. This means that the returned object\nmust implement <code>__next__</code> (or <code>next</code> in Python 2) and <code>__iter__</code>. <code>iter</code> cannot perform any sanity checks for objects which only\nprovide <code>__getitem__</code>, because it has no way to check whether the items of the object are accessible by integer index.</p>\n<pre><code class=\"python\">class FailIterIterable(object):\n    def __iter__(self):\n        return object() # not an iterator\n\nclass FailGetitemIterable(object):\n    def __getitem__(self, item):\n        raise Exception\n</code></pre>\n<p>Note that constructing an iterator from <code>FailIterIterable</code> instances fails immediately, while constructing an iterator from <code>FailGetItemIterable</code> succeeds, but will throw an Exception on the first call to <code>__next__</code>.</p>\n<pre><code class=\"python\">&gt;&gt;&gt; fii = FailIterIterable()\n&gt;&gt;&gt; iter(fii)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: iter() returned non-iterator of type 'object'\n&gt;&gt;&gt;\n&gt;&gt;&gt; fgi = FailGetitemIterable()\n&gt;&gt;&gt; it = iter(fgi)\n&gt;&gt;&gt; next(it)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"/path/iterdemo.py\", line 42, in __getitem__\n    raise Exception\nException\n</code></pre>\n<p><strong>On point 6: <code>__iter__</code> wins</strong></p>\n<p>This one is straightforward. If an object implements <code>__iter__</code> and <code>__getitem__</code>, <code>iter</code> will call <code>__iter__</code>. Consider the following class</p>\n<pre><code class=\"python\">class IterWinsDemo(object):\n    def __iter__(self):\n        return iter(['__iter__', 'wins'])\n\n    def __getitem__(self, item):\n        return ['__getitem__', 'wins'][item]\n</code></pre>\n<p>and the output when looping over an instance:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; iwd = IterWinsDemo()\n&gt;&gt;&gt; for x in iwd:\n...     print(x)\n...\n__iter__\nwins\n</code></pre>\n<p><strong>On point 7: your iterable classes should implement <code>__iter__</code></strong></p>\n<p>You might ask yourself why most builtin sequences like <code>list</code> implement an <code>__iter__</code> method when <code>__getitem__</code> would be sufficient.</p>\n<pre><code class=\"python\">class WrappedList(object): # note: no inheritance from list!\n    def __init__(self, lst):\n        self._list = lst\n\n    def __getitem__(self, item):\n        return self._list[item]\n</code></pre>\n<p>After all, iteration over instances of the class above, which delegates calls to <code>__getitem__</code> to <code>list.__getitem__</code> (using the square bracket notation), will work fine:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; wl = WrappedList(['A', 'B', 'C'])\n&gt;&gt;&gt; for x in wl:\n...     print(x)\n... \nA\nB\nC\n</code></pre>\n<p>The reasons your custom iterables should implement <code>__iter__</code> are as follows:</p>\n<ol>\n<li>If you implement <code>__iter__</code>, instances will be considered iterables, and <code>isinstance(o, collections.abc.Iterable)</code> will return <code>True</code>.</li>\n<li>If the object returned by <code>__iter__</code> is not an iterator, <code>iter</code> will fail immediately and raise a <code>TypeError</code>.</li>\n<li>The special handling of <code>__getitem__</code> exists for backwards compatibility reasons. Quoting again from Fluent Python:</li>\n</ol>\n<blockquote>\n<p>That is why any Python sequence is iterable: they all implement <code>__getitem__</code> . In fact,\nthe standard sequences also implement <code>__iter__</code>, and yours should too, because the\nspecial handling of <code>__getitem__</code> exists for backward compatibility reasons and may be\ngone in the future (although it is not deprecated as I write this).</p>\n</blockquote>\n", "abstract": "I'd like to shed a little bit more light on the interplay of iter, __iter__ and __getitem__ and what happens behind the curtains. Armed with that knowledge, you will be able to understand why the best you can do is I will list the facts first and then follow up with a quick reminder of what happens when you employ a for loop in python, followed by a discussion to illustrate the facts. You can get an iterator from any object o by calling iter(o) if at least one of the following conditions holds true: a) o has an __iter__ method which returns an iterator object. An iterator is any object with an __iter__ and a __next__ (Python 2: next) method. b) o has a __getitem__ method. Checking for an instance of Iterable or Sequence, or checking for the\nattribute __iter__ is not enough. If an object o implements only __getitem__, but not __iter__, iter(o) will construct\nan iterator that tries to fetch items from o by integer index, starting at index 0. The iterator will catch any IndexError (but no other errors) that is raised and then raises StopIteration itself. In the most general sense, there's no way to check whether the iterator returned by iter is sane other than to try it out. If an object o implements __iter__, the iter function will make sure\nthat the object returned by __iter__ is an iterator. There is no sanity check\nif an object only implements __getitem__. __iter__ wins. If an object o implements both __iter__ and __getitem__, iter(o) will call __iter__. If you want to make your own objects iterable, always implement the __iter__ method. In order to follow along, you need an understanding of what happens when you employ a for loop in Python. Feel free to skip right to the next section if you already know. When you use for item in o for some iterable object o, Python calls iter(o) and expects an iterator object as the return value. An iterator is any object which implements a __next__ (or next in Python 2) method and an __iter__ method. By convention, the __iter__ method of an iterator should return the object itself (i.e. return self). Python then calls next on the iterator until StopIteration is raised. All of this happens implicitly, but the following demonstration makes it visible: Iteration over a DemoIterable: On point 1 and 2: getting an iterator and unreliable checks Consider the following class: Calling iter with an instance of BasicIterable will return an iterator without any problems because BasicIterable implements __getitem__. However, it is important to note that b does not have the __iter__ attribute and is not considered an instance of Iterable or Sequence: This is why Fluent Python by Luciano Ramalho recommends calling iter and handling the potential TypeError as the most accurate way to check whether an object is iterable. Quoting directly from the book: As of Python 3.4, the most accurate way to check whether an object x is iterable is to call iter(x) and handle a TypeError exception if it isn\u2019t. This is more accurate than using isinstance(x, abc.Iterable) , because iter(x) also considers the legacy __getitem__ method, while the Iterable ABC does not. On point 3: Iterating over objects which only provide __getitem__, but not __iter__ Iterating over an instance of BasicIterable works as expected: Python\nconstructs an iterator that tries to fetch items by index, starting at zero, until an IndexError is raised. The demo object's __getitem__ method simply returns the item which was supplied as the argument to __getitem__(self, item) by the iterator returned by iter. Note that the iterator raises StopIteration when it cannot return the next item and that the IndexError which is raised for item == 3 is handled internally. This is why looping over a BasicIterable with a for loop works as expected: Here's another example in order to drive home the concept of how the iterator returned by iter tries to access items by index. WrappedDict does not inherit from dict, which means instances won't have an __iter__ method. Note that calls to __getitem__ are delegated to dict.__getitem__ for which the square bracket notation is simply a shorthand. On point 4 and 5: iter checks for an iterator when it calls __iter__: When iter(o) is called for an object o, iter will make sure that the return value of __iter__, if the method is present, is an iterator. This means that the returned object\nmust implement __next__ (or next in Python 2) and __iter__. iter cannot perform any sanity checks for objects which only\nprovide __getitem__, because it has no way to check whether the items of the object are accessible by integer index. Note that constructing an iterator from FailIterIterable instances fails immediately, while constructing an iterator from FailGetItemIterable succeeds, but will throw an Exception on the first call to __next__. On point 6: __iter__ wins This one is straightforward. If an object implements __iter__ and __getitem__, iter will call __iter__. Consider the following class and the output when looping over an instance: On point 7: your iterable classes should implement __iter__ You might ask yourself why most builtin sequences like list implement an __iter__ method when __getitem__ would be sufficient. After all, iteration over instances of the class above, which delegates calls to __getitem__ to list.__getitem__ (using the square bracket notation), will work fine: The reasons your custom iterables should implement __iter__ are as follows: That is why any Python sequence is iterable: they all implement __getitem__ . In fact,\nthe standard sequences also implement __iter__, and yours should too, because the\nspecial handling of __getitem__ exists for backward compatibility reasons and may be\ngone in the future (although it is not deprecated as I write this)."}, {"id": 61139278, "score": 97, "vote": 0, "content": "<p>I've been studying this problem quite a bit lately. Based on that my conclusion is that nowadays this is the best approach:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">from collections.abc import Iterable   # drop `.abc` with Python 2.7 or lower\n\ndef iterable(obj):\n    return isinstance(obj, Iterable)\n</code></pre>\n<p>The above has been recommended already earlier, but the general consensus has been that using <code>iter()</code> would be better:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">def iterable(obj):\n    try:\n        iter(obj)\n    except Exception:\n        return False\n    else:\n        return True\n</code></pre>\n<p>We've used <code>iter()</code> in our code as well for this purpose, but I've lately started to get more and more annoyed by objects which only have <code>__getitem__</code> being considered iterable. There are valid reasons to have <code>__getitem__</code> in a non-iterable object and with them the above code doesn't work well. As a real life example we can use <a href=\"https://faker.readthedocs.io/en/master/\" rel=\"noreferrer\">Faker</a>. The above code reports it being iterable but actually trying to iterate it causes an <code>AttributeError</code> (tested with Faker 4.0.2):</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">&gt;&gt;&gt; from faker import Faker\n&gt;&gt;&gt; fake = Faker()\n&gt;&gt;&gt; iter(fake)    # No exception, must be iterable\n&lt;iterator object at 0x7f1c71db58d0&gt;\n&gt;&gt;&gt; list(fake)    # Ooops\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"/home/.../site-packages/faker/proxy.py\", line 59, in __getitem__\n    return self._factory_map[locale.replace('-', '_')]\nAttributeError: 'int' object has no attribute 'replace'\n</code></pre>\n<p>If we'd use <code>insinstance()</code>, we wouldn't accidentally consider Faker instances (or any other objects having only <code>__getitem__</code>) to be iterable:</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">&gt;&gt;&gt; from collections.abc import Iterable\n&gt;&gt;&gt; from faker import Faker\n&gt;&gt;&gt; isinstance(Faker(), Iterable)\nFalse\n</code></pre>\n<p>Earlier answers commented that using <code>iter()</code> is safer as the old way to implement iteration in Python was based on <code>__getitem__</code> and the <code>isinstance()</code> approach wouldn't detect that. This may have been true with old Python versions, but based on my pretty exhaustive testing <code>isinstance()</code> works great nowadays. The only case where <code>isinstance()</code> didn't work but <code>iter()</code> did was with <code>UserDict</code> when using Python 2. If that's relevant, it's possible to use <code>isinstance(item, (Iterable, UserDict))</code> to get that covered.</p>\n", "abstract": "I've been studying this problem quite a bit lately. Based on that my conclusion is that nowadays this is the best approach: The above has been recommended already earlier, but the general consensus has been that using iter() would be better: We've used iter() in our code as well for this purpose, but I've lately started to get more and more annoyed by objects which only have __getitem__ being considered iterable. There are valid reasons to have __getitem__ in a non-iterable object and with them the above code doesn't work well. As a real life example we can use Faker. The above code reports it being iterable but actually trying to iterate it causes an AttributeError (tested with Faker 4.0.2): If we'd use insinstance(), we wouldn't accidentally consider Faker instances (or any other objects having only __getitem__) to be iterable: Earlier answers commented that using iter() is safer as the old way to implement iteration in Python was based on __getitem__ and the isinstance() approach wouldn't detect that. This may have been true with old Python versions, but based on my pretty exhaustive testing isinstance() works great nowadays. The only case where isinstance() didn't work but iter() did was with UserDict when using Python 2. If that's relevant, it's possible to use isinstance(item, (Iterable, UserDict)) to get that covered."}, {"id": 48830589, "score": 42, "vote": 0, "content": "<p>Since <strong>Python 3.5</strong> you can use the <a href=\"https://docs.python.org/3/library/typing.html\" rel=\"noreferrer\">typing</a> module from the standard library for type related things:</p>\n<pre><code class=\"python\">from typing import Iterable\n\n...\n\nif isinstance(my_item, Iterable):\n    print(True)\n</code></pre>\n", "abstract": "Since Python 3.5 you can use the typing module from the standard library for type related things:"}, {"id": 1952485, "score": 33, "vote": 0, "content": "<p>This isn't sufficient: the object returned by <code>__iter__</code> must implement the iteration protocol (i.e. <code>next</code> method). See the relevant section in the <a href=\"http://docs.python.org/library/stdtypes.html#iterator-types\" rel=\"noreferrer\">documentation</a>.</p>\n<p>In Python, a good practice is to \"try and see\" instead of \"checking\".</p>\n", "abstract": "This isn't sufficient: the object returned by __iter__ must implement the iteration protocol (i.e. next method). See the relevant section in the documentation. In Python, a good practice is to \"try and see\" instead of \"checking\"."}, {"id": 1952851, "score": 23, "vote": 0, "content": "<p>In Python &lt;= 2.5, you can't and shouldn't - iterable was an \"informal\" interface.</p>\n<p>But since Python 2.6 and 3.0 you can leverage the new ABC (abstract base class) infrastructure along with some builtin ABCs which are available in the collections module:</p>\n<pre><code class=\"python\">from collections import Iterable\n\nclass MyObject(object):\n    pass\n\nmo = MyObject()\nprint isinstance(mo, Iterable)\nIterable.register(MyObject)\nprint isinstance(mo, Iterable)\n\nprint isinstance(\"abc\", Iterable)\n</code></pre>\n<p>Now, whether this is desirable or actually works, is just a matter of conventions. As you can see, you <em>can</em> register a non-iterable object as Iterable - and it will raise an exception at runtime. Hence, isinstance acquires a \"new\" meaning - it just checks for \"declared\" type compatibility, which is a good way to go in Python.</p>\n<p>On the other hand, if your object does not satisfy the interface you need, what are you going to do? Take the following example:</p>\n<pre><code class=\"python\">from collections import Iterable\nfrom traceback import print_exc\n\ndef check_and_raise(x):\n    if not isinstance(x, Iterable):\n        raise TypeError, \"%s is not iterable\" % x\n    else:\n        for i in x:\n            print i\n\ndef just_iter(x):\n    for i in x:\n        print i\n\n\nclass NotIterable(object):\n    pass\n\nif __name__ == \"__main__\":\n    try:\n        check_and_raise(5)\n    except:\n        print_exc()\n        print\n\n    try:\n        just_iter(5)\n    except:\n        print_exc()\n        print\n\n    try:\n        Iterable.register(NotIterable)\n        ni = NotIterable()\n        check_and_raise(ni)\n    except:\n        print_exc()\n        print\n</code></pre>\n<p>If the object doesn't satisfy what you expect, you just throw a TypeError, but if the proper ABC has been registered, your check is unuseful. On the contrary, if the <code>__iter__</code> method is available Python will automatically recognize object of that class as being Iterable.</p>\n<p>So, if you just expect an iterable, iterate over it and forget it. On the other hand, if you need to do different things depending on input type, you might find the ABC infrastructure pretty useful.</p>\n", "abstract": "In Python <= 2.5, you can't and shouldn't - iterable was an \"informal\" interface. But since Python 2.6 and 3.0 you can leverage the new ABC (abstract base class) infrastructure along with some builtin ABCs which are available in the collections module: Now, whether this is desirable or actually works, is just a matter of conventions. As you can see, you can register a non-iterable object as Iterable - and it will raise an exception at runtime. Hence, isinstance acquires a \"new\" meaning - it just checks for \"declared\" type compatibility, which is a good way to go in Python. On the other hand, if your object does not satisfy the interface you need, what are you going to do? Take the following example: If the object doesn't satisfy what you expect, you just throw a TypeError, but if the proper ABC has been registered, your check is unuseful. On the contrary, if the __iter__ method is available Python will automatically recognize object of that class as being Iterable. So, if you just expect an iterable, iterate over it and forget it. On the other hand, if you need to do different things depending on input type, you might find the ABC infrastructure pretty useful."}, {"id": 1952508, "score": 21, "vote": 0, "content": "<pre><code class=\"python\">try:\n  #treat object as iterable\nexcept TypeError, e:\n  #object is not actually iterable\n</code></pre>\n<p>Don't run checks to see <s>if your duck really is a duck</s> to see if it is iterable or not, treat it as if it was and complain if it wasn't.</p>\n", "abstract": "Don't run checks to see if your duck really is a duck to see if it is iterable or not, treat it as if it was and complain if it wasn't."}, {"id": 1952507, "score": 18, "vote": 0, "content": "<p>You could try this:</p>\n<pre><code class=\"python\">def iterable(a):\n    try:\n        (x for x in a)\n        return True\n    except TypeError:\n        return False\n</code></pre>\n<p>If we can make a generator that iterates over it (but never use the generator so it doesn't take up space), it's iterable. Seems like a \"duh\" kind of thing. Why do you need to determine if a variable is iterable in the first place?</p>\n", "abstract": "You could try this: If we can make a generator that iterates over it (but never use the generator so it doesn't take up space), it's iterable. Seems like a \"duh\" kind of thing. Why do you need to determine if a variable is iterable in the first place?"}, {"id": 4136141, "score": 15, "vote": 0, "content": "<p>The best solution I've found so far:</p>\n<p><code>hasattr(obj, '__contains__')</code></p>\n<p>which basically checks if the object implements the <code>in</code> operator.</p>\n<p><strong>Advantages</strong> (none of the other solutions has all three):</p>\n<ul>\n<li>it is an expression (works as a <strong>lambda</strong>, as opposed to the <strong>try...except</strong> variant)</li>\n<li>it is (should be) implemented by all iterables, including <strong>strings</strong> (as opposed to <code>__iter__</code>)</li>\n<li>works on any Python &gt;= 2.5</li>\n</ul>\n<p>Notes: </p>\n<ul>\n<li>the Python philosophy of \"ask for forgiveness, not permission\" doesn't work well when e.g. in a list you have both iterables and non-iterables and you need to treat each element differently according to it's type (treating iterables on try and non-iterables on except <em>would</em> work, but it would look butt-ugly and misleading)</li>\n<li>solutions to this problem which attempt to actually iterate over the object (e.g. [x for x in obj]) to check if it's iterable may induce significant performance penalties for large iterables (especially if you just need the first few elements of the iterable, for example) and should be avoided</li>\n</ul>\n", "abstract": "The best solution I've found so far: hasattr(obj, '__contains__') which basically checks if the object implements the in operator. Advantages (none of the other solutions has all three): Notes: "}, {"id": 1952735, "score": 14, "vote": 0, "content": "<p>I found a nice solution <a href=\"http://bytes.com/topic/python/answers/514838-how-test-if-object-sequence-iterable\" rel=\"noreferrer\">here</a>:</p>\n<pre><code class=\"python\">isiterable = lambda obj: isinstance(obj, basestring) \\\n    or getattr(obj, '__iter__', False)\n</code></pre>\n", "abstract": "I found a nice solution here:"}, {"id": 10664278, "score": 11, "vote": 0, "content": "<p>According to the <a href=\"https://docs.python.org/2/glossary.html#term-iterable\" rel=\"noreferrer\">Python 2 Glossary</a>, iterables are</p>\n<blockquote>\n<p>all sequence types (such as <code>list</code>, <code>str</code>, and <code>tuple</code>) and some non-sequence types like <code>dict</code> and <code>file</code> and objects of any classes you define with an <code>__iter__()</code> or <code>__getitem__()</code> method. Iterables can be used in a for loop and in many other places where a sequence is needed (zip(), map(), ...). When an iterable object is passed as an argument to the built-in function iter(), it returns an iterator for the object.</p>\n</blockquote>\n<p>Of course, given the general coding style for Python based on the fact that it's \u201cEasier to ask for forgiveness than permission.\u201d, the general expectation is to use</p>\n<pre><code class=\"python\">try:\n    for i in object_in_question:\n        do_something\nexcept TypeError:\n    do_something_for_non_iterable\n</code></pre>\n<p>But if you need to check it explicitly, you can test for an iterable by <code>hasattr(object_in_question, \"__iter__\") or hasattr(object_in_question, \"__getitem__\")</code>. You need to check for both, because <code>str</code>s don't have an <code>__iter__</code> method (at least not in Python 2, in Python 3 they do) and because <code>generator</code> objects don't have a <code>__getitem__</code> method.</p>\n", "abstract": "According to the Python 2 Glossary, iterables are all sequence types (such as list, str, and tuple) and some non-sequence types like dict and file and objects of any classes you define with an __iter__() or __getitem__() method. Iterables can be used in a for loop and in many other places where a sequence is needed (zip(), map(), ...). When an iterable object is passed as an argument to the built-in function iter(), it returns an iterator for the object. Of course, given the general coding style for Python based on the fact that it's \u201cEasier to ask for forgiveness than permission.\u201d, the general expectation is to use But if you need to check it explicitly, you can test for an iterable by hasattr(object_in_question, \"__iter__\") or hasattr(object_in_question, \"__getitem__\"). You need to check for both, because strs don't have an __iter__ method (at least not in Python 2, in Python 3 they do) and because generator objects don't have a __getitem__ method."}, {"id": 15598574, "score": 8, "vote": 0, "content": "<p>I often find convenient, inside my scripts, to define an <code>iterable</code> function.\n(Now incorporates Alfe's suggested simplification):</p>\n<pre><code class=\"python\">import collections\n\ndef iterable(obj):\n    return isinstance(obj, collections.Iterable):\n</code></pre>\n<p>so you can test if any object is iterable in the very readable form</p>\n<pre><code class=\"python\">if iterable(obj):\n    # act on iterable\nelse:\n    # not iterable\n</code></pre>\n<p>as you would do with the<code>callable</code> function</p>\n<p>EDIT: if you have numpy installed, you can simply do: from <code>numpy import iterable</code>, \nwhich is simply something like</p>\n<pre><code class=\"python\">def iterable(obj):\n    try: iter(obj)\n    except: return False\n    return True\n</code></pre>\n<p>If you do not have numpy, you can simply implement this code, or the one above.</p>\n", "abstract": "I often find convenient, inside my scripts, to define an iterable function.\n(Now incorporates Alfe's suggested simplification): so you can test if any object is iterable in the very readable form as you would do with thecallable function EDIT: if you have numpy installed, you can simply do: from numpy import iterable, \nwhich is simply something like If you do not have numpy, you can simply implement this code, or the one above."}, {"id": 40557985, "score": 5, "vote": 0, "content": "<p><a class=\"post-tag\" href=\"/questions/tagged/pandas\" rel=\"tag\" title=\"show questions tagged 'pandas'\">pandas</a> has a built-in function like that:</p>\n<pre><code class=\"python\">from pandas.util.testing import isiterable\n</code></pre>\n", "abstract": "pandas has a built-in function like that:"}, {"id": 51845789, "score": 5, "vote": 0, "content": "<p>It's always eluded me as to why python has <code>callable(obj) -&gt; bool</code> but not <code>iterable(obj) -&gt; bool</code>...<br/>\nsurely it's easier to do <code>hasattr(obj,'__call__')</code> even if it is slower.</p>\n<p>Since just about every other answer recommends using <code>try</code>/<code>except TypeError</code>, where testing for exceptions is generally considered bad practice among any language, here's an implementation of <code>iterable(obj) -&gt; bool</code> I've grown more fond of and use often:</p>\n<p>For python 2's sake, I'll use a lambda just for that extra performance boost...<br/>\n(in python 3 it doesn't matter what you use for defining the function, <code>def</code> has roughly the same speed as <code>lambda</code>)</p>\n<pre><code class=\"python\">iterable = lambda obj: hasattr(obj,'__iter__') or hasattr(obj,'__getitem__')\n</code></pre>\n<p>Note that this function executes faster for objects with <code>__iter__</code> since it doesn't test for <code>__getitem__</code>.</p>\n<p>Most iterable objects should rely on <code>__iter__</code> where special-case objects fall back to <code>__getitem__</code>, though either is required for an object to be iterable.<br/>\n(and since this is standard, it affects C objects as well)</p>\n", "abstract": "It's always eluded me as to why python has callable(obj) -> bool but not iterable(obj) -> bool...\nsurely it's easier to do hasattr(obj,'__call__') even if it is slower. Since just about every other answer recommends using try/except TypeError, where testing for exceptions is generally considered bad practice among any language, here's an implementation of iterable(obj) -> bool I've grown more fond of and use often: For python 2's sake, I'll use a lambda just for that extra performance boost...\n(in python 3 it doesn't matter what you use for defining the function, def has roughly the same speed as lambda) Note that this function executes faster for objects with __iter__ since it doesn't test for __getitem__. Most iterable objects should rely on __iter__ where special-case objects fall back to __getitem__, though either is required for an object to be iterable.\n(and since this is standard, it affects C objects as well)"}, {"id": 36154791, "score": 3, "vote": 0, "content": "<pre><code class=\"python\">def is_iterable(x):\n    try:\n        0 in x\n    except TypeError:\n        return False\n    else:\n        return True\n</code></pre>\n<p>This will say yes to all manner of iterable objects, but it will <strong>say no to strings in Python 2</strong>. (That's what I want for example when a recursive function could take a string or a container of strings.  In that situation, <a href=\"https://stackoverflow.com/a/1952481/673991\">asking forgiveness</a> may lead to obfuscode, and it's better to ask permission first.)</p>\n<pre><code class=\"python\">import numpy\n\nclass Yes:\n    def __iter__(self):\n        yield 1;\n        yield 2;\n        yield 3;\n\nclass No:\n    pass\n\nclass Nope:\n    def __iter__(self):\n        return 'nonsense'\n\nassert is_iterable(Yes())\nassert is_iterable(range(3))\nassert is_iterable((1,2,3))   # tuple\nassert is_iterable([1,2,3])   # list\nassert is_iterable({1,2,3})   # set\nassert is_iterable({1:'one', 2:'two', 3:'three'})   # dictionary\nassert is_iterable(numpy.array([1,2,3]))\nassert is_iterable(bytearray(\"not really a string\", 'utf-8'))\n\nassert not is_iterable(No())\nassert not is_iterable(Nope())\nassert not is_iterable(\"string\")\nassert not is_iterable(42)\nassert not is_iterable(True)\nassert not is_iterable(None)\n</code></pre>\n<p>Many other strategies here will say yes to strings. Use them if that's what you want.</p>\n<pre><code class=\"python\">import collections\nimport numpy\n\nassert isinstance(\"string\", collections.Iterable)\nassert isinstance(\"string\", collections.Sequence)\nassert numpy.iterable(\"string\")\nassert iter(\"string\")\nassert hasattr(\"string\", '__getitem__')\n</code></pre>\n<p>Note: is_iterable() will say yes to strings of type <code>bytes</code> and <code>bytearray</code>.</p>\n<ul>\n<li><code>bytes</code> objects in Python 3 are iterable <code>True == is_iterable(b\"string\") == is_iterable(\"string\".encode('utf-8'))</code> There is no such type in Python 2.</li>\n<li><code>bytearray</code> objects in Python 2 and 3 are iterable <code>True == is_iterable(bytearray(b\"abc\"))</code></li>\n</ul>\n<p>The O.P. <code>hasattr(x, '__iter__')</code> approach will say yes to strings in Python 3 and no in Python 2 (no matter whether <code>''</code> or <code>b''</code> or <code>u''</code>). Thanks to @LuisMasuelli for noticing it will also let you down on a buggy <code>__iter__</code>.</p>\n", "abstract": "This will say yes to all manner of iterable objects, but it will say no to strings in Python 2. (That's what I want for example when a recursive function could take a string or a container of strings.  In that situation, asking forgiveness may lead to obfuscode, and it's better to ask permission first.) Many other strategies here will say yes to strings. Use them if that's what you want. Note: is_iterable() will say yes to strings of type bytes and bytearray. The O.P. hasattr(x, '__iter__') approach will say yes to strings in Python 3 and no in Python 2 (no matter whether '' or b'' or u''). Thanks to @LuisMasuelli for noticing it will also let you down on a buggy __iter__."}, {"id": 68928428, "score": 3, "vote": 0, "content": "<p>There are a lot of ways to check if an object is iterable:</p>\n<pre><code class=\"python\">from collections.abc import Iterable\nmyobject = 'Roster'\n  \nif isinstance(myobject , Iterable):\n    print(f\"{myobject } is iterable\") \nelse:\n   print(f\"strong text{myobject } is not iterable\")\n</code></pre>\n", "abstract": "There are a lot of ways to check if an object is iterable:"}, {"id": 33897506, "score": 2, "vote": 0, "content": "<p>The easiest way, respecting the Python's <a href=\"https://en.wikipedia.org/wiki/Duck_typing\" rel=\"nofollow\">duck typing</a>, is to catch the error (Python knows perfectly what does it expect from an object to become an iterator):</p>\n<pre><code class=\"python\">class A(object):\n    def __getitem__(self, item):\n        return something\n\nclass B(object):\n    def __iter__(self):\n        # Return a compliant iterator. Just an example\n        return iter([])\n\nclass C(object):\n    def __iter__(self):\n        # Return crap\n        return 1\n\nclass D(object): pass\n\ndef iterable(obj):\n    try:\n        iter(obj)\n        return True\n    except:\n        return False\n\nassert iterable(A())\nassert iterable(B())\nassert iterable(C())\nassert not iterable(D())\n</code></pre>\n<p><strong>Notes</strong>:</p>\n<ol>\n<li>It is irrelevant the distinction whether the object is not iterable, or a buggy <code>__iter__</code> has been implemented, if the exception type is the same: anyway you will not be able to iterate the object.</li>\n<li><p>I think I understand your concern: How does <code>callable</code> exists as a check if I could also rely on duck typing to raise an <code>AttributeError</code> if <code>__call__</code> is not defined for my object, but that's not the case for iterable checking?</p>\n<p>I don't know the answer, but you can either implement the function I (and other users) gave, or just catch the exception in your code (your implementation in that part will be like the function I wrote - just ensure you isolate the iterator creation from the rest of the code so you can capture the exception and distinguish it from another <code>TypeError</code>.</p></li>\n</ol>\n", "abstract": "The easiest way, respecting the Python's duck typing, is to catch the error (Python knows perfectly what does it expect from an object to become an iterator): Notes: I think I understand your concern: How does callable exists as a check if I could also rely on duck typing to raise an AttributeError if __call__ is not defined for my object, but that's not the case for iterable checking? I don't know the answer, but you can either implement the function I (and other users) gave, or just catch the exception in your code (your implementation in that part will be like the function I wrote - just ensure you isolate the iterator creation from the rest of the code so you can capture the exception and distinguish it from another TypeError."}, {"id": 46245228, "score": 1, "vote": 0, "content": "<p>The <code>isiterable</code> func at the following code returns <code>True</code> if object is iterable. if it's not iterable returns <code>False</code></p>\n<pre><code class=\"python\">def isiterable(object_):\n    return hasattr(type(object_), \"__iter__\")\n</code></pre>\n<p>example</p>\n<pre><code class=\"python\">fruits = (\"apple\", \"banana\", \"peach\")\nisiterable(fruits) # returns True\n\nnum = 345\nisiterable(num) # returns False\n\nisiterable(str) # returns False because str type is type class and it's not iterable.\n\nhello = \"hello dude !\"\nisiterable(hello) # returns True because as you know string objects are iterable\n</code></pre>\n", "abstract": "The isiterable func at the following code returns True if object is iterable. if it's not iterable returns False example"}, {"id": 51836946, "score": 1, "vote": 0, "content": "<p>Instead of checking for the <code>__iter__</code> attribute, you could check for the <code>__len__</code> attribute, which is implemented by every python builtin iterable, including strings.</p>\n<pre><code class=\"python\">&gt;&gt;&gt; hasattr(1, \"__len__\")\nFalse\n&gt;&gt;&gt; hasattr(1.3, \"__len__\")\nFalse\n&gt;&gt;&gt; hasattr(\"a\", \"__len__\")\nTrue\n&gt;&gt;&gt; hasattr([1,2,3], \"__len__\")\nTrue\n&gt;&gt;&gt; hasattr({1,2}, \"__len__\")\nTrue\n&gt;&gt;&gt; hasattr({\"a\":1}, \"__len__\")\nTrue\n&gt;&gt;&gt; hasattr((\"a\", 1), \"__len__\")\nTrue\n</code></pre>\n<p>None-iterable objects would not implement this for obvious reasons. However, it does not catch user-defined iterables that do not implement it, nor do generator expressions, which <code>iter</code> can deal with. However, this can be done in a line, and adding a simple <code>or</code> expression checking for generators would fix this problem. (Note that writing <code>type(my_generator_expression) == generator</code> would throw a <code>NameError</code>. Refer to <a href=\"https://stackoverflow.com/questions/6416538/how-to-check-if-an-object-is-a-generator-object-in-python\">this</a> answer instead.)</p>\n<blockquote>\n<p>You can use GeneratorType from types:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; import types\n&gt;&gt;&gt; types.GeneratorType\n&lt;class 'generator'&gt;\n&gt;&gt;&gt; gen = (i for i in range(10))\n&gt;&gt;&gt; isinstance(gen, types.GeneratorType)\nTrue\n</code></pre>\n<p>--- accepted answer by utdemir</p>\n</blockquote>\n<p>(This makes it useful for checking if you can call <code>len</code> on the object though.)</p>\n", "abstract": "Instead of checking for the __iter__ attribute, you could check for the __len__ attribute, which is implemented by every python builtin iterable, including strings. None-iterable objects would not implement this for obvious reasons. However, it does not catch user-defined iterables that do not implement it, nor do generator expressions, which iter can deal with. However, this can be done in a line, and adding a simple or expression checking for generators would fix this problem. (Note that writing type(my_generator_expression) == generator would throw a NameError. Refer to this answer instead.) You can use GeneratorType from types: --- accepted answer by utdemir (This makes it useful for checking if you can call len on the object though.)"}, {"id": 54368527, "score": 1, "vote": 0, "content": "<p>Not really <em>\"correct\"</em> but can serve as quick check of most common types like strings, tuples, floats, etc...</p>\n<pre><code class=\"python\">&gt;&gt;&gt; '__iter__' in dir('sds')\nTrue\n&gt;&gt;&gt; '__iter__' in dir(56)\nFalse\n&gt;&gt;&gt; '__iter__' in dir([5,6,9,8])\nTrue\n&gt;&gt;&gt; '__iter__' in dir({'jh':'ff'})\nTrue\n&gt;&gt;&gt; '__iter__' in dir({'jh'})\nTrue\n&gt;&gt;&gt; '__iter__' in dir(56.9865)\nFalse\n</code></pre>\n", "abstract": "Not really \"correct\" but can serve as quick check of most common types like strings, tuples, floats, etc..."}, {"id": 57317815, "score": 0, "vote": 0, "content": "<p>Kinda late to the party but I asked myself this question and saw this then thought of an answer. I don't know if someone already posted this. But essentially, I've noticed that all iterable types have <em>__getitem__()</em> in their dict. This is how you would check if an object was an iterable without even trying. (Pun intended)</p>\n<pre><code class=\"python\">def is_attr(arg):\n    return '__getitem__' in dir(arg)\n</code></pre>\n", "abstract": "Kinda late to the party but I asked myself this question and saw this then thought of an answer. I don't know if someone already posted this. But essentially, I've noticed that all iterable types have __getitem__() in their dict. This is how you would check if an object was an iterable without even trying. (Pun intended)"}, {"id": 72853214, "score": 0, "vote": 0, "content": "<p>In my code I used to check for non iterable objects:</p>\n<p><code>hasattr(myobject,'__trunc__')</code></p>\n<p>This is quite quick and can be used to check for iterables too (use <code>not</code>).</p>\n<p>I'm not 100% sure if this solution works for all objects, maybe other can give a some more background on it. <code>__trunc__</code> method seams to be related to numerical types (all objects that can be rounded to integers needs it). But I didn't found any object that contains <code>__trunc__</code> together with <code>__iter__</code> or <code>__getitem__</code>.</p>\n", "abstract": "In my code I used to check for non iterable objects: hasattr(myobject,'__trunc__') This is quite quick and can be used to check for iterables too (use not). I'm not 100% sure if this solution works for all objects, maybe other can give a some more background on it. __trunc__ method seams to be related to numerical types (all objects that can be rounded to integers needs it). But I didn't found any object that contains __trunc__ together with __iter__ or __getitem__."}]}, {"link": "https://stackoverflow.com/questions/761804/how-do-i-trim-whitespace-from-a-string", "question": {"id": "761804", "title": "How do I trim whitespace from a string?", "content": "<p>How do I remove leading and trailing whitespace from a string in Python?</p>\n<pre><code class=\"python\">\" Hello world \" --&gt; \"Hello world\"\n\" Hello world\"  --&gt; \"Hello world\"\n\"Hello world \"  --&gt; \"Hello world\"\n\"Hello world\"   --&gt; \"Hello world\"\n</code></pre>\n", "abstract": "How do I remove leading and trailing whitespace from a string in Python?"}, "answers": [{"id": 761825, "score": 1961, "vote": 0, "content": "<p>To remove all whitespace surrounding a string, use <a href=\"https://docs.python.org/library/stdtypes.html#str.strip\" rel=\"noreferrer\"><code>.strip()</code></a>. Examples:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; ' Hello '.strip()\n'Hello'\n&gt;&gt;&gt; ' Hello'.strip()\n'Hello'\n&gt;&gt;&gt; 'Bob has a cat'.strip()\n'Bob has a cat'\n&gt;&gt;&gt; '   Hello   '.strip()  # ALL consecutive spaces at both ends removed\n'Hello'\n</code></pre>\n<p>Note that <a href=\"https://docs.python.org/library/stdtypes.html#str.strip\" rel=\"noreferrer\"><code>str.strip()</code></a> removes all whitespace characters, including tabs and newlines. To remove only spaces, specify the specific character to remove as an argument to <code>strip</code>:</p>\n<pre><code class=\"python\">&gt;&gt;&gt; \"  Hello\\n  \".strip(\" \")\n'Hello\\n'\n</code></pre>\n<hr/>\n<p>To remove only one space at most:</p>\n<pre><code class=\"python\">def strip_one_space(s):\n    if s.endswith(\" \"): s = s[:-1]\n    if s.startswith(\" \"): s = s[1:]\n    return s\n\n&gt;&gt;&gt; strip_one_space(\"   Hello \")\n'  Hello'\n</code></pre>\n", "abstract": "To remove all whitespace surrounding a string, use .strip(). Examples: Note that str.strip() removes all whitespace characters, including tabs and newlines. To remove only spaces, specify the specific character to remove as an argument to strip: To remove only one space at most:"}, {"id": 6039813, "score": 281, "vote": 0, "content": "<p>As pointed out in answers above</p>\n<pre><code class=\"python\">my_string.strip()\n</code></pre>\n<p>will remove all the leading and trailing whitespace characters such as <code>\\n</code>, <code>\\r</code>, <code>\\t</code>, <code>\\f</code>, space <code> </code>.</p>\n<p>For more flexibility use the following</p>\n<ul>\n<li>Removes only <strong>leading</strong> whitespace chars: <a href=\"https://docs.python.org/library/stdtypes.html#str.lstrip\" rel=\"noreferrer\"><code>my_string.lstrip()</code></a></li>\n<li>Removes only <strong>trailing</strong> whitespace chars: <a href=\"https://docs.python.org/library/stdtypes.html#str.rstrip\" rel=\"noreferrer\"><code>my_string.rstrip()</code></a></li>\n<li>Removes <strong>specific</strong> whitespace chars: <code>my_string.strip('\\n')</code> or <code>my_string.lstrip('\\n\\r')</code> or <code>my_string.rstrip('\\n\\t')</code> and so on.</li>\n</ul>\n<p>More details are available in the <a href=\"https://docs.python.org/library/stdtypes.html#string-methods\" rel=\"noreferrer\">docs</a>.</p>\n", "abstract": "As pointed out in answers above will remove all the leading and trailing whitespace characters such as \\n, \\r, \\t, \\f, space  . For more flexibility use the following More details are available in the docs."}, {"id": 10192113, "score": 134, "vote": 0, "content": "<p><code>strip</code> is not limited to whitespace characters either:</p>\n<pre><code class=\"python\"># remove all leading/trailing commas, periods and hyphens\ntitle = title.strip(',.-')\n</code></pre>\n", "abstract": "strip is not limited to whitespace characters either:"}, {"id": 761816, "score": 63, "vote": 0, "content": "<p>This will remove <strong>all</strong> leading and trailing whitespace in <code>myString</code>:</p>\n<pre><code class=\"python\">myString.strip()\n</code></pre>\n", "abstract": "This will remove all leading and trailing whitespace in myString:"}, {"id": 761822, "score": 31, "vote": 0, "content": "<p>You want <a href=\"https://docs.python.org/library/stdtypes.html#str.strip\" rel=\"noreferrer\"><code>strip()</code></a>:</p>\n<pre><code class=\"python\">myphrases = [\" Hello \", \" Hello\", \"Hello \", \"Bob has a cat\"]\n\nfor phrase in myphrases:\n    print(phrase.strip())\n</code></pre>\n", "abstract": "You want strip():"}, {"id": 61552811, "score": 3, "vote": 0, "content": "<p>This can also be done with a regular expression</p>\n<pre><code class=\"python\">import re\n\ninput  = \" Hello \"\noutput = re.sub(r'^\\s+|\\s+$', '', input)\n# output = 'Hello'\n</code></pre>\n", "abstract": "This can also be done with a regular expression"}, {"id": 62435469, "score": 1, "vote": 0, "content": "<p>Well seeing this thread as a beginner got my head spinning. Hence came up with a simple shortcut.</p>\n<p>Though <strong>str.strip()</strong> works to remove leading &amp; trailing spaces it <strong>does nothing for spaces between characters.</strong></p>\n<pre><code class=\"python\">words=input(\"Enter the word to test\")\n# If I have a user enter discontinous threads it becomes a problem\n# input = \"   he llo, ho w are y ou  \"\nn=words.strip()\nprint(n)\n# output \"he llo, ho w are y ou\" - only leading &amp; trailing spaces are removed \n</code></pre>\n<p>Instead <strong><em>use str.replace()</em></strong> to make more sense plus less error &amp; more to the point. \nThe following code can generalize the use of str.replace()</p>\n<pre><code class=\"python\">def whitespace(words):\n    r=words.replace(' ','') # removes all whitespace\n    n=r.replace(',','|') # other uses of replace\n    return n\ndef run():\n    words=input(\"Enter the word to test\") # take user input\n    m=whitespace(words) #encase the def in run() to imporve usability on various functions\n    o=m.count('f') # for testing\n    return m,o\nprint(run())\noutput- ('hello|howareyou', 0)\n</code></pre>\n<p>Can be helpful while inheriting the same in diff. functions.</p>\n", "abstract": "Well seeing this thread as a beginner got my head spinning. Hence came up with a simple shortcut. Though str.strip() works to remove leading & trailing spaces it does nothing for spaces between characters. Instead use str.replace() to make more sense plus less error & more to the point. \nThe following code can generalize the use of str.replace() Can be helpful while inheriting the same in diff. functions."}, {"id": 63251302, "score": 1, "vote": 0, "content": "<p>In order to remove \"Whitespace\" which causes plenty of indentation errors when running your finished code or programs in Pyhton. Just do the following;obviously if Python keeps telling that the error(s) is indentation in line 1,2,3,4,5, etc..., just fix that line back and forth.</p>\n<p>However, if you still get problems about the program that are related to typing mistakes, operators, etc, make sure you read why error Python is yelling at you:</p>\n<p><strong>The first thing to check is that you have your\nindentation right.</strong> If you do, then check to see if you have\nmixed tabs with spaces in your code.</p>\n<p>Remember: the code\nwill look fine (to you), but the interpreter refuses to run it. If\nyou suspect this, a quick fix is to bring your code into an\nIDLE edit window, then choose Edit...\"Select All from the\nmenu system, before choosing Format...\"Untabify Region.\nIf you\u2019ve mixed tabs with spaces, this will convert all your\ntabs to spaces in one go (and fix any indentation issues).</p>\n", "abstract": "In order to remove \"Whitespace\" which causes plenty of indentation errors when running your finished code or programs in Pyhton. Just do the following;obviously if Python keeps telling that the error(s) is indentation in line 1,2,3,4,5, etc..., just fix that line back and forth. However, if you still get problems about the program that are related to typing mistakes, operators, etc, make sure you read why error Python is yelling at you: The first thing to check is that you have your\nindentation right. If you do, then check to see if you have\nmixed tabs with spaces in your code. Remember: the code\nwill look fine (to you), but the interpreter refuses to run it. If\nyou suspect this, a quick fix is to bring your code into an\nIDLE edit window, then choose Edit...\"Select All from the\nmenu system, before choosing Format...\"Untabify Region.\nIf you\u2019ve mixed tabs with spaces, this will convert all your\ntabs to spaces in one go (and fix any indentation issues)."}, {"id": 55627194, "score": 0, "vote": 0, "content": "<p>I could not find a solution to what I was looking for so I created some custom functions. You can try them out.</p>\n<pre><code class=\"python\">def cleansed(s: str):\n    \"\"\":param s: String to be cleansed\"\"\"\n    assert s is not (None or \"\")\n    # return trimmed(s.replace('\"', '').replace(\"'\", \"\"))\n    return trimmed(s)\n\n\ndef trimmed(s: str):\n    \"\"\":param s: String to be cleansed\"\"\"\n    assert s is not (None or \"\")\n    ss = trim_start_and_end(s).replace('  ', ' ')\n    while '  ' in ss:\n        ss = ss.replace('  ', ' ')\n    return ss\n\n\ndef trim_start_and_end(s: str):\n    \"\"\":param s: String to be cleansed\"\"\"\n    assert s is not (None or \"\")\n    return trim_start(trim_end(s))\n\n\ndef trim_start(s: str):\n    \"\"\":param s: String to be cleansed\"\"\"\n    assert s is not (None or \"\")\n    chars = []\n    for c in s:\n        if c is not ' ' or len(chars) &gt; 0:\n            chars.append(c)\n    return \"\".join(chars).lower()\n\n\ndef trim_end(s: str):\n    \"\"\":param s: String to be cleansed\"\"\"\n    assert s is not (None or \"\")\n    chars = []\n    for c in reversed(s):\n        if c is not ' ' or len(chars) &gt; 0:\n            chars.append(c)\n    return \"\".join(reversed(chars)).lower()\n\n\ns1 = '  b Beer '\ns2 = 'Beer  b    '\ns3 = '      Beer  b    '\ns4 = '  bread butter    Beer  b    '\n\ncdd = trim_start(s1)\ncddd = trim_end(s2)\nclean1 = cleansed(s3)\nclean2 = cleansed(s4)\n\nprint(\"\\nStr: {0} Len: {1} Cleansed: {2} Len: {3}\".format(s1, len(s1), cdd, len(cdd)))\nprint(\"\\nStr: {0} Len: {1} Cleansed: {2} Len: {3}\".format(s2, len(s2), cddd, len(cddd)))\nprint(\"\\nStr: {0} Len: {1} Cleansed: {2} Len: {3}\".format(s3, len(s3), clean1, len(clean1)))\nprint(\"\\nStr: {0} Len: {1} Cleansed: {2} Len: {3}\".format(s4, len(s4), clean2, len(clean2)))\n</code></pre>\n", "abstract": "I could not find a solution to what I was looking for so I created some custom functions. You can try them out."}, {"id": 58556587, "score": 0, "vote": 0, "content": "<p>If you want to <strong>trim specified number of spaces from left and right</strong>, you could do this:</p>\n<pre><code class=\"python\">def remove_outer_spaces(text, num_of_leading, num_of_trailing):\n    text = list(text)\n    for i in range(num_of_leading):\n        if text[i] == \" \":\n            text[i] = \"\"\n        else:\n            break\n\n    for i in range(1, num_of_trailing+1):\n        if text[-i] == \" \":\n            text[-i] = \"\"\n        else:\n            break\n    return ''.join(text)\n\ntxt1 = \"   MY name is     \"\nprint(remove_outer_spaces(txt1, 1, 1))  # result is: \"  MY name is    \"\nprint(remove_outer_spaces(txt1, 2, 3))  # result is: \" MY name is  \"\nprint(remove_outer_spaces(txt1, 6, 8))  # result is: \"MY name is\"\n</code></pre>\n", "abstract": "If you want to trim specified number of spaces from left and right, you could do this:"}, {"id": 61845523, "score": 0, "vote": 0, "content": "<blockquote>\n<p>How do I remove leading and trailing whitespace from a string in Python?</p>\n</blockquote>\n<p>So below solution will remove leading and trailing whitespaces as well as intermediate whitespaces too. Like if you need to get a clear string values without multiple whitespaces.</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">&gt;&gt;&gt; str_1 = '     Hello World'\n&gt;&gt;&gt; print(' '.join(str_1.split()))\nHello World\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt; str_2 = '     Hello      World'\n&gt;&gt;&gt; print(' '.join(str_2.split()))\nHello World\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt; str_3 = 'Hello World     '\n&gt;&gt;&gt; print(' '.join(str_3.split()))\nHello World\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt; str_4 = 'Hello      World     '\n&gt;&gt;&gt; print(' '.join(str_4.split()))\nHello World\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt; str_5 = '     Hello World     '\n&gt;&gt;&gt; print(' '.join(str_5.split()))\nHello World\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt; str_6 = '     Hello      World     '\n&gt;&gt;&gt; print(' '.join(str_6.split()))\nHello World\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt; str_7 = 'Hello World'\n&gt;&gt;&gt; print(' '.join(str_7.split()))\nHello World\n</code></pre>\n<p>As you can see this will remove all the multiple whitespace in the string(output is <code>Hello World</code> for all). Location doesn't matter. But if you really need leading and trailing whitespaces, then <code>strip()</code> would be find.</p>\n", "abstract": "How do I remove leading and trailing whitespace from a string in Python? So below solution will remove leading and trailing whitespaces as well as intermediate whitespaces too. Like if you need to get a clear string values without multiple whitespaces. As you can see this will remove all the multiple whitespace in the string(output is Hello World for all). Location doesn't matter. But if you really need leading and trailing whitespaces, then strip() would be find."}, {"id": 72150311, "score": 0, "vote": 0, "content": "<p>One way is to use the .strip() method (removing all surrounding whitespaces)</p>\n<pre><code class=\"python\">str = \"  Hello World  \"\nstr = str.strip()\n**result: str = \"Hello World\"**\n</code></pre>\n<p>Note that .strip() returns a copy of the string and doesn't change the underline object (since strings are <a href=\"https://www.mygreatlearning.com/blog/understanding-mutable-and-immutable-in-python/#:%7E:text=Mutable%20is%20a%20fancy%20way,once%20it%20has%20been%20created.\" rel=\"nofollow noreferrer\">immutable</a>).</p>\n<p>Should you wish to remove all whitespace (not only trimming the edges):</p>\n<pre><code class=\"python\">str = ' abcd efgh ijk  '\nstr = str.replace(' ', '')\n**result: str = 'abcdefghijk'\n</code></pre>\n", "abstract": "One way is to use the .strip() method (removing all surrounding whitespaces) Note that .strip() returns a copy of the string and doesn't change the underline object (since strings are immutable). Should you wish to remove all whitespace (not only trimming the edges):"}, {"id": 52477754, "score": -1, "vote": 0, "content": "<p>I wanted to remove the too-much spaces in a string (also in between the string, not only in the beginning or end). I made this, because I don't know how to do it otherwise:</p>\n<pre><code class=\"python\">string = \"Name : David         Account: 1234             Another thing: something  \" \n\nready = False\nwhile ready == False:\n    pos = string.find(\"  \")\n    if pos != -1:\n       string = string.replace(\"  \",\" \")\n    else:\n       ready = True\nprint(string)\n</code></pre>\n<p>This replaces double spaces in one space until you have no double spaces any more</p>\n", "abstract": "I wanted to remove the too-much spaces in a string (also in between the string, not only in the beginning or end). I made this, because I don't know how to do it otherwise: This replaces double spaces in one space until you have no double spaces any more"}]}, {"link": "https://stackoverflow.com/questions/8858008/how-to-move-a-file-in-python", "question": {"id": "8858008", "title": "How to move a file in Python?", "content": "<p>How would I do the equivalent of <code>mv src/* dest/</code> in Python?</p>\n<pre><code class=\"python\">&gt;&gt;&gt; source_files = '/PATH/TO/FOLDER/*'\n&gt;&gt;&gt; destination_folder = 'PATH/TO/FOLDER'\n&gt;&gt;&gt; # equivalent of $ mv source_files destination_folder\n</code></pre>\n", "abstract": "How would I do the equivalent of mv src/* dest/ in Python?"}, "answers": [{"id": 8858026, "score": 1979, "vote": 0, "content": "<p><a href=\"http://docs.python.org/library/os.html#os.rename\" rel=\"noreferrer\"><code>os.rename()</code></a>, <a href=\"https://docs.python.org/library/os.html#os.replace\" rel=\"noreferrer\"><code>os.replace()</code></a>, or <a href=\"http://docs.python.org/library/shutil.html#shutil.move\" rel=\"noreferrer\"><code>shutil.move()</code></a></p>\n<p>All employ the same syntax:</p>\n<pre><code class=\"python\">import os\nimport shutil\n\nos.rename(\"path/to/current/file.foo\", \"path/to/new/destination/for/file.foo\")\nos.replace(\"path/to/current/file.foo\", \"path/to/new/destination/for/file.foo\")\nshutil.move(\"path/to/current/file.foo\", \"path/to/new/destination/for/file.foo\")\n</code></pre>\n<p>Note that you must include the file name (<code>file.foo</code>) in both the source and destination arguments. If it is changed, the file will be renamed as well as moved.</p>\n<p>Note also that in the first two cases the directory in which the new file is being created must already exist. On Windows, a file with that name must not exist or an exception will be raised, but <code>os.replace()</code> will silently replace a file even in that occurrence.</p>\n<p>As has been noted in comments on other answers, <code>shutil.move</code> simply calls <code>os.rename</code> in most cases. However, if the destination is on a different disk than the source, it will instead copy and then delete the source file.</p>\n", "abstract": "os.rename(), os.replace(), or shutil.move() All employ the same syntax: Note that you must include the file name (file.foo) in both the source and destination arguments. If it is changed, the file will be renamed as well as moved. Note also that in the first two cases the directory in which the new file is being created must already exist. On Windows, a file with that name must not exist or an exception will be raised, but os.replace() will silently replace a file even in that occurrence. As has been noted in comments on other answers, shutil.move simply calls os.rename in most cases. However, if the destination is on a different disk than the source, it will instead copy and then delete the source file."}, {"id": 16845955, "score": 315, "vote": 0, "content": "<p>Although <code>os.rename()</code> and <code>shutil.move()</code> will both rename files, the command that is closest to the Unix mv command is <code>shutil.move()</code>.  The difference is that <code>os.rename()</code> doesn't work if the source and destination are on different disks, while <code>shutil.move()</code> is files disk agnostic.</p>\n", "abstract": "Although os.rename() and shutil.move() will both rename files, the command that is closest to the Unix mv command is shutil.move().  The difference is that os.rename() doesn't work if the source and destination are on different disks, while shutil.move() is files disk agnostic."}, {"id": 52774612, "score": 109, "vote": 0, "content": "<p>After Python 3.4, you can also use <code>pathlib</code>'s class <code>Path</code> to move file.</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">from pathlib import Path\n\nPath(\"path/to/current/file.foo\").rename(\"path/to/new/destination/for/file.foo\")\n</code></pre>\n<p><a href=\"https://docs.python.org/3.4/library/pathlib.html#pathlib.Path.rename\" rel=\"noreferrer\">https://docs.python.org/3.4/library/pathlib.html#pathlib.Path.rename</a></p>\n", "abstract": "After Python 3.4, you can also use pathlib's class Path to move file. https://docs.python.org/3.4/library/pathlib.html#pathlib.Path.rename"}, {"id": 15015882, "score": 41, "vote": 0, "content": "<p>For either the os.rename or shutil.move you will need to import the module. \nNo * character is necessary to get all the files moved.  </p>\n<p>We have a folder at /opt/awesome called source with one file named awesome.txt.  </p>\n<pre><code class=\"python\">in /opt/awesome\n\u25cb \u2192 ls\nsource\n\u25cb \u2192 ls source\nawesome.txt\n\npython \n&gt;&gt;&gt; source = '/opt/awesome/source'\n&gt;&gt;&gt; destination = '/opt/awesome/destination'\n&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.rename(source, destination)\n&gt;&gt;&gt; os.listdir('/opt/awesome')\n['destination']\n</code></pre>\n<p>We used os.listdir to see that the folder name in fact changed.\nHere's the shutil moving the destination back to source.  </p>\n<pre><code class=\"python\">&gt;&gt;&gt; import shutil\n&gt;&gt;&gt; shutil.move(destination, source)\n&gt;&gt;&gt; os.listdir('/opt/awesome/source')\n['awesome.txt']\n</code></pre>\n<p>This time I checked inside the source folder to be sure the awesome.txt file I created exists.  It is there :) </p>\n<p>Now we have moved a folder and its files from a source to a destination and back again.  </p>\n", "abstract": "For either the os.rename or shutil.move you will need to import the module. \nNo * character is necessary to get all the files moved.   We have a folder at /opt/awesome called source with one file named awesome.txt.   We used os.listdir to see that the folder name in fact changed.\nHere's the shutil moving the destination back to source.   This time I checked inside the source folder to be sure the awesome.txt file I created exists.  It is there :)  Now we have moved a folder and its files from a source to a destination and back again.  "}, {"id": 40566547, "score": 28, "vote": 0, "content": "<p>This is what I'm using at the moment:</p>\n<pre><code class=\"python\">import os, shutil\npath = \"/volume1/Users/Transfer/\"\nmoveto = \"/volume1/Users/Drive_Transfer/\"\nfiles = os.listdir(path)\nfiles.sort()\nfor f in files:\n    src = path+f\n    dst = moveto+f\n    shutil.move(src,dst)\n</code></pre>\n<p>Now fully functional. Hope this helps you.</p>\n<h3>Edit:</h3>\n<p>I've turned this into a function, that accepts a source and destination directory, making the destination folder if it doesn't exist, and moves the files.  Also allows for filtering of the src files, for example if you only want to move images, then you use the pattern <code>'*.jpg'</code>, by default, it moves everything in the directory</p>\n<pre><code class=\"python\">import os, shutil, pathlib, fnmatch\n\ndef move_dir(src: str, dst: str, pattern: str = '*'):\n    if not os.path.isdir(dst):\n        pathlib.Path(dst).mkdir(parents=True, exist_ok=True)\n    for f in fnmatch.filter(os.listdir(src), pattern):\n        shutil.move(os.path.join(src, f), os.path.join(dst, f))\n</code></pre>\n", "abstract": "This is what I'm using at the moment: Now fully functional. Hope this helps you. I've turned this into a function, that accepts a source and destination directory, making the destination folder if it doesn't exist, and moves the files.  Also allows for filtering of the src files, for example if you only want to move images, then you use the pattern '*.jpg', by default, it moves everything in the directory"}, {"id": 40088953, "score": 16, "vote": 0, "content": "<p>The accepted answer is not the right one, because the question is not about renaming a file into a file, but moving many files into a directory. <code>shutil.move</code> will do the work, but for this purpose <code>os.rename</code> is useless (as stated on comments) because destination must have an explicit file name.</p>\n", "abstract": "The accepted answer is not the right one, because the question is not about renaming a file into a file, but moving many files into a directory. shutil.move will do the work, but for this purpose os.rename is useless (as stated on comments) because destination must have an explicit file name."}, {"id": 67167537, "score": 3, "vote": 0, "content": "<p>Also possible with using <code>subprocess.run()</code> method.</p>\n<pre><code class=\"python\">python:\n&gt;&gt;&gt; import subprocess\n&gt;&gt;&gt; new = \"/path/to/destination\"\n&gt;&gt;&gt; old = \"/path/to/new/destination\"\n&gt;&gt;&gt; process = \"mv ..{} ..{}\".format(old,new)\n&gt;&gt;&gt; subprocess.run(process, shell=True) # do not remember, assign shell value to True.\n</code></pre>\n<p>This will work fine when working on Linux. Windows probably gives error since there is no mv Command.</p>\n", "abstract": "Also possible with using subprocess.run() method. This will work fine when working on Linux. Windows probably gives error since there is no mv Command."}, {"id": 73061314, "score": 3, "vote": 0, "content": "<p>Since you don't care about the return value, you can do</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">import os\nos.system(\"mv src/* dest/\")\n</code></pre>\n", "abstract": "Since you don't care about the return value, you can do"}, {"id": 50884349, "score": 2, "vote": 0, "content": "<p>Based on the answer <a href=\"https://stackoverflow.com/questions/21804935/how-to-use-the-mv-command-in-python-with-subprocess\">described here</a>, using <code>subprocess</code> is another option.</p>\n<p>Something like this:</p>\n<pre><code class=\"python\">subprocess.call(\"mv %s %s\" % (source_files, destination_folder), shell=True)\n</code></pre>\n<p>I am curious to know the pro's and con's of this method compared to <code>shutil</code>.  Since in my case I am already using <code>subprocess</code> for other reasons and it seems to work I am inclined to stick with it.</p>\n<p>This is dependent on the shell you are running your script in. The <code>mv</code> command is for most Linux shells (bash, sh, etc.), but would also work in a terminal like Git Bash on Windows. For other terminals you would have to change <code>mv</code> to an alternate command.</p>\n", "abstract": "Based on the answer described here, using subprocess is another option. Something like this: I am curious to know the pro's and con's of this method compared to shutil.  Since in my case I am already using subprocess for other reasons and it seems to work I am inclined to stick with it. This is dependent on the shell you are running your script in. The mv command is for most Linux shells (bash, sh, etc.), but would also work in a terminal like Git Bash on Windows. For other terminals you would have to change mv to an alternate command."}, {"id": 52295395, "score": 0, "vote": 0, "content": "<p>This is solution, which does not enables <code>shell</code> using <code>mv</code>.</p>\n<pre class=\"lang-py prettyprint-override\"><code class=\"python\">from subprocess import Popen, PIPE, STDOUT\n\nsource = \"path/to/current/file.foo\", \ndestination = \"path/to/new/destination/for/file.foo\"\n\np = Popen([\"mv\", \"-v\", source, destination], stdout=PIPE, stderr=STDOUT)\noutput, _ = p.communicate()\noutput = output.strip().decode(\"utf-8\")\nif p.returncode:\n    print(f\"E: {output}\")\nelse:\n    print(output)\n</code></pre>\n", "abstract": "This is solution, which does not enables shell using mv."}, {"id": 50213849, "score": -1, "vote": 0, "content": "<pre><code class=\"python\">  import os,shutil\n\n  current_path = \"\" ## source path\n\n  new_path = \"\" ## destination path\n\n  os.chdir(current_path)\n\n  for files in os.listdir():\n\n        os.rename(files, new_path+'{}'.format(f))\n        shutil.move(files, new_path+'{}'.format(f)) ## to move files from \n</code></pre>\n<p>different disk ex. C: --&gt; D:</p>\n", "abstract": "different disk ex. C: --> D:"}]}]